/******/ (function(modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {}; // The require function
  /******/
  /******/ /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {},
      /******/
    }); // Execute the module function
    /******/
    /******/ /******/ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    ); // Flag the module as loaded
    /******/
    /******/ /******/ module.l = true; // Return the exports of the module
    /******/
    /******/ /******/ return module.exports;
    /******/
  } // expose the modules object (__webpack_modules__)
  /******/
  /******/
  /******/ /******/ __webpack_require__.m = modules; // expose the module cache
  /******/
  /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
  /******/
  /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter,
      });
      /******/
    }
    /******/
  }; // define __esModule on exports
  /******/
  /******/ /******/ __webpack_require__.r = function(exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module",
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
  /******/
  /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function(
    value,
    mode
  ) {
    /******/ if (mode & 1) value = __webpack_require__(value);
    /******/ if (mode & 8) return value;
    /******/ if (
      mode & 4 &&
      typeof value === "object" &&
      value &&
      value.__esModule
    )
      return value;
    /******/ var ns = Object.create(null);
    /******/ __webpack_require__.r(ns);
    /******/ Object.defineProperty(ns, "default", {
      enumerable: true,
      value: value,
    });
    /******/ if (mode & 2 && typeof value != "string")
      for (var key in value)
        __webpack_require__.d(
          ns,
          key,
          function(key) {
            return value[key];
          }.bind(null, key)
        );
    /******/ return ns;
    /******/
  }; // getDefaultExport function for compatibility with non-harmony modules
  /******/
  /******/ /******/ __webpack_require__.n = function(module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  }; // Object.prototype.hasOwnProperty.call
  /******/
  /******/ /******/ __webpack_require__.o = function(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }; // __webpack_public_path__
  /******/
  /******/ /******/ __webpack_require__.p = "/"; // Load entry module and return exports
  /******/
  /******/
  /******/ /******/ return __webpack_require__((__webpack_require__.s = 0));
  /******/
})(
  /************************************************************************/
  /******/ {
    /***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
      /*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /*!
         * Bootstrap v4.5.0 (https://getbootstrap.com/)
         * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         */
        (function(global, factory) {
          true
            ? factory(
                exports,
                __webpack_require__(
                  /*! jquery */ "./node_modules/jquery/dist/jquery.js"
                ),
                __webpack_require__(
                  /*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js"
                )
              )
            : undefined;
        })(this, function(exports, $, Popper) {
          "use strict";

          $ =
            $ && Object.prototype.hasOwnProperty.call($, "default")
              ? $["default"]
              : $;
          Popper =
            Popper && Object.prototype.hasOwnProperty.call(Popper, "default")
              ? Popper["default"]
              : Popper;

          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);

            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    object,
                    sym
                  ).enumerable;
                });
              keys.push.apply(keys, symbols);
            }

            return keys;
          }

          function _objectSpread2(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i] != null ? arguments[i] : {};

              if (i % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                  _defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                );
              } else {
                ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
              }
            }

            return target;
          }

          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
          }

          /**
           * --------------------------------------------------------------------------
           * Bootstrap (v4.5.0): util.js
           * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
           * --------------------------------------------------------------------------
           */
          /**
           * ------------------------------------------------------------------------
           * Private TransitionEnd Helpers
           * ------------------------------------------------------------------------
           */

          var TRANSITION_END = "transitionend";
          var MAX_UID = 1000000;
          var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

          function toType(obj) {
            if (obj === null || typeof obj === "undefined") {
              return "" + obj;
            }

            return {}.toString
              .call(obj)
              .match(/\s([a-z]+)/i)[1]
              .toLowerCase();
          }

          function getSpecialTransitionEndEvent() {
            return {
              bindType: TRANSITION_END,
              delegateType: TRANSITION_END,
              handle: function handle(event) {
                if ($(event.target).is(this)) {
                  return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                }

                return undefined;
              },
            };
          }

          function transitionEndEmulator(duration) {
            var _this = this;

            var called = false;
            $(this).one(Util.TRANSITION_END, function() {
              called = true;
            });
            setTimeout(function() {
              if (!called) {
                Util.triggerTransitionEnd(_this);
              }
            }, duration);
            return this;
          }

          function setTransitionEndSupport() {
            $.fn.emulateTransitionEnd = transitionEndEmulator;
            $.event.special[
              Util.TRANSITION_END
            ] = getSpecialTransitionEndEvent();
          }
          /**
           * --------------------------------------------------------------------------
           * Public Util Api
           * --------------------------------------------------------------------------
           */

          var Util = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function getUID(prefix) {
              do {
                // eslint-disable-next-line no-bitwise
                prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
              } while (document.getElementById(prefix));

              return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
              var selector = element.getAttribute("data-target");

              if (!selector || selector === "#") {
                var hrefAttr = element.getAttribute("href");
                selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : "";
              }

              try {
                return document.querySelector(selector) ? selector : null;
              } catch (err) {
                return null;
              }
            },
            getTransitionDurationFromElement: function getTransitionDurationFromElement(
              element
            ) {
              if (!element) {
                return 0;
              } // Get transition-duration of the element

              var transitionDuration = $(element).css("transition-duration");
              var transitionDelay = $(element).css("transition-delay");
              var floatTransitionDuration = parseFloat(transitionDuration);
              var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

              if (!floatTransitionDuration && !floatTransitionDelay) {
                return 0;
              } // If multiple durations are defined, take the first

              transitionDuration = transitionDuration.split(",")[0];
              transitionDelay = transitionDelay.split(",")[0];
              return (
                (parseFloat(transitionDuration) + parseFloat(transitionDelay)) *
                MILLISECONDS_MULTIPLIER
              );
            },
            reflow: function reflow(element) {
              return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
              $(element).trigger(TRANSITION_END);
            },
            // TODO: Remove in v5
            supportsTransitionEnd: function supportsTransitionEnd() {
              return Boolean(TRANSITION_END);
            },
            isElement: function isElement(obj) {
              return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(
              componentName,
              config,
              configTypes
            ) {
              for (var property in configTypes) {
                if (
                  Object.prototype.hasOwnProperty.call(configTypes, property)
                ) {
                  var expectedTypes = configTypes[property];
                  var value = config[property];
                  var valueType =
                    value && Util.isElement(value) ? "element" : toType(value);

                  if (!new RegExp(expectedTypes).test(valueType)) {
                    throw new Error(
                      componentName.toUpperCase() +
                        ": " +
                        ('Option "' +
                          property +
                          '" provided type "' +
                          valueType +
                          '" ') +
                        ('but expected type "' + expectedTypes + '".')
                    );
                  }
                }
              }
            },
            findShadowRoot: function findShadowRoot(element) {
              if (!document.documentElement.attachShadow) {
                return null;
              } // Can find the shadow root otherwise it'll return the document

              if (typeof element.getRootNode === "function") {
                var root = element.getRootNode();
                return root instanceof ShadowRoot ? root : null;
              }

              if (element instanceof ShadowRoot) {
                return element;
              } // when we don't find a shadow root

              if (!element.parentNode) {
                return null;
              }

              return Util.findShadowRoot(element.parentNode);
            },
            jQueryDetection: function jQueryDetection() {
              if (typeof $ === "undefined") {
                throw new TypeError(
                  "Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."
                );
              }

              var version = $.fn.jquery.split(" ")[0].split(".");
              var minMajor = 1;
              var ltMajor = 2;
              var minMinor = 9;
              var minPatch = 1;
              var maxMajor = 4;

              if (
                (version[0] < ltMajor && version[1] < minMinor) ||
                (version[0] === minMajor &&
                  version[1] === minMinor &&
                  version[2] < minPatch) ||
                version[0] >= maxMajor
              ) {
                throw new Error(
                  "Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0"
                );
              }
            },
          };
          Util.jQueryDetection();
          setTransitionEndSupport();

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME = "alert";
          var VERSION = "4.5.0";
          var DATA_KEY = "bs.alert";
          var EVENT_KEY = "." + DATA_KEY;
          var DATA_API_KEY = ".data-api";
          var JQUERY_NO_CONFLICT = $.fn[NAME];
          var SELECTOR_DISMISS = '[data-dismiss="alert"]';
          var EVENT_CLOSE = "close" + EVENT_KEY;
          var EVENT_CLOSED = "closed" + EVENT_KEY;
          var EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
          var CLASS_NAME_ALERT = "alert";
          var CLASS_NAME_FADE = "fade";
          var CLASS_NAME_SHOW = "show";
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Alert = /*#__PURE__*/ (function() {
            function Alert(element) {
              this._element = element;
            } // Getters

            var _proto = Alert.prototype;

            // Public
            _proto.close = function close(element) {
              var rootElement = this._element;

              if (element) {
                rootElement = this._getRootElement(element);
              }

              var customEvent = this._triggerCloseEvent(rootElement);

              if (customEvent.isDefaultPrevented()) {
                return;
              }

              this._removeElement(rootElement);
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY);
              this._element = null;
            }; // Private

            _proto._getRootElement = function _getRootElement(element) {
              var selector = Util.getSelectorFromElement(element);
              var parent = false;

              if (selector) {
                parent = document.querySelector(selector);
              }

              if (!parent) {
                parent = $(element).closest("." + CLASS_NAME_ALERT)[0];
              }

              return parent;
            };

            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
              var closeEvent = $.Event(EVENT_CLOSE);
              $(element).trigger(closeEvent);
              return closeEvent;
            };

            _proto._removeElement = function _removeElement(element) {
              var _this = this;

              $(element).removeClass(CLASS_NAME_SHOW);

              if (!$(element).hasClass(CLASS_NAME_FADE)) {
                this._destroyElement(element);

                return;
              }

              var transitionDuration = Util.getTransitionDurationFromElement(
                element
              );
              $(element)
                .one(Util.TRANSITION_END, function(event) {
                  return _this._destroyElement(element, event);
                })
                .emulateTransitionEnd(transitionDuration);
            };

            _proto._destroyElement = function _destroyElement(element) {
              $(element)
                .detach()
                .trigger(EVENT_CLOSED)
                .remove();
            }; // Static

            Alert._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var $element = $(this);
                var data = $element.data(DATA_KEY);

                if (!data) {
                  data = new Alert(this);
                  $element.data(DATA_KEY, data);
                }

                if (config === "close") {
                  data[config](this);
                }
              });
            };

            Alert._handleDismiss = function _handleDismiss(alertInstance) {
              return function(event) {
                if (event) {
                  event.preventDefault();
                }

                alertInstance.close(this);
              };
            };

            _createClass(Alert, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION;
                },
              },
            ]);

            return Alert;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document).on(
            EVENT_CLICK_DATA_API,
            SELECTOR_DISMISS,
            Alert._handleDismiss(new Alert())
          );
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME] = Alert._jQueryInterface;
          $.fn[NAME].Constructor = Alert;

          $.fn[NAME].noConflict = function() {
            $.fn[NAME] = JQUERY_NO_CONFLICT;
            return Alert._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$1 = "button";
          var VERSION$1 = "4.5.0";
          var DATA_KEY$1 = "bs.button";
          var EVENT_KEY$1 = "." + DATA_KEY$1;
          var DATA_API_KEY$1 = ".data-api";
          var JQUERY_NO_CONFLICT$1 = $.fn[NAME$1];
          var CLASS_NAME_ACTIVE = "active";
          var CLASS_NAME_BUTTON = "btn";
          var CLASS_NAME_FOCUS = "focus";
          var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
          var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
          var SELECTOR_DATA_TOGGLE = '[data-toggle="button"]';
          var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
          var SELECTOR_INPUT = 'input:not([type="hidden"])';
          var SELECTOR_ACTIVE = ".active";
          var SELECTOR_BUTTON = ".btn";
          var EVENT_CLICK_DATA_API$1 = "click" + EVENT_KEY$1 + DATA_API_KEY$1;
          var EVENT_FOCUS_BLUR_DATA_API =
            "focus" +
            EVENT_KEY$1 +
            DATA_API_KEY$1 +
            " " +
            ("blur" + EVENT_KEY$1 + DATA_API_KEY$1);
          var EVENT_LOAD_DATA_API = "load" + EVENT_KEY$1 + DATA_API_KEY$1;
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Button = /*#__PURE__*/ (function() {
            function Button(element) {
              this._element = element;
            } // Getters

            var _proto = Button.prototype;

            // Public
            _proto.toggle = function toggle() {
              var triggerChangeEvent = true;
              var addAriaPressed = true;
              var rootElement = $(this._element).closest(
                SELECTOR_DATA_TOGGLES
              )[0];

              if (rootElement) {
                var input = this._element.querySelector(SELECTOR_INPUT);

                if (input) {
                  if (input.type === "radio") {
                    if (
                      input.checked &&
                      this._element.classList.contains(CLASS_NAME_ACTIVE)
                    ) {
                      triggerChangeEvent = false;
                    } else {
                      var activeElement = rootElement.querySelector(
                        SELECTOR_ACTIVE
                      );

                      if (activeElement) {
                        $(activeElement).removeClass(CLASS_NAME_ACTIVE);
                      }
                    }
                  }

                  if (triggerChangeEvent) {
                    // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
                    if (input.type === "checkbox" || input.type === "radio") {
                      input.checked = !this._element.classList.contains(
                        CLASS_NAME_ACTIVE
                      );
                    }

                    $(input).trigger("change");
                  }

                  input.focus();
                  addAriaPressed = false;
                }
              }

              if (
                !(
                  this._element.hasAttribute("disabled") ||
                  this._element.classList.contains("disabled")
                )
              ) {
                if (addAriaPressed) {
                  this._element.setAttribute(
                    "aria-pressed",
                    !this._element.classList.contains(CLASS_NAME_ACTIVE)
                  );
                }

                if (triggerChangeEvent) {
                  $(this._element).toggleClass(CLASS_NAME_ACTIVE);
                }
              }
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY$1);
              this._element = null;
            }; // Static

            Button._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$1);

                if (!data) {
                  data = new Button(this);
                  $(this).data(DATA_KEY$1, data);
                }

                if (config === "toggle") {
                  data[config]();
                }
              });
            };

            _createClass(Button, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$1;
                },
              },
            ]);

            return Button;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document)
            .on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE_CARROT, function(
              event
            ) {
              var button = event.target;
              var initialButton = button;

              if (!$(button).hasClass(CLASS_NAME_BUTTON)) {
                button = $(button).closest(SELECTOR_BUTTON)[0];
              }

              if (
                !button ||
                button.hasAttribute("disabled") ||
                button.classList.contains("disabled")
              ) {
                event.preventDefault(); // work around Firefox bug #1540995
              } else {
                var inputBtn = button.querySelector(SELECTOR_INPUT);

                if (
                  inputBtn &&
                  (inputBtn.hasAttribute("disabled") ||
                    inputBtn.classList.contains("disabled"))
                ) {
                  event.preventDefault(); // work around Firefox bug #1540995

                  return;
                }

                if (
                  initialButton.tagName === "LABEL" &&
                  inputBtn &&
                  inputBtn.type === "checkbox"
                ) {
                  event.preventDefault(); // work around event sent to label and input
                }

                Button._jQueryInterface.call($(button), "toggle");
              }
            })
            .on(
              EVENT_FOCUS_BLUR_DATA_API,
              SELECTOR_DATA_TOGGLE_CARROT,
              function(event) {
                var button = $(event.target).closest(SELECTOR_BUTTON)[0];
                $(button).toggleClass(
                  CLASS_NAME_FOCUS,
                  /^focus(in)?$/.test(event.type)
                );
              }
            );
          $(window).on(EVENT_LOAD_DATA_API, function() {
            // ensure correct active class is set to match the controls' actual values/states
            // find all checkboxes/readio buttons inside data-toggle groups
            var buttons = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS)
            );

            for (var i = 0, len = buttons.length; i < len; i++) {
              var button = buttons[i];
              var input = button.querySelector(SELECTOR_INPUT);

              if (input.checked || input.hasAttribute("checked")) {
                button.classList.add(CLASS_NAME_ACTIVE);
              } else {
                button.classList.remove(CLASS_NAME_ACTIVE);
              }
            } // find all button toggles

            buttons = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_TOGGLE)
            );

            for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
              var _button = buttons[_i];

              if (_button.getAttribute("aria-pressed") === "true") {
                _button.classList.add(CLASS_NAME_ACTIVE);
              } else {
                _button.classList.remove(CLASS_NAME_ACTIVE);
              }
            }
          });
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$1] = Button._jQueryInterface;
          $.fn[NAME$1].Constructor = Button;

          $.fn[NAME$1].noConflict = function() {
            $.fn[NAME$1] = JQUERY_NO_CONFLICT$1;
            return Button._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$2 = "carousel";
          var VERSION$2 = "4.5.0";
          var DATA_KEY$2 = "bs.carousel";
          var EVENT_KEY$2 = "." + DATA_KEY$2;
          var DATA_API_KEY$2 = ".data-api";
          var JQUERY_NO_CONFLICT$2 = $.fn[NAME$2];
          var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

          var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

          var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

          var SWIPE_THRESHOLD = 40;
          var Default = {
            interval: 5000,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true,
            touch: true,
          };
          var DefaultType = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean",
            touch: "boolean",
          };
          var DIRECTION_NEXT = "next";
          var DIRECTION_PREV = "prev";
          var DIRECTION_LEFT = "left";
          var DIRECTION_RIGHT = "right";
          var EVENT_SLIDE = "slide" + EVENT_KEY$2;
          var EVENT_SLID = "slid" + EVENT_KEY$2;
          var EVENT_KEYDOWN = "keydown" + EVENT_KEY$2;
          var EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY$2;
          var EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY$2;
          var EVENT_TOUCHSTART = "touchstart" + EVENT_KEY$2;
          var EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY$2;
          var EVENT_TOUCHEND = "touchend" + EVENT_KEY$2;
          var EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY$2;
          var EVENT_POINTERUP = "pointerup" + EVENT_KEY$2;
          var EVENT_DRAG_START = "dragstart" + EVENT_KEY$2;
          var EVENT_LOAD_DATA_API$1 = "load" + EVENT_KEY$2 + DATA_API_KEY$2;
          var EVENT_CLICK_DATA_API$2 = "click" + EVENT_KEY$2 + DATA_API_KEY$2;
          var CLASS_NAME_CAROUSEL = "carousel";
          var CLASS_NAME_ACTIVE$1 = "active";
          var CLASS_NAME_SLIDE = "slide";
          var CLASS_NAME_RIGHT = "carousel-item-right";
          var CLASS_NAME_LEFT = "carousel-item-left";
          var CLASS_NAME_NEXT = "carousel-item-next";
          var CLASS_NAME_PREV = "carousel-item-prev";
          var CLASS_NAME_POINTER_EVENT = "pointer-event";
          var SELECTOR_ACTIVE$1 = ".active";
          var SELECTOR_ACTIVE_ITEM = ".active.carousel-item";
          var SELECTOR_ITEM = ".carousel-item";
          var SELECTOR_ITEM_IMG = ".carousel-item img";
          var SELECTOR_NEXT_PREV = ".carousel-item-next, .carousel-item-prev";
          var SELECTOR_INDICATORS = ".carousel-indicators";
          var SELECTOR_DATA_SLIDE = "[data-slide], [data-slide-to]";
          var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
          var PointerType = {
            TOUCH: "touch",
            PEN: "pen",
          };
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Carousel = /*#__PURE__*/ (function() {
            function Carousel(element, config) {
              this._items = null;
              this._interval = null;
              this._activeElement = null;
              this._isPaused = false;
              this._isSliding = false;
              this.touchTimeout = null;
              this.touchStartX = 0;
              this.touchDeltaX = 0;
              this._config = this._getConfig(config);
              this._element = element;
              this._indicatorsElement = this._element.querySelector(
                SELECTOR_INDICATORS
              );
              this._touchSupported =
                "ontouchstart" in document.documentElement ||
                navigator.maxTouchPoints > 0;
              this._pointerEvent = Boolean(
                window.PointerEvent || window.MSPointerEvent
              );

              this._addEventListeners();
            } // Getters

            var _proto = Carousel.prototype;

            // Public
            _proto.next = function next() {
              if (!this._isSliding) {
                this._slide(DIRECTION_NEXT);
              }
            };

            _proto.nextWhenVisible = function nextWhenVisible() {
              // Don't call next when the page isn't visible
              // or the carousel or its parent isn't visible
              if (
                !document.hidden &&
                $(this._element).is(":visible") &&
                $(this._element).css("visibility") !== "hidden"
              ) {
                this.next();
              }
            };

            _proto.prev = function prev() {
              if (!this._isSliding) {
                this._slide(DIRECTION_PREV);
              }
            };

            _proto.pause = function pause(event) {
              if (!event) {
                this._isPaused = true;
              }

              if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
                Util.triggerTransitionEnd(this._element);
                this.cycle(true);
              }

              clearInterval(this._interval);
              this._interval = null;
            };

            _proto.cycle = function cycle(event) {
              if (!event) {
                this._isPaused = false;
              }

              if (this._interval) {
                clearInterval(this._interval);
                this._interval = null;
              }

              if (this._config.interval && !this._isPaused) {
                this._interval = setInterval(
                  (document.visibilityState
                    ? this.nextWhenVisible
                    : this.next
                  ).bind(this),
                  this._config.interval
                );
              }
            };

            _proto.to = function to(index) {
              var _this = this;

              this._activeElement = this._element.querySelector(
                SELECTOR_ACTIVE_ITEM
              );

              var activeIndex = this._getItemIndex(this._activeElement);

              if (index > this._items.length - 1 || index < 0) {
                return;
              }

              if (this._isSliding) {
                $(this._element).one(EVENT_SLID, function() {
                  return _this.to(index);
                });
                return;
              }

              if (activeIndex === index) {
                this.pause();
                this.cycle();
                return;
              }

              var direction =
                index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;

              this._slide(direction, this._items[index]);
            };

            _proto.dispose = function dispose() {
              $(this._element).off(EVENT_KEY$2);
              $.removeData(this._element, DATA_KEY$2);
              this._items = null;
              this._config = null;
              this._element = null;
              this._interval = null;
              this._isPaused = null;
              this._isSliding = null;
              this._activeElement = null;
              this._indicatorsElement = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(_objectSpread2({}, Default), config);
              Util.typeCheckConfig(NAME$2, config, DefaultType);
              return config;
            };

            _proto._handleSwipe = function _handleSwipe() {
              var absDeltax = Math.abs(this.touchDeltaX);

              if (absDeltax <= SWIPE_THRESHOLD) {
                return;
              }

              var direction = absDeltax / this.touchDeltaX;
              this.touchDeltaX = 0; // swipe left

              if (direction > 0) {
                this.prev();
              } // swipe right

              if (direction < 0) {
                this.next();
              }
            };

            _proto._addEventListeners = function _addEventListeners() {
              var _this2 = this;

              if (this._config.keyboard) {
                $(this._element).on(EVENT_KEYDOWN, function(event) {
                  return _this2._keydown(event);
                });
              }

              if (this._config.pause === "hover") {
                $(this._element)
                  .on(EVENT_MOUSEENTER, function(event) {
                    return _this2.pause(event);
                  })
                  .on(EVENT_MOUSELEAVE, function(event) {
                    return _this2.cycle(event);
                  });
              }

              if (this._config.touch) {
                this._addTouchEventListeners();
              }
            };

            _proto._addTouchEventListeners = function _addTouchEventListeners() {
              var _this3 = this;

              if (!this._touchSupported) {
                return;
              }

              var start = function start(event) {
                if (
                  _this3._pointerEvent &&
                  PointerType[event.originalEvent.pointerType.toUpperCase()]
                ) {
                  _this3.touchStartX = event.originalEvent.clientX;
                } else if (!_this3._pointerEvent) {
                  _this3.touchStartX = event.originalEvent.touches[0].clientX;
                }
              };

              var move = function move(event) {
                // ensure swiping with one touch and not pinching
                if (
                  event.originalEvent.touches &&
                  event.originalEvent.touches.length > 1
                ) {
                  _this3.touchDeltaX = 0;
                } else {
                  _this3.touchDeltaX =
                    event.originalEvent.touches[0].clientX - _this3.touchStartX;
                }
              };

              var end = function end(event) {
                if (
                  _this3._pointerEvent &&
                  PointerType[event.originalEvent.pointerType.toUpperCase()]
                ) {
                  _this3.touchDeltaX =
                    event.originalEvent.clientX - _this3.touchStartX;
                }

                _this3._handleSwipe();

                if (_this3._config.pause === "hover") {
                  // If it's a touch-enabled device, mouseenter/leave are fired as
                  // part of the mouse compatibility events on first tap - the carousel
                  // would stop cycling until user tapped out of it;
                  // here, we listen for touchend, explicitly pause the carousel
                  // (as if it's the second time we tap on it, mouseenter compat event
                  // is NOT fired) and after a timeout (to allow for mouse compatibility
                  // events to fire) we explicitly restart cycling
                  _this3.pause();

                  if (_this3.touchTimeout) {
                    clearTimeout(_this3.touchTimeout);
                  }

                  _this3.touchTimeout = setTimeout(function(event) {
                    return _this3.cycle(event);
                  }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
                }
              };

              $(this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(
                EVENT_DRAG_START,
                function(e) {
                  return e.preventDefault();
                }
              );

              if (this._pointerEvent) {
                $(this._element).on(EVENT_POINTERDOWN, function(event) {
                  return start(event);
                });
                $(this._element).on(EVENT_POINTERUP, function(event) {
                  return end(event);
                });

                this._element.classList.add(CLASS_NAME_POINTER_EVENT);
              } else {
                $(this._element).on(EVENT_TOUCHSTART, function(event) {
                  return start(event);
                });
                $(this._element).on(EVENT_TOUCHMOVE, function(event) {
                  return move(event);
                });
                $(this._element).on(EVENT_TOUCHEND, function(event) {
                  return end(event);
                });
              }
            };

            _proto._keydown = function _keydown(event) {
              if (/input|textarea/i.test(event.target.tagName)) {
                return;
              }

              switch (event.which) {
                case ARROW_LEFT_KEYCODE:
                  event.preventDefault();
                  this.prev();
                  break;

                case ARROW_RIGHT_KEYCODE:
                  event.preventDefault();
                  this.next();
                  break;
              }
            };

            _proto._getItemIndex = function _getItemIndex(element) {
              this._items =
                element && element.parentNode
                  ? [].slice.call(
                      element.parentNode.querySelectorAll(SELECTOR_ITEM)
                    )
                  : [];
              return this._items.indexOf(element);
            };

            _proto._getItemByDirection = function _getItemByDirection(
              direction,
              activeElement
            ) {
              var isNextDirection = direction === DIRECTION_NEXT;
              var isPrevDirection = direction === DIRECTION_PREV;

              var activeIndex = this._getItemIndex(activeElement);

              var lastItemIndex = this._items.length - 1;
              var isGoingToWrap =
                (isPrevDirection && activeIndex === 0) ||
                (isNextDirection && activeIndex === lastItemIndex);

              if (isGoingToWrap && !this._config.wrap) {
                return activeElement;
              }

              var delta = direction === DIRECTION_PREV ? -1 : 1;
              var itemIndex = (activeIndex + delta) % this._items.length;
              return itemIndex === -1
                ? this._items[this._items.length - 1]
                : this._items[itemIndex];
            };

            _proto._triggerSlideEvent = function _triggerSlideEvent(
              relatedTarget,
              eventDirectionName
            ) {
              var targetIndex = this._getItemIndex(relatedTarget);

              var fromIndex = this._getItemIndex(
                this._element.querySelector(SELECTOR_ACTIVE_ITEM)
              );

              var slideEvent = $.Event(EVENT_SLIDE, {
                relatedTarget: relatedTarget,
                direction: eventDirectionName,
                from: fromIndex,
                to: targetIndex,
              });
              $(this._element).trigger(slideEvent);
              return slideEvent;
            };

            _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(
              element
            ) {
              if (this._indicatorsElement) {
                var indicators = [].slice.call(
                  this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1)
                );
                $(indicators).removeClass(CLASS_NAME_ACTIVE$1);

                var nextIndicator = this._indicatorsElement.children[
                  this._getItemIndex(element)
                ];

                if (nextIndicator) {
                  $(nextIndicator).addClass(CLASS_NAME_ACTIVE$1);
                }
              }
            };

            _proto._slide = function _slide(direction, element) {
              var _this4 = this;

              var activeElement = this._element.querySelector(
                SELECTOR_ACTIVE_ITEM
              );

              var activeElementIndex = this._getItemIndex(activeElement);

              var nextElement =
                element ||
                (activeElement &&
                  this._getItemByDirection(direction, activeElement));

              var nextElementIndex = this._getItemIndex(nextElement);

              var isCycling = Boolean(this._interval);
              var directionalClassName;
              var orderClassName;
              var eventDirectionName;

              if (direction === DIRECTION_NEXT) {
                directionalClassName = CLASS_NAME_LEFT;
                orderClassName = CLASS_NAME_NEXT;
                eventDirectionName = DIRECTION_LEFT;
              } else {
                directionalClassName = CLASS_NAME_RIGHT;
                orderClassName = CLASS_NAME_PREV;
                eventDirectionName = DIRECTION_RIGHT;
              }

              if (nextElement && $(nextElement).hasClass(CLASS_NAME_ACTIVE$1)) {
                this._isSliding = false;
                return;
              }

              var slideEvent = this._triggerSlideEvent(
                nextElement,
                eventDirectionName
              );

              if (slideEvent.isDefaultPrevented()) {
                return;
              }

              if (!activeElement || !nextElement) {
                // Some weirdness is happening, so we bail
                return;
              }

              this._isSliding = true;

              if (isCycling) {
                this.pause();
              }

              this._setActiveIndicatorElement(nextElement);

              var slidEvent = $.Event(EVENT_SLID, {
                relatedTarget: nextElement,
                direction: eventDirectionName,
                from: activeElementIndex,
                to: nextElementIndex,
              });

              if ($(this._element).hasClass(CLASS_NAME_SLIDE)) {
                $(nextElement).addClass(orderClassName);
                Util.reflow(nextElement);
                $(activeElement).addClass(directionalClassName);
                $(nextElement).addClass(directionalClassName);
                var nextElementInterval = parseInt(
                  nextElement.getAttribute("data-interval"),
                  10
                );

                if (nextElementInterval) {
                  this._config.defaultInterval =
                    this._config.defaultInterval || this._config.interval;
                  this._config.interval = nextElementInterval;
                } else {
                  this._config.interval =
                    this._config.defaultInterval || this._config.interval;
                }

                var transitionDuration = Util.getTransitionDurationFromElement(
                  activeElement
                );
                $(activeElement)
                  .one(Util.TRANSITION_END, function() {
                    $(nextElement)
                      .removeClass(directionalClassName + " " + orderClassName)
                      .addClass(CLASS_NAME_ACTIVE$1);
                    $(activeElement).removeClass(
                      CLASS_NAME_ACTIVE$1 +
                        " " +
                        orderClassName +
                        " " +
                        directionalClassName
                    );
                    _this4._isSliding = false;
                    setTimeout(function() {
                      return $(_this4._element).trigger(slidEvent);
                    }, 0);
                  })
                  .emulateTransitionEnd(transitionDuration);
              } else {
                $(activeElement).removeClass(CLASS_NAME_ACTIVE$1);
                $(nextElement).addClass(CLASS_NAME_ACTIVE$1);
                this._isSliding = false;
                $(this._element).trigger(slidEvent);
              }

              if (isCycling) {
                this.cycle();
              }
            }; // Static

            Carousel._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$2);

                var _config = _objectSpread2(
                  _objectSpread2({}, Default),
                  $(this).data()
                );

                if (typeof config === "object") {
                  _config = _objectSpread2(_objectSpread2({}, _config), config);
                }

                var action =
                  typeof config === "string" ? config : _config.slide;

                if (!data) {
                  data = new Carousel(this, _config);
                  $(this).data(DATA_KEY$2, data);
                }

                if (typeof config === "number") {
                  data.to(config);
                } else if (typeof action === "string") {
                  if (typeof data[action] === "undefined") {
                    throw new TypeError('No method named "' + action + '"');
                  }

                  data[action]();
                } else if (_config.interval && _config.ride) {
                  data.pause();
                  data.cycle();
                }
              });
            };

            Carousel._dataApiClickHandler = function _dataApiClickHandler(
              event
            ) {
              var selector = Util.getSelectorFromElement(this);

              if (!selector) {
                return;
              }

              var target = $(selector)[0];

              if (!target || !$(target).hasClass(CLASS_NAME_CAROUSEL)) {
                return;
              }

              var config = _objectSpread2(
                _objectSpread2({}, $(target).data()),
                $(this).data()
              );

              var slideIndex = this.getAttribute("data-slide-to");

              if (slideIndex) {
                config.interval = false;
              }

              Carousel._jQueryInterface.call($(target), config);

              if (slideIndex) {
                $(target)
                  .data(DATA_KEY$2)
                  .to(slideIndex);
              }

              event.preventDefault();
            };

            _createClass(Carousel, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$2;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default;
                },
              },
            ]);

            return Carousel;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document).on(
            EVENT_CLICK_DATA_API$2,
            SELECTOR_DATA_SLIDE,
            Carousel._dataApiClickHandler
          );
          $(window).on(EVENT_LOAD_DATA_API$1, function() {
            var carousels = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_RIDE)
            );

            for (var i = 0, len = carousels.length; i < len; i++) {
              var $carousel = $(carousels[i]);

              Carousel._jQueryInterface.call($carousel, $carousel.data());
            }
          });
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$2] = Carousel._jQueryInterface;
          $.fn[NAME$2].Constructor = Carousel;

          $.fn[NAME$2].noConflict = function() {
            $.fn[NAME$2] = JQUERY_NO_CONFLICT$2;
            return Carousel._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$3 = "collapse";
          var VERSION$3 = "4.5.0";
          var DATA_KEY$3 = "bs.collapse";
          var EVENT_KEY$3 = "." + DATA_KEY$3;
          var DATA_API_KEY$3 = ".data-api";
          var JQUERY_NO_CONFLICT$3 = $.fn[NAME$3];
          var Default$1 = {
            toggle: true,
            parent: "",
          };
          var DefaultType$1 = {
            toggle: "boolean",
            parent: "(string|element)",
          };
          var EVENT_SHOW = "show" + EVENT_KEY$3;
          var EVENT_SHOWN = "shown" + EVENT_KEY$3;
          var EVENT_HIDE = "hide" + EVENT_KEY$3;
          var EVENT_HIDDEN = "hidden" + EVENT_KEY$3;
          var EVENT_CLICK_DATA_API$3 = "click" + EVENT_KEY$3 + DATA_API_KEY$3;
          var CLASS_NAME_SHOW$1 = "show";
          var CLASS_NAME_COLLAPSE = "collapse";
          var CLASS_NAME_COLLAPSING = "collapsing";
          var CLASS_NAME_COLLAPSED = "collapsed";
          var DIMENSION_WIDTH = "width";
          var DIMENSION_HEIGHT = "height";
          var SELECTOR_ACTIVES = ".show, .collapsing";
          var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="collapse"]';
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Collapse = /*#__PURE__*/ (function() {
            function Collapse(element, config) {
              this._isTransitioning = false;
              this._element = element;
              this._config = this._getConfig(config);
              this._triggerArray = [].slice.call(
                document.querySelectorAll(
                  '[data-toggle="collapse"][href="#' +
                    element.id +
                    '"],' +
                    ('[data-toggle="collapse"][data-target="#' +
                      element.id +
                      '"]')
                )
              );
              var toggleList = [].slice.call(
                document.querySelectorAll(SELECTOR_DATA_TOGGLE$1)
              );

              for (var i = 0, len = toggleList.length; i < len; i++) {
                var elem = toggleList[i];
                var selector = Util.getSelectorFromElement(elem);
                var filterElement = [].slice
                  .call(document.querySelectorAll(selector))
                  .filter(function(foundElem) {
                    return foundElem === element;
                  });

                if (selector !== null && filterElement.length > 0) {
                  this._selector = selector;

                  this._triggerArray.push(elem);
                }
              }

              this._parent = this._config.parent ? this._getParent() : null;

              if (!this._config.parent) {
                this._addAriaAndCollapsedClass(
                  this._element,
                  this._triggerArray
                );
              }

              if (this._config.toggle) {
                this.toggle();
              }
            } // Getters

            var _proto = Collapse.prototype;

            // Public
            _proto.toggle = function toggle() {
              if ($(this._element).hasClass(CLASS_NAME_SHOW$1)) {
                this.hide();
              } else {
                this.show();
              }
            };

            _proto.show = function show() {
              var _this = this;

              if (
                this._isTransitioning ||
                $(this._element).hasClass(CLASS_NAME_SHOW$1)
              ) {
                return;
              }

              var actives;
              var activesData;

              if (this._parent) {
                actives = [].slice
                  .call(this._parent.querySelectorAll(SELECTOR_ACTIVES))
                  .filter(function(elem) {
                    if (typeof _this._config.parent === "string") {
                      return (
                        elem.getAttribute("data-parent") ===
                        _this._config.parent
                      );
                    }

                    return elem.classList.contains(CLASS_NAME_COLLAPSE);
                  });

                if (actives.length === 0) {
                  actives = null;
                }
              }

              if (actives) {
                activesData = $(actives)
                  .not(this._selector)
                  .data(DATA_KEY$3);

                if (activesData && activesData._isTransitioning) {
                  return;
                }
              }

              var startEvent = $.Event(EVENT_SHOW);
              $(this._element).trigger(startEvent);

              if (startEvent.isDefaultPrevented()) {
                return;
              }

              if (actives) {
                Collapse._jQueryInterface.call(
                  $(actives).not(this._selector),
                  "hide"
                );

                if (!activesData) {
                  $(actives).data(DATA_KEY$3, null);
                }
              }

              var dimension = this._getDimension();

              $(this._element)
                .removeClass(CLASS_NAME_COLLAPSE)
                .addClass(CLASS_NAME_COLLAPSING);
              this._element.style[dimension] = 0;

              if (this._triggerArray.length) {
                $(this._triggerArray)
                  .removeClass(CLASS_NAME_COLLAPSED)
                  .attr("aria-expanded", true);
              }

              this.setTransitioning(true);

              var complete = function complete() {
                $(_this._element)
                  .removeClass(CLASS_NAME_COLLAPSING)
                  .addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
                _this._element.style[dimension] = "";

                _this.setTransitioning(false);

                $(_this._element).trigger(EVENT_SHOWN);
              };

              var capitalizedDimension =
                dimension[0].toUpperCase() + dimension.slice(1);
              var scrollSize = "scroll" + capitalizedDimension;
              var transitionDuration = Util.getTransitionDurationFromElement(
                this._element
              );
              $(this._element)
                .one(Util.TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
              this._element.style[dimension] = this._element[scrollSize] + "px";
            };

            _proto.hide = function hide() {
              var _this2 = this;

              if (
                this._isTransitioning ||
                !$(this._element).hasClass(CLASS_NAME_SHOW$1)
              ) {
                return;
              }

              var startEvent = $.Event(EVENT_HIDE);
              $(this._element).trigger(startEvent);

              if (startEvent.isDefaultPrevented()) {
                return;
              }

              var dimension = this._getDimension();

              this._element.style[dimension] =
                this._element.getBoundingClientRect()[dimension] + "px";
              Util.reflow(this._element);
              $(this._element)
                .addClass(CLASS_NAME_COLLAPSING)
                .removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
              var triggerArrayLength = this._triggerArray.length;

              if (triggerArrayLength > 0) {
                for (var i = 0; i < triggerArrayLength; i++) {
                  var trigger = this._triggerArray[i];
                  var selector = Util.getSelectorFromElement(trigger);

                  if (selector !== null) {
                    var $elem = $(
                      [].slice.call(document.querySelectorAll(selector))
                    );

                    if (!$elem.hasClass(CLASS_NAME_SHOW$1)) {
                      $(trigger)
                        .addClass(CLASS_NAME_COLLAPSED)
                        .attr("aria-expanded", false);
                    }
                  }
                }
              }

              this.setTransitioning(true);

              var complete = function complete() {
                _this2.setTransitioning(false);

                $(_this2._element)
                  .removeClass(CLASS_NAME_COLLAPSING)
                  .addClass(CLASS_NAME_COLLAPSE)
                  .trigger(EVENT_HIDDEN);
              };

              this._element.style[dimension] = "";
              var transitionDuration = Util.getTransitionDurationFromElement(
                this._element
              );
              $(this._element)
                .one(Util.TRANSITION_END, complete)
                .emulateTransitionEnd(transitionDuration);
            };

            _proto.setTransitioning = function setTransitioning(
              isTransitioning
            ) {
              this._isTransitioning = isTransitioning;
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY$3);
              this._config = null;
              this._parent = null;
              this._element = null;
              this._triggerArray = null;
              this._isTransitioning = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(_objectSpread2({}, Default$1), config);
              config.toggle = Boolean(config.toggle); // Coerce string values

              Util.typeCheckConfig(NAME$3, config, DefaultType$1);
              return config;
            };

            _proto._getDimension = function _getDimension() {
              var hasWidth = $(this._element).hasClass(DIMENSION_WIDTH);
              return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
            };

            _proto._getParent = function _getParent() {
              var _this3 = this;

              var parent;

              if (Util.isElement(this._config.parent)) {
                parent = this._config.parent; // It's a jQuery object

                if (typeof this._config.parent.jquery !== "undefined") {
                  parent = this._config.parent[0];
                }
              } else {
                parent = document.querySelector(this._config.parent);
              }

              var selector =
                '[data-toggle="collapse"][data-parent="' +
                this._config.parent +
                '"]';
              var children = [].slice.call(parent.querySelectorAll(selector));
              $(children).each(function(i, element) {
                _this3._addAriaAndCollapsedClass(
                  Collapse._getTargetFromElement(element),
                  [element]
                );
              });
              return parent;
            };

            _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(
              element,
              triggerArray
            ) {
              var isOpen = $(element).hasClass(CLASS_NAME_SHOW$1);

              if (triggerArray.length) {
                $(triggerArray)
                  .toggleClass(CLASS_NAME_COLLAPSED, !isOpen)
                  .attr("aria-expanded", isOpen);
              }
            }; // Static

            Collapse._getTargetFromElement = function _getTargetFromElement(
              element
            ) {
              var selector = Util.getSelectorFromElement(element);
              return selector ? document.querySelector(selector) : null;
            };

            Collapse._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var $this = $(this);
                var data = $this.data(DATA_KEY$3);

                var _config = _objectSpread2(
                  _objectSpread2(_objectSpread2({}, Default$1), $this.data()),
                  typeof config === "object" && config ? config : {}
                );

                if (
                  !data &&
                  _config.toggle &&
                  typeof config === "string" &&
                  /show|hide/.test(config)
                ) {
                  _config.toggle = false;
                }

                if (!data) {
                  data = new Collapse(this, _config);
                  $this.data(DATA_KEY$3, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Collapse, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$3;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$1;
                },
              },
            ]);

            return Collapse;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document).on(
            EVENT_CLICK_DATA_API$3,
            SELECTOR_DATA_TOGGLE$1,
            function(event) {
              // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
              if (event.currentTarget.tagName === "A") {
                event.preventDefault();
              }

              var $trigger = $(this);
              var selector = Util.getSelectorFromElement(this);
              var selectors = [].slice.call(
                document.querySelectorAll(selector)
              );
              $(selectors).each(function() {
                var $target = $(this);
                var data = $target.data(DATA_KEY$3);
                var config = data ? "toggle" : $trigger.data();

                Collapse._jQueryInterface.call($target, config);
              });
            }
          );
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$3] = Collapse._jQueryInterface;
          $.fn[NAME$3].Constructor = Collapse;

          $.fn[NAME$3].noConflict = function() {
            $.fn[NAME$3] = JQUERY_NO_CONFLICT$3;
            return Collapse._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$4 = "dropdown";
          var VERSION$4 = "4.5.0";
          var DATA_KEY$4 = "bs.dropdown";
          var EVENT_KEY$4 = "." + DATA_KEY$4;
          var DATA_API_KEY$4 = ".data-api";
          var JQUERY_NO_CONFLICT$4 = $.fn[NAME$4];
          var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

          var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

          var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

          var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

          var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

          var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

          var REGEXP_KEYDOWN = new RegExp(
            ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE
          );
          var EVENT_HIDE$1 = "hide" + EVENT_KEY$4;
          var EVENT_HIDDEN$1 = "hidden" + EVENT_KEY$4;
          var EVENT_SHOW$1 = "show" + EVENT_KEY$4;
          var EVENT_SHOWN$1 = "shown" + EVENT_KEY$4;
          var EVENT_CLICK = "click" + EVENT_KEY$4;
          var EVENT_CLICK_DATA_API$4 = "click" + EVENT_KEY$4 + DATA_API_KEY$4;
          var EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY$4 + DATA_API_KEY$4;
          var EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY$4 + DATA_API_KEY$4;
          var CLASS_NAME_DISABLED = "disabled";
          var CLASS_NAME_SHOW$2 = "show";
          var CLASS_NAME_DROPUP = "dropup";
          var CLASS_NAME_DROPRIGHT = "dropright";
          var CLASS_NAME_DROPLEFT = "dropleft";
          var CLASS_NAME_MENURIGHT = "dropdown-menu-right";
          var CLASS_NAME_POSITION_STATIC = "position-static";
          var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]';
          var SELECTOR_FORM_CHILD = ".dropdown form";
          var SELECTOR_MENU = ".dropdown-menu";
          var SELECTOR_NAVBAR_NAV = ".navbar-nav";
          var SELECTOR_VISIBLE_ITEMS =
            ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
          var PLACEMENT_TOP = "top-start";
          var PLACEMENT_TOPEND = "top-end";
          var PLACEMENT_BOTTOM = "bottom-start";
          var PLACEMENT_BOTTOMEND = "bottom-end";
          var PLACEMENT_RIGHT = "right-start";
          var PLACEMENT_LEFT = "left-start";
          var Default$2 = {
            offset: 0,
            flip: true,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic",
            popperConfig: null,
          };
          var DefaultType$2 = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string",
            popperConfig: "(null|object)",
          };
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Dropdown = /*#__PURE__*/ (function() {
            function Dropdown(element, config) {
              this._element = element;
              this._popper = null;
              this._config = this._getConfig(config);
              this._menu = this._getMenuElement();
              this._inNavbar = this._detectNavbar();

              this._addEventListeners();
            } // Getters

            var _proto = Dropdown.prototype;

            // Public
            _proto.toggle = function toggle() {
              if (
                this._element.disabled ||
                $(this._element).hasClass(CLASS_NAME_DISABLED)
              ) {
                return;
              }

              var isActive = $(this._menu).hasClass(CLASS_NAME_SHOW$2);

              Dropdown._clearMenus();

              if (isActive) {
                return;
              }

              this.show(true);
            };

            _proto.show = function show(usePopper) {
              if (usePopper === void 0) {
                usePopper = false;
              }

              if (
                this._element.disabled ||
                $(this._element).hasClass(CLASS_NAME_DISABLED) ||
                $(this._menu).hasClass(CLASS_NAME_SHOW$2)
              ) {
                return;
              }

              var relatedTarget = {
                relatedTarget: this._element,
              };
              var showEvent = $.Event(EVENT_SHOW$1, relatedTarget);

              var parent = Dropdown._getParentFromElement(this._element);

              $(parent).trigger(showEvent);

              if (showEvent.isDefaultPrevented()) {
                return;
              } // Disable totally Popper.js for Dropdown in Navbar

              if (!this._inNavbar && usePopper) {
                /**
                 * Check for Popper dependency
                 * Popper - https://popper.js.org
                 */
                if (typeof Popper === "undefined") {
                  throw new TypeError(
                    "Bootstrap's dropdowns require Popper.js (https://popper.js.org/)"
                  );
                }

                var referenceElement = this._element;

                if (this._config.reference === "parent") {
                  referenceElement = parent;
                } else if (Util.isElement(this._config.reference)) {
                  referenceElement = this._config.reference; // Check if it's jQuery element

                  if (typeof this._config.reference.jquery !== "undefined") {
                    referenceElement = this._config.reference[0];
                  }
                } // If boundary is not `scrollParent`, then set position to `static`
                // to allow the menu to "escape" the scroll parent's boundaries
                // https://github.com/twbs/bootstrap/issues/24251

                if (this._config.boundary !== "scrollParent") {
                  $(parent).addClass(CLASS_NAME_POSITION_STATIC);
                }

                this._popper = new Popper(
                  referenceElement,
                  this._menu,
                  this._getPopperConfig()
                );
              } // If this is a touch-enabled device we add extra
              // empty mouseover listeners to the body's immediate children;
              // only needed because of broken event delegation on iOS
              // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

              if (
                "ontouchstart" in document.documentElement &&
                $(parent).closest(SELECTOR_NAVBAR_NAV).length === 0
              ) {
                $(document.body)
                  .children()
                  .on("mouseover", null, $.noop);
              }

              this._element.focus();

              this._element.setAttribute("aria-expanded", true);

              $(this._menu).toggleClass(CLASS_NAME_SHOW$2);
              $(parent)
                .toggleClass(CLASS_NAME_SHOW$2)
                .trigger($.Event(EVENT_SHOWN$1, relatedTarget));
            };

            _proto.hide = function hide() {
              if (
                this._element.disabled ||
                $(this._element).hasClass(CLASS_NAME_DISABLED) ||
                !$(this._menu).hasClass(CLASS_NAME_SHOW$2)
              ) {
                return;
              }

              var relatedTarget = {
                relatedTarget: this._element,
              };
              var hideEvent = $.Event(EVENT_HIDE$1, relatedTarget);

              var parent = Dropdown._getParentFromElement(this._element);

              $(parent).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              if (this._popper) {
                this._popper.destroy();
              }

              $(this._menu).toggleClass(CLASS_NAME_SHOW$2);
              $(parent)
                .toggleClass(CLASS_NAME_SHOW$2)
                .trigger($.Event(EVENT_HIDDEN$1, relatedTarget));
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY$4);
              $(this._element).off(EVENT_KEY$4);
              this._element = null;
              this._menu = null;

              if (this._popper !== null) {
                this._popper.destroy();

                this._popper = null;
              }
            };

            _proto.update = function update() {
              this._inNavbar = this._detectNavbar();

              if (this._popper !== null) {
                this._popper.scheduleUpdate();
              }
            }; // Private

            _proto._addEventListeners = function _addEventListeners() {
              var _this = this;

              $(this._element).on(EVENT_CLICK, function(event) {
                event.preventDefault();
                event.stopPropagation();

                _this.toggle();
              });
            };

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(
                _objectSpread2(
                  _objectSpread2({}, this.constructor.Default),
                  $(this._element).data()
                ),
                config
              );
              Util.typeCheckConfig(
                NAME$4,
                config,
                this.constructor.DefaultType
              );
              return config;
            };

            _proto._getMenuElement = function _getMenuElement() {
              if (!this._menu) {
                var parent = Dropdown._getParentFromElement(this._element);

                if (parent) {
                  this._menu = parent.querySelector(SELECTOR_MENU);
                }
              }

              return this._menu;
            };

            _proto._getPlacement = function _getPlacement() {
              var $parentDropdown = $(this._element.parentNode);
              var placement = PLACEMENT_BOTTOM; // Handle dropup

              if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
                placement = $(this._menu).hasClass(CLASS_NAME_MENURIGHT)
                  ? PLACEMENT_TOPEND
                  : PLACEMENT_TOP;
              } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
                placement = PLACEMENT_RIGHT;
              } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
                placement = PLACEMENT_LEFT;
              } else if ($(this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
                placement = PLACEMENT_BOTTOMEND;
              }

              return placement;
            };

            _proto._detectNavbar = function _detectNavbar() {
              return $(this._element).closest(".navbar").length > 0;
            };

            _proto._getOffset = function _getOffset() {
              var _this2 = this;

              var offset = {};

              if (typeof this._config.offset === "function") {
                offset.fn = function(data) {
                  data.offsets = _objectSpread2(
                    _objectSpread2({}, data.offsets),
                    _this2._config.offset(data.offsets, _this2._element) || {}
                  );
                  return data;
                };
              } else {
                offset.offset = this._config.offset;
              }

              return offset;
            };

            _proto._getPopperConfig = function _getPopperConfig() {
              var popperConfig = {
                placement: this._getPlacement(),
                modifiers: {
                  offset: this._getOffset(),
                  flip: {
                    enabled: this._config.flip,
                  },
                  preventOverflow: {
                    boundariesElement: this._config.boundary,
                  },
                },
              }; // Disable Popper.js if we have a static display

              if (this._config.display === "static") {
                popperConfig.modifiers.applyStyle = {
                  enabled: false,
                };
              }

              return _objectSpread2(
                _objectSpread2({}, popperConfig),
                this._config.popperConfig
              );
            }; // Static

            Dropdown._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$4);

                var _config = typeof config === "object" ? config : null;

                if (!data) {
                  data = new Dropdown(this, _config);
                  $(this).data(DATA_KEY$4, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            Dropdown._clearMenus = function _clearMenus(event) {
              if (
                event &&
                (event.which === RIGHT_MOUSE_BUTTON_WHICH ||
                  (event.type === "keyup" && event.which !== TAB_KEYCODE))
              ) {
                return;
              }

              var toggles = [].slice.call(
                document.querySelectorAll(SELECTOR_DATA_TOGGLE$2)
              );

              for (var i = 0, len = toggles.length; i < len; i++) {
                var parent = Dropdown._getParentFromElement(toggles[i]);

                var context = $(toggles[i]).data(DATA_KEY$4);
                var relatedTarget = {
                  relatedTarget: toggles[i],
                };

                if (event && event.type === "click") {
                  relatedTarget.clickEvent = event;
                }

                if (!context) {
                  continue;
                }

                var dropdownMenu = context._menu;

                if (!$(parent).hasClass(CLASS_NAME_SHOW$2)) {
                  continue;
                }

                if (
                  event &&
                  ((event.type === "click" &&
                    /input|textarea/i.test(event.target.tagName)) ||
                    (event.type === "keyup" && event.which === TAB_KEYCODE)) &&
                  $.contains(parent, event.target)
                ) {
                  continue;
                }

                var hideEvent = $.Event(EVENT_HIDE$1, relatedTarget);
                $(parent).trigger(hideEvent);

                if (hideEvent.isDefaultPrevented()) {
                  continue;
                } // If this is a touch-enabled device we remove the extra
                // empty mouseover listeners we added for iOS support

                if ("ontouchstart" in document.documentElement) {
                  $(document.body)
                    .children()
                    .off("mouseover", null, $.noop);
                }

                toggles[i].setAttribute("aria-expanded", "false");

                if (context._popper) {
                  context._popper.destroy();
                }

                $(dropdownMenu).removeClass(CLASS_NAME_SHOW$2);
                $(parent)
                  .removeClass(CLASS_NAME_SHOW$2)
                  .trigger($.Event(EVENT_HIDDEN$1, relatedTarget));
              }
            };

            Dropdown._getParentFromElement = function _getParentFromElement(
              element
            ) {
              var parent;
              var selector = Util.getSelectorFromElement(element);

              if (selector) {
                parent = document.querySelector(selector);
              }

              return parent || element.parentNode;
            }; // eslint-disable-next-line complexity

            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(
              event
            ) {
              // If not input/textarea:
              //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
              // If input/textarea:
              //  - If space key => not a dropdown command
              //  - If key is other than escape
              //    - If key is not up or down => not a dropdown command
              //    - If trigger inside the menu => not a dropdown command
              if (
                /input|textarea/i.test(event.target.tagName)
                  ? event.which === SPACE_KEYCODE ||
                    (event.which !== ESCAPE_KEYCODE &&
                      ((event.which !== ARROW_DOWN_KEYCODE &&
                        event.which !== ARROW_UP_KEYCODE) ||
                        $(event.target).closest(SELECTOR_MENU).length))
                  : !REGEXP_KEYDOWN.test(event.which)
              ) {
                return;
              }

              if (this.disabled || $(this).hasClass(CLASS_NAME_DISABLED)) {
                return;
              }

              var parent = Dropdown._getParentFromElement(this);

              var isActive = $(parent).hasClass(CLASS_NAME_SHOW$2);

              if (!isActive && event.which === ESCAPE_KEYCODE) {
                return;
              }

              event.preventDefault();
              event.stopPropagation();

              if (
                !isActive ||
                (isActive &&
                  (event.which === ESCAPE_KEYCODE ||
                    event.which === SPACE_KEYCODE))
              ) {
                if (event.which === ESCAPE_KEYCODE) {
                  $(parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger(
                    "focus"
                  );
                }

                $(this).trigger("click");
                return;
              }

              var items = [].slice
                .call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS))
                .filter(function(item) {
                  return $(item).is(":visible");
                });

              if (items.length === 0) {
                return;
              }

              var index = items.indexOf(event.target);

              if (event.which === ARROW_UP_KEYCODE && index > 0) {
                // Up
                index--;
              }

              if (
                event.which === ARROW_DOWN_KEYCODE &&
                index < items.length - 1
              ) {
                // Down
                index++;
              }

              if (index < 0) {
                index = 0;
              }

              items[index].focus();
            };

            _createClass(Dropdown, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$4;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$2;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$2;
                },
              },
            ]);

            return Dropdown;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document)
            .on(
              EVENT_KEYDOWN_DATA_API,
              SELECTOR_DATA_TOGGLE$2,
              Dropdown._dataApiKeydownHandler
            )
            .on(
              EVENT_KEYDOWN_DATA_API,
              SELECTOR_MENU,
              Dropdown._dataApiKeydownHandler
            )
            .on(
              EVENT_CLICK_DATA_API$4 + " " + EVENT_KEYUP_DATA_API,
              Dropdown._clearMenus
            )
            .on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function(
              event
            ) {
              event.preventDefault();
              event.stopPropagation();

              Dropdown._jQueryInterface.call($(this), "toggle");
            })
            .on(EVENT_CLICK_DATA_API$4, SELECTOR_FORM_CHILD, function(e) {
              e.stopPropagation();
            });
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$4] = Dropdown._jQueryInterface;
          $.fn[NAME$4].Constructor = Dropdown;

          $.fn[NAME$4].noConflict = function() {
            $.fn[NAME$4] = JQUERY_NO_CONFLICT$4;
            return Dropdown._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$5 = "modal";
          var VERSION$5 = "4.5.0";
          var DATA_KEY$5 = "bs.modal";
          var EVENT_KEY$5 = "." + DATA_KEY$5;
          var DATA_API_KEY$5 = ".data-api";
          var JQUERY_NO_CONFLICT$5 = $.fn[NAME$5];
          var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

          var Default$3 = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true,
          };
          var DefaultType$3 = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean",
          };
          var EVENT_HIDE$2 = "hide" + EVENT_KEY$5;
          var EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY$5;
          var EVENT_HIDDEN$2 = "hidden" + EVENT_KEY$5;
          var EVENT_SHOW$2 = "show" + EVENT_KEY$5;
          var EVENT_SHOWN$2 = "shown" + EVENT_KEY$5;
          var EVENT_FOCUSIN = "focusin" + EVENT_KEY$5;
          var EVENT_RESIZE = "resize" + EVENT_KEY$5;
          var EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY$5;
          var EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY$5;
          var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY$5;
          var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY$5;
          var EVENT_CLICK_DATA_API$5 = "click" + EVENT_KEY$5 + DATA_API_KEY$5;
          var CLASS_NAME_SCROLLABLE = "modal-dialog-scrollable";
          var CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
          var CLASS_NAME_BACKDROP = "modal-backdrop";
          var CLASS_NAME_OPEN = "modal-open";
          var CLASS_NAME_FADE$1 = "fade";
          var CLASS_NAME_SHOW$3 = "show";
          var CLASS_NAME_STATIC = "modal-static";
          var SELECTOR_DIALOG = ".modal-dialog";
          var SELECTOR_MODAL_BODY = ".modal-body";
          var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="modal"]';
          var SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]';
          var SELECTOR_FIXED_CONTENT =
            ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
          var SELECTOR_STICKY_CONTENT = ".sticky-top";
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Modal = /*#__PURE__*/ (function() {
            function Modal(element, config) {
              this._config = this._getConfig(config);
              this._element = element;
              this._dialog = element.querySelector(SELECTOR_DIALOG);
              this._backdrop = null;
              this._isShown = false;
              this._isBodyOverflowing = false;
              this._ignoreBackdropClick = false;
              this._isTransitioning = false;
              this._scrollbarWidth = 0;
            } // Getters

            var _proto = Modal.prototype;

            // Public
            _proto.toggle = function toggle(relatedTarget) {
              return this._isShown ? this.hide() : this.show(relatedTarget);
            };

            _proto.show = function show(relatedTarget) {
              var _this = this;

              if (this._isShown || this._isTransitioning) {
                return;
              }

              if ($(this._element).hasClass(CLASS_NAME_FADE$1)) {
                this._isTransitioning = true;
              }

              var showEvent = $.Event(EVENT_SHOW$2, {
                relatedTarget: relatedTarget,
              });
              $(this._element).trigger(showEvent);

              if (this._isShown || showEvent.isDefaultPrevented()) {
                return;
              }

              this._isShown = true;

              this._checkScrollbar();

              this._setScrollbar();

              this._adjustDialog();

              this._setEscapeEvent();

              this._setResizeEvent();

              $(this._element).on(
                EVENT_CLICK_DISMISS,
                SELECTOR_DATA_DISMISS,
                function(event) {
                  return _this.hide(event);
                }
              );
              $(this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function() {
                $(_this._element).one(EVENT_MOUSEUP_DISMISS, function(event) {
                  if ($(event.target).is(_this._element)) {
                    _this._ignoreBackdropClick = true;
                  }
                });
              });

              this._showBackdrop(function() {
                return _this._showElement(relatedTarget);
              });
            };

            _proto.hide = function hide(event) {
              var _this2 = this;

              if (event) {
                event.preventDefault();
              }

              if (!this._isShown || this._isTransitioning) {
                return;
              }

              var hideEvent = $.Event(EVENT_HIDE$2);
              $(this._element).trigger(hideEvent);

              if (!this._isShown || hideEvent.isDefaultPrevented()) {
                return;
              }

              this._isShown = false;
              var transition = $(this._element).hasClass(CLASS_NAME_FADE$1);

              if (transition) {
                this._isTransitioning = true;
              }

              this._setEscapeEvent();

              this._setResizeEvent();

              $(document).off(EVENT_FOCUSIN);
              $(this._element).removeClass(CLASS_NAME_SHOW$3);
              $(this._element).off(EVENT_CLICK_DISMISS);
              $(this._dialog).off(EVENT_MOUSEDOWN_DISMISS);

              if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $(this._element)
                  .one(Util.TRANSITION_END, function(event) {
                    return _this2._hideModal(event);
                  })
                  .emulateTransitionEnd(transitionDuration);
              } else {
                this._hideModal();
              }
            };

            _proto.dispose = function dispose() {
              [window, this._element, this._dialog].forEach(function(
                htmlElement
              ) {
                return $(htmlElement).off(EVENT_KEY$5);
              });
              /**
               * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
               * Do not move `document` in `htmlElements` array
               * It will remove `EVENT_CLICK_DATA_API` event that should remain
               */

              $(document).off(EVENT_FOCUSIN);
              $.removeData(this._element, DATA_KEY$5);
              this._config = null;
              this._element = null;
              this._dialog = null;
              this._backdrop = null;
              this._isShown = null;
              this._isBodyOverflowing = null;
              this._ignoreBackdropClick = null;
              this._isTransitioning = null;
              this._scrollbarWidth = null;
            };

            _proto.handleUpdate = function handleUpdate() {
              this._adjustDialog();
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(_objectSpread2({}, Default$3), config);
              Util.typeCheckConfig(NAME$5, config, DefaultType$3);
              return config;
            };

            _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
              var _this3 = this;

              if (this._config.backdrop === "static") {
                var hideEventPrevented = $.Event(EVENT_HIDE_PREVENTED);
                $(this._element).trigger(hideEventPrevented);

                if (hideEventPrevented.defaultPrevented) {
                  return;
                }

                this._element.classList.add(CLASS_NAME_STATIC);

                var modalTransitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $(this._element)
                  .one(Util.TRANSITION_END, function() {
                    _this3._element.classList.remove(CLASS_NAME_STATIC);
                  })
                  .emulateTransitionEnd(modalTransitionDuration);

                this._element.focus();
              } else {
                this.hide();
              }
            };

            _proto._showElement = function _showElement(relatedTarget) {
              var _this4 = this;

              var transition = $(this._element).hasClass(CLASS_NAME_FADE$1);
              var modalBody = this._dialog
                ? this._dialog.querySelector(SELECTOR_MODAL_BODY)
                : null;

              if (
                !this._element.parentNode ||
                this._element.parentNode.nodeType !== Node.ELEMENT_NODE
              ) {
                // Don't move modal's DOM position
                document.body.appendChild(this._element);
              }

              this._element.style.display = "block";

              this._element.removeAttribute("aria-hidden");

              this._element.setAttribute("aria-modal", true);

              if (
                $(this._dialog).hasClass(CLASS_NAME_SCROLLABLE) &&
                modalBody
              ) {
                modalBody.scrollTop = 0;
              } else {
                this._element.scrollTop = 0;
              }

              if (transition) {
                Util.reflow(this._element);
              }

              $(this._element).addClass(CLASS_NAME_SHOW$3);

              if (this._config.focus) {
                this._enforceFocus();
              }

              var shownEvent = $.Event(EVENT_SHOWN$2, {
                relatedTarget: relatedTarget,
              });

              var transitionComplete = function transitionComplete() {
                if (_this4._config.focus) {
                  _this4._element.focus();
                }

                _this4._isTransitioning = false;
                $(_this4._element).trigger(shownEvent);
              };

              if (transition) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._dialog
                );
                $(this._dialog)
                  .one(Util.TRANSITION_END, transitionComplete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                transitionComplete();
              }
            };

            _proto._enforceFocus = function _enforceFocus() {
              var _this5 = this;

              $(document)
                .off(EVENT_FOCUSIN) // Guard against infinite focus loop
                .on(EVENT_FOCUSIN, function(event) {
                  if (
                    document !== event.target &&
                    _this5._element !== event.target &&
                    $(_this5._element).has(event.target).length === 0
                  ) {
                    _this5._element.focus();
                  }
                });
            };

            _proto._setEscapeEvent = function _setEscapeEvent() {
              var _this6 = this;

              if (this._isShown) {
                $(this._element).on(EVENT_KEYDOWN_DISMISS, function(event) {
                  if (
                    _this6._config.keyboard &&
                    event.which === ESCAPE_KEYCODE$1
                  ) {
                    event.preventDefault();

                    _this6.hide();
                  } else if (
                    !_this6._config.keyboard &&
                    event.which === ESCAPE_KEYCODE$1
                  ) {
                    _this6._triggerBackdropTransition();
                  }
                });
              } else if (!this._isShown) {
                $(this._element).off(EVENT_KEYDOWN_DISMISS);
              }
            };

            _proto._setResizeEvent = function _setResizeEvent() {
              var _this7 = this;

              if (this._isShown) {
                $(window).on(EVENT_RESIZE, function(event) {
                  return _this7.handleUpdate(event);
                });
              } else {
                $(window).off(EVENT_RESIZE);
              }
            };

            _proto._hideModal = function _hideModal() {
              var _this8 = this;

              this._element.style.display = "none";

              this._element.setAttribute("aria-hidden", true);

              this._element.removeAttribute("aria-modal");

              this._isTransitioning = false;

              this._showBackdrop(function() {
                $(document.body).removeClass(CLASS_NAME_OPEN);

                _this8._resetAdjustments();

                _this8._resetScrollbar();

                $(_this8._element).trigger(EVENT_HIDDEN$2);
              });
            };

            _proto._removeBackdrop = function _removeBackdrop() {
              if (this._backdrop) {
                $(this._backdrop).remove();
                this._backdrop = null;
              }
            };

            _proto._showBackdrop = function _showBackdrop(callback) {
              var _this9 = this;

              var animate = $(this._element).hasClass(CLASS_NAME_FADE$1)
                ? CLASS_NAME_FADE$1
                : "";

              if (this._isShown && this._config.backdrop) {
                this._backdrop = document.createElement("div");
                this._backdrop.className = CLASS_NAME_BACKDROP;

                if (animate) {
                  this._backdrop.classList.add(animate);
                }

                $(this._backdrop).appendTo(document.body);
                $(this._element).on(EVENT_CLICK_DISMISS, function(event) {
                  if (_this9._ignoreBackdropClick) {
                    _this9._ignoreBackdropClick = false;
                    return;
                  }

                  if (event.target !== event.currentTarget) {
                    return;
                  }

                  _this9._triggerBackdropTransition();
                });

                if (animate) {
                  Util.reflow(this._backdrop);
                }

                $(this._backdrop).addClass(CLASS_NAME_SHOW$3);

                if (!callback) {
                  return;
                }

                if (!animate) {
                  callback();
                  return;
                }

                var backdropTransitionDuration = Util.getTransitionDurationFromElement(
                  this._backdrop
                );
                $(this._backdrop)
                  .one(Util.TRANSITION_END, callback)
                  .emulateTransitionEnd(backdropTransitionDuration);
              } else if (!this._isShown && this._backdrop) {
                $(this._backdrop).removeClass(CLASS_NAME_SHOW$3);

                var callbackRemove = function callbackRemove() {
                  _this9._removeBackdrop();

                  if (callback) {
                    callback();
                  }
                };

                if ($(this._element).hasClass(CLASS_NAME_FADE$1)) {
                  var _backdropTransitionDuration = Util.getTransitionDurationFromElement(
                    this._backdrop
                  );

                  $(this._backdrop)
                    .one(Util.TRANSITION_END, callbackRemove)
                    .emulateTransitionEnd(_backdropTransitionDuration);
                } else {
                  callbackRemove();
                }
              } else if (callback) {
                callback();
              }
            }; // ----------------------------------------------------------------------
            // the following methods are used to handle overflowing modals
            // todo (fat): these should probably be refactored out of modal.js
            // ----------------------------------------------------------------------

            _proto._adjustDialog = function _adjustDialog() {
              var isModalOverflowing =
                this._element.scrollHeight >
                document.documentElement.clientHeight;

              if (!this._isBodyOverflowing && isModalOverflowing) {
                this._element.style.paddingLeft = this._scrollbarWidth + "px";
              }

              if (this._isBodyOverflowing && !isModalOverflowing) {
                this._element.style.paddingRight = this._scrollbarWidth + "px";
              }
            };

            _proto._resetAdjustments = function _resetAdjustments() {
              this._element.style.paddingLeft = "";
              this._element.style.paddingRight = "";
            };

            _proto._checkScrollbar = function _checkScrollbar() {
              var rect = document.body.getBoundingClientRect();
              this._isBodyOverflowing =
                Math.round(rect.left + rect.right) < window.innerWidth;
              this._scrollbarWidth = this._getScrollbarWidth();
            };

            _proto._setScrollbar = function _setScrollbar() {
              var _this10 = this;

              if (this._isBodyOverflowing) {
                // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                var fixedContent = [].slice.call(
                  document.querySelectorAll(SELECTOR_FIXED_CONTENT)
                );
                var stickyContent = [].slice.call(
                  document.querySelectorAll(SELECTOR_STICKY_CONTENT)
                ); // Adjust fixed content padding

                $(fixedContent).each(function(index, element) {
                  var actualPadding = element.style.paddingRight;
                  var calculatedPadding = $(element).css("padding-right");
                  $(element)
                    .data("padding-right", actualPadding)
                    .css(
                      "padding-right",
                      parseFloat(calculatedPadding) +
                        _this10._scrollbarWidth +
                        "px"
                    );
                }); // Adjust sticky content margin

                $(stickyContent).each(function(index, element) {
                  var actualMargin = element.style.marginRight;
                  var calculatedMargin = $(element).css("margin-right");
                  $(element)
                    .data("margin-right", actualMargin)
                    .css(
                      "margin-right",
                      parseFloat(calculatedMargin) -
                        _this10._scrollbarWidth +
                        "px"
                    );
                }); // Adjust body padding

                var actualPadding = document.body.style.paddingRight;
                var calculatedPadding = $(document.body).css("padding-right");
                $(document.body)
                  .data("padding-right", actualPadding)
                  .css(
                    "padding-right",
                    parseFloat(calculatedPadding) + this._scrollbarWidth + "px"
                  );
              }

              $(document.body).addClass(CLASS_NAME_OPEN);
            };

            _proto._resetScrollbar = function _resetScrollbar() {
              // Restore fixed content padding
              var fixedContent = [].slice.call(
                document.querySelectorAll(SELECTOR_FIXED_CONTENT)
              );
              $(fixedContent).each(function(index, element) {
                var padding = $(element).data("padding-right");
                $(element).removeData("padding-right");
                element.style.paddingRight = padding ? padding : "";
              }); // Restore sticky content

              var elements = [].slice.call(
                document.querySelectorAll("" + SELECTOR_STICKY_CONTENT)
              );
              $(elements).each(function(index, element) {
                var margin = $(element).data("margin-right");

                if (typeof margin !== "undefined") {
                  $(element)
                    .css("margin-right", margin)
                    .removeData("margin-right");
                }
              }); // Restore body padding

              var padding = $(document.body).data("padding-right");
              $(document.body).removeData("padding-right");
              document.body.style.paddingRight = padding ? padding : "";
            };

            _proto._getScrollbarWidth = function _getScrollbarWidth() {
              // thx d.walsh
              var scrollDiv = document.createElement("div");
              scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
              document.body.appendChild(scrollDiv);
              var scrollbarWidth =
                scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
              document.body.removeChild(scrollDiv);
              return scrollbarWidth;
            }; // Static

            Modal._jQueryInterface = function _jQueryInterface(
              config,
              relatedTarget
            ) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$5);

                var _config = _objectSpread2(
                  _objectSpread2(_objectSpread2({}, Default$3), $(this).data()),
                  typeof config === "object" && config ? config : {}
                );

                if (!data) {
                  data = new Modal(this, _config);
                  $(this).data(DATA_KEY$5, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config](relatedTarget);
                } else if (_config.show) {
                  data.show(relatedTarget);
                }
              });
            };

            _createClass(Modal, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$5;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$3;
                },
              },
            ]);

            return Modal;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document).on(
            EVENT_CLICK_DATA_API$5,
            SELECTOR_DATA_TOGGLE$3,
            function(event) {
              var _this11 = this;

              var target;
              var selector = Util.getSelectorFromElement(this);

              if (selector) {
                target = document.querySelector(selector);
              }

              var config = $(target).data(DATA_KEY$5)
                ? "toggle"
                : _objectSpread2(
                    _objectSpread2({}, $(target).data()),
                    $(this).data()
                  );

              if (this.tagName === "A" || this.tagName === "AREA") {
                event.preventDefault();
              }

              var $target = $(target).one(EVENT_SHOW$2, function(showEvent) {
                if (showEvent.isDefaultPrevented()) {
                  // Only register focus restorer if modal will actually get shown
                  return;
                }

                $target.one(EVENT_HIDDEN$2, function() {
                  if ($(_this11).is(":visible")) {
                    _this11.focus();
                  }
                });
              });

              Modal._jQueryInterface.call($(target), config, this);
            }
          );
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$5] = Modal._jQueryInterface;
          $.fn[NAME$5].Constructor = Modal;

          $.fn[NAME$5].noConflict = function() {
            $.fn[NAME$5] = JQUERY_NO_CONFLICT$5;
            return Modal._jQueryInterface;
          };

          /**
           * --------------------------------------------------------------------------
           * Bootstrap (v4.5.0): tools/sanitizer.js
           * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
           * --------------------------------------------------------------------------
           */
          var uriAttrs = [
            "background",
            "cite",
            "href",
            "itemtype",
            "longdesc",
            "poster",
            "src",
            "xlink:href",
          ];
          var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
          var DefaultWhitelist = {
            // Global attributes allowed on any supplied element below.
            "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
            a: ["target", "href", "title", "rel"],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ["src", "srcset", "alt", "title", "width", "height"],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: [],
          };
          /**
           * A pattern that recognizes a commonly useful subset of URLs that are safe.
           *
           * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
           */

          var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
          /**
           * A pattern that matches safe data URLs. Only matches image, video and audio types.
           *
           * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
           */

          var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

          function allowedAttribute(attr, allowedAttributeList) {
            var attrName = attr.nodeName.toLowerCase();

            if (allowedAttributeList.indexOf(attrName) !== -1) {
              if (uriAttrs.indexOf(attrName) !== -1) {
                return Boolean(
                  attr.nodeValue.match(SAFE_URL_PATTERN) ||
                    attr.nodeValue.match(DATA_URL_PATTERN)
                );
              }

              return true;
            }

            var regExp = allowedAttributeList.filter(function(attrRegex) {
              return attrRegex instanceof RegExp;
            }); // Check if a regular expression validates the attribute.

            for (var i = 0, len = regExp.length; i < len; i++) {
              if (attrName.match(regExp[i])) {
                return true;
              }
            }

            return false;
          }

          function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
            if (unsafeHtml.length === 0) {
              return unsafeHtml;
            }

            if (sanitizeFn && typeof sanitizeFn === "function") {
              return sanitizeFn(unsafeHtml);
            }

            var domParser = new window.DOMParser();
            var createdDocument = domParser.parseFromString(
              unsafeHtml,
              "text/html"
            );
            var whitelistKeys = Object.keys(whiteList);
            var elements = [].slice.call(
              createdDocument.body.querySelectorAll("*")
            );

            var _loop = function _loop(i, len) {
              var el = elements[i];
              var elName = el.nodeName.toLowerCase();

              if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
                el.parentNode.removeChild(el);
                return "continue";
              }

              var attributeList = [].slice.call(el.attributes);
              var whitelistedAttributes = [].concat(
                whiteList["*"] || [],
                whiteList[elName] || []
              );
              attributeList.forEach(function(attr) {
                if (!allowedAttribute(attr, whitelistedAttributes)) {
                  el.removeAttribute(attr.nodeName);
                }
              });
            };

            for (var i = 0, len = elements.length; i < len; i++) {
              var _ret = _loop(i);

              if (_ret === "continue") continue;
            }

            return createdDocument.body.innerHTML;
          }

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$6 = "tooltip";
          var VERSION$6 = "4.5.0";
          var DATA_KEY$6 = "bs.tooltip";
          var EVENT_KEY$6 = "." + DATA_KEY$6;
          var JQUERY_NO_CONFLICT$6 = $.fn[NAME$6];
          var CLASS_PREFIX = "bs-tooltip";
          var BSCLS_PREFIX_REGEX = new RegExp(
            "(^|\\s)" + CLASS_PREFIX + "\\S+",
            "g"
          );
          var DISALLOWED_ATTRIBUTES = ["sanitize", "whiteList", "sanitizeFn"];
          var DefaultType$4 = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string|function)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)",
            sanitize: "boolean",
            sanitizeFn: "(null|function)",
            whiteList: "object",
            popperConfig: "(null|object)",
          };
          var AttachmentMap = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left",
          };
          var Default$4 = {
            animation: true,
            template:
              '<div class="tooltip" role="tooltip">' +
              '<div class="arrow"></div>' +
              '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: 0,
            container: false,
            fallbackPlacement: "flip",
            boundary: "scrollParent",
            sanitize: true,
            sanitizeFn: null,
            whiteList: DefaultWhitelist,
            popperConfig: null,
          };
          var HOVER_STATE_SHOW = "show";
          var HOVER_STATE_OUT = "out";
          var Event = {
            HIDE: "hide" + EVENT_KEY$6,
            HIDDEN: "hidden" + EVENT_KEY$6,
            SHOW: "show" + EVENT_KEY$6,
            SHOWN: "shown" + EVENT_KEY$6,
            INSERTED: "inserted" + EVENT_KEY$6,
            CLICK: "click" + EVENT_KEY$6,
            FOCUSIN: "focusin" + EVENT_KEY$6,
            FOCUSOUT: "focusout" + EVENT_KEY$6,
            MOUSEENTER: "mouseenter" + EVENT_KEY$6,
            MOUSELEAVE: "mouseleave" + EVENT_KEY$6,
          };
          var CLASS_NAME_FADE$2 = "fade";
          var CLASS_NAME_SHOW$4 = "show";
          var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
          var SELECTOR_ARROW = ".arrow";
          var TRIGGER_HOVER = "hover";
          var TRIGGER_FOCUS = "focus";
          var TRIGGER_CLICK = "click";
          var TRIGGER_MANUAL = "manual";
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Tooltip = /*#__PURE__*/ (function() {
            function Tooltip(element, config) {
              if (typeof Popper === "undefined") {
                throw new TypeError(
                  "Bootstrap's tooltips require Popper.js (https://popper.js.org/)"
                );
              } // private

              this._isEnabled = true;
              this._timeout = 0;
              this._hoverState = "";
              this._activeTrigger = {};
              this._popper = null; // Protected

              this.element = element;
              this.config = this._getConfig(config);
              this.tip = null;

              this._setListeners();
            } // Getters

            var _proto = Tooltip.prototype;

            // Public
            _proto.enable = function enable() {
              this._isEnabled = true;
            };

            _proto.disable = function disable() {
              this._isEnabled = false;
            };

            _proto.toggleEnabled = function toggleEnabled() {
              this._isEnabled = !this._isEnabled;
            };

            _proto.toggle = function toggle(event) {
              if (!this._isEnabled) {
                return;
              }

              if (event) {
                var dataKey = this.constructor.DATA_KEY;
                var context = $(event.currentTarget).data(dataKey);

                if (!context) {
                  context = new this.constructor(
                    event.currentTarget,
                    this._getDelegateConfig()
                  );
                  $(event.currentTarget).data(dataKey, context);
                }

                context._activeTrigger.click = !context._activeTrigger.click;

                if (context._isWithActiveTrigger()) {
                  context._enter(null, context);
                } else {
                  context._leave(null, context);
                }
              } else {
                if ($(this.getTipElement()).hasClass(CLASS_NAME_SHOW$4)) {
                  this._leave(null, this);

                  return;
                }

                this._enter(null, this);
              }
            };

            _proto.dispose = function dispose() {
              clearTimeout(this._timeout);
              $.removeData(this.element, this.constructor.DATA_KEY);
              $(this.element).off(this.constructor.EVENT_KEY);
              $(this.element)
                .closest(".modal")
                .off("hide.bs.modal", this._hideModalHandler);

              if (this.tip) {
                $(this.tip).remove();
              }

              this._isEnabled = null;
              this._timeout = null;
              this._hoverState = null;
              this._activeTrigger = null;

              if (this._popper) {
                this._popper.destroy();
              }

              this._popper = null;
              this.element = null;
              this.config = null;
              this.tip = null;
            };

            _proto.show = function show() {
              var _this = this;

              if ($(this.element).css("display") === "none") {
                throw new Error("Please use show on visible elements");
              }

              var showEvent = $.Event(this.constructor.Event.SHOW);

              if (this.isWithContent() && this._isEnabled) {
                $(this.element).trigger(showEvent);
                var shadowRoot = Util.findShadowRoot(this.element);
                var isInTheDom = $.contains(
                  shadowRoot !== null
                    ? shadowRoot
                    : this.element.ownerDocument.documentElement,
                  this.element
                );

                if (showEvent.isDefaultPrevented() || !isInTheDom) {
                  return;
                }

                var tip = this.getTipElement();
                var tipId = Util.getUID(this.constructor.NAME);
                tip.setAttribute("id", tipId);
                this.element.setAttribute("aria-describedby", tipId);
                this.setContent();

                if (this.config.animation) {
                  $(tip).addClass(CLASS_NAME_FADE$2);
                }

                var placement =
                  typeof this.config.placement === "function"
                    ? this.config.placement.call(this, tip, this.element)
                    : this.config.placement;

                var attachment = this._getAttachment(placement);

                this.addAttachmentClass(attachment);

                var container = this._getContainer();

                $(tip).data(this.constructor.DATA_KEY, this);

                if (
                  !$.contains(
                    this.element.ownerDocument.documentElement,
                    this.tip
                  )
                ) {
                  $(tip).appendTo(container);
                }

                $(this.element).trigger(this.constructor.Event.INSERTED);
                this._popper = new Popper(
                  this.element,
                  tip,
                  this._getPopperConfig(attachment)
                );
                $(tip).addClass(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we add extra
                // empty mouseover listeners to the body's immediate children;
                // only needed because of broken event delegation on iOS
                // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

                if ("ontouchstart" in document.documentElement) {
                  $(document.body)
                    .children()
                    .on("mouseover", null, $.noop);
                }

                var complete = function complete() {
                  if (_this.config.animation) {
                    _this._fixTransition();
                  }

                  var prevHoverState = _this._hoverState;
                  _this._hoverState = null;
                  $(_this.element).trigger(_this.constructor.Event.SHOWN);

                  if (prevHoverState === HOVER_STATE_OUT) {
                    _this._leave(null, _this);
                  }
                };

                if ($(this.tip).hasClass(CLASS_NAME_FADE$2)) {
                  var transitionDuration = Util.getTransitionDurationFromElement(
                    this.tip
                  );
                  $(this.tip)
                    .one(Util.TRANSITION_END, complete)
                    .emulateTransitionEnd(transitionDuration);
                } else {
                  complete();
                }
              }
            };

            _proto.hide = function hide(callback) {
              var _this2 = this;

              var tip = this.getTipElement();
              var hideEvent = $.Event(this.constructor.Event.HIDE);

              var complete = function complete() {
                if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
                  tip.parentNode.removeChild(tip);
                }

                _this2._cleanTipClass();

                _this2.element.removeAttribute("aria-describedby");

                $(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

                if (_this2._popper !== null) {
                  _this2._popper.destroy();
                }

                if (callback) {
                  callback();
                }
              };

              $(this.element).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              $(tip).removeClass(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we remove the extra
              // empty mouseover listeners we added for iOS support

              if ("ontouchstart" in document.documentElement) {
                $(document.body)
                  .children()
                  .off("mouseover", null, $.noop);
              }

              this._activeTrigger[TRIGGER_CLICK] = false;
              this._activeTrigger[TRIGGER_FOCUS] = false;
              this._activeTrigger[TRIGGER_HOVER] = false;

              if ($(this.tip).hasClass(CLASS_NAME_FADE$2)) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  tip
                );
                $(tip)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }

              this._hoverState = "";
            };

            _proto.update = function update() {
              if (this._popper !== null) {
                this._popper.scheduleUpdate();
              }
            }; // Protected

            _proto.isWithContent = function isWithContent() {
              return Boolean(this.getTitle());
            };

            _proto.addAttachmentClass = function addAttachmentClass(
              attachment
            ) {
              $(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
            };

            _proto.getTipElement = function getTipElement() {
              this.tip = this.tip || $(this.config.template)[0];
              return this.tip;
            };

            _proto.setContent = function setContent() {
              var tip = this.getTipElement();
              this.setElementContent(
                $(tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)),
                this.getTitle()
              );
              $(tip).removeClass(CLASS_NAME_FADE$2 + " " + CLASS_NAME_SHOW$4);
            };

            _proto.setElementContent = function setElementContent(
              $element,
              content
            ) {
              if (
                typeof content === "object" &&
                (content.nodeType || content.jquery)
              ) {
                // Content is a DOM node or a jQuery
                if (this.config.html) {
                  if (
                    !$(content)
                      .parent()
                      .is($element)
                  ) {
                    $element.empty().append(content);
                  }
                } else {
                  $element.text($(content).text());
                }

                return;
              }

              if (this.config.html) {
                if (this.config.sanitize) {
                  content = sanitizeHtml(
                    content,
                    this.config.whiteList,
                    this.config.sanitizeFn
                  );
                }

                $element.html(content);
              } else {
                $element.text(content);
              }
            };

            _proto.getTitle = function getTitle() {
              var title = this.element.getAttribute("data-original-title");

              if (!title) {
                title =
                  typeof this.config.title === "function"
                    ? this.config.title.call(this.element)
                    : this.config.title;
              }

              return title;
            }; // Private

            _proto._getPopperConfig = function _getPopperConfig(attachment) {
              var _this3 = this;

              var defaultBsConfig = {
                placement: attachment,
                modifiers: {
                  offset: this._getOffset(),
                  flip: {
                    behavior: this.config.fallbackPlacement,
                  },
                  arrow: {
                    element: SELECTOR_ARROW,
                  },
                  preventOverflow: {
                    boundariesElement: this.config.boundary,
                  },
                },
                onCreate: function onCreate(data) {
                  if (data.originalPlacement !== data.placement) {
                    _this3._handlePopperPlacementChange(data);
                  }
                },
                onUpdate: function onUpdate(data) {
                  return _this3._handlePopperPlacementChange(data);
                },
              };
              return _objectSpread2(
                _objectSpread2({}, defaultBsConfig),
                this.config.popperConfig
              );
            };

            _proto._getOffset = function _getOffset() {
              var _this4 = this;

              var offset = {};

              if (typeof this.config.offset === "function") {
                offset.fn = function(data) {
                  data.offsets = _objectSpread2(
                    _objectSpread2({}, data.offsets),
                    _this4.config.offset(data.offsets, _this4.element) || {}
                  );
                  return data;
                };
              } else {
                offset.offset = this.config.offset;
              }

              return offset;
            };

            _proto._getContainer = function _getContainer() {
              if (this.config.container === false) {
                return document.body;
              }

              if (Util.isElement(this.config.container)) {
                return $(this.config.container);
              }

              return $(document).find(this.config.container);
            };

            _proto._getAttachment = function _getAttachment(placement) {
              return AttachmentMap[placement.toUpperCase()];
            };

            _proto._setListeners = function _setListeners() {
              var _this5 = this;

              var triggers = this.config.trigger.split(" ");
              triggers.forEach(function(trigger) {
                if (trigger === "click") {
                  $(_this5.element).on(
                    _this5.constructor.Event.CLICK,
                    _this5.config.selector,
                    function(event) {
                      return _this5.toggle(event);
                    }
                  );
                } else if (trigger !== TRIGGER_MANUAL) {
                  var eventIn =
                    trigger === TRIGGER_HOVER
                      ? _this5.constructor.Event.MOUSEENTER
                      : _this5.constructor.Event.FOCUSIN;
                  var eventOut =
                    trigger === TRIGGER_HOVER
                      ? _this5.constructor.Event.MOUSELEAVE
                      : _this5.constructor.Event.FOCUSOUT;
                  $(_this5.element)
                    .on(eventIn, _this5.config.selector, function(event) {
                      return _this5._enter(event);
                    })
                    .on(eventOut, _this5.config.selector, function(event) {
                      return _this5._leave(event);
                    });
                }
              });

              this._hideModalHandler = function() {
                if (_this5.element) {
                  _this5.hide();
                }
              };

              $(this.element)
                .closest(".modal")
                .on("hide.bs.modal", this._hideModalHandler);

              if (this.config.selector) {
                this.config = _objectSpread2(
                  _objectSpread2({}, this.config),
                  {},
                  {
                    trigger: "manual",
                    selector: "",
                  }
                );
              } else {
                this._fixTitle();
              }
            };

            _proto._fixTitle = function _fixTitle() {
              var titleType = typeof this.element.getAttribute(
                "data-original-title"
              );

              if (
                this.element.getAttribute("title") ||
                titleType !== "string"
              ) {
                this.element.setAttribute(
                  "data-original-title",
                  this.element.getAttribute("title") || ""
                );
                this.element.setAttribute("title", "");
              }
            };

            _proto._enter = function _enter(event, context) {
              var dataKey = this.constructor.DATA_KEY;
              context = context || $(event.currentTarget).data(dataKey);

              if (!context) {
                context = new this.constructor(
                  event.currentTarget,
                  this._getDelegateConfig()
                );
                $(event.currentTarget).data(dataKey, context);
              }

              if (event) {
                context._activeTrigger[
                  event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER
                ] = true;
              }

              if (
                $(context.getTipElement()).hasClass(CLASS_NAME_SHOW$4) ||
                context._hoverState === HOVER_STATE_SHOW
              ) {
                context._hoverState = HOVER_STATE_SHOW;
                return;
              }

              clearTimeout(context._timeout);
              context._hoverState = HOVER_STATE_SHOW;

              if (!context.config.delay || !context.config.delay.show) {
                context.show();
                return;
              }

              context._timeout = setTimeout(function() {
                if (context._hoverState === HOVER_STATE_SHOW) {
                  context.show();
                }
              }, context.config.delay.show);
            };

            _proto._leave = function _leave(event, context) {
              var dataKey = this.constructor.DATA_KEY;
              context = context || $(event.currentTarget).data(dataKey);

              if (!context) {
                context = new this.constructor(
                  event.currentTarget,
                  this._getDelegateConfig()
                );
                $(event.currentTarget).data(dataKey, context);
              }

              if (event) {
                context._activeTrigger[
                  event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER
                ] = false;
              }

              if (context._isWithActiveTrigger()) {
                return;
              }

              clearTimeout(context._timeout);
              context._hoverState = HOVER_STATE_OUT;

              if (!context.config.delay || !context.config.delay.hide) {
                context.hide();
                return;
              }

              context._timeout = setTimeout(function() {
                if (context._hoverState === HOVER_STATE_OUT) {
                  context.hide();
                }
              }, context.config.delay.hide);
            };

            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
              for (var trigger in this._activeTrigger) {
                if (this._activeTrigger[trigger]) {
                  return true;
                }
              }

              return false;
            };

            _proto._getConfig = function _getConfig(config) {
              var dataAttributes = $(this.element).data();
              Object.keys(dataAttributes).forEach(function(dataAttr) {
                if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                  delete dataAttributes[dataAttr];
                }
              });
              config = _objectSpread2(
                _objectSpread2(
                  _objectSpread2({}, this.constructor.Default),
                  dataAttributes
                ),
                typeof config === "object" && config ? config : {}
              );

              if (typeof config.delay === "number") {
                config.delay = {
                  show: config.delay,
                  hide: config.delay,
                };
              }

              if (typeof config.title === "number") {
                config.title = config.title.toString();
              }

              if (typeof config.content === "number") {
                config.content = config.content.toString();
              }

              Util.typeCheckConfig(
                NAME$6,
                config,
                this.constructor.DefaultType
              );

              if (config.sanitize) {
                config.template = sanitizeHtml(
                  config.template,
                  config.whiteList,
                  config.sanitizeFn
                );
              }

              return config;
            };

            _proto._getDelegateConfig = function _getDelegateConfig() {
              var config = {};

              if (this.config) {
                for (var key in this.config) {
                  if (this.constructor.Default[key] !== this.config[key]) {
                    config[key] = this.config[key];
                  }
                }
              }

              return config;
            };

            _proto._cleanTipClass = function _cleanTipClass() {
              var $tip = $(this.getTipElement());
              var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);

              if (tabClass !== null && tabClass.length) {
                $tip.removeClass(tabClass.join(""));
              }
            };

            _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(
              popperData
            ) {
              this.tip = popperData.instance.popper;

              this._cleanTipClass();

              this.addAttachmentClass(
                this._getAttachment(popperData.placement)
              );
            };

            _proto._fixTransition = function _fixTransition() {
              var tip = this.getTipElement();
              var initConfigAnimation = this.config.animation;

              if (tip.getAttribute("x-placement") !== null) {
                return;
              }

              $(tip).removeClass(CLASS_NAME_FADE$2);
              this.config.animation = false;
              this.hide();
              this.show();
              this.config.animation = initConfigAnimation;
            }; // Static

            Tooltip._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$6);

                var _config = typeof config === "object" && config;

                if (!data && /dispose|hide/.test(config)) {
                  return;
                }

                if (!data) {
                  data = new Tooltip(this, _config);
                  $(this).data(DATA_KEY$6, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Tooltip, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$6;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$4;
                },
              },
              {
                key: "NAME",
                get: function get() {
                  return NAME$6;
                },
              },
              {
                key: "DATA_KEY",
                get: function get() {
                  return DATA_KEY$6;
                },
              },
              {
                key: "Event",
                get: function get() {
                  return Event;
                },
              },
              {
                key: "EVENT_KEY",
                get: function get() {
                  return EVENT_KEY$6;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$4;
                },
              },
            ]);

            return Tooltip;
          })();
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$6] = Tooltip._jQueryInterface;
          $.fn[NAME$6].Constructor = Tooltip;

          $.fn[NAME$6].noConflict = function() {
            $.fn[NAME$6] = JQUERY_NO_CONFLICT$6;
            return Tooltip._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$7 = "popover";
          var VERSION$7 = "4.5.0";
          var DATA_KEY$7 = "bs.popover";
          var EVENT_KEY$7 = "." + DATA_KEY$7;
          var JQUERY_NO_CONFLICT$7 = $.fn[NAME$7];
          var CLASS_PREFIX$1 = "bs-popover";
          var BSCLS_PREFIX_REGEX$1 = new RegExp(
            "(^|\\s)" + CLASS_PREFIX$1 + "\\S+",
            "g"
          );

          var Default$5 = _objectSpread2(
            _objectSpread2({}, Tooltip.Default),
            {},
            {
              placement: "right",
              trigger: "click",
              content: "",
              template:
                '<div class="popover" role="tooltip">' +
                '<div class="arrow"></div>' +
                '<h3 class="popover-header"></h3>' +
                '<div class="popover-body"></div></div>',
            }
          );

          var DefaultType$5 = _objectSpread2(
            _objectSpread2({}, Tooltip.DefaultType),
            {},
            {
              content: "(string|element|function)",
            }
          );

          var CLASS_NAME_FADE$3 = "fade";
          var CLASS_NAME_SHOW$5 = "show";
          var SELECTOR_TITLE = ".popover-header";
          var SELECTOR_CONTENT = ".popover-body";
          var Event$1 = {
            HIDE: "hide" + EVENT_KEY$7,
            HIDDEN: "hidden" + EVENT_KEY$7,
            SHOW: "show" + EVENT_KEY$7,
            SHOWN: "shown" + EVENT_KEY$7,
            INSERTED: "inserted" + EVENT_KEY$7,
            CLICK: "click" + EVENT_KEY$7,
            FOCUSIN: "focusin" + EVENT_KEY$7,
            FOCUSOUT: "focusout" + EVENT_KEY$7,
            MOUSEENTER: "mouseenter" + EVENT_KEY$7,
            MOUSELEAVE: "mouseleave" + EVENT_KEY$7,
          };
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Popover = /*#__PURE__*/ (function(_Tooltip) {
            _inheritsLoose(Popover, _Tooltip);

            function Popover() {
              return _Tooltip.apply(this, arguments) || this;
            }

            var _proto = Popover.prototype;

            // Overrides
            _proto.isWithContent = function isWithContent() {
              return this.getTitle() || this._getContent();
            };

            _proto.addAttachmentClass = function addAttachmentClass(
              attachment
            ) {
              $(this.getTipElement()).addClass(
                CLASS_PREFIX$1 + "-" + attachment
              );
            };

            _proto.getTipElement = function getTipElement() {
              this.tip = this.tip || $(this.config.template)[0];
              return this.tip;
            };

            _proto.setContent = function setContent() {
              var $tip = $(this.getTipElement()); // We use append for html objects to maintain js events

              this.setElementContent(
                $tip.find(SELECTOR_TITLE),
                this.getTitle()
              );

              var content = this._getContent();

              if (typeof content === "function") {
                content = content.call(this.element);
              }

              this.setElementContent($tip.find(SELECTOR_CONTENT), content);
              $tip.removeClass(CLASS_NAME_FADE$3 + " " + CLASS_NAME_SHOW$5);
            }; // Private

            _proto._getContent = function _getContent() {
              return (
                this.element.getAttribute("data-content") || this.config.content
              );
            };

            _proto._cleanTipClass = function _cleanTipClass() {
              var $tip = $(this.getTipElement());
              var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX$1);

              if (tabClass !== null && tabClass.length > 0) {
                $tip.removeClass(tabClass.join(""));
              }
            }; // Static

            Popover._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$7);

                var _config = typeof config === "object" ? config : null;

                if (!data && /dispose|hide/.test(config)) {
                  return;
                }

                if (!data) {
                  data = new Popover(this, _config);
                  $(this).data(DATA_KEY$7, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Popover, null, [
              {
                key: "VERSION",
                // Getters
                get: function get() {
                  return VERSION$7;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$5;
                },
              },
              {
                key: "NAME",
                get: function get() {
                  return NAME$7;
                },
              },
              {
                key: "DATA_KEY",
                get: function get() {
                  return DATA_KEY$7;
                },
              },
              {
                key: "Event",
                get: function get() {
                  return Event$1;
                },
              },
              {
                key: "EVENT_KEY",
                get: function get() {
                  return EVENT_KEY$7;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$5;
                },
              },
            ]);

            return Popover;
          })(Tooltip);
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$7] = Popover._jQueryInterface;
          $.fn[NAME$7].Constructor = Popover;

          $.fn[NAME$7].noConflict = function() {
            $.fn[NAME$7] = JQUERY_NO_CONFLICT$7;
            return Popover._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$8 = "scrollspy";
          var VERSION$8 = "4.5.0";
          var DATA_KEY$8 = "bs.scrollspy";
          var EVENT_KEY$8 = "." + DATA_KEY$8;
          var DATA_API_KEY$6 = ".data-api";
          var JQUERY_NO_CONFLICT$8 = $.fn[NAME$8];
          var Default$6 = {
            offset: 10,
            method: "auto",
            target: "",
          };
          var DefaultType$6 = {
            offset: "number",
            method: "string",
            target: "(string|element)",
          };
          var EVENT_ACTIVATE = "activate" + EVENT_KEY$8;
          var EVENT_SCROLL = "scroll" + EVENT_KEY$8;
          var EVENT_LOAD_DATA_API$2 = "load" + EVENT_KEY$8 + DATA_API_KEY$6;
          var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
          var CLASS_NAME_ACTIVE$2 = "active";
          var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
          var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
          var SELECTOR_NAV_LINKS = ".nav-link";
          var SELECTOR_NAV_ITEMS = ".nav-item";
          var SELECTOR_LIST_ITEMS = ".list-group-item";
          var SELECTOR_DROPDOWN = ".dropdown";
          var SELECTOR_DROPDOWN_ITEMS = ".dropdown-item";
          var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
          var METHOD_OFFSET = "offset";
          var METHOD_POSITION = "position";
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var ScrollSpy = /*#__PURE__*/ (function() {
            function ScrollSpy(element, config) {
              var _this = this;

              this._element = element;
              this._scrollElement =
                element.tagName === "BODY" ? window : element;
              this._config = this._getConfig(config);
              this._selector =
                this._config.target +
                " " +
                SELECTOR_NAV_LINKS +
                "," +
                (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") +
                (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
              this._offsets = [];
              this._targets = [];
              this._activeTarget = null;
              this._scrollHeight = 0;
              $(this._scrollElement).on(EVENT_SCROLL, function(event) {
                return _this._process(event);
              });
              this.refresh();

              this._process();
            } // Getters

            var _proto = ScrollSpy.prototype;

            // Public
            _proto.refresh = function refresh() {
              var _this2 = this;

              var autoMethod =
                this._scrollElement === this._scrollElement.window
                  ? METHOD_OFFSET
                  : METHOD_POSITION;
              var offsetMethod =
                this._config.method === "auto"
                  ? autoMethod
                  : this._config.method;
              var offsetBase =
                offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
              this._offsets = [];
              this._targets = [];
              this._scrollHeight = this._getScrollHeight();
              var targets = [].slice.call(
                document.querySelectorAll(this._selector)
              );
              targets
                .map(function(element) {
                  var target;
                  var targetSelector = Util.getSelectorFromElement(element);

                  if (targetSelector) {
                    target = document.querySelector(targetSelector);
                  }

                  if (target) {
                    var targetBCR = target.getBoundingClientRect();

                    if (targetBCR.width || targetBCR.height) {
                      // TODO (fat): remove sketch reliance on jQuery position/offset
                      return [
                        $(target)[offsetMethod]().top + offsetBase,
                        targetSelector,
                      ];
                    }
                  }

                  return null;
                })
                .filter(function(item) {
                  return item;
                })
                .sort(function(a, b) {
                  return a[0] - b[0];
                })
                .forEach(function(item) {
                  _this2._offsets.push(item[0]);

                  _this2._targets.push(item[1]);
                });
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY$8);
              $(this._scrollElement).off(EVENT_KEY$8);
              this._element = null;
              this._scrollElement = null;
              this._config = null;
              this._selector = null;
              this._offsets = null;
              this._targets = null;
              this._activeTarget = null;
              this._scrollHeight = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(
                _objectSpread2({}, Default$6),
                typeof config === "object" && config ? config : {}
              );

              if (
                typeof config.target !== "string" &&
                Util.isElement(config.target)
              ) {
                var id = $(config.target).attr("id");

                if (!id) {
                  id = Util.getUID(NAME$8);
                  $(config.target).attr("id", id);
                }

                config.target = "#" + id;
              }

              Util.typeCheckConfig(NAME$8, config, DefaultType$6);
              return config;
            };

            _proto._getScrollTop = function _getScrollTop() {
              return this._scrollElement === window
                ? this._scrollElement.pageYOffset
                : this._scrollElement.scrollTop;
            };

            _proto._getScrollHeight = function _getScrollHeight() {
              return (
                this._scrollElement.scrollHeight ||
                Math.max(
                  document.body.scrollHeight,
                  document.documentElement.scrollHeight
                )
              );
            };

            _proto._getOffsetHeight = function _getOffsetHeight() {
              return this._scrollElement === window
                ? window.innerHeight
                : this._scrollElement.getBoundingClientRect().height;
            };

            _proto._process = function _process() {
              var scrollTop = this._getScrollTop() + this._config.offset;

              var scrollHeight = this._getScrollHeight();

              var maxScroll =
                this._config.offset + scrollHeight - this._getOffsetHeight();

              if (this._scrollHeight !== scrollHeight) {
                this.refresh();
              }

              if (scrollTop >= maxScroll) {
                var target = this._targets[this._targets.length - 1];

                if (this._activeTarget !== target) {
                  this._activate(target);
                }

                return;
              }

              if (
                this._activeTarget &&
                scrollTop < this._offsets[0] &&
                this._offsets[0] > 0
              ) {
                this._activeTarget = null;

                this._clear();

                return;
              }

              for (var i = this._offsets.length; i--; ) {
                var isActiveTarget =
                  this._activeTarget !== this._targets[i] &&
                  scrollTop >= this._offsets[i] &&
                  (typeof this._offsets[i + 1] === "undefined" ||
                    scrollTop < this._offsets[i + 1]);

                if (isActiveTarget) {
                  this._activate(this._targets[i]);
                }
              }
            };

            _proto._activate = function _activate(target) {
              this._activeTarget = target;

              this._clear();

              var queries = this._selector.split(",").map(function(selector) {
                return (
                  selector +
                  '[data-target="' +
                  target +
                  '"],' +
                  selector +
                  '[href="' +
                  target +
                  '"]'
                );
              });

              var $link = $(
                [].slice.call(document.querySelectorAll(queries.join(",")))
              );

              if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
                $link
                  .closest(SELECTOR_DROPDOWN)
                  .find(SELECTOR_DROPDOWN_TOGGLE)
                  .addClass(CLASS_NAME_ACTIVE$2);
                $link.addClass(CLASS_NAME_ACTIVE$2);
              } else {
                // Set triggered link as active
                $link.addClass(CLASS_NAME_ACTIVE$2); // Set triggered links parents as active
                // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

                $link
                  .parents(SELECTOR_NAV_LIST_GROUP)
                  .prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS)
                  .addClass(CLASS_NAME_ACTIVE$2); // Handle special case when .nav-link is inside .nav-item

                $link
                  .parents(SELECTOR_NAV_LIST_GROUP)
                  .prev(SELECTOR_NAV_ITEMS)
                  .children(SELECTOR_NAV_LINKS)
                  .addClass(CLASS_NAME_ACTIVE$2);
              }

              $(this._scrollElement).trigger(EVENT_ACTIVATE, {
                relatedTarget: target,
              });
            };

            _proto._clear = function _clear() {
              [].slice
                .call(document.querySelectorAll(this._selector))
                .filter(function(node) {
                  return node.classList.contains(CLASS_NAME_ACTIVE$2);
                })
                .forEach(function(node) {
                  return node.classList.remove(CLASS_NAME_ACTIVE$2);
                });
            }; // Static

            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var data = $(this).data(DATA_KEY$8);

                var _config = typeof config === "object" && config;

                if (!data) {
                  data = new ScrollSpy(this, _config);
                  $(this).data(DATA_KEY$8, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(ScrollSpy, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$8;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$6;
                },
              },
            ]);

            return ScrollSpy;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(window).on(EVENT_LOAD_DATA_API$2, function() {
            var scrollSpys = [].slice.call(
              document.querySelectorAll(SELECTOR_DATA_SPY)
            );
            var scrollSpysLength = scrollSpys.length;

            for (var i = scrollSpysLength; i--; ) {
              var $spy = $(scrollSpys[i]);

              ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
          });
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$8] = ScrollSpy._jQueryInterface;
          $.fn[NAME$8].Constructor = ScrollSpy;

          $.fn[NAME$8].noConflict = function() {
            $.fn[NAME$8] = JQUERY_NO_CONFLICT$8;
            return ScrollSpy._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$9 = "tab";
          var VERSION$9 = "4.5.0";
          var DATA_KEY$9 = "bs.tab";
          var EVENT_KEY$9 = "." + DATA_KEY$9;
          var DATA_API_KEY$7 = ".data-api";
          var JQUERY_NO_CONFLICT$9 = $.fn[NAME$9];
          var EVENT_HIDE$3 = "hide" + EVENT_KEY$9;
          var EVENT_HIDDEN$3 = "hidden" + EVENT_KEY$9;
          var EVENT_SHOW$3 = "show" + EVENT_KEY$9;
          var EVENT_SHOWN$3 = "shown" + EVENT_KEY$9;
          var EVENT_CLICK_DATA_API$6 = "click" + EVENT_KEY$9 + DATA_API_KEY$7;
          var CLASS_NAME_DROPDOWN_MENU = "dropdown-menu";
          var CLASS_NAME_ACTIVE$3 = "active";
          var CLASS_NAME_DISABLED$1 = "disabled";
          var CLASS_NAME_FADE$4 = "fade";
          var CLASS_NAME_SHOW$6 = "show";
          var SELECTOR_DROPDOWN$1 = ".dropdown";
          var SELECTOR_NAV_LIST_GROUP$1 = ".nav, .list-group";
          var SELECTOR_ACTIVE$2 = ".active";
          var SELECTOR_ACTIVE_UL = "> li > .active";
          var SELECTOR_DATA_TOGGLE$4 =
            '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
          var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
          var SELECTOR_DROPDOWN_ACTIVE_CHILD = "> .dropdown-menu .active";
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Tab = /*#__PURE__*/ (function() {
            function Tab(element) {
              this._element = element;
            } // Getters

            var _proto = Tab.prototype;

            // Public
            _proto.show = function show() {
              var _this = this;

              if (
                (this._element.parentNode &&
                  this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
                  $(this._element).hasClass(CLASS_NAME_ACTIVE$3)) ||
                $(this._element).hasClass(CLASS_NAME_DISABLED$1)
              ) {
                return;
              }

              var target;
              var previous;
              var listElement = $(this._element).closest(
                SELECTOR_NAV_LIST_GROUP$1
              )[0];
              var selector = Util.getSelectorFromElement(this._element);

              if (listElement) {
                var itemSelector =
                  listElement.nodeName === "UL" || listElement.nodeName === "OL"
                    ? SELECTOR_ACTIVE_UL
                    : SELECTOR_ACTIVE$2;
                previous = $.makeArray($(listElement).find(itemSelector));
                previous = previous[previous.length - 1];
              }

              var hideEvent = $.Event(EVENT_HIDE$3, {
                relatedTarget: this._element,
              });
              var showEvent = $.Event(EVENT_SHOW$3, {
                relatedTarget: previous,
              });

              if (previous) {
                $(previous).trigger(hideEvent);
              }

              $(this._element).trigger(showEvent);

              if (
                showEvent.isDefaultPrevented() ||
                hideEvent.isDefaultPrevented()
              ) {
                return;
              }

              if (selector) {
                target = document.querySelector(selector);
              }

              this._activate(this._element, listElement);

              var complete = function complete() {
                var hiddenEvent = $.Event(EVENT_HIDDEN$3, {
                  relatedTarget: _this._element,
                });
                var shownEvent = $.Event(EVENT_SHOWN$3, {
                  relatedTarget: previous,
                });
                $(previous).trigger(hiddenEvent);
                $(_this._element).trigger(shownEvent);
              };

              if (target) {
                this._activate(target, target.parentNode, complete);
              } else {
                complete();
              }
            };

            _proto.dispose = function dispose() {
              $.removeData(this._element, DATA_KEY$9);
              this._element = null;
            }; // Private

            _proto._activate = function _activate(
              element,
              container,
              callback
            ) {
              var _this2 = this;

              var activeElements =
                container &&
                (container.nodeName === "UL" || container.nodeName === "OL")
                  ? $(container).find(SELECTOR_ACTIVE_UL)
                  : $(container).children(SELECTOR_ACTIVE$2);
              var active = activeElements[0];
              var isTransitioning =
                callback && active && $(active).hasClass(CLASS_NAME_FADE$4);

              var complete = function complete() {
                return _this2._transitionComplete(element, active, callback);
              };

              if (active && isTransitioning) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  active
                );
                $(active)
                  .removeClass(CLASS_NAME_SHOW$6)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            };

            _proto._transitionComplete = function _transitionComplete(
              element,
              active,
              callback
            ) {
              if (active) {
                $(active).removeClass(CLASS_NAME_ACTIVE$3);
                var dropdownChild = $(active.parentNode).find(
                  SELECTOR_DROPDOWN_ACTIVE_CHILD
                )[0];

                if (dropdownChild) {
                  $(dropdownChild).removeClass(CLASS_NAME_ACTIVE$3);
                }

                if (active.getAttribute("role") === "tab") {
                  active.setAttribute("aria-selected", false);
                }
              }

              $(element).addClass(CLASS_NAME_ACTIVE$3);

              if (element.getAttribute("role") === "tab") {
                element.setAttribute("aria-selected", true);
              }

              Util.reflow(element);

              if (element.classList.contains(CLASS_NAME_FADE$4)) {
                element.classList.add(CLASS_NAME_SHOW$6);
              }

              if (
                element.parentNode &&
                $(element.parentNode).hasClass(CLASS_NAME_DROPDOWN_MENU)
              ) {
                var dropdownElement = $(element).closest(
                  SELECTOR_DROPDOWN$1
                )[0];

                if (dropdownElement) {
                  var dropdownToggleList = [].slice.call(
                    dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE$1)
                  );
                  $(dropdownToggleList).addClass(CLASS_NAME_ACTIVE$3);
                }

                element.setAttribute("aria-expanded", true);
              }

              if (callback) {
                callback();
              }
            }; // Static

            Tab._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var $this = $(this);
                var data = $this.data(DATA_KEY$9);

                if (!data) {
                  data = new Tab(this);
                  $this.data(DATA_KEY$9, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config]();
                }
              });
            };

            _createClass(Tab, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$9;
                },
              },
            ]);

            return Tab;
          })();
          /**
           * ------------------------------------------------------------------------
           * Data Api implementation
           * ------------------------------------------------------------------------
           */

          $(document).on(
            EVENT_CLICK_DATA_API$6,
            SELECTOR_DATA_TOGGLE$4,
            function(event) {
              event.preventDefault();

              Tab._jQueryInterface.call($(this), "show");
            }
          );
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$9] = Tab._jQueryInterface;
          $.fn[NAME$9].Constructor = Tab;

          $.fn[NAME$9].noConflict = function() {
            $.fn[NAME$9] = JQUERY_NO_CONFLICT$9;
            return Tab._jQueryInterface;
          };

          /**
           * ------------------------------------------------------------------------
           * Constants
           * ------------------------------------------------------------------------
           */

          var NAME$a = "toast";
          var VERSION$a = "4.5.0";
          var DATA_KEY$a = "bs.toast";
          var EVENT_KEY$a = "." + DATA_KEY$a;
          var JQUERY_NO_CONFLICT$a = $.fn[NAME$a];
          var EVENT_CLICK_DISMISS$1 = "click.dismiss" + EVENT_KEY$a;
          var EVENT_HIDE$4 = "hide" + EVENT_KEY$a;
          var EVENT_HIDDEN$4 = "hidden" + EVENT_KEY$a;
          var EVENT_SHOW$4 = "show" + EVENT_KEY$a;
          var EVENT_SHOWN$4 = "shown" + EVENT_KEY$a;
          var CLASS_NAME_FADE$5 = "fade";
          var CLASS_NAME_HIDE = "hide";
          var CLASS_NAME_SHOW$7 = "show";
          var CLASS_NAME_SHOWING = "showing";
          var DefaultType$7 = {
            animation: "boolean",
            autohide: "boolean",
            delay: "number",
          };
          var Default$7 = {
            animation: true,
            autohide: true,
            delay: 500,
          };
          var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="toast"]';
          /**
           * ------------------------------------------------------------------------
           * Class Definition
           * ------------------------------------------------------------------------
           */

          var Toast = /*#__PURE__*/ (function() {
            function Toast(element, config) {
              this._element = element;
              this._config = this._getConfig(config);
              this._timeout = null;

              this._setListeners();
            } // Getters

            var _proto = Toast.prototype;

            // Public
            _proto.show = function show() {
              var _this = this;

              var showEvent = $.Event(EVENT_SHOW$4);
              $(this._element).trigger(showEvent);

              if (showEvent.isDefaultPrevented()) {
                return;
              }

              if (this._config.animation) {
                this._element.classList.add(CLASS_NAME_FADE$5);
              }

              var complete = function complete() {
                _this._element.classList.remove(CLASS_NAME_SHOWING);

                _this._element.classList.add(CLASS_NAME_SHOW$7);

                $(_this._element).trigger(EVENT_SHOWN$4);

                if (_this._config.autohide) {
                  _this._timeout = setTimeout(function() {
                    _this.hide();
                  }, _this._config.delay);
                }
              };

              this._element.classList.remove(CLASS_NAME_HIDE);

              Util.reflow(this._element);

              this._element.classList.add(CLASS_NAME_SHOWING);

              if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $(this._element)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            };

            _proto.hide = function hide() {
              if (!this._element.classList.contains(CLASS_NAME_SHOW$7)) {
                return;
              }

              var hideEvent = $.Event(EVENT_HIDE$4);
              $(this._element).trigger(hideEvent);

              if (hideEvent.isDefaultPrevented()) {
                return;
              }

              this._close();
            };

            _proto.dispose = function dispose() {
              clearTimeout(this._timeout);
              this._timeout = null;

              if (this._element.classList.contains(CLASS_NAME_SHOW$7)) {
                this._element.classList.remove(CLASS_NAME_SHOW$7);
              }

              $(this._element).off(EVENT_CLICK_DISMISS$1);
              $.removeData(this._element, DATA_KEY$a);
              this._element = null;
              this._config = null;
            }; // Private

            _proto._getConfig = function _getConfig(config) {
              config = _objectSpread2(
                _objectSpread2(
                  _objectSpread2({}, Default$7),
                  $(this._element).data()
                ),
                typeof config === "object" && config ? config : {}
              );
              Util.typeCheckConfig(
                NAME$a,
                config,
                this.constructor.DefaultType
              );
              return config;
            };

            _proto._setListeners = function _setListeners() {
              var _this2 = this;

              $(this._element).on(
                EVENT_CLICK_DISMISS$1,
                SELECTOR_DATA_DISMISS$1,
                function() {
                  return _this2.hide();
                }
              );
            };

            _proto._close = function _close() {
              var _this3 = this;

              var complete = function complete() {
                _this3._element.classList.add(CLASS_NAME_HIDE);

                $(_this3._element).trigger(EVENT_HIDDEN$4);
              };

              this._element.classList.remove(CLASS_NAME_SHOW$7);

              if (this._config.animation) {
                var transitionDuration = Util.getTransitionDurationFromElement(
                  this._element
                );
                $(this._element)
                  .one(Util.TRANSITION_END, complete)
                  .emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            }; // Static

            Toast._jQueryInterface = function _jQueryInterface(config) {
              return this.each(function() {
                var $element = $(this);
                var data = $element.data(DATA_KEY$a);

                var _config = typeof config === "object" && config;

                if (!data) {
                  data = new Toast(this, _config);
                  $element.data(DATA_KEY$a, data);
                }

                if (typeof config === "string") {
                  if (typeof data[config] === "undefined") {
                    throw new TypeError('No method named "' + config + '"');
                  }

                  data[config](this);
                }
              });
            };

            _createClass(Toast, null, [
              {
                key: "VERSION",
                get: function get() {
                  return VERSION$a;
                },
              },
              {
                key: "DefaultType",
                get: function get() {
                  return DefaultType$7;
                },
              },
              {
                key: "Default",
                get: function get() {
                  return Default$7;
                },
              },
            ]);

            return Toast;
          })();
          /**
           * ------------------------------------------------------------------------
           * jQuery
           * ------------------------------------------------------------------------
           */

          $.fn[NAME$a] = Toast._jQueryInterface;
          $.fn[NAME$a].Constructor = Toast;

          $.fn[NAME$a].noConflict = function() {
            $.fn[NAME$a] = JQUERY_NO_CONFLICT$a;
            return Toast._jQueryInterface;
          };

          exports.Alert = Alert;
          exports.Button = Button;
          exports.Carousel = Carousel;
          exports.Collapse = Collapse;
          exports.Dropdown = Dropdown;
          exports.Modal = Modal;
          exports.Popover = Popover;
          exports.Scrollspy = ScrollSpy;
          exports.Tab = Tab;
          exports.Toast = Toast;
          exports.Tooltip = Tooltip;
          exports.Util = Util;

          Object.defineProperty(exports, "__esModule", { value: true });
        });
        //# sourceMappingURL=bootstrap.js.map

        /***/
      },

    /***/ "./node_modules/can-use-dom/index.js":
      /*!*******************************************!*\
  !*** ./node_modules/can-use-dom/index.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var canUseDOM = !!(
          typeof window !== "undefined" &&
          window.document &&
          window.document.createElement
        );

        module.exports = canUseDOM;

        /***/
      },

    /***/ "./node_modules/core-js/internals/a-function.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(it) {
          if (typeof it != "function") {
            throw TypeError(String(it) + " is not a function");
          }
          return it;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/a-possible-prototype.js":
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );

        module.exports = function(it) {
          if (!isObject(it) && it !== null) {
            throw TypeError("Can't set " + String(it) + " as a prototype");
          }
          return it;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/add-to-unscopables.js":
      /*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var create = __webpack_require__(
          /*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js"
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        );

        var UNSCOPABLES = wellKnownSymbol("unscopables");
        var ArrayPrototype = Array.prototype;

        // Array.prototype[@@unscopables]
        // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
        if (ArrayPrototype[UNSCOPABLES] == undefined) {
          definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create(null),
          });
        }

        // add a key to Array.prototype[@@unscopables]
        module.exports = function(key) {
          ArrayPrototype[UNSCOPABLES][key] = true;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/advance-string-index.js":
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var charAt = __webpack_require__(
          /*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js"
        ).charAt;

        // `AdvanceStringIndex` abstract operation
        // https://tc39.github.io/ecma262/#sec-advancestringindex
        module.exports = function(S, index, unicode) {
          return index + (unicode ? charAt(S, index).length : 1);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/an-instance.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(it, Constructor, name) {
          if (!(it instanceof Constructor)) {
            throw TypeError(
              "Incorrect " + (name ? name + " " : "") + "invocation"
            );
          }
          return it;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/an-object.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );

        module.exports = function(it) {
          if (!isObject(it)) {
            throw TypeError(String(it) + " is not an object");
          }
          return it;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-for-each.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $forEach = __webpack_require__(
          /*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js"
        ).forEach;
        var arrayMethodIsStrict = __webpack_require__(
          /*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js"
        );
        var arrayMethodUsesToLength = __webpack_require__(
          /*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js"
        );

        var STRICT_METHOD = arrayMethodIsStrict("forEach");
        var USES_TO_LENGTH = arrayMethodUsesToLength("forEach");

        // `Array.prototype.forEach` method implementation
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        module.exports =
          !STRICT_METHOD || !USES_TO_LENGTH
            ? function forEach(callbackfn /* , thisArg */) {
                return $forEach(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              }
            : [].forEach;

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-includes.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );
        var toAbsoluteIndex = __webpack_require__(
          /*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js"
        );

        // `Array.prototype.{ indexOf, includes }` methods implementation
        var createMethod = function(IS_INCLUDES) {
          return function($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare
            if (IS_INCLUDES && el != el)
              while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare
                if (value != value) return true;
                // Array#indexOf ignores holes, Array#includes - not
              }
            else
              for (; length > index; index++) {
                if ((IS_INCLUDES || index in O) && O[index] === el)
                  return IS_INCLUDES || index || 0;
              }
            return !IS_INCLUDES && -1;
          };
        };

        module.exports = {
          // `Array.prototype.includes` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.includes
          includes: createMethod(true),
          // `Array.prototype.indexOf` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
          indexOf: createMethod(false),
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-iteration.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/array-iteration.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js"
        );
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js"
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );
        var arraySpeciesCreate = __webpack_require__(
          /*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js"
        );

        var push = [].push;

        // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
        var createMethod = function(TYPE) {
          var IS_MAP = TYPE == 1;
          var IS_FILTER = TYPE == 2;
          var IS_SOME = TYPE == 3;
          var IS_EVERY = TYPE == 4;
          var IS_FIND_INDEX = TYPE == 6;
          var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
          return function($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self = IndexedObject(O);
            var boundFunction = bind(callbackfn, that, 3);
            var length = toLength(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP
              ? create($this, length)
              : IS_FILTER
              ? create($this, 0)
              : undefined;
            var value, result;
            for (; length > index; index++)
              if (NO_HOLES || index in self) {
                value = self[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                  if (IS_MAP) target[index] = result;
                  // map
                  else if (result)
                    switch (TYPE) {
                      case 3:
                        return true; // some
                      case 5:
                        return value; // find
                      case 6:
                        return index; // findIndex
                      case 2:
                        push.call(target, value); // filter
                    }
                  else if (IS_EVERY) return false; // every
                }
              }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
          };
        };

        module.exports = {
          // `Array.prototype.forEach` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
          forEach: createMethod(0),
          // `Array.prototype.map` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.map
          map: createMethod(1),
          // `Array.prototype.filter` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.filter
          filter: createMethod(2),
          // `Array.prototype.some` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.some
          some: createMethod(3),
          // `Array.prototype.every` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.every
          every: createMethod(4),
          // `Array.prototype.find` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.find
          find: createMethod(5),
          // `Array.prototype.findIndex` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
          findIndex: createMethod(6),
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
      /*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var V8_VERSION = __webpack_require__(
          /*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js"
        );

        var SPECIES = wellKnownSymbol("species");

        module.exports = function(METHOD_NAME) {
          // We can't use this feature detection in V8 since it causes
          // deoptimization and serious performance degradation
          // https://github.com/zloirock/core-js/issues/677
          return (
            V8_VERSION >= 51 ||
            !fails(function() {
              var array = [];
              var constructor = (array.constructor = {});
              constructor[SPECIES] = function() {
                return { foo: 1 };
              };
              return array[METHOD_NAME](Boolean).foo !== 1;
            })
          );
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-method-is-strict.js":
      /*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!
  \******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        module.exports = function(METHOD_NAME, argument) {
          var method = [][METHOD_NAME];
          return (
            !!method &&
            fails(function() {
              // eslint-disable-next-line no-useless-call,no-throw-literal
              method.call(
                null,
                argument ||
                  function() {
                    throw 1;
                  },
                1
              );
            })
          );
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-method-uses-to-length.js":
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-uses-to-length.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );

        var defineProperty = Object.defineProperty;
        var cache = {};

        var thrower = function(it) {
          throw it;
        };

        module.exports = function(METHOD_NAME, options) {
          if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
          if (!options) options = {};
          var method = [][METHOD_NAME];
          var ACCESSORS = has(options, "ACCESSORS") ? options.ACCESSORS : false;
          var argument0 = has(options, 0) ? options[0] : thrower;
          var argument1 = has(options, 1) ? options[1] : undefined;

          return (cache[METHOD_NAME] =
            !!method &&
            !fails(function() {
              if (ACCESSORS && !DESCRIPTORS) return true;
              var O = { length: -1 };

              if (ACCESSORS)
                defineProperty(O, 1, { enumerable: true, get: thrower });
              else O[1] = 1;

              method.call(O, argument0, argument1);
            }));
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-reduce.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/array-reduce.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var aFunction = __webpack_require__(
          /*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js"
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js"
        );
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );

        // `Array.prototype.{ reduce, reduceRight }` methods implementation
        var createMethod = function(IS_RIGHT) {
          return function(that, callbackfn, argumentsLength, memo) {
            aFunction(callbackfn);
            var O = toObject(that);
            var self = IndexedObject(O);
            var length = toLength(O.length);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2)
              while (true) {
                if (index in self) {
                  memo = self[index];
                  index += i;
                  break;
                }
                index += i;
                if (IS_RIGHT ? index < 0 : length <= index) {
                  throw TypeError(
                    "Reduce of empty array with no initial value"
                  );
                }
              }
            for (; IS_RIGHT ? index >= 0 : length > index; index += i)
              if (index in self) {
                memo = callbackfn(memo, self[index], index, O);
              }
            return memo;
          };
        };

        module.exports = {
          // `Array.prototype.reduce` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
          left: createMethod(false),
          // `Array.prototype.reduceRight` method
          // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
          right: createMethod(true),
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/array-species-create.js":
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var isArray = __webpack_require__(
          /*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var SPECIES = wellKnownSymbol("species");

        // `ArraySpeciesCreate` abstract operation
        // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
        module.exports = function(originalArray, length) {
          var C;
          if (isArray(originalArray)) {
            C = originalArray.constructor;
            // cross-realm fallback
            if (typeof C == "function" && (C === Array || isArray(C.prototype)))
              C = undefined;
            else if (isObject(C)) {
              C = C[SPECIES];
              if (C === null) C = undefined;
            }
          }
          return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
      /*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );

        // call something on iterator step with safe closing on error
        module.exports = function(iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
            // 7.4.6 IteratorClose(iterator, completion)
          } catch (error) {
            var returnMethod = iterator["return"];
            if (returnMethod !== undefined)
              anObject(returnMethod.call(iterator));
            throw error;
          }
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
      /*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var ITERATOR = wellKnownSymbol("iterator");
        var SAFE_CLOSING = false;

        try {
          var called = 0;
          var iteratorWithReturn = {
            next: function() {
              return { done: !!called++ };
            },
            return: function() {
              SAFE_CLOSING = true;
            },
          };
          iteratorWithReturn[ITERATOR] = function() {
            return this;
          };
          // eslint-disable-next-line no-throw-literal
          Array.from(iteratorWithReturn, function() {
            throw 2;
          });
        } catch (error) {
          /* empty */
        }

        module.exports = function(exec, SKIP_CLOSING) {
          if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
          var ITERATION_SUPPORT = false;
          try {
            var object = {};
            object[ITERATOR] = function() {
              return {
                next: function() {
                  return { done: (ITERATION_SUPPORT = true) };
                },
              };
            };
            exec(object);
          } catch (error) {
            /* empty */
          }
          return ITERATION_SUPPORT;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/classof-raw.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var toString = {}.toString;

        module.exports = function(it) {
          return toString.call(it).slice(8, -1);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/classof.js":
      /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js"
        );
        var classofRaw = __webpack_require__(
          /*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        // ES3 wrong here
        var CORRECT_ARGUMENTS =
          classofRaw(
            (function() {
              return arguments;
            })()
          ) == "Arguments";

        // fallback for IE11 Script Access Denied error
        var tryGet = function(it, key) {
          try {
            return it[key];
          } catch (error) {
            /* empty */
          }
        };

        // getting tag from ES6+ `Object.prototype.toString`
        module.exports = TO_STRING_TAG_SUPPORT
          ? classofRaw
          : function(it) {
              var O, tag, result;
              return it === undefined
                ? "Undefined"
                : it === null
                ? "Null"
                : // @@toStringTag case
                typeof (tag = tryGet((O = Object(it)), TO_STRING_TAG)) ==
                  "string"
                ? tag
                : // builtinTag case
                CORRECT_ARGUMENTS
                ? classofRaw(O)
                : // ES3 arguments fallback
                (result = classofRaw(O)) == "Object" &&
                  typeof O.callee == "function"
                ? "Arguments"
                : result;
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/collection-weak.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/collection-weak.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var redefineAll = __webpack_require__(
          /*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js"
        );
        var getWeakData = __webpack_require__(
          /*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js"
        ).getWeakData;
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var anInstance = __webpack_require__(
          /*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js"
        );
        var iterate = __webpack_require__(
          /*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js"
        );
        var ArrayIterationModule = __webpack_require__(
          /*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js"
        );
        var $has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js"
        );

        var setInternalState = InternalStateModule.set;
        var internalStateGetterFor = InternalStateModule.getterFor;
        var find = ArrayIterationModule.find;
        var findIndex = ArrayIterationModule.findIndex;
        var id = 0;

        // fallback for uncaught frozen keys
        var uncaughtFrozenStore = function(store) {
          return store.frozen || (store.frozen = new UncaughtFrozenStore());
        };

        var UncaughtFrozenStore = function() {
          this.entries = [];
        };

        var findUncaughtFrozen = function(store, key) {
          return find(store.entries, function(it) {
            return it[0] === key;
          });
        };

        UncaughtFrozenStore.prototype = {
          get: function(key) {
            var entry = findUncaughtFrozen(this, key);
            if (entry) return entry[1];
          },
          has: function(key) {
            return !!findUncaughtFrozen(this, key);
          },
          set: function(key, value) {
            var entry = findUncaughtFrozen(this, key);
            if (entry) entry[1] = value;
            else this.entries.push([key, value]);
          },
          delete: function(key) {
            var index = findIndex(this.entries, function(it) {
              return it[0] === key;
            });
            if (~index) this.entries.splice(index, 1);
            return !!~index;
          },
        };

        module.exports = {
          getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var C = wrapper(function(that, iterable) {
              anInstance(that, C, CONSTRUCTOR_NAME);
              setInternalState(that, {
                type: CONSTRUCTOR_NAME,
                id: id++,
                frozen: undefined,
              });
              if (iterable != undefined)
                iterate(iterable, that[ADDER], that, IS_MAP);
            });

            var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

            var define = function(that, key, value) {
              var state = getInternalState(that);
              var data = getWeakData(anObject(key), true);
              if (data === true) uncaughtFrozenStore(state).set(key, value);
              else data[state.id] = value;
              return that;
            };

            redefineAll(C.prototype, {
              // 23.3.3.2 WeakMap.prototype.delete(key)
              // 23.4.3.3 WeakSet.prototype.delete(value)
              delete: function(key) {
                var state = getInternalState(this);
                if (!isObject(key)) return false;
                var data = getWeakData(key);
                if (data === true)
                  return uncaughtFrozenStore(state)["delete"](key);
                return data && $has(data, state.id) && delete data[state.id];
              },
              // 23.3.3.4 WeakMap.prototype.has(key)
              // 23.4.3.4 WeakSet.prototype.has(value)
              has: function has(key) {
                var state = getInternalState(this);
                if (!isObject(key)) return false;
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state).has(key);
                return data && $has(data, state.id);
              },
            });

            redefineAll(
              C.prototype,
              IS_MAP
                ? {
                    // 23.3.3.3 WeakMap.prototype.get(key)
                    get: function get(key) {
                      var state = getInternalState(this);
                      if (isObject(key)) {
                        var data = getWeakData(key);
                        if (data === true)
                          return uncaughtFrozenStore(state).get(key);
                        return data ? data[state.id] : undefined;
                      }
                    },
                    // 23.3.3.5 WeakMap.prototype.set(key, value)
                    set: function set(key, value) {
                      return define(this, key, value);
                    },
                  }
                : {
                    // 23.4.3.1 WeakSet.prototype.add(value)
                    add: function add(value) {
                      return define(this, value, true);
                    },
                  }
            );

            return C;
          },
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/collection.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/collection.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var isForced = __webpack_require__(
          /*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js"
        );
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );
        var InternalMetadataModule = __webpack_require__(
          /*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js"
        );
        var iterate = __webpack_require__(
          /*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js"
        );
        var anInstance = __webpack_require__(
          /*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var checkCorrectnessOfIteration = __webpack_require__(
          /*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js"
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js"
        );
        var inheritIfRequired = __webpack_require__(
          /*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js"
        );

        module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
          var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
          var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
          var ADDER = IS_MAP ? "set" : "add";
          var NativeConstructor = global[CONSTRUCTOR_NAME];
          var NativePrototype =
            NativeConstructor && NativeConstructor.prototype;
          var Constructor = NativeConstructor;
          var exported = {};

          var fixMethod = function(KEY) {
            var nativeMethod = NativePrototype[KEY];
            redefine(
              NativePrototype,
              KEY,
              KEY == "add"
                ? function add(value) {
                    nativeMethod.call(this, value === 0 ? 0 : value);
                    return this;
                  }
                : KEY == "delete"
                ? function(key) {
                    return IS_WEAK && !isObject(key)
                      ? false
                      : nativeMethod.call(this, key === 0 ? 0 : key);
                  }
                : KEY == "get"
                ? function get(key) {
                    return IS_WEAK && !isObject(key)
                      ? undefined
                      : nativeMethod.call(this, key === 0 ? 0 : key);
                  }
                : KEY == "has"
                ? function has(key) {
                    return IS_WEAK && !isObject(key)
                      ? false
                      : nativeMethod.call(this, key === 0 ? 0 : key);
                  }
                : function set(key, value) {
                    nativeMethod.call(this, key === 0 ? 0 : key, value);
                    return this;
                  }
            );
          };

          // eslint-disable-next-line max-len
          if (
            isForced(
              CONSTRUCTOR_NAME,
              typeof NativeConstructor != "function" ||
                !(
                  IS_WEAK ||
                  (NativePrototype.forEach &&
                    !fails(function() {
                      new NativeConstructor().entries().next();
                    }))
                )
            )
          ) {
            // create collection constructor
            Constructor = common.getConstructor(
              wrapper,
              CONSTRUCTOR_NAME,
              IS_MAP,
              ADDER
            );
            InternalMetadataModule.REQUIRED = true;
          } else if (isForced(CONSTRUCTOR_NAME, true)) {
            var instance = new Constructor();
            // early implementations not supports chaining
            var HASNT_CHAINING =
              instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
            // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
            var THROWS_ON_PRIMITIVES = fails(function() {
              instance.has(1);
            });
            // most early implementations doesn't supports iterables, most modern - not close it correctly
            // eslint-disable-next-line no-new
            var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(
              iterable
            ) {
              new NativeConstructor(iterable);
            });
            // for early implementations -0 and +0 not the same
            var BUGGY_ZERO =
              !IS_WEAK &&
              fails(function() {
                // V8 ~ Chromium 42- fails only with 5+ elements
                var $instance = new NativeConstructor();
                var index = 5;
                while (index--) $instance[ADDER](index, index);
                return !$instance.has(-0);
              });

            if (!ACCEPT_ITERABLES) {
              Constructor = wrapper(function(dummy, iterable) {
                anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
                var that = inheritIfRequired(
                  new NativeConstructor(),
                  dummy,
                  Constructor
                );
                if (iterable != undefined)
                  iterate(iterable, that[ADDER], that, IS_MAP);
                return that;
              });
              Constructor.prototype = NativePrototype;
              NativePrototype.constructor = Constructor;
            }

            if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
              fixMethod("delete");
              fixMethod("has");
              IS_MAP && fixMethod("get");
            }

            if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

            // weak collections should not contains .clear method
            if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
          }

          exported[CONSTRUCTOR_NAME] = Constructor;
          $(
            { global: true, forced: Constructor != NativeConstructor },
            exported
          );

          setToStringTag(Constructor, CONSTRUCTOR_NAME);

          if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

          return Constructor;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var ownKeys = __webpack_require__(
          /*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js"
        );
        var getOwnPropertyDescriptorModule = __webpack_require__(
          /*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js"
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        );

        module.exports = function(target, source) {
          var keys = ownKeys(source);
          var defineProperty = definePropertyModule.f;
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!has(target, key))
              defineProperty(
                target,
                key,
                getOwnPropertyDescriptor(source, key)
              );
          }
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        module.exports = !fails(function() {
          function F() {
            /* empty */
          }
          F.prototype.constructor = null;
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var IteratorPrototype = __webpack_require__(
          /*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js"
        ).IteratorPrototype;
        var create = __webpack_require__(
          /*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js"
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js"
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js"
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js"
        );

        var returnThis = function() {
          return this;
        };

        module.exports = function(IteratorConstructor, NAME, next) {
          var TO_STRING_TAG = NAME + " Iterator";
          IteratorConstructor.prototype = create(IteratorPrototype, {
            next: createPropertyDescriptor(1, next),
          });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
      /*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js"
        );

        module.exports = DESCRIPTORS
          ? function(object, key, value) {
              return definePropertyModule.f(
                object,
                key,
                createPropertyDescriptor(1, value)
              );
            }
          : function(object, key, value) {
              object[key] = value;
              return object;
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/create-property-descriptor.js":
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value,
          };
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/define-iterator.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var createIteratorConstructor = __webpack_require__(
          /*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js"
        );
        var getPrototypeOf = __webpack_require__(
          /*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js"
        );
        var setPrototypeOf = __webpack_require__(
          /*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js"
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js"
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js"
        );
        var IteratorsCore = __webpack_require__(
          /*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js"
        );

        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol("iterator");
        var KEYS = "keys";
        var VALUES = "values";
        var ENTRIES = "entries";

        var returnThis = function() {
          return this;
        };

        module.exports = function(
          Iterable,
          NAME,
          IteratorConstructor,
          next,
          DEFAULT,
          IS_SET,
          FORCED
        ) {
          createIteratorConstructor(IteratorConstructor, NAME, next);

          var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
              return IterablePrototype[KIND];
            switch (KIND) {
              case KEYS:
                return function keys() {
                  return new IteratorConstructor(this, KIND);
                };
              case VALUES:
                return function values() {
                  return new IteratorConstructor(this, KIND);
                };
              case ENTRIES:
                return function entries() {
                  return new IteratorConstructor(this, KIND);
                };
            }
            return function() {
              return new IteratorConstructor(this);
            };
          };

          var TO_STRING_TAG = NAME + " Iterator";
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator =
            IterablePrototype[ITERATOR] ||
            IterablePrototype["@@iterator"] ||
            (DEFAULT && IterablePrototype[DEFAULT]);
          var defaultIterator =
            (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
            getIterationMethod(DEFAULT);
          var anyNativeIterator =
            NAME == "Array"
              ? IterablePrototype.entries || nativeIterator
              : nativeIterator;
          var CurrentIteratorPrototype, methods, KEY;

          // fix native
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf(
              anyNativeIterator.call(new Iterable())
            );
            if (
              IteratorPrototype !== Object.prototype &&
              CurrentIteratorPrototype.next
            ) {
              if (
                !IS_PURE &&
                getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype
              ) {
                if (setPrototypeOf) {
                  setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                } else if (
                  typeof CurrentIteratorPrototype[ITERATOR] != "function"
                ) {
                  createNonEnumerableProperty(
                    CurrentIteratorPrototype,
                    ITERATOR,
                    returnThis
                  );
                }
              }
              // Set @@toStringTag to native iterators
              setToStringTag(
                CurrentIteratorPrototype,
                TO_STRING_TAG,
                true,
                true
              );
              if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
            }
          }

          // fix Array#{values, @@iterator}.name in V8 / FF
          if (
            DEFAULT == VALUES &&
            nativeIterator &&
            nativeIterator.name !== VALUES
          ) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return nativeIterator.call(this);
            };
          }

          // define iterator
          if (
            (!IS_PURE || FORCED) &&
            IterablePrototype[ITERATOR] !== defaultIterator
          ) {
            createNonEnumerableProperty(
              IterablePrototype,
              ITERATOR,
              defaultIterator
            );
          }
          Iterators[NAME] = defaultIterator;

          // export additional methods
          if (DEFAULT) {
            methods = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES),
            };
            if (FORCED)
              for (KEY in methods) {
                if (
                  BUGGY_SAFARI_ITERATORS ||
                  INCORRECT_VALUES_NAME ||
                  !(KEY in IterablePrototype)
                ) {
                  redefine(IterablePrototype, KEY, methods[KEY]);
                }
              }
            else
              $(
                {
                  target: NAME,
                  proto: true,
                  forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME,
                },
                methods
              );
          }

          return methods;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/descriptors.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        // Thank's IE8 for his funny defineProperty
        module.exports = !fails(function() {
          return (
            Object.defineProperty({}, 1, {
              get: function() {
                return 7;
              },
            })[1] != 7
          );
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/document-create-element.js":
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );

        var document = global.document;
        // typeof document.createElement is 'object' in old IE
        var EXISTS = isObject(document) && isObject(document.createElement);

        module.exports = function(it) {
          return EXISTS ? document.createElement(it) : {};
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/dom-iterables.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // iterable DOM collections
        // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
        module.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0,
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/engine-user-agent.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js"
        );

        module.exports = getBuiltIn("navigator", "userAgent") || "";

        /***/
      },

    /***/ "./node_modules/core-js/internals/engine-v8-version.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var userAgent = __webpack_require__(
          /*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js"
        );

        var process = global.process;
        var versions = process && process.versions;
        var v8 = versions && versions.v8;
        var match, version;

        if (v8) {
          match = v8.split(".");
          version = match[0] + match[1];
        } else if (userAgent) {
          match = userAgent.match(/Edge\/(\d+)/);
          if (!match || match[1] >= 74) {
            match = userAgent.match(/Chrome\/(\d+)/);
            if (match) version = match[1];
          }
        }

        module.exports = version && +version;

        /***/
      },

    /***/ "./node_modules/core-js/internals/enum-bug-keys.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // IE8- don't enum bug keys
        module.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf",
        ];

        /***/
      },

    /***/ "./node_modules/core-js/internals/export.js":
      /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var getOwnPropertyDescriptor = __webpack_require__(
          /*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js"
        ).f;
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );
        var setGlobal = __webpack_require__(
          /*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js"
        );
        var copyConstructorProperties = __webpack_require__(
          /*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js"
        );
        var isForced = __webpack_require__(
          /*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js"
        );

        /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
        module.exports = function(options, source) {
          var TARGET = options.target;
          var GLOBAL = options.global;
          var STATIC = options.stat;
          var FORCED, target, key, targetProperty, sourceProperty, descriptor;
          if (GLOBAL) {
            target = global;
          } else if (STATIC) {
            target = global[TARGET] || setGlobal(TARGET, {});
          } else {
            target = (global[TARGET] || {}).prototype;
          }
          if (target)
            for (key in source) {
              sourceProperty = source[key];
              if (options.noTargetGet) {
                descriptor = getOwnPropertyDescriptor(target, key);
                targetProperty = descriptor && descriptor.value;
              } else targetProperty = target[key];
              FORCED = isForced(
                GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
                options.forced
              );
              // contained in target
              if (!FORCED && targetProperty !== undefined) {
                if (typeof sourceProperty === typeof targetProperty) continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              // add a flag to not completely full polyfills
              if (options.sham || (targetProperty && targetProperty.sham)) {
                createNonEnumerableProperty(sourceProperty, "sham", true);
              }
              // extend global
              redefine(target, key, sourceProperty, options);
            }
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/fails.js":
      /*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(exec) {
          try {
            return !!exec();
          } catch (error) {
            return true;
          }
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
      /*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        // TODO: Remove from `core-js@4` since it's moved to entry points
        __webpack_require__(
          /*! ../modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js"
        );
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var regexpExec = __webpack_require__(
          /*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );

        var SPECIES = wellKnownSymbol("species");

        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
          // #replace needs built-in support for named groups.
          // #match works fine because it just return the exec results, even if it has
          // a "grops" property.
          var re = /./;
          re.exec = function() {
            var result = [];
            result.groups = { a: "7" };
            return result;
          };
          return "".replace(re, "$<a>") !== "7";
        });

        // IE <= 11 replaces $0 with the whole match, as if it was $&
        // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
        var REPLACE_KEEPS_$0 = (function() {
          return "a".replace(/./, "$0") === "$0";
        })();

        var REPLACE = wellKnownSymbol("replace");
        // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function() {
          if (/./[REPLACE]) {
            return /./[REPLACE]("a", "$0") === "";
          }
          return false;
        })();

        // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
        // Weex JS has frozen built-in prototypes, so use try / catch wrapper
        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
          var re = /(?:)/;
          var originalExec = re.exec;
          re.exec = function() {
            return originalExec.apply(this, arguments);
          };
          var result = "ab".split(re);
          return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
        });

        module.exports = function(KEY, length, exec, sham) {
          var SYMBOL = wellKnownSymbol(KEY);

          var DELEGATES_TO_SYMBOL = !fails(function() {
            // String methods call symbol-named RegEp methods
            var O = {};
            O[SYMBOL] = function() {
              return 7;
            };
            return ""[KEY](O) != 7;
          });

          var DELEGATES_TO_EXEC =
            DELEGATES_TO_SYMBOL &&
            !fails(function() {
              // Symbol-named RegExp methods call .exec
              var execCalled = false;
              var re = /a/;

              if (KEY === "split") {
                // We can't use real regex here since it causes deoptimization
                // and serious performance degradation in V8
                // https://github.com/zloirock/core-js/issues/306
                re = {};
                // RegExp[@@split] doesn't call the regex's exec method, but first creates
                // a new one. We need to return the patched regex when creating the new one.
                re.constructor = {};
                re.constructor[SPECIES] = function() {
                  return re;
                };
                re.flags = "";
                re[SYMBOL] = /./[SYMBOL];
              }

              re.exec = function() {
                execCalled = true;
                return null;
              };

              re[SYMBOL]("");
              return !execCalled;
            });

          if (
            !DELEGATES_TO_SYMBOL ||
            !DELEGATES_TO_EXEC ||
            (KEY === "replace" &&
              !(
                REPLACE_SUPPORTS_NAMED_GROUPS &&
                REPLACE_KEEPS_$0 &&
                !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
              )) ||
            (KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
          ) {
            var nativeRegExpMethod = /./[SYMBOL];
            var methods = exec(
              SYMBOL,
              ""[KEY],
              function(nativeMethod, regexp, str, arg2, forceStringMethod) {
                if (regexp.exec === regexpExec) {
                  if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                    // The native String method already delegates to @@method (this
                    // polyfilled function), leasing to infinite recursion.
                    // We avoid it by directly calling the native @@method method.
                    return {
                      done: true,
                      value: nativeRegExpMethod.call(regexp, str, arg2),
                    };
                  }
                  return {
                    done: true,
                    value: nativeMethod.call(str, regexp, arg2),
                  };
                }
                return { done: false };
              },
              {
                REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
                REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,
              }
            );
            var stringMethod = methods[0];
            var regexMethod = methods[1];

            redefine(String.prototype, KEY, stringMethod);
            redefine(
              RegExp.prototype,
              SYMBOL,
              length == 2
                ? // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                  // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                  function(string, arg) {
                    return regexMethod.call(string, this, arg);
                  }
                : // 21.2.5.6 RegExp.prototype[@@match](string)
                  // 21.2.5.9 RegExp.prototype[@@search](string)
                  function(string) {
                    return regexMethod.call(string, this);
                  }
            );
          }

          if (sham)
            createNonEnumerableProperty(RegExp.prototype[SYMBOL], "sham", true);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/freezing.js":
      /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/freezing.js ***!
  \****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        module.exports = !fails(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/function-bind-context.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-context.js ***!
  \*****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var aFunction = __webpack_require__(
          /*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js"
        );

        // optional / simple context binding
        module.exports = function(fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;
          switch (length) {
            case 0:
              return function() {
                return fn.call(that);
              };
            case 1:
              return function(a) {
                return fn.call(that, a);
              };
            case 2:
              return function(a, b) {
                return fn.call(that, a, b);
              };
            case 3:
              return function(a, b, c) {
                return fn.call(that, a, b, c);
              };
          }
          return function(/* ...args */) {
            return fn.apply(that, arguments);
          };
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/get-built-in.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var path = __webpack_require__(
          /*! ../internals/path */ "./node_modules/core-js/internals/path.js"
        );
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );

        var aFunction = function(variable) {
          return typeof variable == "function" ? variable : undefined;
        };

        module.exports = function(namespace, method) {
          return arguments.length < 2
            ? aFunction(path[namespace]) || aFunction(global[namespace])
            : (path[namespace] && path[namespace][method]) ||
                (global[namespace] && global[namespace][method]);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/get-iterator-method.js":
      /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var classof = __webpack_require__(
          /*! ../internals/classof */ "./node_modules/core-js/internals/classof.js"
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var ITERATOR = wellKnownSymbol("iterator");

        module.exports = function(it) {
          if (it != undefined)
            return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/global.js":
      /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          var check = function(it) {
            return it && it.Math == Math && it;
          };

          // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
          module.exports =
            // eslint-disable-next-line no-undef
            check(typeof globalThis == "object" && globalThis) ||
            check(typeof window == "object" && window) ||
            check(typeof self == "object" && self) ||
            check(typeof global == "object" && global) ||
            // eslint-disable-next-line no-new-func
            Function("return this")();

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/core-js/internals/has.js":
      /*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;

        module.exports = function(it, key) {
          return hasOwnProperty.call(it, key);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/hidden-keys.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = {};

        /***/
      },

    /***/ "./node_modules/core-js/internals/html.js":
      /*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js"
        );

        module.exports = getBuiltIn("document", "documentElement");

        /***/
      },

    /***/ "./node_modules/core-js/internals/ie8-dom-define.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var createElement = __webpack_require__(
          /*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js"
        );

        // Thank's IE8 for his funny defineProperty
        module.exports =
          !DESCRIPTORS &&
          !fails(function() {
            return (
              Object.defineProperty(createElement("div"), "a", {
                get: function() {
                  return 7;
                },
              }).a != 7
            );
          });

        /***/
      },

    /***/ "./node_modules/core-js/internals/indexed-object.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var classof = __webpack_require__(
          /*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js"
        );

        var split = "".split;

        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        module.exports = fails(function() {
          // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
          // eslint-disable-next-line no-prototype-builtins
          return !Object("z").propertyIsEnumerable(0);
        })
          ? function(it) {
              return classof(it) == "String" ? split.call(it, "") : Object(it);
            }
          : Object;

        /***/
      },

    /***/ "./node_modules/core-js/internals/inherit-if-required.js":
      /*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var setPrototypeOf = __webpack_require__(
          /*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js"
        );

        // makes subclassing work correct for wrapped built-ins
        module.exports = function($this, dummy, Wrapper) {
          var NewTarget, NewTargetPrototype;
          if (
            // it can work only with native `setPrototypeOf`
            setPrototypeOf &&
            // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
            typeof (NewTarget = dummy.constructor) == "function" &&
            NewTarget !== Wrapper &&
            isObject((NewTargetPrototype = NewTarget.prototype)) &&
            NewTargetPrototype !== Wrapper.prototype
          )
            setPrototypeOf($this, NewTargetPrototype);
          return $this;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/inspect-source.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var store = __webpack_require__(
          /*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js"
        );

        var functionToString = Function.toString;

        // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
        if (typeof store.inspectSource != "function") {
          store.inspectSource = function(it) {
            return functionToString.call(it);
          };
        }

        module.exports = store.inspectSource;

        /***/
      },

    /***/ "./node_modules/core-js/internals/internal-metadata.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/internal-metadata.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        ).f;
        var uid = __webpack_require__(
          /*! ../internals/uid */ "./node_modules/core-js/internals/uid.js"
        );
        var FREEZING = __webpack_require__(
          /*! ../internals/freezing */ "./node_modules/core-js/internals/freezing.js"
        );

        var METADATA = uid("meta");
        var id = 0;

        var isExtensible =
          Object.isExtensible ||
          function() {
            return true;
          };

        var setMetadata = function(it) {
          defineProperty(it, METADATA, {
            value: {
              objectID: "O" + ++id, // object ID
              weakData: {}, // weak collections IDs
            },
          });
        };

        var fastKey = function(it, create) {
          // return a primitive with prefix
          if (!isObject(it))
            return typeof it == "symbol"
              ? it
              : (typeof it == "string" ? "S" : "P") + it;
          if (!has(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return "F";
            // not necessary to add metadata
            if (!create) return "E";
            // add missing metadata
            setMetadata(it);
            // return object ID
          }
          return it[METADATA].objectID;
        };

        var getWeakData = function(it, create) {
          if (!has(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true;
            // not necessary to add metadata
            if (!create) return false;
            // add missing metadata
            setMetadata(it);
            // return the store of weak collections IDs
          }
          return it[METADATA].weakData;
        };

        // add metadata on freeze-family methods calling
        var onFreeze = function(it) {
          if (
            FREEZING &&
            meta.REQUIRED &&
            isExtensible(it) &&
            !has(it, METADATA)
          )
            setMetadata(it);
          return it;
        };

        var meta = (module.exports = {
          REQUIRED: false,
          fastKey: fastKey,
          getWeakData: getWeakData,
          onFreeze: onFreeze,
        });

        hiddenKeys[METADATA] = true;

        /***/
      },

    /***/ "./node_modules/core-js/internals/internal-state.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var NATIVE_WEAK_MAP = __webpack_require__(
          /*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js"
        );
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var objectHas = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js"
        );
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js"
        );

        var WeakMap = global.WeakMap;
        var set, get, has;

        var enforce = function(it) {
          return has(it) ? get(it) : set(it, {});
        };

        var getterFor = function(TYPE) {
          return function(it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) {
              throw TypeError("Incompatible receiver, " + TYPE + " required");
            }
            return state;
          };
        };

        if (NATIVE_WEAK_MAP) {
          var store = new WeakMap();
          var wmget = store.get;
          var wmhas = store.has;
          var wmset = store.set;
          set = function(it, metadata) {
            wmset.call(store, it, metadata);
            return metadata;
          };
          get = function(it) {
            return wmget.call(store, it) || {};
          };
          has = function(it) {
            return wmhas.call(store, it);
          };
        } else {
          var STATE = sharedKey("state");
          hiddenKeys[STATE] = true;
          set = function(it, metadata) {
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
          };
          get = function(it) {
            return objectHas(it, STATE) ? it[STATE] : {};
          };
          has = function(it) {
            return objectHas(it, STATE);
          };
        }

        module.exports = {
          set: set,
          get: get,
          has: has,
          enforce: enforce,
          getterFor: getterFor,
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js"
        );

        var ITERATOR = wellKnownSymbol("iterator");
        var ArrayPrototype = Array.prototype;

        // check on default Array iterator
        module.exports = function(it) {
          return (
            it !== undefined &&
            (Iterators.Array === it || ArrayPrototype[ITERATOR] === it)
          );
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/is-array.js":
      /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var classof = __webpack_require__(
          /*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js"
        );

        // `IsArray` abstract operation
        // https://tc39.github.io/ecma262/#sec-isarray
        module.exports =
          Array.isArray ||
          function isArray(arg) {
            return classof(arg) == "Array";
          };

        /***/
      },

    /***/ "./node_modules/core-js/internals/is-forced.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        var replacement = /#|\.prototype\./;

        var isForced = function(feature, detection) {
          var value = data[normalize(feature)];
          return value == POLYFILL
            ? true
            : value == NATIVE
            ? false
            : typeof detection == "function"
            ? fails(detection)
            : !!detection;
        };

        var normalize = (isForced.normalize = function(string) {
          return String(string)
            .replace(replacement, ".")
            .toLowerCase();
        });

        var data = (isForced.data = {});
        var NATIVE = (isForced.NATIVE = "N");
        var POLYFILL = (isForced.POLYFILL = "P");

        module.exports = isForced;

        /***/
      },

    /***/ "./node_modules/core-js/internals/is-object.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(it) {
          return typeof it === "object"
            ? it !== null
            : typeof it === "function";
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/is-pure.js":
      /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = false;

        /***/
      },

    /***/ "./node_modules/core-js/internals/iterate.js":
      /*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var isArrayIteratorMethod = __webpack_require__(
          /*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );
        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js"
        );
        var getIteratorMethod = __webpack_require__(
          /*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js"
        );
        var callWithSafeIterationClosing = __webpack_require__(
          /*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js"
        );

        var Result = function(stopped, result) {
          this.stopped = stopped;
          this.result = result;
        };

        var iterate = (module.exports = function(
          iterable,
          fn,
          that,
          AS_ENTRIES,
          IS_ITERATOR
        ) {
          var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
          var iterator, iterFn, index, length, result, next, step;

          if (IS_ITERATOR) {
            iterator = iterable;
          } else {
            iterFn = getIteratorMethod(iterable);
            if (typeof iterFn != "function")
              throw TypeError("Target is not iterable");
            // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
              for (
                index = 0, length = toLength(iterable.length);
                length > index;
                index++
              ) {
                result = AS_ENTRIES
                  ? boundFunction(
                      anObject((step = iterable[index]))[0],
                      step[1]
                    )
                  : boundFunction(iterable[index]);
                if (result && result instanceof Result) return result;
              }
              return new Result(false);
            }
            iterator = iterFn.call(iterable);
          }

          next = iterator.next;
          while (!(step = next.call(iterator)).done) {
            result = callWithSafeIterationClosing(
              iterator,
              boundFunction,
              step.value,
              AS_ENTRIES
            );
            if (typeof result == "object" && result && result instanceof Result)
              return result;
          }
          return new Result(false);
        });

        iterate.stop = function(result) {
          return new Result(true, result);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/iterators-core.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var getPrototypeOf = __webpack_require__(
          /*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js"
        );

        var ITERATOR = wellKnownSymbol("iterator");
        var BUGGY_SAFARI_ITERATORS = false;

        var returnThis = function() {
          return this;
        };

        // `%IteratorPrototype%` object
        // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

        if ([].keys) {
          arrayIterator = [].keys();
          // Safari 8 has buggy iterators w/o `next`
          if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf(
              getPrototypeOf(arrayIterator)
            );
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
              IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }

        if (IteratorPrototype == undefined) IteratorPrototype = {};

        // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
        if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
          createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
        }

        module.exports = {
          IteratorPrototype: IteratorPrototype,
          BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/iterators.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = {};

        /***/
      },

    /***/ "./node_modules/core-js/internals/native-symbol.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );

        module.exports =
          !!Object.getOwnPropertySymbols &&
          !fails(function() {
            // Chrome 38 Symbol has incorrect toString conversion
            // eslint-disable-next-line no-undef
            return !String(Symbol());
          });

        /***/
      },

    /***/ "./node_modules/core-js/internals/native-weak-map.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var inspectSource = __webpack_require__(
          /*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js"
        );

        var WeakMap = global.WeakMap;

        module.exports =
          typeof WeakMap === "function" &&
          /native code/.test(inspectSource(WeakMap));

        /***/
      },

    /***/ "./node_modules/core-js/internals/number-parse-int.js":
      /*!************************************************************!*\
  !*** ./node_modules/core-js/internals/number-parse-int.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var trim = __webpack_require__(
          /*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js"
        ).trim;
        var whitespaces = __webpack_require__(
          /*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js"
        );

        var $parseInt = global.parseInt;
        var hex = /^[+-]?0[Xx]/;
        var FORCED =
          $parseInt(whitespaces + "08") !== 8 ||
          $parseInt(whitespaces + "0x16") !== 22;

        // `parseInt` method
        // https://tc39.github.io/ecma262/#sec-parseint-string-radix
        module.exports = FORCED
          ? function parseInt(string, radix) {
              var S = trim(String(string));
              return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
            }
          : $parseInt;

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-assign.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ "./node_modules/core-js/internals/fails.js"
        );
        var objectKeys = __webpack_require__(
          /*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js"
        );
        var getOwnPropertySymbolsModule = __webpack_require__(
          /*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js"
        );
        var propertyIsEnumerableModule = __webpack_require__(
          /*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js"
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js"
        );
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js"
        );

        var nativeAssign = Object.assign;
        var defineProperty = Object.defineProperty;

        // `Object.assign` method
        // https://tc39.github.io/ecma262/#sec-object.assign
        module.exports =
          !nativeAssign ||
          fails(function() {
            // should have correct order of operations (Edge bug)
            if (
              DESCRIPTORS &&
              nativeAssign(
                { b: 1 },
                nativeAssign(
                  defineProperty({}, "a", {
                    enumerable: true,
                    get: function() {
                      defineProperty(this, "b", {
                        value: 3,
                        enumerable: false,
                      });
                    },
                  }),
                  { b: 2 }
                )
              ).b !== 1
            )
              return true;
            // should work with symbols and should have deterministic property order (V8 bug)
            var A = {};
            var B = {};
            // eslint-disable-next-line no-undef
            var symbol = Symbol();
            var alphabet = "abcdefghijklmnopqrst";
            A[symbol] = 7;
            alphabet.split("").forEach(function(chr) {
              B[chr] = chr;
            });
            return (
              nativeAssign({}, A)[symbol] != 7 ||
              objectKeys(nativeAssign({}, B)).join("") != alphabet
            );
          })
            ? function assign(target, source) {
                // eslint-disable-line no-unused-vars
                var T = toObject(target);
                var argumentsLength = arguments.length;
                var index = 1;
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                var propertyIsEnumerable = propertyIsEnumerableModule.f;
                while (argumentsLength > index) {
                  var S = IndexedObject(arguments[index++]);
                  var keys = getOwnPropertySymbols
                    ? objectKeys(S).concat(getOwnPropertySymbols(S))
                    : objectKeys(S);
                  var length = keys.length;
                  var j = 0;
                  var key;
                  while (length > j) {
                    key = keys[j++];
                    if (!DESCRIPTORS || propertyIsEnumerable.call(S, key))
                      T[key] = S[key];
                  }
                }
                return T;
              }
            : nativeAssign;

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-create.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var defineProperties = __webpack_require__(
          /*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js"
        );
        var enumBugKeys = __webpack_require__(
          /*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js"
        );
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js"
        );
        var html = __webpack_require__(
          /*! ../internals/html */ "./node_modules/core-js/internals/html.js"
        );
        var documentCreateElement = __webpack_require__(
          /*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js"
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js"
        );

        var GT = ">";
        var LT = "<";
        var PROTOTYPE = "prototype";
        var SCRIPT = "script";
        var IE_PROTO = sharedKey("IE_PROTO");

        var EmptyConstructor = function() {
          /* empty */
        };

        var scriptTag = function(content) {
          return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
        };

        // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
        var NullProtoObjectViaActiveX = function(activeXDocument) {
          activeXDocument.write(scriptTag(""));
          activeXDocument.close();
          var temp = activeXDocument.parentWindow.Object;
          activeXDocument = null; // avoid memory leak
          return temp;
        };

        // Create object with fake `null` prototype: use iframe Object with cleared prototype
        var NullProtoObjectViaIFrame = function() {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = documentCreateElement("iframe");
          var JS = "java" + SCRIPT + ":";
          var iframeDocument;
          iframe.style.display = "none";
          html.appendChild(iframe);
          // https://github.com/zloirock/core-js/issues/475
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag("document.F=Object"));
          iframeDocument.close();
          return iframeDocument.F;
        };

        // Check for document.domain and active x support
        // No need to use active x approach when document.domain is not set
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        // avoid IE GC bug
        var activeXDocument;
        var NullProtoObject = function() {
          try {
            /* global ActiveXObject */
            activeXDocument = document.domain && new ActiveXObject("htmlfile");
          } catch (error) {
            /* ignore */
          }
          NullProtoObject = activeXDocument
            ? NullProtoObjectViaActiveX(activeXDocument)
            : NullProtoObjectViaIFrame();
          var length = enumBugKeys.length;
          while (length--)
            delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };

        hiddenKeys[IE_PROTO] = true;

        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        module.exports =
          Object.create ||
          function create(O, Properties) {
            var result;
            if (O !== null) {
              EmptyConstructor[PROTOTYPE] = anObject(O);
              result = new EmptyConstructor();
              EmptyConstructor[PROTOTYPE] = null;
              // add "__proto__" for Object.getPrototypeOf polyfill
              result[IE_PROTO] = O;
            } else result = NullProtoObject();
            return Properties === undefined
              ? result
              : defineProperties(result, Properties);
          };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-define-properties.js":
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var objectKeys = __webpack_require__(
          /*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js"
        );

        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        module.exports = DESCRIPTORS
          ? Object.defineProperties
          : function defineProperties(O, Properties) {
              anObject(O);
              var keys = objectKeys(Properties);
              var length = keys.length;
              var index = 0;
              var key;
              while (length > index)
                definePropertyModule.f(
                  O,
                  (key = keys[index++]),
                  Properties[key]
                );
              return O;
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-define-property.js":
      /*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js"
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var toPrimitive = __webpack_require__(
          /*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js"
        );

        var nativeDefineProperty = Object.defineProperty;

        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        exports.f = DESCRIPTORS
          ? nativeDefineProperty
          : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeDefineProperty(O, P, Attributes);
                } catch (error) {
                  /* empty */
                }
              if ("get" in Attributes || "set" in Attributes)
                throw TypeError("Accessors not supported");
              if ("value" in Attributes) O[P] = Attributes.value;
              return O;
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
      /*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var propertyIsEnumerableModule = __webpack_require__(
          /*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js"
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js"
        );
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js"
        );
        var toPrimitive = __webpack_require__(
          /*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js"
        );

        var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
        exports.f = DESCRIPTORS
          ? nativeGetOwnPropertyDescriptor
          : function getOwnPropertyDescriptor(O, P) {
              O = toIndexedObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE)
                try {
                  return nativeGetOwnPropertyDescriptor(O, P);
                } catch (error) {
                  /* empty */
                }
              if (has(O, P))
                return createPropertyDescriptor(
                  !propertyIsEnumerableModule.f.call(O, P),
                  O[P]
                );
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var internalObjectKeys = __webpack_require__(
          /*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js"
        );
        var enumBugKeys = __webpack_require__(
          /*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js"
        );

        var hiddenKeys = enumBugKeys.concat("length", "prototype");

        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        exports.f =
          Object.getOwnPropertyNames ||
          function getOwnPropertyNames(O) {
            return internalObjectKeys(O, hiddenKeys);
          };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
      /*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        exports.f = Object.getOwnPropertySymbols;

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js"
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js"
        );
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
          /*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js"
        );

        var IE_PROTO = sharedKey("IE_PROTO");
        var ObjectPrototype = Object.prototype;

        // `Object.getPrototypeOf` method
        // https://tc39.github.io/ecma262/#sec-object.getprototypeof
        module.exports = CORRECT_PROTOTYPE_GETTER
          ? Object.getPrototypeOf
          : function(O) {
              O = toObject(O);
              if (has(O, IE_PROTO)) return O[IE_PROTO];
              if (
                typeof O.constructor == "function" &&
                O instanceof O.constructor
              ) {
                return O.constructor.prototype;
              }
              return O instanceof Object ? ObjectPrototype : null;
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-keys-internal.js":
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js"
        );
        var indexOf = __webpack_require__(
          /*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js"
        ).indexOf;
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js"
        );

        module.exports = function(object, names) {
          var O = toIndexedObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O)
            !has(hiddenKeys, key) && has(O, key) && result.push(key);
          // Don't enum bug & hidden keys
          while (names.length > i)
            if (has(O, (key = names[i++]))) {
              ~indexOf(result, key) || result.push(key);
            }
          return result;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-keys.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var internalObjectKeys = __webpack_require__(
          /*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js"
        );
        var enumBugKeys = __webpack_require__(
          /*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js"
        );

        // `Object.keys` method
        // https://tc39.github.io/ecma262/#sec-object.keys
        module.exports =
          Object.keys ||
          function keys(O) {
            return internalObjectKeys(O, enumBugKeys);
          };

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

        // Nashorn ~ JDK8 bug
        var NASHORN_BUG =
          getOwnPropertyDescriptor &&
          !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

        // `Object.prototype.propertyIsEnumerable` method implementation
        // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
        exports.f = NASHORN_BUG
          ? function propertyIsEnumerable(V) {
              var descriptor = getOwnPropertyDescriptor(this, V);
              return !!descriptor && descriptor.enumerable;
            }
          : nativePropertyIsEnumerable;

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var aPossiblePrototype = __webpack_require__(
          /*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js"
        );

        // `Object.setPrototypeOf` method
        // https://tc39.github.io/ecma262/#sec-object.setprototypeof
        // Works with __proto__ only. Old v8 can't work with null proto objects.
        /* eslint-disable no-proto */
        module.exports =
          Object.setPrototypeOf ||
          ("__proto__" in {}
            ? (function() {
                var CORRECT_SETTER = false;
                var test = {};
                var setter;
                try {
                  setter = Object.getOwnPropertyDescriptor(
                    Object.prototype,
                    "__proto__"
                  ).set;
                  setter.call(test, []);
                  CORRECT_SETTER = test instanceof Array;
                } catch (error) {
                  /* empty */
                }
                return function setPrototypeOf(O, proto) {
                  anObject(O);
                  aPossiblePrototype(proto);
                  if (CORRECT_SETTER) setter.call(O, proto);
                  else O.__proto__ = proto;
                  return O;
                };
              })()
            : undefined);

        /***/
      },

    /***/ "./node_modules/core-js/internals/object-to-string.js":
      /*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js"
        );
        var classof = __webpack_require__(
          /*! ../internals/classof */ "./node_modules/core-js/internals/classof.js"
        );

        // `Object.prototype.toString` method implementation
        // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
        module.exports = TO_STRING_TAG_SUPPORT
          ? {}.toString
          : function toString() {
              return "[object " + classof(this) + "]";
            };

        /***/
      },

    /***/ "./node_modules/core-js/internals/own-keys.js":
      /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js"
        );
        var getOwnPropertyNamesModule = __webpack_require__(
          /*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js"
        );
        var getOwnPropertySymbolsModule = __webpack_require__(
          /*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js"
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );

        // all object keys, includes non-enumerable and symbols
        module.exports =
          getBuiltIn("Reflect", "ownKeys") ||
          function ownKeys(it) {
            var keys = getOwnPropertyNamesModule.f(anObject(it));
            var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
            return getOwnPropertySymbols
              ? keys.concat(getOwnPropertySymbols(it))
              : keys;
          };

        /***/
      },

    /***/ "./node_modules/core-js/internals/path.js":
      /*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );

        module.exports = global;

        /***/
      },

    /***/ "./node_modules/core-js/internals/redefine-all.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/redefine-all.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );

        module.exports = function(target, src, options) {
          for (var key in src) redefine(target, key, src[key], options);
          return target;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/redefine.js":
      /*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var setGlobal = __webpack_require__(
          /*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js"
        );
        var inspectSource = __webpack_require__(
          /*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js"
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js"
        );

        var getInternalState = InternalStateModule.get;
        var enforceInternalState = InternalStateModule.enforce;
        var TEMPLATE = String(String).split("String");

        (module.exports = function(O, key, value, options) {
          var unsafe = options ? !!options.unsafe : false;
          var simple = options ? !!options.enumerable : false;
          var noTargetGet = options ? !!options.noTargetGet : false;
          if (typeof value == "function") {
            if (typeof key == "string" && !has(value, "name"))
              createNonEnumerableProperty(value, "name", key);
            enforceInternalState(value).source = TEMPLATE.join(
              typeof key == "string" ? key : ""
            );
          }
          if (O === global) {
            if (simple) O[key] = value;
            else setGlobal(key, value);
            return;
          } else if (!unsafe) {
            delete O[key];
          } else if (!noTargetGet && O[key]) {
            simple = true;
          }
          if (simple) O[key] = value;
          else createNonEnumerableProperty(O, key, value);
          // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
        })(Function.prototype, "toString", function toString() {
          return (
            (typeof this == "function" && getInternalState(this).source) ||
            inspectSource(this)
          );
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
      /*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var classof = __webpack_require__(
          /*! ./classof-raw */ "./node_modules/core-js/internals/classof-raw.js"
        );
        var regexpExec = __webpack_require__(
          /*! ./regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js"
        );

        // `RegExpExec` abstract operation
        // https://tc39.github.io/ecma262/#sec-regexpexec
        module.exports = function(R, S) {
          var exec = R.exec;
          if (typeof exec === "function") {
            var result = exec.call(R, S);
            if (typeof result !== "object") {
              throw TypeError(
                "RegExp exec method returned something other than an Object or null"
              );
            }
            return result;
          }

          if (classof(R) !== "RegExp") {
            throw TypeError("RegExp#exec called on incompatible receiver");
          }

          return regexpExec.call(R, S);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/regexp-exec.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var regexpFlags = __webpack_require__(
          /*! ./regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js"
        );
        var stickyHelpers = __webpack_require__(
          /*! ./regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js"
        );

        var nativeExec = RegExp.prototype.exec;
        // This always refers to the native implementation, because the
        // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
        // which loads this file before patching the method.
        var nativeReplace = String.prototype.replace;

        var patchedExec = nativeExec;

        var UPDATES_LAST_INDEX_WRONG = (function() {
          var re1 = /a/;
          var re2 = /b*/g;
          nativeExec.call(re1, "a");
          nativeExec.call(re2, "a");
          return re1.lastIndex !== 0 || re2.lastIndex !== 0;
        })();

        var UNSUPPORTED_Y =
          stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

        // nonparticipating capturing group, copied from es5-shim's String#split patch.
        var NPCG_INCLUDED = /()??/.exec("")[1] !== undefined;

        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

        if (PATCH) {
          patchedExec = function exec(str) {
            var re = this;
            var lastIndex, reCopy, match, i;
            var sticky = UNSUPPORTED_Y && re.sticky;
            var flags = regexpFlags.call(re);
            var source = re.source;
            var charsAdded = 0;
            var strCopy = str;

            if (sticky) {
              flags = flags.replace("y", "");
              if (flags.indexOf("g") === -1) {
                flags += "g";
              }

              strCopy = String(str).slice(re.lastIndex);
              // Support anchored sticky behavior.
              if (
                re.lastIndex > 0 &&
                (!re.multiline ||
                  (re.multiline && str[re.lastIndex - 1] !== "\n"))
              ) {
                source = "(?: " + source + ")";
                strCopy = " " + strCopy;
                charsAdded++;
              }
              // ^(? + rx + ) is needed, in combination with some str slicing, to
              // simulate the 'y' flag.
              reCopy = new RegExp("^(?:" + source + ")", flags);
            }

            if (NPCG_INCLUDED) {
              reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
            }
            if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

            match = nativeExec.call(sticky ? reCopy : re, strCopy);

            if (sticky) {
              if (match) {
                match.input = match.input.slice(charsAdded);
                match[0] = match[0].slice(charsAdded);
                match.index = re.lastIndex;
                re.lastIndex += match[0].length;
              } else re.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match) {
              re.lastIndex = re.global
                ? match.index + match[0].length
                : lastIndex;
            }
            if (NPCG_INCLUDED && match && match.length > 1) {
              // Fix browsers whose `exec` methods don't consistently return `undefined`
              // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
              nativeReplace.call(match[0], reCopy, function() {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === undefined) match[i] = undefined;
                }
              });
            }

            return match;
          };
        }

        module.exports = patchedExec;

        /***/
      },

    /***/ "./node_modules/core-js/internals/regexp-flags.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );

        // `RegExp.prototype.flags` getter implementation
        // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
        module.exports = function() {
          var that = anObject(this);
          var result = "";
          if (that.global) result += "g";
          if (that.ignoreCase) result += "i";
          if (that.multiline) result += "m";
          if (that.dotAll) result += "s";
          if (that.unicode) result += "u";
          if (that.sticky) result += "y";
          return result;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/regexp-sticky-helpers.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-sticky-helpers.js ***!
  \*****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fails = __webpack_require__(
          /*! ./fails */ "./node_modules/core-js/internals/fails.js"
        );

        // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
        // so we use an intermediate function.
        function RE(s, f) {
          return RegExp(s, f);
        }

        exports.UNSUPPORTED_Y = fails(function() {
          // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
          var re = RE("a", "y");
          re.lastIndex = 2;
          return re.exec("abcd") != null;
        });

        exports.BROKEN_CARET = fails(function() {
          // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
          var re = RE("^r", "gy");
          re.lastIndex = 2;
          return re.exec("str") != null;
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/require-object-coercible.js":
      /*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // `RequireObjectCoercible` abstract operation
        // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
        module.exports = function(it) {
          if (it == undefined) throw TypeError("Can't call method on " + it);
          return it;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/set-global.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );

        module.exports = function(key, value) {
          try {
            createNonEnumerableProperty(global, key, value);
          } catch (error) {
            global[key] = value;
          }
          return value;
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/set-to-string-tag.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        ).f;
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var TO_STRING_TAG = wellKnownSymbol("toStringTag");

        module.exports = function(it, TAG, STATIC) {
          if (it && !has((it = STATIC ? it : it.prototype), TO_STRING_TAG)) {
            defineProperty(it, TO_STRING_TAG, {
              configurable: true,
              value: TAG,
            });
          }
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/shared-key.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var shared = __webpack_require__(
          /*! ../internals/shared */ "./node_modules/core-js/internals/shared.js"
        );
        var uid = __webpack_require__(
          /*! ../internals/uid */ "./node_modules/core-js/internals/uid.js"
        );

        var keys = shared("keys");

        module.exports = function(key) {
          return keys[key] || (keys[key] = uid(key));
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/shared-store.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var setGlobal = __webpack_require__(
          /*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js"
        );

        var SHARED = "__core-js_shared__";
        var store = global[SHARED] || setGlobal(SHARED, {});

        module.exports = store;

        /***/
      },

    /***/ "./node_modules/core-js/internals/shared.js":
      /*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js"
        );
        var store = __webpack_require__(
          /*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js"
        );

        (module.exports = function(key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })("versions", []).push({
          version: "3.6.5",
          mode: IS_PURE ? "pure" : "global",
          copyright: "© 2020 Denis Pushkarev (zloirock.ru)",
        });

        /***/
      },

    /***/ "./node_modules/core-js/internals/string-multibyte.js":
      /*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(
          /*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js"
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );

        // `String.prototype.{ codePointAt, at }` methods implementation
        var createMethod = function(CONVERT_TO_STRING) {
          return function($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size)
              return CONVERT_TO_STRING ? "" : undefined;
            first = S.charCodeAt(position);
            return first < 0xd800 ||
              first > 0xdbff ||
              position + 1 === size ||
              (second = S.charCodeAt(position + 1)) < 0xdc00 ||
              second > 0xdfff
              ? CONVERT_TO_STRING
                ? S.charAt(position)
                : first
              : CONVERT_TO_STRING
              ? S.slice(position, position + 2)
              : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
          };
        };

        module.exports = {
          // `String.prototype.codePointAt` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
          codeAt: createMethod(false),
          // `String.prototype.at` method
          // https://github.com/mathiasbynens/String.prototype.at
          charAt: createMethod(true),
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/string-trim.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );
        var whitespaces = __webpack_require__(
          /*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js"
        );

        var whitespace = "[" + whitespaces + "]";
        var ltrim = RegExp("^" + whitespace + whitespace + "*");
        var rtrim = RegExp(whitespace + whitespace + "*$");

        // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
        var createMethod = function(TYPE) {
          return function($this) {
            var string = String(requireObjectCoercible($this));
            if (TYPE & 1) string = string.replace(ltrim, "");
            if (TYPE & 2) string = string.replace(rtrim, "");
            return string;
          };
        };

        module.exports = {
          // `String.prototype.{ trimLeft, trimStart }` methods
          // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
          start: createMethod(1),
          // `String.prototype.{ trimRight, trimEnd }` methods
          // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
          end: createMethod(2),
          // `String.prototype.trim` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.trim
          trim: createMethod(3),
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-absolute-index.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(
          /*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js"
        );

        var max = Math.max;
        var min = Math.min;

        // Helper for a popular repeating case of the spec:
        // Let integer be ? ToInteger(index).
        // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
        module.exports = function(index, length) {
          var integer = toInteger(index);
          return integer < 0 ? max(integer + length, 0) : min(integer, length);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-indexed-object.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        // toObject with fallback for non-array-like ES3 strings
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js"
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );

        module.exports = function(it) {
          return IndexedObject(requireObjectCoercible(it));
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-integer.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var ceil = Math.ceil;
        var floor = Math.floor;

        // `ToInteger` abstract operation
        // https://tc39.github.io/ecma262/#sec-tointeger
        module.exports = function(argument) {
          return isNaN((argument = +argument))
            ? 0
            : (argument > 0 ? floor : ceil)(argument);
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-length.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(
          /*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js"
        );

        var min = Math.min;

        // `ToLength` abstract operation
        // https://tc39.github.io/ecma262/#sec-tolength
        module.exports = function(argument) {
          return argument > 0 ? min(toInteger(argument), 0x1fffffffffffff) : 0; // 2 ** 53 - 1 == 9007199254740991
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-object.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );

        // `ToObject` abstract operation
        // https://tc39.github.io/ecma262/#sec-toobject
        module.exports = function(argument) {
          return Object(requireObjectCoercible(argument));
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-primitive.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );

        // `ToPrimitive` abstract operation
        // https://tc39.github.io/ecma262/#sec-toprimitive
        // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string
        module.exports = function(input, PREFERRED_STRING) {
          if (!isObject(input)) return input;
          var fn, val;
          if (
            PREFERRED_STRING &&
            typeof (fn = input.toString) == "function" &&
            !isObject((val = fn.call(input)))
          )
            return val;
          if (
            typeof (fn = input.valueOf) == "function" &&
            !isObject((val = fn.call(input)))
          )
            return val;
          if (
            !PREFERRED_STRING &&
            typeof (fn = input.toString) == "function" &&
            !isObject((val = fn.call(input)))
          )
            return val;
          throw TypeError("Can't convert object to primitive value");
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/to-string-tag-support.js":
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
  \*****************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var test = {};

        test[TO_STRING_TAG] = "z";

        module.exports = String(test) === "[object z]";

        /***/
      },

    /***/ "./node_modules/core-js/internals/uid.js":
      /*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var id = 0;
        var postfix = Math.random();

        module.exports = function(key) {
          return (
            "Symbol(" +
            String(key === undefined ? "" : key) +
            ")_" +
            (++id + postfix).toString(36)
          );
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var NATIVE_SYMBOL = __webpack_require__(
          /*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js"
        );

        module.exports =
          NATIVE_SYMBOL &&
          // eslint-disable-next-line no-undef
          !Symbol.sham &&
          // eslint-disable-next-line no-undef
          typeof Symbol.iterator == "symbol";

        /***/
      },

    /***/ "./node_modules/core-js/internals/well-known-symbol.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var shared = __webpack_require__(
          /*! ../internals/shared */ "./node_modules/core-js/internals/shared.js"
        );
        var has = __webpack_require__(
          /*! ../internals/has */ "./node_modules/core-js/internals/has.js"
        );
        var uid = __webpack_require__(
          /*! ../internals/uid */ "./node_modules/core-js/internals/uid.js"
        );
        var NATIVE_SYMBOL = __webpack_require__(
          /*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js"
        );
        var USE_SYMBOL_AS_UID = __webpack_require__(
          /*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js"
        );

        var WellKnownSymbolsStore = shared("wks");
        var Symbol = global.Symbol;
        var createWellKnownSymbol = USE_SYMBOL_AS_UID
          ? Symbol
          : (Symbol && Symbol.withoutSetter) || uid;

        module.exports = function(name) {
          if (!has(WellKnownSymbolsStore, name)) {
            if (NATIVE_SYMBOL && has(Symbol, name))
              WellKnownSymbolsStore[name] = Symbol[name];
            else
              WellKnownSymbolsStore[name] = createWellKnownSymbol(
                "Symbol." + name
              );
          }
          return WellKnownSymbolsStore[name];
        };

        /***/
      },

    /***/ "./node_modules/core-js/internals/whitespaces.js":
      /*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        // a string of all valid unicode whitespaces
        // eslint-disable-next-line max-len
        module.exports =
          "\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.array.filter.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var $filter = __webpack_require__(
          /*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js"
        ).filter;
        var arrayMethodHasSpeciesSupport = __webpack_require__(
          /*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js"
        );
        var arrayMethodUsesToLength = __webpack_require__(
          /*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js"
        );

        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
        // Edge 14- issue
        var USES_TO_LENGTH = arrayMethodUsesToLength("filter");

        // `Array.prototype.filter` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.filter
        // with adding support of @@species
        $(
          {
            target: "Array",
            proto: true,
            forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH,
          },
          {
            filter: function filter(callbackfn /* , thisArg */) {
              return $filter(
                this,
                callbackfn,
                arguments.length > 1 ? arguments[1] : undefined
              );
            },
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.array.for-each.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var forEach = __webpack_require__(
          /*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js"
        );

        // `Array.prototype.forEach` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        $(
          { target: "Array", proto: true, forced: [].forEach != forEach },
          {
            forEach: forEach,
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.array.iterator.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js"
        );
        var addToUnscopables = __webpack_require__(
          /*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js"
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js"
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js"
        );
        var defineIterator = __webpack_require__(
          /*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js"
        );

        var ARRAY_ITERATOR = "Array Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

        // `Array.prototype.entries` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.entries
        // `Array.prototype.keys` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.keys
        // `Array.prototype.values` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.values
        // `Array.prototype[@@iterator]` method
        // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
        // `CreateArrayIterator` internal method
        // https://tc39.github.io/ecma262/#sec-createarrayiterator
        module.exports = defineIterator(
          Array,
          "Array",
          function(iterated, kind) {
            setInternalState(this, {
              type: ARRAY_ITERATOR,
              target: toIndexedObject(iterated), // target
              index: 0, // next index
              kind: kind, // kind
            });
            // `%ArrayIteratorPrototype%.next` method
            // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
          },
          function() {
            var state = getInternalState(this);
            var target = state.target;
            var kind = state.kind;
            var index = state.index++;
            if (!target || index >= target.length) {
              state.target = undefined;
              return { value: undefined, done: true };
            }
            if (kind == "keys") return { value: index, done: false };
            if (kind == "values") return { value: target[index], done: false };
            return { value: [index, target[index]], done: false };
          },
          "values"
        );

        // argumentsList[@@iterator] is %ArrayProto_values%
        // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
        // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
        Iterators.Arguments = Iterators.Array;

        // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries");

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.array.reduce.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.reduce.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var $reduce = __webpack_require__(
          /*! ../internals/array-reduce */ "./node_modules/core-js/internals/array-reduce.js"
        ).left;
        var arrayMethodIsStrict = __webpack_require__(
          /*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js"
        );
        var arrayMethodUsesToLength = __webpack_require__(
          /*! ../internals/array-method-uses-to-length */ "./node_modules/core-js/internals/array-method-uses-to-length.js"
        );

        var STRICT_METHOD = arrayMethodIsStrict("reduce");
        var USES_TO_LENGTH = arrayMethodUsesToLength("reduce", { 1: 0 });

        // `Array.prototype.reduce` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
        $(
          {
            target: "Array",
            proto: true,
            forced: !STRICT_METHOD || !USES_TO_LENGTH,
          },
          {
            reduce: function reduce(callbackfn /* , initialValue */) {
              return $reduce(
                this,
                callbackfn,
                arguments.length,
                arguments.length > 1 ? arguments[1] : undefined
              );
            },
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.function.name.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.name.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js"
        );
        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js"
        ).f;

        var FunctionPrototype = Function.prototype;
        var FunctionPrototypeToString = FunctionPrototype.toString;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = "name";

        // Function instances `.name` property
        // https://tc39.github.io/ecma262/#sec-function-instances-name
        if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
          defineProperty(FunctionPrototype, NAME, {
            configurable: true,
            get: function() {
              try {
                return FunctionPrototypeToString.call(this).match(nameRE)[1];
              } catch (error) {
                return "";
              }
            },
          });
        }

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.object.assign.js":
      /*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var assign = __webpack_require__(
          /*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js"
        );

        // `Object.assign` method
        // https://tc39.github.io/ecma262/#sec-object.assign
        $(
          { target: "Object", stat: true, forced: Object.assign !== assign },
          {
            assign: assign,
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.object.to-string.js":
      /*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js"
        );
        var redefine = __webpack_require__(
          /*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js"
        );
        var toString = __webpack_require__(
          /*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js"
        );

        // `Object.prototype.toString` method
        // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
        if (!TO_STRING_TAG_SUPPORT) {
          redefine(Object.prototype, "toString", toString, { unsafe: true });
        }

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.parse-int.js":
      /*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.parse-int.js ***!
  \******************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var parseIntImplementation = __webpack_require__(
          /*! ../internals/number-parse-int */ "./node_modules/core-js/internals/number-parse-int.js"
        );

        // `parseInt` method
        // https://tc39.github.io/ecma262/#sec-parseint-string-radix
        $(
          { global: true, forced: parseInt != parseIntImplementation },
          {
            parseInt: parseIntImplementation,
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.regexp.exec.js":
      /*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var $ = __webpack_require__(
          /*! ../internals/export */ "./node_modules/core-js/internals/export.js"
        );
        var exec = __webpack_require__(
          /*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js"
        );

        $(
          { target: "RegExp", proto: true, forced: /./.exec !== exec },
          {
            exec: exec,
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.string.iterator.js":
      /*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var charAt = __webpack_require__(
          /*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js"
        ).charAt;
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js"
        );
        var defineIterator = __webpack_require__(
          /*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js"
        );

        var STRING_ITERATOR = "String Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

        // `String.prototype[@@iterator]` method
        // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
        defineIterator(
          String,
          "String",
          function(iterated) {
            setInternalState(this, {
              type: STRING_ITERATOR,
              string: String(iterated),
              index: 0,
            });
            // `%StringIteratorPrototype%.next` method
            // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
          },
          function next() {
            var state = getInternalState(this);
            var string = state.string;
            var index = state.index;
            var point;
            if (index >= string.length) return { value: undefined, done: true };
            point = charAt(string, index);
            state.index += point.length;
            return { value: point, done: false };
          }
        );

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.string.match.js":
      /*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.match.js ***!
  \*********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fixRegExpWellKnownSymbolLogic = __webpack_require__(
          /*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );
        var advanceStringIndex = __webpack_require__(
          /*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js"
        );
        var regExpExec = __webpack_require__(
          /*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js"
        );

        // @@match logic
        fixRegExpWellKnownSymbolLogic("match", 1, function(
          MATCH,
          nativeMatch,
          maybeCallNative
        ) {
          return [
            // `String.prototype.match` method
            // https://tc39.github.io/ecma262/#sec-string.prototype.match
            function match(regexp) {
              var O = requireObjectCoercible(this);
              var matcher = regexp == undefined ? undefined : regexp[MATCH];
              return matcher !== undefined
                ? matcher.call(regexp, O)
                : new RegExp(regexp)[MATCH](String(O));
            },
            // `RegExp.prototype[@@match]` method
            // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
            function(regexp) {
              var res = maybeCallNative(nativeMatch, regexp, this);
              if (res.done) return res.value;

              var rx = anObject(regexp);
              var S = String(this);

              if (!rx.global) return regExpExec(rx, S);

              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
              var A = [];
              var n = 0;
              var result;
              while ((result = regExpExec(rx, S)) !== null) {
                var matchStr = String(result[0]);
                A[n] = matchStr;
                if (matchStr === "")
                  rx.lastIndex = advanceStringIndex(
                    S,
                    toLength(rx.lastIndex),
                    fullUnicode
                  );
                n++;
              }
              return n === 0 ? null : A;
            },
          ];
        });

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.string.replace.js":
      /*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fixRegExpWellKnownSymbolLogic = __webpack_require__(
          /*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js"
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js"
        );
        var toLength = __webpack_require__(
          /*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js"
        );
        var toInteger = __webpack_require__(
          /*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js"
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js"
        );
        var advanceStringIndex = __webpack_require__(
          /*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js"
        );
        var regExpExec = __webpack_require__(
          /*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js"
        );

        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;
        var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

        var maybeToString = function(it) {
          return it === undefined ? it : String(it);
        };

        // @@replace logic
        fixRegExpWellKnownSymbolLogic("replace", 2, function(
          REPLACE,
          nativeReplace,
          maybeCallNative,
          reason
        ) {
          var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE =
            reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
          var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
          var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
            ? "$"
            : "$0";

          return [
            // `String.prototype.replace` method
            // https://tc39.github.io/ecma262/#sec-string.prototype.replace
            function replace(searchValue, replaceValue) {
              var O = requireObjectCoercible(this);
              var replacer =
                searchValue == undefined ? undefined : searchValue[REPLACE];
              return replacer !== undefined
                ? replacer.call(searchValue, O, replaceValue)
                : nativeReplace.call(String(O), searchValue, replaceValue);
            },
            // `RegExp.prototype[@@replace]` method
            // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
            function(regexp, replaceValue) {
              if (
                (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE &&
                  REPLACE_KEEPS_$0) ||
                (typeof replaceValue === "string" &&
                  replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
              ) {
                var res = maybeCallNative(
                  nativeReplace,
                  regexp,
                  this,
                  replaceValue
                );
                if (res.done) return res.value;
              }

              var rx = anObject(regexp);
              var S = String(this);

              var functionalReplace = typeof replaceValue === "function";
              if (!functionalReplace) replaceValue = String(replaceValue);

              var global = rx.global;
              if (global) {
                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
              }
              var results = [];
              while (true) {
                var result = regExpExec(rx, S);
                if (result === null) break;

                results.push(result);
                if (!global) break;

                var matchStr = String(result[0]);
                if (matchStr === "")
                  rx.lastIndex = advanceStringIndex(
                    S,
                    toLength(rx.lastIndex),
                    fullUnicode
                  );
              }

              var accumulatedResult = "";
              var nextSourcePosition = 0;
              for (var i = 0; i < results.length; i++) {
                result = results[i];

                var matched = String(result[0]);
                var position = max(min(toInteger(result.index), S.length), 0);
                var captures = [];
                // NOTE: This is equivalent to
                //   captures = result.slice(1).map(maybeToString)
                // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                for (var j = 1; j < result.length; j++)
                  captures.push(maybeToString(result[j]));
                var namedCaptures = result.groups;
                if (functionalReplace) {
                  var replacerArgs = [matched].concat(captures, position, S);
                  if (namedCaptures !== undefined)
                    replacerArgs.push(namedCaptures);
                  var replacement = String(
                    replaceValue.apply(undefined, replacerArgs)
                  );
                } else {
                  replacement = getSubstitution(
                    matched,
                    S,
                    position,
                    captures,
                    namedCaptures,
                    replaceValue
                  );
                }
                if (position >= nextSourcePosition) {
                  accumulatedResult +=
                    S.slice(nextSourcePosition, position) + replacement;
                  nextSourcePosition = position + matched.length;
                }
              }
              return accumulatedResult + S.slice(nextSourcePosition);
            },
          ];

          // https://tc39.github.io/ecma262/#sec-getsubstitution
          function getSubstitution(
            matched,
            str,
            position,
            captures,
            namedCaptures,
            replacement
          ) {
            var tailPos = position + matched.length;
            var m = captures.length;
            var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
            if (namedCaptures !== undefined) {
              namedCaptures = toObject(namedCaptures);
              symbols = SUBSTITUTION_SYMBOLS;
            }
            return nativeReplace.call(replacement, symbols, function(
              match,
              ch
            ) {
              var capture;
              switch (ch.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return matched;
                case "`":
                  return str.slice(0, position);
                case "'":
                  return str.slice(tailPos);
                case "<":
                  capture = namedCaptures[ch.slice(1, -1)];
                  break;
                default:
                  // \d\d?
                  var n = +ch;
                  if (n === 0) return match;
                  if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m)
                      return captures[f - 1] === undefined
                        ? ch.charAt(1)
                        : captures[f - 1] + ch.charAt(1);
                    return match;
                  }
                  capture = captures[n - 1];
              }
              return capture === undefined ? "" : capture;
            });
          }
        });

        /***/
      },

    /***/ "./node_modules/core-js/modules/es.weak-map.js":
      /*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es.weak-map.js ***!
  \*****************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var redefineAll = __webpack_require__(
          /*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js"
        );
        var InternalMetadataModule = __webpack_require__(
          /*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js"
        );
        var collection = __webpack_require__(
          /*! ../internals/collection */ "./node_modules/core-js/internals/collection.js"
        );
        var collectionWeak = __webpack_require__(
          /*! ../internals/collection-weak */ "./node_modules/core-js/internals/collection-weak.js"
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js"
        );
        var enforceIternalState = __webpack_require__(
          /*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js"
        ).enforce;
        var NATIVE_WEAK_MAP = __webpack_require__(
          /*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js"
        );

        var IS_IE11 = !global.ActiveXObject && "ActiveXObject" in global;
        var isExtensible = Object.isExtensible;
        var InternalWeakMap;

        var wrapper = function(init) {
          return function WeakMap() {
            return init(this, arguments.length ? arguments[0] : undefined);
          };
        };

        // `WeakMap` constructor
        // https://tc39.github.io/ecma262/#sec-weakmap-constructor
        var $WeakMap = (module.exports = collection(
          "WeakMap",
          wrapper,
          collectionWeak
        ));

        // IE11 WeakMap frozen keys fix
        // We can't use feature detection because it crash some old IE builds
        // https://github.com/zloirock/core-js/issues/485
        if (NATIVE_WEAK_MAP && IS_IE11) {
          InternalWeakMap = collectionWeak.getConstructor(
            wrapper,
            "WeakMap",
            true
          );
          InternalMetadataModule.REQUIRED = true;
          var WeakMapPrototype = $WeakMap.prototype;
          var nativeDelete = WeakMapPrototype["delete"];
          var nativeHas = WeakMapPrototype.has;
          var nativeGet = WeakMapPrototype.get;
          var nativeSet = WeakMapPrototype.set;
          redefineAll(WeakMapPrototype, {
            delete: function(key) {
              if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return (
                  nativeDelete.call(this, key) || state.frozen["delete"](key)
                );
              }
              return nativeDelete.call(this, key);
            },
            has: function has(key) {
              if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return nativeHas.call(this, key) || state.frozen.has(key);
              }
              return nativeHas.call(this, key);
            },
            get: function get(key) {
              if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                return nativeHas.call(this, key)
                  ? nativeGet.call(this, key)
                  : state.frozen.get(key);
              }
              return nativeGet.call(this, key);
            },
            set: function set(key, value) {
              if (isObject(key) && !isExtensible(key)) {
                var state = enforceIternalState(this);
                if (!state.frozen) state.frozen = new InternalWeakMap();
                nativeHas.call(this, key)
                  ? nativeSet.call(this, key, value)
                  : state.frozen.set(key, value);
              } else nativeSet.call(this, key, value);
              return this;
            },
          });
        }

        /***/
      },

    /***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var DOMIterables = __webpack_require__(
          /*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js"
        );
        var forEach = __webpack_require__(
          /*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );

        for (var COLLECTION_NAME in DOMIterables) {
          var Collection = global[COLLECTION_NAME];
          var CollectionPrototype = Collection && Collection.prototype;
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
            try {
              createNonEnumerableProperty(
                CollectionPrototype,
                "forEach",
                forEach
              );
            } catch (error) {
              CollectionPrototype.forEach = forEach;
            }
        }

        /***/
      },

    /***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var global = __webpack_require__(
          /*! ../internals/global */ "./node_modules/core-js/internals/global.js"
        );
        var DOMIterables = __webpack_require__(
          /*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js"
        );
        var ArrayIteratorMethods = __webpack_require__(
          /*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js"
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js"
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js"
        );

        var ITERATOR = wellKnownSymbol("iterator");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var ArrayValues = ArrayIteratorMethods.values;

        for (var COLLECTION_NAME in DOMIterables) {
          var Collection = global[COLLECTION_NAME];
          var CollectionPrototype = Collection && Collection.prototype;
          if (CollectionPrototype) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[ITERATOR] !== ArrayValues)
              try {
                createNonEnumerableProperty(
                  CollectionPrototype,
                  ITERATOR,
                  ArrayValues
                );
              } catch (error) {
                CollectionPrototype[ITERATOR] = ArrayValues;
              }
            if (!CollectionPrototype[TO_STRING_TAG]) {
              createNonEnumerableProperty(
                CollectionPrototype,
                TO_STRING_TAG,
                COLLECTION_NAME
              );
            }
            if (DOMIterables[COLLECTION_NAME])
              for (var METHOD_NAME in ArrayIteratorMethods) {
                // some Chrome versions have non-configurable methods on DOMTokenList
                if (
                  CollectionPrototype[METHOD_NAME] !==
                  ArrayIteratorMethods[METHOD_NAME]
                )
                  try {
                    createNonEnumerableProperty(
                      CollectionPrototype,
                      METHOD_NAME,
                      ArrayIteratorMethods[METHOD_NAME]
                    );
                  } catch (error) {
                    CollectionPrototype[METHOD_NAME] =
                      ArrayIteratorMethods[METHOD_NAME];
                  }
              }
          }
        }

        /***/
      },

    /***/ "./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js":
      /*!*********************************************************************!*\
  !*** ./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js ***!
  \*********************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*! DataTables Bootstrap 4 integration
         * ©2011-2017 SpryMedia Ltd - datatables.net/license
         */

        /**
         * DataTables integration for Bootstrap 4. This requires Bootstrap 4 and
         * DataTables 1.10 or newer.
         *
         * This file sets the defaults and adds options to DataTables to style its
         * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
         * for further information.
         */
        (function(factory) {
          if (true) {
            // AMD
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
              __webpack_require__(
                /*! jquery */ "./node_modules/jquery/dist/jquery.js"
              ),
              __webpack_require__(
                /*! datatables.net */ "./node_modules/datatables.net/js/jquery.dataTables.js"
              ),
            ]),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function($) {
              return factory($, window, document);
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(function($, window, document, undefined) {
          "use strict";
          var DataTable = $.fn.dataTable;

          /* Set the defaults for DataTables initialisation */
          $.extend(true, DataTable.defaults, {
            dom:
              "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
              "<'row'<'col-sm-12'tr>>" +
              "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
            renderer: "bootstrap",
          });

          /* Default class modification */
          $.extend(DataTable.ext.classes, {
            sWrapper: "dataTables_wrapper dt-bootstrap4",
            sFilterInput: "form-control form-control-sm",
            sLengthSelect:
              "custom-select custom-select-sm form-control form-control-sm",
            sProcessing: "dataTables_processing card",
            sPageButton: "paginate_button page-item",
          });

          /* Bootstrap paging button renderer */
          DataTable.ext.renderer.pageButton.bootstrap = function(
            settings,
            host,
            idx,
            buttons,
            page,
            pages
          ) {
            var api = new DataTable.Api(settings);
            var classes = settings.oClasses;
            var lang = settings.oLanguage.oPaginate;
            var aria = settings.oLanguage.oAria.paginate || {};
            var btnDisplay,
              btnClass,
              counter = 0;

            var attach = function(container, buttons) {
              var i, ien, node, button;
              var clickHandler = function(e) {
                e.preventDefault();
                if (
                  !$(e.currentTarget).hasClass("disabled") &&
                  api.page() != e.data.action
                ) {
                  api.page(e.data.action).draw("page");
                }
              };

              for (i = 0, ien = buttons.length; i < ien; i++) {
                button = buttons[i];

                if ($.isArray(button)) {
                  attach(container, button);
                } else {
                  btnDisplay = "";
                  btnClass = "";

                  switch (button) {
                    case "ellipsis":
                      btnDisplay = "&#x2026;";
                      btnClass = "disabled";
                      break;

                    case "first":
                      btnDisplay = lang.sFirst;
                      btnClass = button + (page > 0 ? "" : " disabled");
                      break;

                    case "previous":
                      btnDisplay = lang.sPrevious;
                      btnClass = button + (page > 0 ? "" : " disabled");
                      break;

                    case "next":
                      btnDisplay = lang.sNext;
                      btnClass = button + (page < pages - 1 ? "" : " disabled");
                      break;

                    case "last":
                      btnDisplay = lang.sLast;
                      btnClass = button + (page < pages - 1 ? "" : " disabled");
                      break;

                    default:
                      btnDisplay = button + 1;
                      btnClass = page === button ? "active" : "";
                      break;
                  }

                  if (btnDisplay) {
                    node = $("<li>", {
                      class: classes.sPageButton + " " + btnClass,
                      id:
                        idx === 0 && typeof button === "string"
                          ? settings.sTableId + "_" + button
                          : null,
                    })
                      .append(
                        $("<a>", {
                          href: "#",
                          "aria-controls": settings.sTableId,
                          "aria-label": aria[button],
                          "data-dt-idx": counter,
                          tabindex: settings.iTabIndex,
                          class: "page-link",
                        }).html(btnDisplay)
                      )
                      .appendTo(container);

                    settings.oApi._fnBindAction(
                      node,
                      { action: button },
                      clickHandler
                    );

                    counter++;
                  }
                }
              }
            };

            // IE9 throws an 'unknown error' if document.activeElement is used
            // inside an iframe or frame.
            var activeEl;

            try {
              // Because this approach is destroying and recreating the paging
              // elements, focus is lost on the select button which is bad for
              // accessibility. So we want to restore focus once the draw has
              // completed
              activeEl = $(host)
                .find(document.activeElement)
                .data("dt-idx");
            } catch (e) {}

            attach(
              $(host)
                .empty()
                .html('<ul class="pagination"/>')
                .children("ul"),
              buttons
            );

            if (activeEl !== undefined) {
              $(host)
                .find("[data-dt-idx=" + activeEl + "]")
                .trigger("focus");
            }
          };

          return DataTable;
        });

        /***/
      },

    /***/ "./node_modules/datatables.net-responsive-bs4/js/responsive.bootstrap4.js":
      /*!********************************************************************************!*\
  !*** ./node_modules/datatables.net-responsive-bs4/js/responsive.bootstrap4.js ***!
  \********************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*! Bootstrap 4 integration for DataTables' Responsive
         * ©2016 SpryMedia Ltd - datatables.net/license
         */

        (function(factory) {
          if (true) {
            // AMD
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
              __webpack_require__(
                /*! jquery */ "./node_modules/jquery/dist/jquery.js"
              ),
              __webpack_require__(
                /*! datatables.net-bs4 */ "./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js"
              ),
              __webpack_require__(
                /*! datatables.net-responsive */ "./node_modules/datatables.net-responsive/js/dataTables.responsive.js"
              ),
            ]),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function($) {
              return factory($, window, document);
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(function($, window, document, undefined) {
          "use strict";
          var DataTable = $.fn.dataTable;

          var _display = DataTable.Responsive.display;
          var _original = _display.modal;
          var _modal = $(
            '<div class="modal fade dtr-bs-modal" role="dialog">' +
              '<div class="modal-dialog" role="document">' +
              '<div class="modal-content">' +
              '<div class="modal-header">' +
              '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>' +
              "</div>" +
              '<div class="modal-body"/>' +
              "</div>" +
              "</div>" +
              "</div>"
          );

          _display.modal = function(options) {
            return function(row, update, render) {
              if (!$.fn.modal) {
                _original(row, update, render);
              } else {
                if (!update) {
                  if (options && options.header) {
                    var header = _modal.find("div.modal-header");
                    var button = header.find("button").detach();

                    header
                      .empty()
                      .append(
                        '<h4 class="modal-title">' +
                          options.header(row) +
                          "</h4>"
                      )
                      .append(button);
                  }

                  _modal
                    .find("div.modal-body")
                    .empty()
                    .append(render());

                  _modal.appendTo("body").modal();
                }
              }
            };
          };

          return DataTable.Responsive;
        });

        /***/
      },

    /***/ "./node_modules/datatables.net-responsive/js/dataTables.responsive.js":
      /*!****************************************************************************!*\
  !*** ./node_modules/datatables.net-responsive/js/dataTables.responsive.js ***!
  \****************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*! Responsive 2.2.4
         * 2014-2020 SpryMedia Ltd - datatables.net/license
         */

        /**
         * @summary     Responsive
         * @description Responsive tables plug-in for DataTables
         * @version     2.2.4
         * @file        dataTables.responsive.js
         * @author      SpryMedia Ltd (www.sprymedia.co.uk)
         * @contact     www.sprymedia.co.uk/contact
         * @copyright   Copyright 2014-2020 SpryMedia Ltd.
         *
         * This source file is free software, available under the following license:
         *   MIT license - http://datatables.net/license/mit
         *
         * This source file is distributed in the hope that it will be useful, but
         * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
         * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
         *
         * For details please refer to: http://www.datatables.net
         */
        (function(factory) {
          if (true) {
            // AMD
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
              __webpack_require__(
                /*! jquery */ "./node_modules/jquery/dist/jquery.js"
              ),
              __webpack_require__(
                /*! datatables.net */ "./node_modules/datatables.net/js/jquery.dataTables.js"
              ),
            ]),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function($) {
              return factory($, window, document);
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(function($, window, document, undefined) {
          "use strict";
          var DataTable = $.fn.dataTable;

          /**
           * Responsive is a plug-in for the DataTables library that makes use of
           * DataTables' ability to change the visibility of columns, changing the
           * visibility of columns so the displayed columns fit into the table container.
           * The end result is that complex tables will be dynamically adjusted to fit
           * into the viewport, be it on a desktop, tablet or mobile browser.
           *
           * Responsive for DataTables has two modes of operation, which can used
           * individually or combined:
           *
           * * Class name based control - columns assigned class names that match the
           *   breakpoint logic can be shown / hidden as required for each breakpoint.
           * * Automatic control - columns are automatically hidden when there is no
           *   room left to display them. Columns removed from the right.
           *
           * In additional to column visibility control, Responsive also has built into
           * options to use DataTables' child row display to show / hide the information
           * from the table that has been hidden. There are also two modes of operation
           * for this child row display:
           *
           * * Inline - when the control element that the user can use to show / hide
           *   child rows is displayed inside the first column of the table.
           * * Column - where a whole column is dedicated to be the show / hide control.
           *
           * Initialisation of Responsive is performed by:
           *
           * * Adding the class `responsive` or `dt-responsive` to the table. In this case
           *   Responsive will automatically be initialised with the default configuration
           *   options when the DataTable is created.
           * * Using the `responsive` option in the DataTables configuration options. This
           *   can also be used to specify the configuration options, or simply set to
           *   `true` to use the defaults.
           *
           *  @class
           *  @param {object} settings DataTables settings object for the host table
           *  @param {object} [opts] Configuration options
           *  @requires jQuery 1.7+
           *  @requires DataTables 1.10.3+
           *
           *  @example
           *      $('#example').DataTable( {
           *        responsive: true
           *      } );
           *    } );
           */
          var Responsive = function(settings, opts) {
            // Sanity check that we are using DataTables 1.10 or newer
            if (!DataTable.versionCheck || !DataTable.versionCheck("1.10.10")) {
              throw "DataTables Responsive requires DataTables 1.10.10 or newer";
            }

            this.s = {
              dt: new DataTable.Api(settings),
              columns: [],
              current: [],
            };

            // Check if responsive has already been initialised on this table
            if (this.s.dt.settings()[0].responsive) {
              return;
            }

            // details is an object, but for simplicity the user can give it as a string
            // or a boolean
            if (opts && typeof opts.details === "string") {
              opts.details = { type: opts.details };
            } else if (opts && opts.details === false) {
              opts.details = { type: false };
            } else if (opts && opts.details === true) {
              opts.details = { type: "inline" };
            }

            this.c = $.extend(
              true,
              {},
              Responsive.defaults,
              DataTable.defaults.responsive,
              opts
            );
            settings.responsive = this;
            this._constructor();
          };

          $.extend(Responsive.prototype, {
            /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
             * Constructor
             */

            /**
             * Initialise the Responsive instance
             *
             * @private
             */
            _constructor: function() {
              var that = this;
              var dt = this.s.dt;
              var dtPrivateSettings = dt.settings()[0];
              var oldWindowWidth = $(window).innerWidth();

              dt.settings()[0]._responsive = this;

              // Use DataTables' throttle function to avoid processor thrashing on
              // resize
              $(window).on(
                "resize.dtr orientationchange.dtr",
                DataTable.util.throttle(function() {
                  // iOS has a bug whereby resize can fire when only scrolling
                  // See: http://stackoverflow.com/questions/8898412
                  var width = $(window).innerWidth();

                  if (width !== oldWindowWidth) {
                    that._resize();
                    oldWindowWidth = width;
                  }
                })
              );

              // DataTables doesn't currently trigger an event when a row is added, so
              // we need to hook into its private API to enforce the hidden rows when
              // new data is added
              dtPrivateSettings.oApi._fnCallbackReg(
                dtPrivateSettings,
                "aoRowCreatedCallback",
                function(tr, data, idx) {
                  if ($.inArray(false, that.s.current) !== -1) {
                    $(">td, >th", tr).each(function(i) {
                      var idx = dt.column.index("toData", i);

                      if (that.s.current[idx] === false) {
                        $(this).css("display", "none");
                      }
                    });
                  }
                }
              );

              // Destroy event handler
              dt.on("destroy.dtr", function() {
                dt.off(".dtr");
                $(dt.table().body()).off(".dtr");
                $(window).off("resize.dtr orientationchange.dtr");
                dt.cells(".dtr-control")
                  .nodes()
                  .to$()
                  .removeClass("dtr-control");

                // Restore the columns that we've hidden
                $.each(that.s.current, function(i, val) {
                  if (val === false) {
                    that._setColumnVis(i, true);
                  }
                });
              });

              // Reorder the breakpoints array here in case they have been added out
              // of order
              this.c.breakpoints.sort(function(a, b) {
                return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
              });

              this._classLogic();
              this._resizeAuto();

              // Details handler
              var details = this.c.details;

              if (details.type !== false) {
                that._detailsInit();

                // DataTables will trigger this event on every column it shows and
                // hides individually
                dt.on("column-visibility.dtr", function() {
                  // Use a small debounce to allow multiple columns to be set together
                  if (that._timer) {
                    clearTimeout(that._timer);
                  }

                  that._timer = setTimeout(function() {
                    that._timer = null;

                    that._classLogic();
                    that._resizeAuto();
                    that._resize();

                    that._redrawChildren();
                  }, 100);
                });

                // Redraw the details box on each draw which will happen if the data
                // has changed. This is used until DataTables implements a native
                // `updated` event for rows
                dt.on("draw.dtr", function() {
                  that._redrawChildren();
                });

                $(dt.table().node()).addClass("dtr-" + details.type);
              }

              dt.on("column-reorder.dtr", function(e, settings, details) {
                that._classLogic();
                that._resizeAuto();
                that._resize(true);
              });

              // Change in column sizes means we need to calc
              dt.on("column-sizing.dtr", function() {
                that._resizeAuto();
                that._resize();
              });

              // On Ajax reload we want to reopen any child rows which are displayed
              // by responsive
              dt.on("preXhr.dtr", function() {
                var rowIds = [];
                dt.rows().every(function() {
                  if (this.child.isShown()) {
                    rowIds.push(this.id(true));
                  }
                });

                dt.one("draw.dtr", function() {
                  that._resizeAuto();
                  that._resize();

                  dt.rows(rowIds).every(function() {
                    that._detailsDisplay(this, false);
                  });
                });
              });

              dt.on("init.dtr", function(e, settings, details) {
                if (e.namespace !== "dt") {
                  return;
                }

                that._resizeAuto();
                that._resize();

                // If columns were hidden, then DataTables needs to adjust the
                // column sizing
                if ($.inArray(false, that.s.current)) {
                  dt.columns.adjust();
                }
              });

              // First pass - draw the table for the current viewport size
              this._resize();
            },

            /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
             * Private methods
             */

            /**
             * Calculate the visibility for the columns in a table for a given
             * breakpoint. The result is pre-determined based on the class logic if
             * class names are used to control all columns, but the width of the table
             * is also used if there are columns which are to be automatically shown
             * and hidden.
             *
             * @param  {string} breakpoint Breakpoint name to use for the calculation
             * @return {array} Array of boolean values initiating the visibility of each
             *   column.
             *  @private
             */
            _columnsVisiblity: function(breakpoint) {
              var dt = this.s.dt;
              var columns = this.s.columns;
              var i, ien;

              // Create an array that defines the column ordering based first on the
              // column's priority, and secondly the column index. This allows the
              // columns to be removed from the right if the priority matches
              var order = columns
                .map(function(col, idx) {
                  return {
                    columnIdx: idx,
                    priority: col.priority,
                  };
                })
                .sort(function(a, b) {
                  if (a.priority !== b.priority) {
                    return a.priority - b.priority;
                  }
                  return a.columnIdx - b.columnIdx;
                });

              // Class logic - determine which columns are in this breakpoint based
              // on the classes. If no class control (i.e. `auto`) then `-` is used
              // to indicate this to the rest of the function
              var display = $.map(columns, function(col, i) {
                if (dt.column(i).visible() === false) {
                  return "not-visible";
                }
                return col.auto && col.minWidth === null
                  ? false
                  : col.auto === true
                  ? "-"
                  : $.inArray(breakpoint, col.includeIn) !== -1;
              });

              // Auto column control - first pass: how much width is taken by the
              // ones that must be included from the non-auto columns
              var requiredWidth = 0;
              for (i = 0, ien = display.length; i < ien; i++) {
                if (display[i] === true) {
                  requiredWidth += columns[i].minWidth;
                }
              }

              // Second pass, use up any remaining width for other columns. For
              // scrolling tables we need to subtract the width of the scrollbar. It
              // may not be requires which makes this sub-optimal, but it would
              // require another full redraw to make complete use of those extra few
              // pixels
              var scrolling = dt.settings()[0].oScroll;
              var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
              var widthAvailable = dt.table().container().offsetWidth - bar;
              var usedWidth = widthAvailable - requiredWidth;

              // Control column needs to always be included. This makes it sub-
              // optimal in terms of using the available with, but to stop layout
              // thrashing or overflow. Also we need to account for the control column
              // width first so we know how much width is available for the other
              // columns, since the control column might not be the first one shown
              for (i = 0, ien = display.length; i < ien; i++) {
                if (columns[i].control) {
                  usedWidth -= columns[i].minWidth;
                }
              }

              // Allow columns to be shown (counting by priority and then right to
              // left) until we run out of room
              var empty = false;
              for (i = 0, ien = order.length; i < ien; i++) {
                var colIdx = order[i].columnIdx;

                if (
                  display[colIdx] === "-" &&
                  !columns[colIdx].control &&
                  columns[colIdx].minWidth
                ) {
                  // Once we've found a column that won't fit we don't let any
                  // others display either, or columns might disappear in the
                  // middle of the table
                  if (empty || usedWidth - columns[colIdx].minWidth < 0) {
                    empty = true;
                    display[colIdx] = false;
                  } else {
                    display[colIdx] = true;
                  }

                  usedWidth -= columns[colIdx].minWidth;
                }
              }

              // Determine if the 'control' column should be shown (if there is one).
              // This is the case when there is a hidden column (that is not the
              // control column). The two loops look inefficient here, but they are
              // trivial and will fly through. We need to know the outcome from the
              // first , before the action in the second can be taken
              var showControl = false;

              for (i = 0, ien = columns.length; i < ien; i++) {
                if (
                  !columns[i].control &&
                  !columns[i].never &&
                  display[i] === false
                ) {
                  showControl = true;
                  break;
                }
              }

              for (i = 0, ien = columns.length; i < ien; i++) {
                if (columns[i].control) {
                  display[i] = showControl;
                }

                // Replace not visible string with false from the control column detection above
                if (display[i] === "not-visible") {
                  display[i] = false;
                }
              }

              // Finally we need to make sure that there is at least one column that
              // is visible
              if ($.inArray(true, display) === -1) {
                display[0] = true;
              }

              return display;
            },

            /**
             * Create the internal `columns` array with information about the columns
             * for the table. This includes determining which breakpoints the column
             * will appear in, based upon class names in the column, which makes up the
             * vast majority of this method.
             *
             * @private
             */
            _classLogic: function() {
              var that = this;
              var calc = {};
              var breakpoints = this.c.breakpoints;
              var dt = this.s.dt;
              var columns = dt
                .columns()
                .eq(0)
                .map(function(i) {
                  var column = this.column(i);
                  var className = column.header().className;
                  var priority = dt.settings()[0].aoColumns[i]
                    .responsivePriority;
                  var dataPriority = column
                    .header()
                    .getAttribute("data-priority");

                  if (priority === undefined) {
                    priority =
                      dataPriority === undefined || dataPriority === null
                        ? 10000
                        : dataPriority * 1;
                  }

                  return {
                    className: className,
                    includeIn: [],
                    auto: false,
                    control: false,
                    never: className.match(/\bnever\b/) ? true : false,
                    priority: priority,
                  };
                });

              // Simply add a breakpoint to `includeIn` array, ensuring that there are
              // no duplicates
              var add = function(colIdx, name) {
                var includeIn = columns[colIdx].includeIn;

                if ($.inArray(name, includeIn) === -1) {
                  includeIn.push(name);
                }
              };

              var column = function(colIdx, name, operator, matched) {
                var size, i, ien;

                if (!operator) {
                  columns[colIdx].includeIn.push(name);
                } else if (operator === "max-") {
                  // Add this breakpoint and all smaller
                  size = that._find(name).width;

                  for (i = 0, ien = breakpoints.length; i < ien; i++) {
                    if (breakpoints[i].width <= size) {
                      add(colIdx, breakpoints[i].name);
                    }
                  }
                } else if (operator === "min-") {
                  // Add this breakpoint and all larger
                  size = that._find(name).width;

                  for (i = 0, ien = breakpoints.length; i < ien; i++) {
                    if (breakpoints[i].width >= size) {
                      add(colIdx, breakpoints[i].name);
                    }
                  }
                } else if (operator === "not-") {
                  // Add all but this breakpoint
                  for (i = 0, ien = breakpoints.length; i < ien; i++) {
                    if (breakpoints[i].name.indexOf(matched) === -1) {
                      add(colIdx, breakpoints[i].name);
                    }
                  }
                }
              };

              // Loop over each column and determine if it has a responsive control
              // class
              columns.each(function(col, i) {
                var classNames = col.className.split(" ");
                var hasClass = false;

                // Split the class name up so multiple rules can be applied if needed
                for (var k = 0, ken = classNames.length; k < ken; k++) {
                  var className = $.trim(classNames[k]);

                  if (className === "all") {
                    // Include in all
                    hasClass = true;
                    col.includeIn = $.map(breakpoints, function(a) {
                      return a.name;
                    });
                    return;
                  } else if (className === "none" || col.never) {
                    // Include in none (default) and no auto
                    hasClass = true;
                    return;
                  } else if (className === "control") {
                    // Special column that is only visible, when one of the other
                    // columns is hidden. This is used for the details control
                    hasClass = true;
                    col.control = true;
                    return;
                  }

                  $.each(breakpoints, function(j, breakpoint) {
                    // Does this column have a class that matches this breakpoint?
                    var brokenPoint = breakpoint.name.split("-");
                    var re = new RegExp(
                      "(min\\-|max\\-|not\\-)?(" +
                        brokenPoint[0] +
                        ")(\\-[_a-zA-Z0-9])?"
                    );
                    var match = className.match(re);

                    if (match) {
                      hasClass = true;

                      if (
                        match[2] === brokenPoint[0] &&
                        match[3] === "-" + brokenPoint[1]
                      ) {
                        // Class name matches breakpoint name fully
                        column(
                          i,
                          breakpoint.name,
                          match[1],
                          match[2] + match[3]
                        );
                      } else if (match[2] === brokenPoint[0] && !match[3]) {
                        // Class name matched primary breakpoint name with no qualifier
                        column(i, breakpoint.name, match[1], match[2]);
                      }
                    }
                  });
                }

                // If there was no control class, then automatic sizing is used
                if (!hasClass) {
                  col.auto = true;
                }
              });

              this.s.columns = columns;
            },

            /**
             * Show the details for the child row
             *
             * @param  {DataTables.Api} row    API instance for the row
             * @param  {boolean}        update Update flag
             * @private
             */
            _detailsDisplay: function(row, update) {
              var that = this;
              var dt = this.s.dt;
              var details = this.c.details;

              if (details && details.type !== false) {
                var res = details.display(row, update, function() {
                  return details.renderer(dt, row[0], that._detailsObj(row[0]));
                });

                if (res === true || res === false) {
                  $(dt.table().node()).triggerHandler("responsive-display.dt", [
                    dt,
                    row,
                    res,
                    update,
                  ]);
                }
              }
            },

            /**
             * Initialisation for the details handler
             *
             * @private
             */
            _detailsInit: function() {
              var that = this;
              var dt = this.s.dt;
              var details = this.c.details;

              // The inline type always uses the first child as the target
              if (details.type === "inline") {
                details.target = "td.dtr-control, th.dtr-control";
              }

              // Keyboard accessibility
              dt.on("draw.dtr", function() {
                that._tabIndexes();
              });
              that._tabIndexes(); // Initial draw has already happened

              $(dt.table().body()).on("keyup.dtr", "td, th", function(e) {
                if (e.keyCode === 13 && $(this).data("dtr-keyboard")) {
                  $(this).click();
                }
              });

              // type.target can be a string jQuery selector or a column index
              var target = details.target;
              var selector = typeof target === "string" ? target : "td, th";

              if (target !== undefined || target !== null) {
                // Click handler to show / hide the details rows when they are available
                $(dt.table().body()).on(
                  "click.dtr mousedown.dtr mouseup.dtr",
                  selector,
                  function(e) {
                    // If the table is not collapsed (i.e. there is no hidden columns)
                    // then take no action
                    if (!$(dt.table().node()).hasClass("collapsed")) {
                      return;
                    }

                    // Check that the row is actually a DataTable's controlled node
                    if (
                      $.inArray(
                        $(this)
                          .closest("tr")
                          .get(0),
                        dt
                          .rows()
                          .nodes()
                          .toArray()
                      ) === -1
                    ) {
                      return;
                    }

                    // For column index, we determine if we should act or not in the
                    // handler - otherwise it is already okay
                    if (typeof target === "number") {
                      var targetIdx =
                        target < 0
                          ? dt.columns().eq(0).length + target
                          : target;

                      if (dt.cell(this).index().column !== targetIdx) {
                        return;
                      }
                    }

                    // $().closest() includes itself in its check
                    var row = dt.row($(this).closest("tr"));

                    // Check event type to do an action
                    if (e.type === "click") {
                      // The renderer is given as a function so the caller can execute it
                      // only when they need (i.e. if hiding there is no point is running
                      // the renderer)
                      that._detailsDisplay(row, false);
                    } else if (e.type === "mousedown") {
                      // For mouse users, prevent the focus ring from showing
                      $(this).css("outline", "none");
                    } else if (e.type === "mouseup") {
                      // And then re-allow at the end of the click
                      $(this)
                        .trigger("blur")
                        .css("outline", "");
                    }
                  }
                );
              }
            },

            /**
             * Get the details to pass to a renderer for a row
             * @param  {int} rowIdx Row index
             * @private
             */
            _detailsObj: function(rowIdx) {
              var that = this;
              var dt = this.s.dt;

              return $.map(this.s.columns, function(col, i) {
                // Never and control columns should not be passed to the renderer
                if (col.never || col.control) {
                  return;
                }

                var dtCol = dt.settings()[0].aoColumns[i];

                return {
                  className: dtCol.sClass,
                  columnIndex: i,
                  data: dt.cell(rowIdx, i).render(that.c.orthogonal),
                  hidden: dt.column(i).visible() && !that.s.current[i],
                  rowIndex: rowIdx,
                  title: dtCol.sTitle,
                };
              });
            },

            /**
             * Find a breakpoint object from a name
             *
             * @param  {string} name Breakpoint name to find
             * @return {object}      Breakpoint description object
             * @private
             */
            _find: function(name) {
              var breakpoints = this.c.breakpoints;

              for (var i = 0, ien = breakpoints.length; i < ien; i++) {
                if (breakpoints[i].name === name) {
                  return breakpoints[i];
                }
              }
            },

            /**
             * Re-create the contents of the child rows as the display has changed in
             * some way.
             *
             * @private
             */
            _redrawChildren: function() {
              var that = this;
              var dt = this.s.dt;

              dt.rows({ page: "current" }).iterator("row", function(
                settings,
                idx
              ) {
                var row = dt.row(idx);

                that._detailsDisplay(dt.row(idx), true);
              });
            },

            /**
             * Alter the table display for a resized viewport. This involves first
             * determining what breakpoint the window currently is in, getting the
             * column visibilities to apply and then setting them.
             *
             * @param  {boolean} forceRedraw Force a redraw
             * @private
             */
            _resize: function(forceRedraw) {
              var that = this;
              var dt = this.s.dt;
              var width = $(window).innerWidth();
              var breakpoints = this.c.breakpoints;
              var breakpoint = breakpoints[0].name;
              var columns = this.s.columns;
              var i, ien;
              var oldVis = this.s.current.slice();

              // Determine what breakpoint we are currently at
              for (i = breakpoints.length - 1; i >= 0; i--) {
                if (width <= breakpoints[i].width) {
                  breakpoint = breakpoints[i].name;
                  break;
                }
              }

              // Show the columns for that break point
              var columnsVis = this._columnsVisiblity(breakpoint);
              this.s.current = columnsVis;

              // Set the class before the column visibility is changed so event
              // listeners know what the state is. Need to determine if there are
              // any columns that are not visible but can be shown
              var collapsedClass = false;

              for (i = 0, ien = columns.length; i < ien; i++) {
                if (
                  columnsVis[i] === false &&
                  !columns[i].never &&
                  !columns[i].control &&
                  !dt.column(i).visible() === false
                ) {
                  collapsedClass = true;
                  break;
                }
              }

              $(dt.table().node()).toggleClass("collapsed", collapsedClass);

              var changed = false;
              var visible = 0;

              dt.columns()
                .eq(0)
                .each(function(colIdx, i) {
                  if (columnsVis[i] === true) {
                    visible++;
                  }

                  if (forceRedraw || columnsVis[i] !== oldVis[i]) {
                    changed = true;
                    that._setColumnVis(colIdx, columnsVis[i]);
                  }
                });

              if (changed) {
                this._redrawChildren();

                // Inform listeners of the change
                $(dt.table().node()).trigger("responsive-resize.dt", [
                  dt,
                  this.s.current,
                ]);

                // If no records, update the "No records" display element
                if (dt.page.info().recordsDisplay === 0) {
                  $("td", dt.table().body())
                    .eq(0)
                    .attr("colspan", visible);
                }
              }

              // Add a control class to the element which should show the control element
              if (this.c.details.type === "inline") {
                var firstVisible = $.inArray(true, columnsVis);

                // Remove from any cells which shouldn't have it
                dt.cells(
                  null,
                  function(idx) {
                    return idx !== firstVisible;
                  },
                  { page: "current" }
                )
                  .nodes()
                  .to$()
                  .filter(".dtr-control")
                  .removeClass("dtr-control");

                dt.cells(null, firstVisible, { page: "current" })
                  .nodes()
                  .to$()
                  .addClass("dtr-control");
              }
            },

            /**
             * Determine the width of each column in the table so the auto column hiding
             * has that information to work with. This method is never going to be 100%
             * perfect since column widths can change slightly per page, but without
             * seriously compromising performance this is quite effective.
             *
             * @private
             */
            _resizeAuto: function() {
              var dt = this.s.dt;
              var columns = this.s.columns;

              // Are we allowed to do auto sizing?
              if (!this.c.auto) {
                return;
              }

              // Are there any columns that actually need auto-sizing, or do they all
              // have classes defined
              if (
                $.inArray(
                  true,
                  $.map(columns, function(c) {
                    return c.auto;
                  })
                ) === -1
              ) {
                return;
              }

              // Need to restore all children. They will be reinstated by a re-render
              if (!$.isEmptyObject(_childNodeStore)) {
                $.each(_childNodeStore, function(key) {
                  var idx = key.split("-");

                  _childNodesRestore(dt, idx[0] * 1, idx[1] * 1);
                });
              }

              // Clone the table with the current data in it
              var tableWidth = dt.table().node().offsetWidth;
              var columnWidths = dt.columns;
              var clonedTable = dt
                .table()
                .node()
                .cloneNode(false);
              var clonedHeader = $(
                dt
                  .table()
                  .header()
                  .cloneNode(false)
              ).appendTo(clonedTable);
              var clonedBody = $(dt.table().body())
                .clone(false, false)
                .empty()
                .appendTo(clonedTable); // use jQuery because of IE8

              clonedTable.style.width = "auto";

              // Header
              var headerCells = dt
                .columns()
                .header()
                .filter(function(idx) {
                  return dt.column(idx).visible();
                })
                .to$()
                .clone(false)
                .css("display", "table-cell")
                .css("width", "auto")
                .css("min-width", 0);

              // Body rows - we don't need to take account of DataTables' column
              // visibility since we implement our own here (hence the `display` set)
              $(clonedBody)
                .append($(dt.rows({ page: "current" }).nodes()).clone(false))
                .find("th, td")
                .css("display", "");

              // Footer
              var footer = dt.table().footer();
              if (footer) {
                var clonedFooter = $(footer.cloneNode(false)).appendTo(
                  clonedTable
                );
                var footerCells = dt
                  .columns()
                  .footer()
                  .filter(function(idx) {
                    return dt.column(idx).visible();
                  })
                  .to$()
                  .clone(false)
                  .css("display", "table-cell");

                $("<tr/>")
                  .append(footerCells)
                  .appendTo(clonedFooter);
              }

              $("<tr/>")
                .append(headerCells)
                .appendTo(clonedHeader);

              // In the inline case extra padding is applied to the first column to
              // give space for the show / hide icon. We need to use this in the
              // calculation
              if (this.c.details.type === "inline") {
                $(clonedTable).addClass("dtr-inline collapsed");
              }

              // It is unsafe to insert elements with the same name into the DOM
              // multiple times. For example, cloning and inserting a checked radio
              // clears the chcecked state of the original radio.
              $(clonedTable)
                .find("[name]")
                .removeAttr("name");

              // A position absolute table would take the table out of the flow of
              // our container element, bypassing the height and width (Scroller)
              $(clonedTable).css("position", "relative");

              var inserted = $("<div/>")
                .css({
                  width: 1,
                  height: 1,
                  overflow: "hidden",
                  clear: "both",
                })
                .append(clonedTable);

              inserted.insertBefore(dt.table().node());

              // The cloned header now contains the smallest that each column can be
              headerCells.each(function(i) {
                var idx = dt.column.index("fromVisible", i);
                columns[idx].minWidth = this.offsetWidth || 0;
              });

              inserted.remove();
            },

            /**
             * Get the state of the current hidden columns - controlled by Responsive only
             */
            _responsiveOnlyHidden: function() {
              var dt = this.s.dt;

              return $.map(this.s.current, function(v, i) {
                // If the column is hidden by DataTables then it can't be hidden by
                // Responsive!
                if (dt.column(i).visible() === false) {
                  return true;
                }
                return v;
              });
            },

            /**
             * Set a column's visibility.
             *
             * We don't use DataTables' column visibility controls in order to ensure
             * that column visibility can Responsive can no-exist. Since only IE8+ is
             * supported (and all evergreen browsers of course) the control of the
             * display attribute works well.
             *
             * @param {integer} col      Column index
             * @param {boolean} showHide Show or hide (true or false)
             * @private
             */
            _setColumnVis: function(col, showHide) {
              var dt = this.s.dt;
              var display = showHide ? "" : "none"; // empty string will remove the attr

              $(dt.column(col).header()).css("display", display);
              $(dt.column(col).footer()).css("display", display);
              dt.column(col)
                .nodes()
                .to$()
                .css("display", display);

              // If the are child nodes stored, we might need to reinsert them
              if (!$.isEmptyObject(_childNodeStore)) {
                dt.cells(null, col)
                  .indexes()
                  .each(function(idx) {
                    _childNodesRestore(dt, idx.row, idx.column);
                  });
              }
            },

            /**
             * Update the cell tab indexes for keyboard accessibility. This is called on
             * every table draw - that is potentially inefficient, but also the least
             * complex option given that column visibility can change on the fly. Its a
             * shame user-focus was removed from CSS 3 UI, as it would have solved this
             * issue with a single CSS statement.
             *
             * @private
             */
            _tabIndexes: function() {
              var dt = this.s.dt;
              var cells = dt
                .cells({ page: "current" })
                .nodes()
                .to$();
              var ctx = dt.settings()[0];
              var target = this.c.details.target;

              cells
                .filter("[data-dtr-keyboard]")
                .removeData("[data-dtr-keyboard]");

              if (typeof target === "number") {
                dt.cells(null, target, { page: "current" })
                  .nodes()
                  .to$()
                  .attr("tabIndex", ctx.iTabIndex)
                  .data("dtr-keyboard", 1);
              } else {
                // This is a bit of a hack - we need to limit the selected nodes to just
                // those of this table
                if (target === "td:first-child, th:first-child") {
                  target = ">td:first-child, >th:first-child";
                }

                $(target, dt.rows({ page: "current" }).nodes())
                  .attr("tabIndex", ctx.iTabIndex)
                  .data("dtr-keyboard", 1);
              }
            },
          });

          /**
           * List of default breakpoints. Each item in the array is an object with two
           * properties:
           *
           * * `name` - the breakpoint name.
           * * `width` - the breakpoint width
           *
           * @name Responsive.breakpoints
           * @static
           */
          Responsive.breakpoints = [
            { name: "desktop", width: Infinity },
            { name: "tablet-l", width: 1024 },
            { name: "tablet-p", width: 768 },
            { name: "mobile-l", width: 480 },
            { name: "mobile-p", width: 320 },
          ];

          /**
           * Display methods - functions which define how the hidden data should be shown
           * in the table.
           *
           * @namespace
           * @name Responsive.defaults
           * @static
           */
          Responsive.display = {
            childRow: function(row, update, render) {
              if (update) {
                if ($(row.node()).hasClass("parent")) {
                  row.child(render(), "child").show();

                  return true;
                }
              } else {
                if (!row.child.isShown()) {
                  row.child(render(), "child").show();
                  $(row.node()).addClass("parent");

                  return true;
                } else {
                  row.child(false);
                  $(row.node()).removeClass("parent");

                  return false;
                }
              }
            },

            childRowImmediate: function(row, update, render) {
              if (
                (!update && row.child.isShown()) ||
                !row.responsive.hasHidden()
              ) {
                // User interaction and the row is show, or nothing to show
                row.child(false);
                $(row.node()).removeClass("parent");

                return false;
              } else {
                // Display
                row.child(render(), "child").show();
                $(row.node()).addClass("parent");

                return true;
              }
            },

            // This is a wrapper so the modal options for Bootstrap and jQuery UI can
            // have options passed into them. This specific one doesn't need to be a
            // function but it is for consistency in the `modal` name
            modal: function(options) {
              return function(row, update, render) {
                if (!update) {
                  // Show a modal
                  var close = function() {
                    modal.remove(); // will tidy events for us
                    $(document).off("keypress.dtr");
                  };

                  var modal = $('<div class="dtr-modal"/>')
                    .append(
                      $('<div class="dtr-modal-display"/>')
                        .append(
                          $('<div class="dtr-modal-content"/>').append(render())
                        )
                        .append(
                          $('<div class="dtr-modal-close">&times;</div>').click(
                            function() {
                              close();
                            }
                          )
                        )
                    )
                    .append(
                      $('<div class="dtr-modal-background"/>').click(
                        function() {
                          close();
                        }
                      )
                    )
                    .appendTo("body");

                  $(document).on("keyup.dtr", function(e) {
                    if (e.keyCode === 27) {
                      e.stopPropagation();

                      close();
                    }
                  });
                } else {
                  $("div.dtr-modal-content")
                    .empty()
                    .append(render());
                }

                if (options && options.header) {
                  $("div.dtr-modal-content").prepend(
                    "<h2>" + options.header(row) + "</h2>"
                  );
                }
              };
            },
          };

          var _childNodeStore = {};

          function _childNodes(dt, row, col) {
            var name = row + "-" + col;

            if (_childNodeStore[name]) {
              return _childNodeStore[name];
            }

            // https://jsperf.com/childnodes-array-slice-vs-loop
            var nodes = [];
            var children = dt.cell(row, col).node().childNodes;
            for (var i = 0, ien = children.length; i < ien; i++) {
              nodes.push(children[i]);
            }

            _childNodeStore[name] = nodes;

            return nodes;
          }

          function _childNodesRestore(dt, row, col) {
            var name = row + "-" + col;

            if (!_childNodeStore[name]) {
              return;
            }

            var node = dt.cell(row, col).node();
            var store = _childNodeStore[name];
            var parent = store[0].parentNode;
            var parentChildren = parent.childNodes;
            var a = [];

            for (var i = 0, ien = parentChildren.length; i < ien; i++) {
              a.push(parentChildren[i]);
            }

            for (var j = 0, jen = a.length; j < jen; j++) {
              node.appendChild(a[j]);
            }

            _childNodeStore[name] = undefined;
          }

          /**
           * Display methods - functions which define how the hidden data should be shown
           * in the table.
           *
           * @namespace
           * @name Responsive.defaults
           * @static
           */
          Responsive.renderer = {
            listHiddenNodes: function() {
              return function(api, rowIdx, columns) {
                var ul = $(
                  '<ul data-dtr-index="' + rowIdx + '" class="dtr-details"/>'
                );
                var found = false;

                var data = $.each(columns, function(i, col) {
                  if (col.hidden) {
                    var klass = col.className
                      ? 'class="' + col.className + '"'
                      : "";

                    $(
                      "<li " +
                        klass +
                        ' data-dtr-index="' +
                        col.columnIndex +
                        '" data-dt-row="' +
                        col.rowIndex +
                        '" data-dt-column="' +
                        col.columnIndex +
                        '">' +
                        '<span class="dtr-title">' +
                        col.title +
                        "</span> " +
                        "</li>"
                    )
                      .append(
                        $('<span class="dtr-data"/>').append(
                          _childNodes(api, col.rowIndex, col.columnIndex)
                        )
                      ) // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )
                      .appendTo(ul);

                    found = true;
                  }
                });

                return found ? ul : false;
              };
            },

            listHidden: function() {
              return function(api, rowIdx, columns) {
                var data = $.map(columns, function(col) {
                  var klass = col.className
                    ? 'class="' + col.className + '"'
                    : "";

                  return col.hidden
                    ? "<li " +
                        klass +
                        ' data-dtr-index="' +
                        col.columnIndex +
                        '" data-dt-row="' +
                        col.rowIndex +
                        '" data-dt-column="' +
                        col.columnIndex +
                        '">' +
                        '<span class="dtr-title">' +
                        col.title +
                        "</span> " +
                        '<span class="dtr-data">' +
                        col.data +
                        "</span>" +
                        "</li>"
                    : "";
                }).join("");

                return data
                  ? $(
                      '<ul data-dtr-index="' +
                        rowIdx +
                        '" class="dtr-details"/>'
                    ).append(data)
                  : false;
              };
            },

            tableAll: function(options) {
              options = $.extend(
                {
                  tableClass: "",
                },
                options
              );

              return function(api, rowIdx, columns) {
                var data = $.map(columns, function(col) {
                  var klass = col.className
                    ? 'class="' + col.className + '"'
                    : "";

                  return (
                    "<tr " +
                    klass +
                    ' data-dt-row="' +
                    col.rowIndex +
                    '" data-dt-column="' +
                    col.columnIndex +
                    '">' +
                    "<td>" +
                    col.title +
                    ":" +
                    "</td> " +
                    "<td>" +
                    col.data +
                    "</td>" +
                    "</tr>"
                  );
                }).join("");

                return $(
                  '<table class="' +
                    options.tableClass +
                    ' dtr-details" width="100%"/>'
                ).append(data);
              };
            },
          };

          /**
           * Responsive default settings for initialisation
           *
           * @namespace
           * @name Responsive.defaults
           * @static
           */
          Responsive.defaults = {
            /**
             * List of breakpoints for the instance. Note that this means that each
             * instance can have its own breakpoints. Additionally, the breakpoints
             * cannot be changed once an instance has been creased.
             *
             * @type {Array}
             * @default Takes the value of `Responsive.breakpoints`
             */
            breakpoints: Responsive.breakpoints,

            /**
             * Enable / disable auto hiding calculations. It can help to increase
             * performance slightly if you disable this option, but all columns would
             * need to have breakpoint classes assigned to them
             *
             * @type {Boolean}
             * @default  `true`
             */
            auto: true,

            /**
             * Details control. If given as a string value, the `type` property of the
             * default object is set to that value, and the defaults used for the rest
             * of the object - this is for ease of implementation.
             *
             * The object consists of the following properties:
             *
             * * `display` - A function that is used to show and hide the hidden details
             * * `renderer` - function that is called for display of the child row data.
             *   The default function will show the data from the hidden columns
             * * `target` - Used as the selector for what objects to attach the child
             *   open / close to
             * * `type` - `false` to disable the details display, `inline` or `column`
             *   for the two control types
             *
             * @type {Object|string}
             */
            details: {
              display: Responsive.display.childRow,

              renderer: Responsive.renderer.listHidden(),

              target: 0,

              type: "inline",
            },

            /**
             * Orthogonal data request option. This is used to define the data type
             * requested when Responsive gets the data to show in the child row.
             *
             * @type {String}
             */
            orthogonal: "display",
          };

          /*
           * API
           */
          var Api = $.fn.dataTable.Api;

          // Doesn't do anything - work around for a bug in DT... Not documented
          Api.register("responsive()", function() {
            return this;
          });

          Api.register("responsive.index()", function(li) {
            li = $(li);

            return {
              column: li.data("dtr-index"),
              row: li.parent().data("dtr-index"),
            };
          });

          Api.register("responsive.rebuild()", function() {
            return this.iterator("table", function(ctx) {
              if (ctx._responsive) {
                ctx._responsive._classLogic();
              }
            });
          });

          Api.register("responsive.recalc()", function() {
            return this.iterator("table", function(ctx) {
              if (ctx._responsive) {
                ctx._responsive._resizeAuto();
                ctx._responsive._resize();
              }
            });
          });

          Api.register("responsive.hasHidden()", function() {
            var ctx = this.context[0];

            return ctx._responsive
              ? $.inArray(false, ctx._responsive._responsiveOnlyHidden()) !== -1
              : false;
          });

          Api.registerPlural(
            "columns().responsiveHidden()",
            "column().responsiveHidden()",
            function() {
              return this.iterator(
                "column",
                function(settings, column) {
                  return settings._responsive
                    ? settings._responsive._responsiveOnlyHidden()[column]
                    : false;
                },
                1
              );
            }
          );

          /**
           * Version information
           *
           * @name Responsive.version
           * @static
           */
          Responsive.version = "2.2.4";

          $.fn.dataTable.Responsive = Responsive;
          $.fn.DataTable.Responsive = Responsive;

          // Attach a listener to the document which listens for DataTables initialisation
          // events so we can automatically initialise
          $(document).on("preInit.dt.dtr", function(e, settings, json) {
            if (e.namespace !== "dt") {
              return;
            }

            if (
              $(settings.nTable).hasClass("responsive") ||
              $(settings.nTable).hasClass("dt-responsive") ||
              settings.oInit.responsive ||
              DataTable.defaults.responsive
            ) {
              var init = settings.oInit.responsive;

              if (init !== false) {
                new Responsive(settings, $.isPlainObject(init) ? init : {});
              }
            }
          });

          return Responsive;
        });

        /***/
      },

    /***/ "./node_modules/datatables.net/js/jquery.dataTables.js":
      /*!*************************************************************!*\
  !*** ./node_modules/datatables.net/js/jquery.dataTables.js ***!
  \*************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*! DataTables 1.10.21
         * ©2008-2020 SpryMedia Ltd - datatables.net/license
         */

        /**
         * @summary     DataTables
         * @description Paginate, search and order HTML tables
         * @version     1.10.21
         * @file        jquery.dataTables.js
         * @author      SpryMedia Ltd
         * @contact     www.datatables.net
         * @copyright   Copyright 2008-2020 SpryMedia Ltd.
         *
         * This source file is free software, available under the following license:
         *   MIT license - http://datatables.net/license
         *
         * This source file is distributed in the hope that it will be useful, but
         * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
         * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
         *
         * For details please refer to: http://www.datatables.net
         */

        /*jslint evil: true, undef: true, browser: true */
        /*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

        (function(factory) {
          "use strict";

          if (true) {
            // AMD
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
              __webpack_require__(
                /*! jquery */ "./node_modules/jquery/dist/jquery.js"
              ),
            ]),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function($) {
              return factory($, window, document);
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(function($, window, document, undefined) {
          "use strict";

          /**
           * DataTables is a plug-in for the jQuery Javascript library. It is a highly
           * flexible tool, based upon the foundations of progressive enhancement,
           * which will add advanced interaction controls to any HTML table. For a
           * full list of features please refer to
           * [DataTables.net](href="http://datatables.net).
           *
           * Note that the `DataTable` object is not a global variable but is aliased
           * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
           * be  accessed.
           *
           *  @class
           *  @param {object} [init={}] Configuration object for DataTables. Options
           *    are defined by {@link DataTable.defaults}
           *  @requires jQuery 1.7+
           *
           *  @example
           *    // Basic initialisation
           *    $(document).ready( function {
           *      $('#example').dataTable();
           *    } );
           *
           *  @example
           *    // Initialisation with configuration options - in this case, disable
           *    // pagination and sorting.
           *    $(document).ready( function {
           *      $('#example').dataTable( {
           *        "paginate": false,
           *        "sort": false
           *      } );
           *    } );
           */
          var DataTable = function(options) {
            /**
             * Perform a jQuery selector action on the table's TR elements (from the tbody) and
             * return the resulting jQuery object.
             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
             *    criterion ("applied") or all TR elements (i.e. no filter).
             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
             *    Can be either 'current', whereby the current sorting of the table is used, or
             *    'original' whereby the original order the data was read into the table is used.
             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
             *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
             *    'current' and filter is 'applied', regardless of what they might be given as.
             *  @returns {object} jQuery object, filtered by the given selector.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Highlight every second row
             *      oTable.$('tr:odd').css('backgroundColor', 'blue');
             *    } );
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Filter to rows with 'Webkit' in them, add a background colour and then
             *      // remove the filter, thus highlighting the 'Webkit' rows only.
             *      oTable.fnFilter('Webkit');
             *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
             *      oTable.fnFilter('');
             *    } );
             */
            this.$ = function(sSelector, oOpts) {
              return this.api(true).$(sSelector, oOpts);
            };

            /**
             * Almost identical to $ in operation, but in this case returns the data for the matched
             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
             * rather than any descendants, so the data can be obtained for the row/cell. If matching
             * rows are found, the data returned is the original data array/object that was used to
             * create the row (or a generated array if from a DOM source).
             *
             * This method is often useful in-combination with $ where both functions are given the
             * same parameters and the array indexes will match identically.
             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
             *    criterion ("applied") or all elements (i.e. no filter).
             *  @param {string} [oOpts.order=current] Order of the data in the processed array.
             *    Can be either 'current', whereby the current sorting of the table is used, or
             *    'original' whereby the original order the data was read into the table is used.
             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
             *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
             *    'current' and filter is 'applied', regardless of what they might be given as.
             *  @returns {array} Data for the matched elements. If any elements, as a result of the
             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
             *    entry in the array.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Get the data from the first row in the table
             *      var data = oTable._('tr:first');
             *
             *      // Do something useful with the data
             *      alert( "First cell is: "+data[0] );
             *    } );
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Filter to 'Webkit' and get all data for
             *      oTable.fnFilter('Webkit');
             *      var data = oTable._('tr', {"search": "applied"});
             *
             *      // Do something with the data
             *      alert( data.length+" rows matched the search" );
             *    } );
             */
            this._ = function(sSelector, oOpts) {
              return this.api(true)
                .rows(sSelector, oOpts)
                .data();
            };

            /**
             * Create a DataTables Api instance, with the currently selected tables for
             * the Api's context.
             * @param {boolean} [traditional=false] Set the API instance's context to be
             *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
             *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
             *   or if all tables captured in the jQuery object should be used.
             * @return {DataTables.Api}
             */
            this.api = function(traditional) {
              return traditional
                ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex]))
                : new _Api(this);
            };

            /**
             * Add a single new row or multiple rows of data to the table. Please note
             * that this is suitable for client-side processing only - if you are using
             * server-side processing (i.e. "bServerSide": true), then to add data, you
             * must add it to the data source, i.e. the server-side, through an Ajax call.
             *  @param {array|object} data The data to be added to the table. This can be:
             *    <ul>
             *      <li>1D array of data - add a single row with the data provided</li>
             *      <li>2D array of arrays - add multiple rows in a single call</li>
             *      <li>object - data object when using <i>mData</i></li>
             *      <li>array of objects - multiple data objects when using <i>mData</i></li>
             *    </ul>
             *  @param {bool} [redraw=true] redraw the table or not
             *  @returns {array} An array of integers, representing the list of indexes in
             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
             *    the table.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    // Global var for counter
             *    var giCount = 2;
             *
             *    $(document).ready(function() {
             *      $('#example').dataTable();
             *    } );
             *
             *    function fnClickAddRow() {
             *      $('#example').dataTable().fnAddData( [
             *        giCount+".1",
             *        giCount+".2",
             *        giCount+".3",
             *        giCount+".4" ]
             *      );
             *
             *      giCount++;
             *    }
             */
            this.fnAddData = function(data, redraw) {
              var api = this.api(true);

              /* Check if we want to add multiple rows or not */
              var rows =
                $.isArray(data) &&
                ($.isArray(data[0]) || $.isPlainObject(data[0]))
                  ? api.rows.add(data)
                  : api.row.add(data);

              if (redraw === undefined || redraw) {
                api.draw();
              }

              return rows.flatten().toArray();
            };

            /**
             * This function will make DataTables recalculate the column sizes, based on the data
             * contained in the table and the sizes applied to the columns (in the DOM, CSS or
             * through the sWidth parameter). This can be useful when the width of the table's
             * parent element changes (for example a window resize).
             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable( {
             *        "sScrollY": "200px",
             *        "bPaginate": false
             *      } );
             *
             *      $(window).on('resize', function () {
             *        oTable.fnAdjustColumnSizing();
             *      } );
             *    } );
             */
            this.fnAdjustColumnSizing = function(bRedraw) {
              var api = this.api(true).columns.adjust();
              var settings = api.settings()[0];
              var scroll = settings.oScroll;

              if (bRedraw === undefined || bRedraw) {
                api.draw(false);
              } else if (scroll.sX !== "" || scroll.sY !== "") {
                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
                _fnScrollDraw(settings);
              }
            };

            /**
             * Quickly and simply clear a table
             *  @param {bool} [bRedraw=true] redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
             *      oTable.fnClearTable();
             *    } );
             */
            this.fnClearTable = function(bRedraw) {
              var api = this.api(true).clear();

              if (bRedraw === undefined || bRedraw) {
                api.draw();
              }
            };

            /**
             * The exact opposite of 'opening' a row, this function will close any rows which
             * are currently 'open'.
             *  @param {node} nTr the table row to 'close'
             *  @returns {int} 0 on success, or 1 if failed (can't find the row)
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnClose = function(nTr) {
              this.api(true)
                .row(nTr)
                .child.hide();
            };

            /**
             * Remove a row for the table
             *  @param {mixed} target The index of the row from aoData to be deleted, or
             *    the TR element you want to delete
             *  @param {function|null} [callBack] Callback function
             *  @param {bool} [redraw=true] Redraw the table or not
             *  @returns {array} The row that was deleted
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Immediately remove the first row
             *      oTable.fnDeleteRow( 0 );
             *    } );
             */
            this.fnDeleteRow = function(target, callback, redraw) {
              var api = this.api(true);
              var rows = api.rows(target);
              var settings = rows.settings()[0];
              var data = settings.aoData[rows[0][0]];

              rows.remove();

              if (callback) {
                callback.call(this, settings, data);
              }

              if (redraw === undefined || redraw) {
                api.draw();
              }

              return data;
            };

            /**
             * Restore the table to it's original state in the DOM by removing all of DataTables
             * enhancements, alterations to the DOM structure of the table and event listeners.
             *  @param {boolean} [remove=false] Completely remove the table from the DOM
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
             *      var oTable = $('#example').dataTable();
             *      oTable.fnDestroy();
             *    } );
             */
            this.fnDestroy = function(remove) {
              this.api(true).destroy(remove);
            };

            /**
             * Redraw the table
             *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
             *      oTable.fnDraw();
             *    } );
             */
            this.fnDraw = function(complete) {
              // Note that this isn't an exact match to the old call to _fnDraw - it takes
              // into account the new data, but can hold position.
              this.api(true).draw(complete);
            };

            /**
             * Filter the input based on data
             *  @param {string} sInput String to filter the table on
             *  @param {int|null} [iColumn] Column to limit filtering to
             *  @param {bool} [bRegex=false] Treat as regular expression or not
             *  @param {bool} [bSmart=true] Perform smart filtering or not
             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sometime later - filter...
             *      oTable.fnFilter( 'test string' );
             *    } );
             */
            this.fnFilter = function(
              sInput,
              iColumn,
              bRegex,
              bSmart,
              bShowGlobal,
              bCaseInsensitive
            ) {
              var api = this.api(true);

              if (iColumn === null || iColumn === undefined) {
                api.search(sInput, bRegex, bSmart, bCaseInsensitive);
              } else {
                api
                  .column(iColumn)
                  .search(sInput, bRegex, bSmart, bCaseInsensitive);
              }

              api.draw();
            };

            /**
             * Get the data for the whole table, an individual row or an individual cell based on the
             * provided parameters.
             *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
             *    a TR node then the data source for the whole row will be returned. If given as a
             *    TD/TH cell node then iCol will be automatically calculated and the data for the
             *    cell returned. If given as an integer, then this is treated as the aoData internal
             *    data index for the row (see fnGetPosition) and the data for that row used.
             *  @param {int} [col] Optional column index that you want the data of.
             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
             *    returned. If mRow is defined, just data for that row, and is iCol is
             *    defined, only data for the designated cell is returned.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    // Row data
             *    $(document).ready(function() {
             *      oTable = $('#example').dataTable();
             *
             *      oTable.$('tr').click( function () {
             *        var data = oTable.fnGetData( this );
             *        // ... do something with the array / object of data for the row
             *      } );
             *    } );
             *
             *  @example
             *    // Individual cell data
             *    $(document).ready(function() {
             *      oTable = $('#example').dataTable();
             *
             *      oTable.$('td').click( function () {
             *        var sData = oTable.fnGetData( this );
             *        alert( 'The cell clicked on had the value of '+sData );
             *      } );
             *    } );
             */
            this.fnGetData = function(src, col) {
              var api = this.api(true);

              if (src !== undefined) {
                var type = src.nodeName ? src.nodeName.toLowerCase() : "";

                return col !== undefined || type == "td" || type == "th"
                  ? api.cell(src, col).data()
                  : api.row(src).data() || null;
              }

              return api.data().toArray();
            };

            /**
             * Get an array of the TR nodes that are used in the table's body. Note that you will
             * typically want to use the '$' API method in preference to this as it is more
             * flexible.
             *  @param {int} [iRow] Optional row index for the TR element you want
             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
             *    in the table's body, or iRow is defined, just the TR element requested.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Get the nodes from the table
             *      var nNodes = oTable.fnGetNodes( );
             *    } );
             */
            this.fnGetNodes = function(iRow) {
              var api = this.api(true);

              return iRow !== undefined
                ? api.row(iRow).node()
                : api
                    .rows()
                    .nodes()
                    .flatten()
                    .toArray();
            };

            /**
             * Get the array indexes of a particular cell from it's DOM element
             * and column index including hidden columns
             *  @param {node} node this can either be a TR, TD or TH in the table's body
             *  @returns {int} If nNode is given as a TR, then a single index is returned, or
             *    if given as a cell, an array of [row index, column index (visible),
             *    column index (all)] is given.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      $('#example tbody td').click( function () {
             *        // Get the position of the current data from the node
             *        var aPos = oTable.fnGetPosition( this );
             *
             *        // Get the data array for this row
             *        var aData = oTable.fnGetData( aPos[0] );
             *
             *        // Update the data array and return the value
             *        aData[ aPos[1] ] = 'clicked';
             *        this.innerHTML = 'clicked';
             *      } );
             *
             *      // Init DataTables
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnGetPosition = function(node) {
              var api = this.api(true);
              var nodeName = node.nodeName.toUpperCase();

              if (nodeName == "TR") {
                return api.row(node).index();
              } else if (nodeName == "TD" || nodeName == "TH") {
                var cell = api.cell(node).index();

                return [cell.row, cell.columnVisible, cell.column];
              }
              return null;
            };

            /**
             * Check to see if a row is 'open' or not.
             *  @param {node} nTr the table row to check
             *  @returns {boolean} true if the row is currently open, false otherwise
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnIsOpen = function(nTr) {
              return this.api(true)
                .row(nTr)
                .child.isShown();
            };

            /**
             * This function will place a new row directly after a row which is currently
             * on display on the page, with the HTML contents that is passed into the
             * function. This can be used, for example, to ask for confirmation that a
             * particular record should be deleted.
             *  @param {node} nTr The table row to 'open'
             *  @param {string|node|jQuery} mHtml The HTML to put into the row
             *  @param {string} sClass Class to give the new TD cell
             *  @returns {node} The row opened. Note that if the table row passed in as the
             *    first parameter, is not found in the table, this method will silently
             *    return.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnOpen = function(nTr, mHtml, sClass) {
              return this.api(true)
                .row(nTr)
                .child(mHtml, sClass)
                .show()
                .child()[0];
            };

            /**
             * Change the pagination - provides the internal logic for pagination in a simple API
             * function. With this function you can have a DataTables table go to the next,
             * previous, first or last pages.
             *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
             *    or page number to jump to (integer), note that page 0 is the first page.
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      oTable.fnPageChange( 'next' );
             *    } );
             */
            this.fnPageChange = function(mAction, bRedraw) {
              var api = this.api(true).page(mAction);

              if (bRedraw === undefined || bRedraw) {
                api.draw(false);
              }
            };

            /**
             * Show a particular column
             *  @param {int} iCol The column whose display should be changed
             *  @param {bool} bShow Show (true) or hide (false) the column
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Hide the second column after initialisation
             *      oTable.fnSetColumnVis( 1, false );
             *    } );
             */
            this.fnSetColumnVis = function(iCol, bShow, bRedraw) {
              var api = this.api(true)
                .column(iCol)
                .visible(bShow);

              if (bRedraw === undefined || bRedraw) {
                api.columns.adjust().draw();
              }
            };

            /**
             * Get the settings for a particular table for external manipulation
             *  @returns {object} DataTables settings object. See
             *    {@link DataTable.models.oSettings}
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      var oSettings = oTable.fnSettings();
             *
             *      // Show an example parameter from the settings
             *      alert( oSettings._iDisplayStart );
             *    } );
             */
            this.fnSettings = function() {
              return _fnSettingsFromNode(this[_ext.iApiIndex]);
            };

            /**
             * Sort the table by a particular column
             *  @param {int} iCol the data index to sort on. Note that this will not match the
             *    'display index' if you have hidden data entries
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sort immediately with columns 0 and 1
             *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
             *    } );
             */
            this.fnSort = function(aaSort) {
              this.api(true)
                .order(aaSort)
                .draw();
            };

            /**
             * Attach a sort listener to an element for a given column
             *  @param {node} nNode the element to attach the sort listener to
             *  @param {int} iColumn the column that a click on this node will sort on
             *  @param {function} [fnCallback] callback function when sort is run
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sort on column 1, when 'sorter' is clicked on
             *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
             *    } );
             */
            this.fnSortListener = function(nNode, iColumn, fnCallback) {
              this.api(true).order.listener(nNode, iColumn, fnCallback);
            };

            /**
             * Update a table cell or row - this method will accept either a single value to
             * update the cell with, an array of values with one element for each column or
             * an object in the same format as the original data source. The function is
             * self-referencing in order to make the multi column updates easier.
             *  @param {object|array|string} mData Data to update the cell/row with
             *  @param {node|int} mRow TR element you want to update or the aoData index
             *  @param {int} [iColumn] The column to update, give as null or undefined to
             *    update a whole row.
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @param {bool} [bAction=true] Perform pre-draw actions or not
             *  @returns {int} 0 on success, 1 on error
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
             *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
             *    } );
             */
            this.fnUpdate = function(mData, mRow, iColumn, bRedraw, bAction) {
              var api = this.api(true);

              if (iColumn === undefined || iColumn === null) {
                api.row(mRow).data(mData);
              } else {
                api.cell(mRow, iColumn).data(mData);
              }

              if (bAction === undefined || bAction) {
                api.columns.adjust();
              }

              if (bRedraw === undefined || bRedraw) {
                api.draw();
              }
              return 0;
            };

            /**
             * Provide a common method for plug-ins to check the version of DataTables being used, in order
             * to ensure compatibility.
             *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
             *    formats "X" and "X.Y" are also acceptable.
             *  @returns {boolean} true if this version of DataTables is greater or equal to the required
             *    version, or false if this version of DataTales is not suitable
             *  @method
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      alert( oTable.fnVersionCheck( '1.9.0' ) );
             *    } );
             */
            this.fnVersionCheck = _ext.fnVersionCheck;

            var _that = this;
            var emptyInit = options === undefined;
            var len = this.length;

            if (emptyInit) {
              options = {};
            }

            this.oApi = this.internal = _ext.internal;

            // Extend with old style plug-in API methods
            for (var fn in DataTable.ext.internal) {
              if (fn) {
                this[fn] = _fnExternApiFunc(fn);
              }
            }

            this.each(function() {
              // For each initialisation we want to give it a clean initialisation
              // object that can be bashed around
              var o = {};
              var oInit =
                len > 1 // optimisation for single table case
                  ? _fnExtend(o, options, true)
                  : options;

              /*global oInit,_that,emptyInit*/
              var i = 0,
                iLen,
                j,
                jLen,
                k,
                kLen;
              var sId = this.getAttribute("id");
              var bInitHandedOff = false;
              var defaults = DataTable.defaults;
              var $this = $(this);

              /* Sanity check */
              if (this.nodeName.toLowerCase() != "table") {
                _fnLog(
                  null,
                  0,
                  "Non-table node initialisation (" + this.nodeName + ")",
                  2
                );
                return;
              }

              /* Backwards compatibility for the defaults */
              _fnCompatOpts(defaults);
              _fnCompatCols(defaults.column);

              /* Convert the camel-case defaults to Hungarian */
              _fnCamelToHungarian(defaults, defaults, true);
              _fnCamelToHungarian(defaults.column, defaults.column, true);

              /* Setting up the initialisation object */
              _fnCamelToHungarian(
                defaults,
                $.extend(oInit, $this.data()),
                true
              );

              /* Check to see if we are re-initialising a table */
              var allSettings = DataTable.settings;
              for (i = 0, iLen = allSettings.length; i < iLen; i++) {
                var s = allSettings[i];

                /* Base check on table node */
                if (
                  s.nTable == this ||
                  (s.nTHead && s.nTHead.parentNode == this) ||
                  (s.nTFoot && s.nTFoot.parentNode == this)
                ) {
                  var bRetrieve =
                    oInit.bRetrieve !== undefined
                      ? oInit.bRetrieve
                      : defaults.bRetrieve;
                  var bDestroy =
                    oInit.bDestroy !== undefined
                      ? oInit.bDestroy
                      : defaults.bDestroy;

                  if (emptyInit || bRetrieve) {
                    return s.oInstance;
                  } else if (bDestroy) {
                    s.oInstance.fnDestroy();
                    break;
                  } else {
                    _fnLog(s, 0, "Cannot reinitialise DataTable", 3);
                    return;
                  }
                }

                /* If the element we are initialising has the same ID as a table which was previously
                 * initialised, but the table nodes don't match (from before) then we destroy the old
                 * instance by simply deleting it. This is under the assumption that the table has been
                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
                 */
                if (s.sTableId == this.id) {
                  allSettings.splice(i, 1);
                  break;
                }
              }

              /* Ensure the table has an ID - required for accessibility */
              if (sId === null || sId === "") {
                sId = "DataTables_Table_" + DataTable.ext._unique++;
                this.id = sId;
              }

              /* Create the settings object for this table and set some of the default parameters */
              var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
                sDestroyWidth: $this[0].style.width,
                sInstance: sId,
                sTableId: sId,
              });
              oSettings.nTable = this;
              oSettings.oApi = _that.internal;
              oSettings.oInit = oInit;

              allSettings.push(oSettings);

              // Need to add the instance after the instance after the settings object has been added
              // to the settings array, so we can self reference the table instance if more than one
              oSettings.oInstance =
                _that.length === 1 ? _that : $this.dataTable();

              // Backwards compatibility, before we apply all the defaults
              _fnCompatOpts(oInit);
              _fnLanguageCompat(oInit.oLanguage);

              // If the length menu is given, but the init display length is not, use the length menu
              if (oInit.aLengthMenu && !oInit.iDisplayLength) {
                oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0])
                  ? oInit.aLengthMenu[0][0]
                  : oInit.aLengthMenu[0];
              }

              // Apply the defaults and init options to make a single init object will all
              // options defined from defaults and instance options.
              oInit = _fnExtend($.extend(true, {}, defaults), oInit);

              // Map the initialisation options onto the settings object
              _fnMap(oSettings.oFeatures, oInit, [
                "bPaginate",
                "bLengthChange",
                "bFilter",
                "bSort",
                "bSortMulti",
                "bInfo",
                "bProcessing",
                "bAutoWidth",
                "bSortClasses",
                "bServerSide",
                "bDeferRender",
              ]);
              _fnMap(oSettings, oInit, [
                "asStripeClasses",
                "ajax",
                "fnServerData",
                "fnFormatNumber",
                "sServerMethod",
                "aaSorting",
                "aaSortingFixed",
                "aLengthMenu",
                "sPaginationType",
                "sAjaxSource",
                "sAjaxDataProp",
                "iStateDuration",
                "sDom",
                "bSortCellsTop",
                "iTabIndex",
                "fnStateLoadCallback",
                "fnStateSaveCallback",
                "renderer",
                "searchDelay",
                "rowId",
                ["iCookieDuration", "iStateDuration"], // backwards compat
                ["oSearch", "oPreviousSearch"],
                ["aoSearchCols", "aoPreSearchCols"],
                ["iDisplayLength", "_iDisplayLength"],
              ]);
              _fnMap(oSettings.oScroll, oInit, [
                ["sScrollX", "sX"],
                ["sScrollXInner", "sXInner"],
                ["sScrollY", "sY"],
                ["bScrollCollapse", "bCollapse"],
              ]);
              _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

              /* Callback functions which are array driven */
              _fnCallbackReg(
                oSettings,
                "aoDrawCallback",
                oInit.fnDrawCallback,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoServerParams",
                oInit.fnServerParams,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoStateSaveParams",
                oInit.fnStateSaveParams,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoStateLoadParams",
                oInit.fnStateLoadParams,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoStateLoaded",
                oInit.fnStateLoaded,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoRowCallback",
                oInit.fnRowCallback,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoRowCreatedCallback",
                oInit.fnCreatedRow,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoHeaderCallback",
                oInit.fnHeaderCallback,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoFooterCallback",
                oInit.fnFooterCallback,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoInitComplete",
                oInit.fnInitComplete,
                "user"
              );
              _fnCallbackReg(
                oSettings,
                "aoPreDrawCallback",
                oInit.fnPreDrawCallback,
                "user"
              );

              oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

              /* Browser support detection */
              _fnBrowserDetect(oSettings);

              var oClasses = oSettings.oClasses;

              $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
              $this.addClass(oClasses.sTable);

              if (oSettings.iInitDisplayStart === undefined) {
                /* Display start point, taking into account the save saving */
                oSettings.iInitDisplayStart = oInit.iDisplayStart;
                oSettings._iDisplayStart = oInit.iDisplayStart;
              }

              if (oInit.iDeferLoading !== null) {
                oSettings.bDeferLoading = true;
                var tmp = $.isArray(oInit.iDeferLoading);
                oSettings._iRecordsDisplay = tmp
                  ? oInit.iDeferLoading[0]
                  : oInit.iDeferLoading;
                oSettings._iRecordsTotal = tmp
                  ? oInit.iDeferLoading[1]
                  : oInit.iDeferLoading;
              }

              /* Language definitions */
              var oLanguage = oSettings.oLanguage;
              $.extend(true, oLanguage, oInit.oLanguage);

              if (oLanguage.sUrl) {
                /* Get the language definitions from a file - because this Ajax call makes the language
                 * get async to the remainder of this function we use bInitHandedOff to indicate that
                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
                 */
                $.ajax({
                  dataType: "json",
                  url: oLanguage.sUrl,
                  success: function(json) {
                    _fnLanguageCompat(json);
                    _fnCamelToHungarian(defaults.oLanguage, json);
                    $.extend(true, oLanguage, json);
                    _fnInitialise(oSettings);
                  },
                  error: function() {
                    // Error occurred loading language file, continue on as best we can
                    _fnInitialise(oSettings);
                  },
                });
                bInitHandedOff = true;
              }

              /*
               * Stripes
               */
              if (oInit.asStripeClasses === null) {
                oSettings.asStripeClasses = [
                  oClasses.sStripeOdd,
                  oClasses.sStripeEven,
                ];
              }

              /* Remove row stripe classes if they are already on the table row */
              var stripeClasses = oSettings.asStripeClasses;
              var rowOne = $this
                .children("tbody")
                .find("tr")
                .eq(0);
              if (
                $.inArray(
                  true,
                  $.map(stripeClasses, function(el, i) {
                    return rowOne.hasClass(el);
                  })
                ) !== -1
              ) {
                $("tbody tr", this).removeClass(stripeClasses.join(" "));
                oSettings.asDestroyStripes = stripeClasses.slice();
              }

              /*
               * Columns
               * See if we should load columns automatically or use defined ones
               */
              var anThs = [];
              var aoColumnsInit;
              var nThead = this.getElementsByTagName("thead");
              if (nThead.length !== 0) {
                _fnDetectHeader(oSettings.aoHeader, nThead[0]);
                anThs = _fnGetUniqueThs(oSettings);
              }

              /* If not given a column array, generate one with nulls */
              if (oInit.aoColumns === null) {
                aoColumnsInit = [];
                for (i = 0, iLen = anThs.length; i < iLen; i++) {
                  aoColumnsInit.push(null);
                }
              } else {
                aoColumnsInit = oInit.aoColumns;
              }

              /* Add the columns */
              for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
                _fnAddColumn(oSettings, anThs ? anThs[i] : null);
              }

              /* Apply the column definitions */
              _fnApplyColumnDefs(
                oSettings,
                oInit.aoColumnDefs,
                aoColumnsInit,
                function(iCol, oDef) {
                  _fnColumnOptions(oSettings, iCol, oDef);
                }
              );

              /* HTML5 attribute detection - build an mData object automatically if the
               * attributes are found
               */
              if (rowOne.length) {
                var a = function(cell, name) {
                  return cell.getAttribute("data-" + name) !== null
                    ? name
                    : null;
                };

                $(rowOne[0])
                  .children("th, td")
                  .each(function(i, cell) {
                    var col = oSettings.aoColumns[i];

                    if (col.mData === i) {
                      var sort = a(cell, "sort") || a(cell, "order");
                      var filter = a(cell, "filter") || a(cell, "search");

                      if (sort !== null || filter !== null) {
                        col.mData = {
                          _: i + ".display",
                          sort:
                            sort !== null ? i + ".@data-" + sort : undefined,
                          type:
                            sort !== null ? i + ".@data-" + sort : undefined,
                          filter:
                            filter !== null
                              ? i + ".@data-" + filter
                              : undefined,
                        };

                        _fnColumnOptions(oSettings, i);
                      }
                    }
                  });
              }

              var features = oSettings.oFeatures;
              var loadedInit = function() {
                /*
                 * Sorting
                 * @todo For modularisation (1.11) this needs to do into a sort start up handler
                 */

                // If aaSorting is not defined, then we use the first indicator in asSorting
                // in case that has been altered, so the default sort reflects that option
                if (oInit.aaSorting === undefined) {
                  var sorting = oSettings.aaSorting;
                  for (i = 0, iLen = sorting.length; i < iLen; i++) {
                    sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
                  }
                }

                /* Do a first pass on the sorting classes (allows any size changes to be taken into
                 * account, and also will apply sorting disabled classes if disabled
                 */
                _fnSortingClasses(oSettings);

                if (features.bSort) {
                  _fnCallbackReg(oSettings, "aoDrawCallback", function() {
                    if (oSettings.bSorted) {
                      var aSort = _fnSortFlatten(oSettings);
                      var sortedColumns = {};

                      $.each(aSort, function(i, val) {
                        sortedColumns[val.src] = val.dir;
                      });

                      _fnCallbackFire(oSettings, null, "order", [
                        oSettings,
                        aSort,
                        sortedColumns,
                      ]);
                      _fnSortAria(oSettings);
                    }
                  });
                }

                _fnCallbackReg(
                  oSettings,
                  "aoDrawCallback",
                  function() {
                    if (
                      oSettings.bSorted ||
                      _fnDataSource(oSettings) === "ssp" ||
                      features.bDeferRender
                    ) {
                      _fnSortingClasses(oSettings);
                    }
                  },
                  "sc"
                );

                /*
                 * Final init
                 * Cache the header, body and footer as required, creating them if needed
                 */

                // Work around for Webkit bug 83867 - store the caption-side before removing from doc
                var captions = $this.children("caption").each(function() {
                  this._captionSide = $(this).css("caption-side");
                });

                var thead = $this.children("thead");
                if (thead.length === 0) {
                  thead = $("<thead/>").appendTo($this);
                }
                oSettings.nTHead = thead[0];

                var tbody = $this.children("tbody");
                if (tbody.length === 0) {
                  tbody = $("<tbody/>").appendTo($this);
                }
                oSettings.nTBody = tbody[0];

                var tfoot = $this.children("tfoot");
                if (
                  tfoot.length === 0 &&
                  captions.length > 0 &&
                  (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")
                ) {
                  // If we are a scrolling table, and no footer has been given, then we need to create
                  // a tfoot element for the caption element to be appended to
                  tfoot = $("<tfoot/>").appendTo($this);
                }

                if (tfoot.length === 0 || tfoot.children().length === 0) {
                  $this.addClass(oClasses.sNoFooter);
                } else if (tfoot.length > 0) {
                  oSettings.nTFoot = tfoot[0];
                  _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
                }

                /* Check if there is data passing into the constructor */
                if (oInit.aaData) {
                  for (i = 0; i < oInit.aaData.length; i++) {
                    _fnAddData(oSettings, oInit.aaData[i]);
                  }
                } else if (
                  oSettings.bDeferLoading ||
                  _fnDataSource(oSettings) == "dom"
                ) {
                  /* Grab the data from the page - only do this when deferred loading or no Ajax
                   * source since there is no point in reading the DOM data if we are then going
                   * to replace it with Ajax data
                   */
                  _fnAddTr(oSettings, $(oSettings.nTBody).children("tr"));
                }

                /* Copy the data index array */
                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

                /* Initialisation complete - table can be drawn */
                oSettings.bInitialised = true;

                /* Check if we need to initialise the table (it might not have been handed off to the
                 * language processor)
                 */
                if (bInitHandedOff === false) {
                  _fnInitialise(oSettings);
                }
              };

              /* Must be done after everything which can be overridden by the state saving! */
              if (oInit.bStateSave) {
                features.bStateSave = true;
                _fnCallbackReg(
                  oSettings,
                  "aoDrawCallback",
                  _fnSaveState,
                  "state_save"
                );
                _fnLoadState(oSettings, oInit, loadedInit);
              } else {
                loadedInit();
              }
            });
            _that = null;
            return this;
          };

          /*
           * It is useful to have variables which are scoped locally so only the
           * DataTables functions can access them and they don't leak into global space.
           * At the same time these functions are often useful over multiple files in the
           * core and API, so we list, or at least document, all variables which are used
           * by DataTables as private variables here. This also ensures that there is no
           * clashing of variable names and that they can easily referenced for reuse.
           */

          // Defined else where
          //  _selector_run
          //  _selector_opts
          //  _selector_first
          //  _selector_row_indexes

          var _ext; // DataTable.ext
          var _Api; // DataTable.Api
          var _api_register; // DataTable.Api.register
          var _api_registerPlural; // DataTable.Api.registerPlural

          var _re_dic = {};
          var _re_new_lines = /[\r\n\u2028]/g;
          var _re_html = /<.*?>/g;

          // This is not strict ISO8601 - Date.parse() is quite lax, although
          // implementations differ between browsers.
          var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

          // Escape regular expression special characters
          var _re_escape_regex = new RegExp(
            "(\\" +
              [
                "/",
                ".",
                "*",
                "+",
                "?",
                "|",
                "(",
                ")",
                "[",
                "]",
                "{",
                "}",
                "\\",
                "$",
                "^",
                "-",
              ].join("|\\") +
              ")",
            "g"
          );

          // http://en.wikipedia.org/wiki/Foreign_exchange_market
          // - \u20BD - Russian ruble.
          // - \u20a9 - South Korean Won
          // - \u20BA - Turkish Lira
          // - \u20B9 - Indian Rupee
          // - R - Brazil (R$) and South Africa
          // - fr - Swiss Franc
          // - kr - Swedish krona, Norwegian krone and Danish krone
          // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
          // - Ƀ - Bitcoin
          // - Ξ - Ethereum
          //   standards as thousands separators.
          var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;

          var _empty = function(d) {
            return !d || d === true || d === "-" ? true : false;
          };

          var _intVal = function(s) {
            var integer = parseInt(s, 10);
            return !isNaN(integer) && isFinite(s) ? integer : null;
          };

          // Convert from a formatted number with characters other than `.` as the
          // decimal place, to a Javascript number
          var _numToDecimal = function(num, decimalPoint) {
            // Cache created regular expressions for speed as this function is called often
            if (!_re_dic[decimalPoint]) {
              _re_dic[decimalPoint] = new RegExp(
                _fnEscapeRegex(decimalPoint),
                "g"
              );
            }
            return typeof num === "string" && decimalPoint !== "."
              ? num.replace(/\./g, "").replace(_re_dic[decimalPoint], ".")
              : num;
          };

          var _isNumber = function(d, decimalPoint, formatted) {
            var strType = typeof d === "string";

            // If empty return immediately so there must be a number if it is a
            // formatted string (this stops the string "k", or "kr", etc being detected
            // as a formatted number for currency
            if (_empty(d)) {
              return true;
            }

            if (decimalPoint && strType) {
              d = _numToDecimal(d, decimalPoint);
            }

            if (formatted && strType) {
              d = d.replace(_re_formatted_numeric, "");
            }

            return !isNaN(parseFloat(d)) && isFinite(d);
          };

          // A string without HTML in it can be considered to be HTML still
          var _isHtml = function(d) {
            return _empty(d) || typeof d === "string";
          };

          var _htmlNumeric = function(d, decimalPoint, formatted) {
            if (_empty(d)) {
              return true;
            }

            var html = _isHtml(d);
            return !html
              ? null
              : _isNumber(_stripHtml(d), decimalPoint, formatted)
              ? true
              : null;
          };

          var _pluck = function(a, prop, prop2) {
            var out = [];
            var i = 0,
              ien = a.length;

            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if (prop2 !== undefined) {
              for (; i < ien; i++) {
                if (a[i] && a[i][prop]) {
                  out.push(a[i][prop][prop2]);
                }
              }
            } else {
              for (; i < ien; i++) {
                if (a[i]) {
                  out.push(a[i][prop]);
                }
              }
            }

            return out;
          };

          // Basically the same as _pluck, but rather than looping over `a` we use `order`
          // as the indexes to pick from `a`
          var _pluck_order = function(a, order, prop, prop2) {
            var out = [];
            var i = 0,
              ien = order.length;

            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if (prop2 !== undefined) {
              for (; i < ien; i++) {
                if (a[order[i]][prop]) {
                  out.push(a[order[i]][prop][prop2]);
                }
              }
            } else {
              for (; i < ien; i++) {
                out.push(a[order[i]][prop]);
              }
            }

            return out;
          };

          var _range = function(len, start) {
            var out = [];
            var end;

            if (start === undefined) {
              start = 0;
              end = len;
            } else {
              end = start;
              start = len;
            }

            for (var i = start; i < end; i++) {
              out.push(i);
            }

            return out;
          };

          var _removeEmpty = function(a) {
            var out = [];

            for (var i = 0, ien = a.length; i < ien; i++) {
              if (a[i]) {
                // careful - will remove all falsy values!
                out.push(a[i]);
              }
            }

            return out;
          };

          var _stripHtml = function(d) {
            return d.replace(_re_html, "");
          };

          /**
           * Determine if all values in the array are unique. This means we can short
           * cut the _unique method at the cost of a single loop. A sorted array is used
           * to easily check the values.
           *
           * @param  {array} src Source array
           * @return {boolean} true if all unique, false otherwise
           * @ignore
           */
          var _areAllUnique = function(src) {
            if (src.length < 2) {
              return true;
            }

            var sorted = src.slice().sort();
            var last = sorted[0];

            for (var i = 1, ien = sorted.length; i < ien; i++) {
              if (sorted[i] === last) {
                return false;
              }

              last = sorted[i];
            }

            return true;
          };

          /**
           * Find the unique elements in a source array.
           *
           * @param  {array} src Source array
           * @return {array} Array of unique items
           * @ignore
           */
          var _unique = function(src) {
            if (_areAllUnique(src)) {
              return src.slice();
            }

            // A faster unique method is to use object keys to identify used values,
            // but this doesn't work with arrays or objects, which we must also
            // consider. See jsperf.com/compare-array-unique-versions/4 for more
            // information.
            var out = [],
              val,
              i,
              ien = src.length,
              j,
              k = 0;

            again: for (i = 0; i < ien; i++) {
              val = src[i];

              for (j = 0; j < k; j++) {
                if (out[j] === val) {
                  continue again;
                }
              }

              out.push(val);
              k++;
            }

            return out;
          };

          /**
           * DataTables utility methods
           *
           * This namespace provides helper methods that DataTables uses internally to
           * create a DataTable, but which are not exclusively used only for DataTables.
           * These methods can be used by extension authors to save the duplication of
           * code.
           *
           *  @namespace
           */
          DataTable.util = {
            /**
             * Throttle the calls to a function. Arguments and context are maintained
             * for the throttled function.
             *
             * @param {function} fn Function to be called
             * @param {integer} freq Call frequency in mS
             * @return {function} Wrapped function
             */
            throttle: function(fn, freq) {
              var frequency = freq !== undefined ? freq : 200,
                last,
                timer;

              return function() {
                var that = this,
                  now = +new Date(),
                  args = arguments;

                if (last && now < last + frequency) {
                  clearTimeout(timer);

                  timer = setTimeout(function() {
                    last = undefined;
                    fn.apply(that, args);
                  }, frequency);
                } else {
                  last = now;
                  fn.apply(that, args);
                }
              };
            },

            /**
             * Escape a string such that it can be used in a regular expression
             *
             *  @param {string} val string to escape
             *  @returns {string} escaped string
             */
            escapeRegex: function(val) {
              return val.replace(_re_escape_regex, "\\$1");
            },
          };

          /**
           * Create a mapping object that allows camel case parameters to be looked up
           * for their Hungarian counterparts. The mapping is stored in a private
           * parameter called `_hungarianMap` which can be accessed on the source object.
           *  @param {object} o
           *  @memberof DataTable#oApi
           */
          function _fnHungarianMap(o) {
            var hungarian = "a aa ai ao as b fn i m o s ",
              match,
              newKey,
              map = {};

            $.each(o, function(key, val) {
              match = key.match(/^([^A-Z]+?)([A-Z])/);

              if (match && hungarian.indexOf(match[1] + " ") !== -1) {
                newKey = key.replace(match[0], match[2].toLowerCase());
                map[newKey] = key;

                if (match[1] === "o") {
                  _fnHungarianMap(o[key]);
                }
              }
            });

            o._hungarianMap = map;
          }

          /**
           * Convert from camel case parameters to Hungarian, based on a Hungarian map
           * created by _fnHungarianMap.
           *  @param {object} src The model object which holds all parameters that can be
           *    mapped.
           *  @param {object} user The object to convert from camel case to Hungarian.
           *  @param {boolean} force When set to `true`, properties which already have a
           *    Hungarian value in the `user` object will be overwritten. Otherwise they
           *    won't be.
           *  @memberof DataTable#oApi
           */
          function _fnCamelToHungarian(src, user, force) {
            if (!src._hungarianMap) {
              _fnHungarianMap(src);
            }

            var hungarianKey;

            $.each(user, function(key, val) {
              hungarianKey = src._hungarianMap[key];

              if (
                hungarianKey !== undefined &&
                (force || user[hungarianKey] === undefined)
              ) {
                // For objects, we need to buzz down into the object to copy parameters
                if (hungarianKey.charAt(0) === "o") {
                  // Copy the camelCase options over to the hungarian
                  if (!user[hungarianKey]) {
                    user[hungarianKey] = {};
                  }
                  $.extend(true, user[hungarianKey], user[key]);

                  _fnCamelToHungarian(
                    src[hungarianKey],
                    user[hungarianKey],
                    force
                  );
                } else {
                  user[hungarianKey] = user[key];
                }
              }
            });
          }

          /**
           * Language compatibility - when certain options are given, and others aren't, we
           * need to duplicate the values over, in order to provide backwards compatibility
           * with older language files.
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnLanguageCompat(lang) {
            // Note the use of the Hungarian notation for the parameters in this method as
            // this is called after the mapping of camelCase to Hungarian
            var defaults = DataTable.defaults.oLanguage;

            // Default mapping
            var defaultDecimal = defaults.sDecimal;
            if (defaultDecimal) {
              _addNumericSort(defaultDecimal);
            }

            if (lang) {
              var zeroRecords = lang.sZeroRecords;

              // Backwards compatibility - if there is no sEmptyTable given, then use the same as
              // sZeroRecords - assuming that is given.
              if (
                !lang.sEmptyTable &&
                zeroRecords &&
                defaults.sEmptyTable === "No data available in table"
              ) {
                _fnMap(lang, lang, "sZeroRecords", "sEmptyTable");
              }

              // Likewise with loading records
              if (
                !lang.sLoadingRecords &&
                zeroRecords &&
                defaults.sLoadingRecords === "Loading..."
              ) {
                _fnMap(lang, lang, "sZeroRecords", "sLoadingRecords");
              }

              // Old parameter name of the thousands separator mapped onto the new
              if (lang.sInfoThousands) {
                lang.sThousands = lang.sInfoThousands;
              }

              var decimal = lang.sDecimal;
              if (decimal && defaultDecimal !== decimal) {
                _addNumericSort(decimal);
              }
            }
          }

          /**
           * Map one parameter onto another
           *  @param {object} o Object to map
           *  @param {*} knew The new parameter name
           *  @param {*} old The old parameter name
           */
          var _fnCompatMap = function(o, knew, old) {
            if (o[knew] !== undefined) {
              o[old] = o[knew];
            }
          };

          /**
           * Provide backwards compatibility for the main DT options. Note that the new
           * options are mapped onto the old parameters, so this is an external interface
           * change only.
           *  @param {object} init Object to map
           */
          function _fnCompatOpts(init) {
            _fnCompatMap(init, "ordering", "bSort");
            _fnCompatMap(init, "orderMulti", "bSortMulti");
            _fnCompatMap(init, "orderClasses", "bSortClasses");
            _fnCompatMap(init, "orderCellsTop", "bSortCellsTop");
            _fnCompatMap(init, "order", "aaSorting");
            _fnCompatMap(init, "orderFixed", "aaSortingFixed");
            _fnCompatMap(init, "paging", "bPaginate");
            _fnCompatMap(init, "pagingType", "sPaginationType");
            _fnCompatMap(init, "pageLength", "iDisplayLength");
            _fnCompatMap(init, "searching", "bFilter");

            // Boolean initialisation of x-scrolling
            if (typeof init.sScrollX === "boolean") {
              init.sScrollX = init.sScrollX ? "100%" : "";
            }
            if (typeof init.scrollX === "boolean") {
              init.scrollX = init.scrollX ? "100%" : "";
            }

            // Column search objects are in an array, so it needs to be converted
            // element by element
            var searchCols = init.aoSearchCols;

            if (searchCols) {
              for (var i = 0, ien = searchCols.length; i < ien; i++) {
                if (searchCols[i]) {
                  _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
                }
              }
            }
          }

          /**
           * Provide backwards compatibility for column options. Note that the new options
           * are mapped onto the old parameters, so this is an external interface change
           * only.
           *  @param {object} init Object to map
           */
          function _fnCompatCols(init) {
            _fnCompatMap(init, "orderable", "bSortable");
            _fnCompatMap(init, "orderData", "aDataSort");
            _fnCompatMap(init, "orderSequence", "asSorting");
            _fnCompatMap(init, "orderDataType", "sortDataType");

            // orderData can be given as an integer
            var dataSort = init.aDataSort;
            if (typeof dataSort === "number" && !$.isArray(dataSort)) {
              init.aDataSort = [dataSort];
            }
          }

          /**
           * Browser feature detection for capabilities, quirks
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnBrowserDetect(settings) {
            // We don't need to do this every time DataTables is constructed, the values
            // calculated are specific to the browser and OS configuration which we
            // don't expect to change between initialisations
            if (!DataTable.__browser) {
              var browser = {};
              DataTable.__browser = browser;

              // Scrolling feature / quirks detection
              var n = $("<div/>")
                .css({
                  position: "fixed",
                  top: 0,
                  left: $(window).scrollLeft() * -1, // allow for scrolling
                  height: 1,
                  width: 1,
                  overflow: "hidden",
                })
                .append(
                  $("<div/>")
                    .css({
                      position: "absolute",
                      top: 1,
                      left: 1,
                      width: 100,
                      overflow: "scroll",
                    })
                    .append(
                      $("<div/>").css({
                        width: "100%",
                        height: 10,
                      })
                    )
                )
                .appendTo("body");

              var outer = n.children();
              var inner = outer.children();

              // Numbers below, in order, are:
              // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
              //
              // IE6 XP:                           100 100 100  83
              // IE7 Vista:                        100 100 100  83
              // IE 8+ Windows:                     83  83 100  83
              // Evergreen Windows:                 83  83 100  83
              // Evergreen Mac with scrollbars:     85  85 100  85
              // Evergreen Mac without scrollbars: 100 100 100 100

              // Get scrollbar width
              browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

              // IE6/7 will oversize a width 100% element inside a scrolling element, to
              // include the width of the scrollbar, while other browsers ensure the inner
              // element is contained without forcing scrolling
              browser.bScrollOversize =
                inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

              // In rtl text layout, some browsers (most, but not all) will place the
              // scrollbar on the left, rather than the right.
              browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

              // IE8- don't provide height and width for getBoundingClientRect
              browser.bBounding = n[0].getBoundingClientRect().width
                ? true
                : false;

              n.remove();
            }

            $.extend(settings.oBrowser, DataTable.__browser);
            settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
          }

          /**
           * Array.prototype reduce[Right] method, used for browsers which don't support
           * JS 1.6. Done this way to reduce code size, since we iterate either way
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnReduce(that, fn, init, start, end, inc) {
            var i = start,
              value,
              isSet = false;

            if (init !== undefined) {
              value = init;
              isSet = true;
            }

            while (i !== end) {
              if (!that.hasOwnProperty(i)) {
                continue;
              }

              value = isSet ? fn(value, that[i], i, that) : that[i];

              isSet = true;
              i += inc;
            }

            return value;
          }

          /**
           * Add a column to the list used for the table with default values
           *  @param {object} oSettings dataTables settings object
           *  @param {node} nTh The th element for this column
           *  @memberof DataTable#oApi
           */
          function _fnAddColumn(oSettings, nTh) {
            // Add column to aoColumns array
            var oDefaults = DataTable.defaults.column;
            var iCol = oSettings.aoColumns.length;
            var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
              nTh: nTh ? nTh : document.createElement("th"),
              sTitle: oDefaults.sTitle
                ? oDefaults.sTitle
                : nTh
                ? nTh.innerHTML
                : "",
              aDataSort: oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
              mData: oDefaults.mData ? oDefaults.mData : iCol,
              idx: iCol,
            });
            oSettings.aoColumns.push(oCol);

            // Add search object for column specific search. Note that the `searchCols[ iCol ]`
            // passed into extend can be undefined. This allows the user to give a default
            // with only some of the parameters defined, and also not give a default
            var searchCols = oSettings.aoPreSearchCols;
            searchCols[iCol] = $.extend(
              {},
              DataTable.models.oSearch,
              searchCols[iCol]
            );

            // Use the default column options function to initialise classes etc
            _fnColumnOptions(oSettings, iCol, $(nTh).data());
          }

          /**
           * Apply options for a column
           *  @param {object} oSettings dataTables settings object
           *  @param {int} iCol column index to consider
           *  @param {object} oOptions object with sType, bVisible and bSearchable etc
           *  @memberof DataTable#oApi
           */
          function _fnColumnOptions(oSettings, iCol, oOptions) {
            var oCol = oSettings.aoColumns[iCol];
            var oClasses = oSettings.oClasses;
            var th = $(oCol.nTh);

            // Try to get width information from the DOM. We can't get it from CSS
            // as we'd need to parse the CSS stylesheet. `width` option can override
            if (!oCol.sWidthOrig) {
              // Width attribute
              oCol.sWidthOrig = th.attr("width") || null;

              // Style attribute
              var t = (th.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
              if (t) {
                oCol.sWidthOrig = t[1];
              }
            }

            /* User specified column options */
            if (oOptions !== undefined && oOptions !== null) {
              // Backwards compatibility
              _fnCompatCols(oOptions);

              // Map camel case parameters to their Hungarian counterparts
              _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);

              /* Backwards compatibility for mDataProp */
              if (oOptions.mDataProp !== undefined && !oOptions.mData) {
                oOptions.mData = oOptions.mDataProp;
              }

              if (oOptions.sType) {
                oCol._sManualType = oOptions.sType;
              }

              // `class` is a reserved word in Javascript, so we need to provide
              // the ability to use a valid name for the camel case input
              if (oOptions.className && !oOptions.sClass) {
                oOptions.sClass = oOptions.className;
              }
              if (oOptions.sClass) {
                th.addClass(oOptions.sClass);
              }

              $.extend(oCol, oOptions);
              _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

              /* iDataSort to be applied (backwards compatibility), but aDataSort will take
               * priority if defined
               */
              if (oOptions.iDataSort !== undefined) {
                oCol.aDataSort = [oOptions.iDataSort];
              }
              _fnMap(oCol, oOptions, "aDataSort");
            }

            /* Cache the data get and set functions for speed */
            var mDataSrc = oCol.mData;
            var mData = _fnGetObjectDataFn(mDataSrc);
            var mRender = oCol.mRender
              ? _fnGetObjectDataFn(oCol.mRender)
              : null;

            var attrTest = function(src) {
              return typeof src === "string" && src.indexOf("@") !== -1;
            };
            oCol._bAttrSrc =
              $.isPlainObject(mDataSrc) &&
              (attrTest(mDataSrc.sort) ||
                attrTest(mDataSrc.type) ||
                attrTest(mDataSrc.filter));
            oCol._setter = null;

            oCol.fnGetData = function(rowData, type, meta) {
              var innerData = mData(rowData, type, undefined, meta);

              return mRender && type
                ? mRender(innerData, type, rowData, meta)
                : innerData;
            };
            oCol.fnSetData = function(rowData, val, meta) {
              return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
            };

            // Indicate if DataTables should read DOM data as an object or array
            // Used in _fnGetRowElements
            if (typeof mDataSrc !== "number") {
              oSettings._rowReadObject = true;
            }

            /* Feature sorting overrides column specific when off */
            if (!oSettings.oFeatures.bSort) {
              oCol.bSortable = false;
              th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
            }

            /* Check that the class assignment is correct for sorting */
            var bAsc = $.inArray("asc", oCol.asSorting) !== -1;
            var bDesc = $.inArray("desc", oCol.asSorting) !== -1;
            if (!oCol.bSortable || (!bAsc && !bDesc)) {
              oCol.sSortingClass = oClasses.sSortableNone;
              oCol.sSortingClassJUI = "";
            } else if (bAsc && !bDesc) {
              oCol.sSortingClass = oClasses.sSortableAsc;
              oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
            } else if (!bAsc && bDesc) {
              oCol.sSortingClass = oClasses.sSortableDesc;
              oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
            } else {
              oCol.sSortingClass = oClasses.sSortable;
              oCol.sSortingClassJUI = oClasses.sSortJUI;
            }
          }

          /**
           * Adjust the table column widths for new data. Note: you would probably want to
           * do a redraw after calling this function!
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnAdjustColumnSizing(settings) {
            /* Not interested in doing column width calculation if auto-width is disabled */
            if (settings.oFeatures.bAutoWidth !== false) {
              var columns = settings.aoColumns;

              _fnCalculateColumnWidths(settings);
              for (var i = 0, iLen = columns.length; i < iLen; i++) {
                columns[i].nTh.style.width = columns[i].sWidth;
              }
            }

            var scroll = settings.oScroll;
            if (scroll.sY !== "" || scroll.sX !== "") {
              _fnScrollDraw(settings);
            }

            _fnCallbackFire(settings, null, "column-sizing", [settings]);
          }

          /**
           * Covert the index of a visible column to the index in the data array (take account
           * of hidden columns)
           *  @param {object} oSettings dataTables settings object
           *  @param {int} iMatch Visible column index to lookup
           *  @returns {int} i the data index
           *  @memberof DataTable#oApi
           */
          function _fnVisibleToColumnIndex(oSettings, iMatch) {
            var aiVis = _fnGetColumns(oSettings, "bVisible");

            return typeof aiVis[iMatch] === "number" ? aiVis[iMatch] : null;
          }

          /**
           * Covert the index of an index in the data array and convert it to the visible
           *   column index (take account of hidden columns)
           *  @param {int} iMatch Column index to lookup
           *  @param {object} oSettings dataTables settings object
           *  @returns {int} i the data index
           *  @memberof DataTable#oApi
           */
          function _fnColumnIndexToVisible(oSettings, iMatch) {
            var aiVis = _fnGetColumns(oSettings, "bVisible");
            var iPos = $.inArray(iMatch, aiVis);

            return iPos !== -1 ? iPos : null;
          }

          /**
           * Get the number of visible columns
           *  @param {object} oSettings dataTables settings object
           *  @returns {int} i the number of visible columns
           *  @memberof DataTable#oApi
           */
          function _fnVisbleColumns(oSettings) {
            var vis = 0;

            // No reduce in IE8, use a loop for now
            $.each(oSettings.aoColumns, function(i, col) {
              if (col.bVisible && $(col.nTh).css("display") !== "none") {
                vis++;
              }
            });

            return vis;
          }

          /**
           * Get an array of column indexes that match a given property
           *  @param {object} oSettings dataTables settings object
           *  @param {string} sParam Parameter in aoColumns to look for - typically
           *    bVisible or bSearchable
           *  @returns {array} Array of indexes with matched properties
           *  @memberof DataTable#oApi
           */
          function _fnGetColumns(oSettings, sParam) {
            var a = [];

            $.map(oSettings.aoColumns, function(val, i) {
              if (val[sParam]) {
                a.push(i);
              }
            });

            return a;
          }

          /**
           * Calculate the 'type' of a column
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnColumnTypes(settings) {
            var columns = settings.aoColumns;
            var data = settings.aoData;
            var types = DataTable.ext.type.detect;
            var i, ien, j, jen, k, ken;
            var col, cell, detectedType, cache;

            // For each column, spin over the
            for (i = 0, ien = columns.length; i < ien; i++) {
              col = columns[i];
              cache = [];

              if (!col.sType && col._sManualType) {
                col.sType = col._sManualType;
              } else if (!col.sType) {
                for (j = 0, jen = types.length; j < jen; j++) {
                  for (k = 0, ken = data.length; k < ken; k++) {
                    // Use a cache array so we only need to get the type data
                    // from the formatter once (when using multiple detectors)
                    if (cache[k] === undefined) {
                      cache[k] = _fnGetCellData(settings, k, i, "type");
                    }

                    detectedType = types[j](cache[k], settings);

                    // If null, then this type can't apply to this column, so
                    // rather than testing all cells, break out. There is an
                    // exception for the last type which is `html`. We need to
                    // scan all rows since it is possible to mix string and HTML
                    // types
                    if (!detectedType && j !== types.length - 1) {
                      break;
                    }

                    // Only a single match is needed for html type since it is
                    // bottom of the pile and very similar to string
                    if (detectedType === "html") {
                      break;
                    }
                  }

                  // Type is valid for all data points in the column - use this
                  // type
                  if (detectedType) {
                    col.sType = detectedType;
                    break;
                  }
                }

                // Fall back - if no type was detected, always use string
                if (!col.sType) {
                  col.sType = "string";
                }
              }
            }
          }

          /**
           * Take the column definitions and static columns arrays and calculate how
           * they relate to column indexes. The callback function will then apply the
           * definition found for a column to a suitable configuration object.
           *  @param {object} oSettings dataTables settings object
           *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
           *  @param {array} aoCols The aoColumns array that defines columns individually
           *  @param {function} fn Callback function - takes two parameters, the calculated
           *    column index and the definition for that column.
           *  @memberof DataTable#oApi
           */
          function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
            var i, iLen, j, jLen, k, kLen, def;
            var columns = oSettings.aoColumns;

            // Column definitions with aTargets
            if (aoColDefs) {
              /* Loop over the definitions array - loop in reverse so first instance has priority */
              for (i = aoColDefs.length - 1; i >= 0; i--) {
                def = aoColDefs[i];

                /* Each definition can target multiple columns, as it is an array */
                var aTargets =
                  def.targets !== undefined ? def.targets : def.aTargets;

                if (!$.isArray(aTargets)) {
                  aTargets = [aTargets];
                }

                for (j = 0, jLen = aTargets.length; j < jLen; j++) {
                  if (typeof aTargets[j] === "number" && aTargets[j] >= 0) {
                    /* Add columns that we don't yet know about */
                    while (columns.length <= aTargets[j]) {
                      _fnAddColumn(oSettings);
                    }

                    /* Integer, basic index */
                    fn(aTargets[j], def);
                  } else if (
                    typeof aTargets[j] === "number" &&
                    aTargets[j] < 0
                  ) {
                    /* Negative integer, right to left column counting */
                    fn(columns.length + aTargets[j], def);
                  } else if (typeof aTargets[j] === "string") {
                    /* Class name matching on TH element */
                    for (k = 0, kLen = columns.length; k < kLen; k++) {
                      if (
                        aTargets[j] == "_all" ||
                        $(columns[k].nTh).hasClass(aTargets[j])
                      ) {
                        fn(k, def);
                      }
                    }
                  }
                }
              }
            }

            // Statically defined columns array
            if (aoCols) {
              for (i = 0, iLen = aoCols.length; i < iLen; i++) {
                fn(i, aoCols[i]);
              }
            }
          }

          /**
           * Add a data array to the table, creating DOM node etc. This is the parallel to
           * _fnGatherData, but for adding rows from a Javascript source, rather than a
           * DOM source.
           *  @param {object} oSettings dataTables settings object
           *  @param {array} aData data array to be added
           *  @param {node} [nTr] TR element to add to the table - optional. If not given,
           *    DataTables will create a row automatically
           *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
           *    if nTr is.
           *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
           *  @memberof DataTable#oApi
           */
          function _fnAddData(oSettings, aDataIn, nTr, anTds) {
            /* Create the object for storing information about this new row */
            var iRow = oSettings.aoData.length;
            var oData = $.extend(true, {}, DataTable.models.oRow, {
              src: nTr ? "dom" : "data",
              idx: iRow,
            });

            oData._aData = aDataIn;
            oSettings.aoData.push(oData);

            /* Create the cells */
            var nTd, sThisType;
            var columns = oSettings.aoColumns;

            // Invalidate the column types as the new data needs to be revalidated
            for (var i = 0, iLen = columns.length; i < iLen; i++) {
              columns[i].sType = null;
            }

            /* Add to the display array */
            oSettings.aiDisplayMaster.push(iRow);

            var id = oSettings.rowIdFn(aDataIn);
            if (id !== undefined) {
              oSettings.aIds[id] = oData;
            }

            /* Create the DOM information, or register it if already present */
            if (nTr || !oSettings.oFeatures.bDeferRender) {
              _fnCreateTr(oSettings, iRow, nTr, anTds);
            }

            return iRow;
          }

          /**
           * Add one or more TR elements to the table. Generally we'd expect to
           * use this for reading data from a DOM sourced table, but it could be
           * used for an TR element. Note that if a TR is given, it is used (i.e.
           * it is not cloned).
           *  @param {object} settings dataTables settings object
           *  @param {array|node|jQuery} trs The TR element(s) to add to the table
           *  @returns {array} Array of indexes for the added rows
           *  @memberof DataTable#oApi
           */
          function _fnAddTr(settings, trs) {
            var row;

            // Allow an individual node to be passed in
            if (!(trs instanceof $)) {
              trs = $(trs);
            }

            return trs.map(function(i, el) {
              row = _fnGetRowElements(settings, el);
              return _fnAddData(settings, row.data, el, row.cells);
            });
          }

          /**
           * Take a TR element and convert it to an index in aoData
           *  @param {object} oSettings dataTables settings object
           *  @param {node} n the TR element to find
           *  @returns {int} index if the node is found, null if not
           *  @memberof DataTable#oApi
           */
          function _fnNodeToDataIndex(oSettings, n) {
            return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
          }

          /**
           * Take a TD element and convert it into a column data index (not the visible index)
           *  @param {object} oSettings dataTables settings object
           *  @param {int} iRow The row number the TD/TH can be found in
           *  @param {node} n The TD/TH element to find
           *  @returns {int} index if the node is found, -1 if not
           *  @memberof DataTable#oApi
           */
          function _fnNodeToColumnIndex(oSettings, iRow, n) {
            return $.inArray(n, oSettings.aoData[iRow].anCells);
          }

          /**
           * Get the data for a given cell from the internal cache, taking into account data mapping
           *  @param {object} settings dataTables settings object
           *  @param {int} rowIdx aoData row id
           *  @param {int} colIdx Column index
           *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
           *  @returns {*} Cell data
           *  @memberof DataTable#oApi
           */
          function _fnGetCellData(settings, rowIdx, colIdx, type) {
            var draw = settings.iDraw;
            var col = settings.aoColumns[colIdx];
            var rowData = settings.aoData[rowIdx]._aData;
            var defaultContent = col.sDefaultContent;
            var cellData = col.fnGetData(rowData, type, {
              settings: settings,
              row: rowIdx,
              col: colIdx,
            });

            if (cellData === undefined) {
              if (settings.iDrawError != draw && defaultContent === null) {
                _fnLog(
                  settings,
                  0,
                  "Requested unknown parameter " +
                    (typeof col.mData == "function"
                      ? "{function}"
                      : "'" + col.mData + "'") +
                    " for row " +
                    rowIdx +
                    ", column " +
                    colIdx,
                  4
                );
                settings.iDrawError = draw;
              }
              return defaultContent;
            }

            // When the data source is null and a specific data type is requested (i.e.
            // not the original data), we can use default column data
            if (
              (cellData === rowData || cellData === null) &&
              defaultContent !== null &&
              type !== undefined
            ) {
              cellData = defaultContent;
            } else if (typeof cellData === "function") {
              // If the data source is a function, then we run it and use the return,
              // executing in the scope of the data object (for instances)
              return cellData.call(rowData);
            }

            if (cellData === null && type == "display") {
              return "";
            }
            return cellData;
          }

          /**
           * Set the value for a specific cell, into the internal data cache
           *  @param {object} settings dataTables settings object
           *  @param {int} rowIdx aoData row id
           *  @param {int} colIdx Column index
           *  @param {*} val Value to set
           *  @memberof DataTable#oApi
           */
          function _fnSetCellData(settings, rowIdx, colIdx, val) {
            var col = settings.aoColumns[colIdx];
            var rowData = settings.aoData[rowIdx]._aData;

            col.fnSetData(rowData, val, {
              settings: settings,
              row: rowIdx,
              col: colIdx,
            });
          }

          // Private variable that is used to match action syntax in the data property object
          var __reArray = /\[.*?\]$/;
          var __reFn = /\(\)$/;

          /**
           * Split string on periods, taking into account escaped periods
           * @param  {string} str String to split
           * @return {array} Split string
           */
          function _fnSplitObjNotation(str) {
            return $.map(str.match(/(\\.|[^\.])+/g) || [""], function(s) {
              return s.replace(/\\\./g, ".");
            });
          }

          /**
           * Return a function that can be used to get data from a source object, taking
           * into account the ability to use nested objects as a source
           *  @param {string|int|function} mSource The data source for the object
           *  @returns {function} Data get function
           *  @memberof DataTable#oApi
           */
          function _fnGetObjectDataFn(mSource) {
            if ($.isPlainObject(mSource)) {
              /* Build an object of get functions, and wrap them in a single call */
              var o = {};
              $.each(mSource, function(key, val) {
                if (val) {
                  o[key] = _fnGetObjectDataFn(val);
                }
              });

              return function(data, type, row, meta) {
                var t = o[type] || o._;
                return t !== undefined ? t(data, type, row, meta) : data;
              };
            } else if (mSource === null) {
              /* Give an empty string for rendering / sorting etc */
              return function(data) {
                // type, row and meta also passed, but not used
                return data;
              };
            } else if (typeof mSource === "function") {
              return function(data, type, row, meta) {
                return mSource(data, type, row, meta);
              };
            } else if (
              typeof mSource === "string" &&
              (mSource.indexOf(".") !== -1 ||
                mSource.indexOf("[") !== -1 ||
                mSource.indexOf("(") !== -1)
            ) {
              /* If there is a . in the source string then the data source is in a
               * nested object so we loop over the data for each level to get the next
               * level down. On each loop we test for undefined, and if found immediately
               * return. This allows entire objects to be missing and sDefaultContent to
               * be used if defined, rather than throwing an error
               */
              var fetchData = function(data, type, src) {
                var arrayNotation, funcNotation, out, innerSrc;

                if (src !== "") {
                  var a = _fnSplitObjNotation(src);

                  for (var i = 0, iLen = a.length; i < iLen; i++) {
                    // Check if we are dealing with special notation
                    arrayNotation = a[i].match(__reArray);
                    funcNotation = a[i].match(__reFn);

                    if (arrayNotation) {
                      // Array notation
                      a[i] = a[i].replace(__reArray, "");

                      // Condition allows simply [] to be passed in
                      if (a[i] !== "") {
                        data = data[a[i]];
                      }
                      out = [];

                      // Get the remainder of the nested object to get
                      a.splice(0, i + 1);
                      innerSrc = a.join(".");

                      // Traverse each entry in the array getting the properties requested
                      if ($.isArray(data)) {
                        for (var j = 0, jLen = data.length; j < jLen; j++) {
                          out.push(fetchData(data[j], type, innerSrc));
                        }
                      }

                      // If a string is given in between the array notation indicators, that
                      // is used to join the strings together, otherwise an array is returned
                      var join = arrayNotation[0].substring(
                        1,
                        arrayNotation[0].length - 1
                      );
                      data = join === "" ? out : out.join(join);

                      // The inner call to fetchData has already traversed through the remainder
                      // of the source requested, so we exit from the loop
                      break;
                    } else if (funcNotation) {
                      // Function call
                      a[i] = a[i].replace(__reFn, "");
                      data = data[a[i]]();
                      continue;
                    }

                    if (data === null || data[a[i]] === undefined) {
                      return undefined;
                    }
                    data = data[a[i]];
                  }
                }

                return data;
              };

              return function(data, type) {
                // row and meta also passed, but not used
                return fetchData(data, type, mSource);
              };
            } else {
              /* Array or flat object mapping */
              return function(data, type) {
                // row and meta also passed, but not used
                return data[mSource];
              };
            }
          }

          /**
           * Return a function that can be used to set data from a source object, taking
           * into account the ability to use nested objects as a source
           *  @param {string|int|function} mSource The data source for the object
           *  @returns {function} Data set function
           *  @memberof DataTable#oApi
           */
          function _fnSetObjectDataFn(mSource) {
            if ($.isPlainObject(mSource)) {
              /* Unlike get, only the underscore (global) option is used for for
               * setting data since we don't know the type here. This is why an object
               * option is not documented for `mData` (which is read/write), but it is
               * for `mRender` which is read only.
               */
              return _fnSetObjectDataFn(mSource._);
            } else if (mSource === null) {
              /* Nothing to do when the data source is null */
              return function() {};
            } else if (typeof mSource === "function") {
              return function(data, val, meta) {
                mSource(data, "set", val, meta);
              };
            } else if (
              typeof mSource === "string" &&
              (mSource.indexOf(".") !== -1 ||
                mSource.indexOf("[") !== -1 ||
                mSource.indexOf("(") !== -1)
            ) {
              /* Like the get, we need to get data from a nested object */
              var setData = function(data, val, src) {
                var a = _fnSplitObjNotation(src),
                  b;
                var aLast = a[a.length - 1];
                var arrayNotation, funcNotation, o, innerSrc;

                for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
                  // Check if we are dealing with an array notation request
                  arrayNotation = a[i].match(__reArray);
                  funcNotation = a[i].match(__reFn);

                  if (arrayNotation) {
                    a[i] = a[i].replace(__reArray, "");
                    data[a[i]] = [];

                    // Get the remainder of the nested object to set so we can recurse
                    b = a.slice();
                    b.splice(0, i + 1);
                    innerSrc = b.join(".");

                    // Traverse each entry in the array setting the properties requested
                    if ($.isArray(val)) {
                      for (var j = 0, jLen = val.length; j < jLen; j++) {
                        o = {};
                        setData(o, val[j], innerSrc);
                        data[a[i]].push(o);
                      }
                    } else {
                      // We've been asked to save data to an array, but it
                      // isn't array data to be saved. Best that can be done
                      // is to just save the value.
                      data[a[i]] = val;
                    }

                    // The inner call to setData has already traversed through the remainder
                    // of the source and has set the data, thus we can exit here
                    return;
                  } else if (funcNotation) {
                    // Function call
                    a[i] = a[i].replace(__reFn, "");
                    data = data[a[i]](val);
                  }

                  // If the nested object doesn't currently exist - since we are
                  // trying to set the value - create it
                  if (data[a[i]] === null || data[a[i]] === undefined) {
                    data[a[i]] = {};
                  }
                  data = data[a[i]];
                }

                // Last item in the input - i.e, the actual set
                if (aLast.match(__reFn)) {
                  // Function call
                  data = data[aLast.replace(__reFn, "")](val);
                } else {
                  // If array notation is used, we just want to strip it and use the property name
                  // and assign the value. If it isn't used, then we get the result we want anyway
                  data[aLast.replace(__reArray, "")] = val;
                }
              };

              return function(data, val) {
                // meta is also passed in, but not used
                return setData(data, val, mSource);
              };
            } else {
              /* Array or flat object mapping */
              return function(data, val) {
                // meta is also passed in, but not used
                data[mSource] = val;
              };
            }
          }

          /**
           * Return an array with the full table data
           *  @param {object} oSettings dataTables settings object
           *  @returns array {array} aData Master data array
           *  @memberof DataTable#oApi
           */
          function _fnGetDataMaster(settings) {
            return _pluck(settings.aoData, "_aData");
          }

          /**
           * Nuke the table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnClearTable(settings) {
            settings.aoData.length = 0;
            settings.aiDisplayMaster.length = 0;
            settings.aiDisplay.length = 0;
            settings.aIds = {};
          }

          /**
           * Take an array of integers (index array) and remove a target integer (value - not
           * the key!)
           *  @param {array} a Index array to target
           *  @param {int} iTarget value to find
           *  @memberof DataTable#oApi
           */
          function _fnDeleteIndex(a, iTarget, splice) {
            var iTargetIndex = -1;

            for (var i = 0, iLen = a.length; i < iLen; i++) {
              if (a[i] == iTarget) {
                iTargetIndex = i;
              } else if (a[i] > iTarget) {
                a[i]--;
              }
            }

            if (iTargetIndex != -1 && splice === undefined) {
              a.splice(iTargetIndex, 1);
            }
          }

          /**
           * Mark cached data as invalid such that a re-read of the data will occur when
           * the cached data is next requested. Also update from the data source object.
           *
           * @param {object} settings DataTables settings object
           * @param {int}    rowIdx   Row index to invalidate
           * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
           *     or 'data'
           * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
           *     row will be invalidated
           * @memberof DataTable#oApi
           *
           * @todo For the modularisation of v1.11 this will need to become a callback, so
           *   the sort and filter methods can subscribe to it. That will required
           *   initialisation options for sorting, which is why it is not already baked in
           */
          function _fnInvalidate(settings, rowIdx, src, colIdx) {
            var row = settings.aoData[rowIdx];
            var i, ien;
            var cellWrite = function(cell, col) {
              // This is very frustrating, but in IE if you just write directly
              // to innerHTML, and elements that are overwritten are GC'ed,
              // even if there is a reference to them elsewhere
              while (cell.childNodes.length) {
                cell.removeChild(cell.firstChild);
              }

              cell.innerHTML = _fnGetCellData(settings, rowIdx, col, "display");
            };

            // Are we reading last data from DOM or the data object?
            if (
              src === "dom" ||
              ((!src || src === "auto") && row.src === "dom")
            ) {
              // Read the data from the DOM
              row._aData = _fnGetRowElements(
                settings,
                row,
                colIdx,
                colIdx === undefined ? undefined : row._aData
              ).data;
            } else {
              // Reading from data object, update the DOM
              var cells = row.anCells;

              if (cells) {
                if (colIdx !== undefined) {
                  cellWrite(cells[colIdx], colIdx);
                } else {
                  for (i = 0, ien = cells.length; i < ien; i++) {
                    cellWrite(cells[i], i);
                  }
                }
              }
            }

            // For both row and cell invalidation, the cached data for sorting and
            // filtering is nulled out
            row._aSortData = null;
            row._aFilterData = null;

            // Invalidate the type for a specific column (if given) or all columns since
            // the data might have changed
            var cols = settings.aoColumns;
            if (colIdx !== undefined) {
              cols[colIdx].sType = null;
            } else {
              for (i = 0, ien = cols.length; i < ien; i++) {
                cols[i].sType = null;
              }

              // Update DataTables special `DT_*` attributes for the row
              _fnRowAttributes(settings, row);
            }
          }

          /**
           * Build a data source object from an HTML row, reading the contents of the
           * cells that are in the row.
           *
           * @param {object} settings DataTables settings object
           * @param {node|object} TR element from which to read data or existing row
           *   object from which to re-read the data from the cells
           * @param {int} [colIdx] Optional column index
           * @param {array|object} [d] Data source object. If `colIdx` is given then this
           *   parameter should also be given and will be used to write the data into.
           *   Only the column in question will be written
           * @returns {object} Object with two parameters: `data` the data read, in
           *   document order, and `cells` and array of nodes (they can be useful to the
           *   caller, so rather than needing a second traversal to get them, just return
           *   them from here).
           * @memberof DataTable#oApi
           */
          function _fnGetRowElements(settings, row, colIdx, d) {
            var tds = [],
              td = row.firstChild,
              name,
              col,
              o,
              i = 0,
              contents,
              columns = settings.aoColumns,
              objectRead = settings._rowReadObject;

            // Allow the data object to be passed in, or construct
            d = d !== undefined ? d : objectRead ? {} : [];

            var attr = function(str, td) {
              if (typeof str === "string") {
                var idx = str.indexOf("@");

                if (idx !== -1) {
                  var attr = str.substring(idx + 1);
                  var setter = _fnSetObjectDataFn(str);
                  setter(d, td.getAttribute(attr));
                }
              }
            };

            // Read data from a cell and store into the data object
            var cellProcess = function(cell) {
              if (colIdx === undefined || colIdx === i) {
                col = columns[i];
                contents = $.trim(cell.innerHTML);

                if (col && col._bAttrSrc) {
                  var setter = _fnSetObjectDataFn(col.mData._);
                  setter(d, contents);

                  attr(col.mData.sort, cell);
                  attr(col.mData.type, cell);
                  attr(col.mData.filter, cell);
                } else {
                  // Depending on the `data` option for the columns the data can
                  // be read to either an object or an array.
                  if (objectRead) {
                    if (!col._setter) {
                      // Cache the setter function
                      col._setter = _fnSetObjectDataFn(col.mData);
                    }
                    col._setter(d, contents);
                  } else {
                    d[i] = contents;
                  }
                }
              }

              i++;
            };

            if (td) {
              // `tr` element was passed in
              while (td) {
                name = td.nodeName.toUpperCase();

                if (name == "TD" || name == "TH") {
                  cellProcess(td);
                  tds.push(td);
                }

                td = td.nextSibling;
              }
            } else {
              // Existing row object passed in
              tds = row.anCells;

              for (var j = 0, jen = tds.length; j < jen; j++) {
                cellProcess(tds[j]);
              }
            }

            // Read the ID from the DOM if present
            var rowNode = row.firstChild ? row : row.nTr;

            if (rowNode) {
              var id = rowNode.getAttribute("id");

              if (id) {
                _fnSetObjectDataFn(settings.rowId)(d, id);
              }
            }

            return {
              data: d,
              cells: tds,
            };
          }
          /**
           * Create a new TR element (and it's TD children) for a row
           *  @param {object} oSettings dataTables settings object
           *  @param {int} iRow Row to consider
           *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
           *    DataTables will create a row automatically
           *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
           *    if nTr is.
           *  @memberof DataTable#oApi
           */
          function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
            var row = oSettings.aoData[iRow],
              rowData = row._aData,
              cells = [],
              nTr,
              nTd,
              oCol,
              i,
              iLen,
              create;

            if (row.nTr === null) {
              nTr = nTrIn || document.createElement("tr");

              row.nTr = nTr;
              row.anCells = cells;

              /* Use a private property on the node to allow reserve mapping from the node
               * to the aoData array for fast look up
               */
              nTr._DT_RowIndex = iRow;

              /* Special parameters can be given by the data source to be used on the row */
              _fnRowAttributes(oSettings, row);

              /* Process each column */
              for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
                oCol = oSettings.aoColumns[i];
                create = nTrIn ? false : true;

                nTd = create
                  ? document.createElement(oCol.sCellType)
                  : anTds[i];
                nTd._DT_CellIndex = {
                  row: iRow,
                  column: i,
                };

                cells.push(nTd);

                // Need to create the HTML if new, or if a rendering function is defined
                if (
                  create ||
                  ((!nTrIn || oCol.mRender || oCol.mData !== i) &&
                    (!$.isPlainObject(oCol.mData) ||
                      oCol.mData._ !== i + ".display"))
                ) {
                  nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, "display");
                }

                /* Add user defined class */
                if (oCol.sClass) {
                  nTd.className += " " + oCol.sClass;
                }

                // Visibility - add or remove as required
                if (oCol.bVisible && !nTrIn) {
                  nTr.appendChild(nTd);
                } else if (!oCol.bVisible && nTrIn) {
                  nTd.parentNode.removeChild(nTd);
                }

                if (oCol.fnCreatedCell) {
                  oCol.fnCreatedCell.call(
                    oSettings.oInstance,
                    nTd,
                    _fnGetCellData(oSettings, iRow, i),
                    rowData,
                    iRow,
                    i
                  );
                }
              }

              _fnCallbackFire(oSettings, "aoRowCreatedCallback", null, [
                nTr,
                rowData,
                iRow,
                cells,
              ]);
            }

            // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
            // and deployed
            row.nTr.setAttribute("role", "row");
          }

          /**
           * Add attributes to a row based on the special `DT_*` parameters in a data
           * source object.
           *  @param {object} settings DataTables settings object
           *  @param {object} DataTables row object for the row to be modified
           *  @memberof DataTable#oApi
           */
          function _fnRowAttributes(settings, row) {
            var tr = row.nTr;
            var data = row._aData;

            if (tr) {
              var id = settings.rowIdFn(data);

              if (id) {
                tr.id = id;
              }

              if (data.DT_RowClass) {
                // Remove any classes added by DT_RowClass before
                var a = data.DT_RowClass.split(" ");
                row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;

                $(tr)
                  .removeClass(row.__rowc.join(" "))
                  .addClass(data.DT_RowClass);
              }

              if (data.DT_RowAttr) {
                $(tr).attr(data.DT_RowAttr);
              }

              if (data.DT_RowData) {
                $(tr).data(data.DT_RowData);
              }
            }
          }

          /**
           * Create the HTML header for the table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnBuildHead(oSettings) {
            var i, ien, cell, row, column;
            var thead = oSettings.nTHead;
            var tfoot = oSettings.nTFoot;
            var createHeader = $("th, td", thead).length === 0;
            var classes = oSettings.oClasses;
            var columns = oSettings.aoColumns;

            if (createHeader) {
              row = $("<tr/>").appendTo(thead);
            }

            for (i = 0, ien = columns.length; i < ien; i++) {
              column = columns[i];
              cell = $(column.nTh).addClass(column.sClass);

              if (createHeader) {
                cell.appendTo(row);
              }

              // 1.11 move into sorting
              if (oSettings.oFeatures.bSort) {
                cell.addClass(column.sSortingClass);

                if (column.bSortable !== false) {
                  cell
                    .attr("tabindex", oSettings.iTabIndex)
                    .attr("aria-controls", oSettings.sTableId);

                  _fnSortAttachListener(oSettings, column.nTh, i);
                }
              }

              if (column.sTitle != cell[0].innerHTML) {
                cell.html(column.sTitle);
              }

              _fnRenderer(oSettings, "header")(
                oSettings,
                cell,
                column,
                classes
              );
            }

            if (createHeader) {
              _fnDetectHeader(oSettings.aoHeader, thead);
            }

            /* ARIA role for the rows */
            $(thead)
              .find(">tr")
              .attr("role", "row");

            /* Deal with the footer - add classes if required */
            $(thead)
              .find(">tr>th, >tr>td")
              .addClass(classes.sHeaderTH);
            $(tfoot)
              .find(">tr>th, >tr>td")
              .addClass(classes.sFooterTH);

            // Cache the footer cells. Note that we only take the cells from the first
            // row in the footer. If there is more than one row the user wants to
            // interact with, they need to use the table().foot() method. Note also this
            // allows cells to be used for multiple columns using colspan
            if (tfoot !== null) {
              var cells = oSettings.aoFooter[0];

              for (i = 0, ien = cells.length; i < ien; i++) {
                column = columns[i];
                column.nTf = cells[i].cell;

                if (column.sClass) {
                  $(column.nTf).addClass(column.sClass);
                }
              }
            }
          }

          /**
           * Draw the header (or footer) element based on the column visibility states. The
           * methodology here is to use the layout array from _fnDetectHeader, modified for
           * the instantaneous column visibility, to construct the new layout. The grid is
           * traversed over cell at a time in a rows x columns grid fashion, although each
           * cell insert can cover multiple elements in the grid - which is tracks using the
           * aApplied array. Cell inserts in the grid will only occur where there isn't
           * already a cell in that position.
           *  @param {object} oSettings dataTables settings object
           *  @param array {objects} aoSource Layout array from _fnDetectHeader
           *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
           *  @memberof DataTable#oApi
           */
          function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
            var i, iLen, j, jLen, k, kLen, n, nLocalTr;
            var aoLocal = [];
            var aApplied = [];
            var iColumns = oSettings.aoColumns.length;
            var iRowspan, iColspan;

            if (!aoSource) {
              return;
            }

            if (bIncludeHidden === undefined) {
              bIncludeHidden = false;
            }

            /* Make a copy of the master layout array, but without the visible columns in it */
            for (i = 0, iLen = aoSource.length; i < iLen; i++) {
              aoLocal[i] = aoSource[i].slice();
              aoLocal[i].nTr = aoSource[i].nTr;

              /* Remove any columns which are currently hidden */
              for (j = iColumns - 1; j >= 0; j--) {
                if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
                  aoLocal[i].splice(j, 1);
                }
              }

              /* Prep the applied array - it needs an element for each row */
              aApplied.push([]);
            }

            for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
              nLocalTr = aoLocal[i].nTr;

              /* All cells are going to be replaced, so empty out the row */
              if (nLocalTr) {
                while ((n = nLocalTr.firstChild)) {
                  nLocalTr.removeChild(n);
                }
              }

              for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
                iRowspan = 1;
                iColspan = 1;

                /* Check to see if there is already a cell (row/colspan) covering our target
                 * insert point. If there is, then there is nothing to do.
                 */
                if (aApplied[i][j] === undefined) {
                  nLocalTr.appendChild(aoLocal[i][j].cell);
                  aApplied[i][j] = 1;

                  /* Expand the cell to cover as many rows as needed */
                  while (
                    aoLocal[i + iRowspan] !== undefined &&
                    aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell
                  ) {
                    aApplied[i + iRowspan][j] = 1;
                    iRowspan++;
                  }

                  /* Expand the cell to cover as many columns as needed */
                  while (
                    aoLocal[i][j + iColspan] !== undefined &&
                    aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell
                  ) {
                    /* Must update the applied array over the rows for the columns */
                    for (k = 0; k < iRowspan; k++) {
                      aApplied[i + k][j + iColspan] = 1;
                    }
                    iColspan++;
                  }

                  /* Do the actual expansion in the DOM */
                  $(aoLocal[i][j].cell)
                    .attr("rowspan", iRowspan)
                    .attr("colspan", iColspan);
                }
              }
            }
          }

          /**
           * Insert the required TR nodes into the table for display
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnDraw(oSettings) {
            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
            var aPreDraw = _fnCallbackFire(
              oSettings,
              "aoPreDrawCallback",
              "preDraw",
              [oSettings]
            );
            if ($.inArray(false, aPreDraw) !== -1) {
              _fnProcessingDisplay(oSettings, false);
              return;
            }

            var i, iLen, n;
            var anRows = [];
            var iRowCount = 0;
            var asStripeClasses = oSettings.asStripeClasses;
            var iStripes = asStripeClasses.length;
            var iOpenRows = oSettings.aoOpenRows.length;
            var oLang = oSettings.oLanguage;
            var iInitDisplayStart = oSettings.iInitDisplayStart;
            var bServerSide = _fnDataSource(oSettings) == "ssp";
            var aiDisplay = oSettings.aiDisplay;

            oSettings.bDrawing = true;

            /* Check and see if we have an initial draw position from state saving */
            if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
              oSettings._iDisplayStart = bServerSide
                ? iInitDisplayStart
                : iInitDisplayStart >= oSettings.fnRecordsDisplay()
                ? 0
                : iInitDisplayStart;

              oSettings.iInitDisplayStart = -1;
            }

            var iDisplayStart = oSettings._iDisplayStart;
            var iDisplayEnd = oSettings.fnDisplayEnd();

            /* Server-side processing draw intercept */
            if (oSettings.bDeferLoading) {
              oSettings.bDeferLoading = false;
              oSettings.iDraw++;
              _fnProcessingDisplay(oSettings, false);
            } else if (!bServerSide) {
              oSettings.iDraw++;
            } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
              return;
            }

            if (aiDisplay.length !== 0) {
              var iStart = bServerSide ? 0 : iDisplayStart;
              var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

              for (var j = iStart; j < iEnd; j++) {
                var iDataIndex = aiDisplay[j];
                var aoData = oSettings.aoData[iDataIndex];
                if (aoData.nTr === null) {
                  _fnCreateTr(oSettings, iDataIndex);
                }

                var nRow = aoData.nTr;

                /* Remove the old striping classes and then add the new one */
                if (iStripes !== 0) {
                  var sStripe = asStripeClasses[iRowCount % iStripes];
                  if (aoData._sRowStripe != sStripe) {
                    $(nRow)
                      .removeClass(aoData._sRowStripe)
                      .addClass(sStripe);
                    aoData._sRowStripe = sStripe;
                  }
                }

                // Row callback functions - might want to manipulate the row
                // iRowCount and j are not currently documented. Are they at all
                // useful?
                _fnCallbackFire(oSettings, "aoRowCallback", null, [
                  nRow,
                  aoData._aData,
                  iRowCount,
                  j,
                  iDataIndex,
                ]);

                anRows.push(nRow);
                iRowCount++;
              }
            } else {
              /* Table is empty - create a row with an empty message in it */
              var sZero = oLang.sZeroRecords;
              if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == "ajax") {
                sZero = oLang.sLoadingRecords;
              } else if (
                oLang.sEmptyTable &&
                oSettings.fnRecordsTotal() === 0
              ) {
                sZero = oLang.sEmptyTable;
              }

              anRows[0] = $("<tr/>", {
                class: iStripes ? asStripeClasses[0] : "",
              }).append(
                $("<td />", {
                  valign: "top",
                  colSpan: _fnVisbleColumns(oSettings),
                  class: oSettings.oClasses.sRowEmpty,
                }).html(sZero)
              )[0];
            }

            /* Header and footer callbacks */
            _fnCallbackFire(oSettings, "aoHeaderCallback", "header", [
              $(oSettings.nTHead).children("tr")[0],
              _fnGetDataMaster(oSettings),
              iDisplayStart,
              iDisplayEnd,
              aiDisplay,
            ]);

            _fnCallbackFire(oSettings, "aoFooterCallback", "footer", [
              $(oSettings.nTFoot).children("tr")[0],
              _fnGetDataMaster(oSettings),
              iDisplayStart,
              iDisplayEnd,
              aiDisplay,
            ]);

            var body = $(oSettings.nTBody);

            body.children().detach();
            body.append($(anRows));

            /* Call all required callback functions for the end of a draw */
            _fnCallbackFire(oSettings, "aoDrawCallback", "draw", [oSettings]);

            /* Draw is complete, sorting and filtering must be as well */
            oSettings.bSorted = false;
            oSettings.bFiltered = false;
            oSettings.bDrawing = false;
          }

          /**
           * Redraw the table - taking account of the various features which are enabled
           *  @param {object} oSettings dataTables settings object
           *  @param {boolean} [holdPosition] Keep the current paging position. By default
           *    the paging is reset to the first page
           *  @memberof DataTable#oApi
           */
          function _fnReDraw(settings, holdPosition) {
            var features = settings.oFeatures,
              sort = features.bSort,
              filter = features.bFilter;

            if (sort) {
              _fnSort(settings);
            }

            if (filter) {
              _fnFilterComplete(settings, settings.oPreviousSearch);
            } else {
              // No filtering, so we want to just use the display master
              settings.aiDisplay = settings.aiDisplayMaster.slice();
            }

            if (holdPosition !== true) {
              settings._iDisplayStart = 0;
            }

            // Let any modules know about the draw hold position state (used by
            // scrolling internally)
            settings._drawHold = holdPosition;

            _fnDraw(settings);

            settings._drawHold = false;
          }

          /**
           * Add the options to the page HTML for the table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnAddOptionsHtml(oSettings) {
            var classes = oSettings.oClasses;
            var table = $(oSettings.nTable);
            var holding = $("<div/>").insertBefore(table); // Holding element for speed
            var features = oSettings.oFeatures;

            // All DataTables are wrapped in a div
            var insert = $("<div/>", {
              id: oSettings.sTableId + "_wrapper",
              class:
                classes.sWrapper +
                (oSettings.nTFoot ? "" : " " + classes.sNoFooter),
            });

            oSettings.nHolding = holding[0];
            oSettings.nTableWrapper = insert[0];
            oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

            /* Loop over the user set positioning and place the elements as needed */
            var aDom = oSettings.sDom.split("");
            var featureNode, cOption, nNewNode, cNext, sAttr, j;
            for (var i = 0; i < aDom.length; i++) {
              featureNode = null;
              cOption = aDom[i];

              if (cOption == "<") {
                /* New container div */
                nNewNode = $("<div/>")[0];

                /* Check to see if we should append an id and/or a class name to the container */
                cNext = aDom[i + 1];
                if (cNext == "'" || cNext == '"') {
                  sAttr = "";
                  j = 2;
                  while (aDom[i + j] != cNext) {
                    sAttr += aDom[i + j];
                    j++;
                  }

                  /* Replace jQuery UI constants @todo depreciated */
                  if (sAttr == "H") {
                    sAttr = classes.sJUIHeader;
                  } else if (sAttr == "F") {
                    sAttr = classes.sJUIFooter;
                  }

                  /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
                   * breaks the string into parts and applies them as needed
                   */
                  if (sAttr.indexOf(".") != -1) {
                    var aSplit = sAttr.split(".");
                    nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
                    nNewNode.className = aSplit[1];
                  } else if (sAttr.charAt(0) == "#") {
                    nNewNode.id = sAttr.substr(1, sAttr.length - 1);
                  } else {
                    nNewNode.className = sAttr;
                  }

                  i += j; /* Move along the position array */
                }

                insert.append(nNewNode);
                insert = $(nNewNode);
              } else if (cOption == ">") {
                /* End container div */
                insert = insert.parent();
              }
              // @todo Move options into their own plugins?
              else if (
                cOption == "l" &&
                features.bPaginate &&
                features.bLengthChange
              ) {
                /* Length */
                featureNode = _fnFeatureHtmlLength(oSettings);
              } else if (cOption == "f" && features.bFilter) {
                /* Filter */
                featureNode = _fnFeatureHtmlFilter(oSettings);
              } else if (cOption == "r" && features.bProcessing) {
                /* pRocessing */
                featureNode = _fnFeatureHtmlProcessing(oSettings);
              } else if (cOption == "t") {
                /* Table */
                featureNode = _fnFeatureHtmlTable(oSettings);
              } else if (cOption == "i" && features.bInfo) {
                /* Info */
                featureNode = _fnFeatureHtmlInfo(oSettings);
              } else if (cOption == "p" && features.bPaginate) {
                /* Pagination */
                featureNode = _fnFeatureHtmlPaginate(oSettings);
              } else if (DataTable.ext.feature.length !== 0) {
                /* Plug-in features */
                var aoFeatures = DataTable.ext.feature;
                for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
                  if (cOption == aoFeatures[k].cFeature) {
                    featureNode = aoFeatures[k].fnInit(oSettings);
                    break;
                  }
                }
              }

              /* Add to the 2D features array */
              if (featureNode) {
                var aanFeatures = oSettings.aanFeatures;

                if (!aanFeatures[cOption]) {
                  aanFeatures[cOption] = [];
                }

                aanFeatures[cOption].push(featureNode);
                insert.append(featureNode);
              }
            }

            /* Built our DOM structure - replace the holding div with what we want */
            holding.replaceWith(insert);
            oSettings.nHolding = null;
          }

          /**
           * Use the DOM source to create up an array of header cells. The idea here is to
           * create a layout grid (array) of rows x columns, which contains a reference
           * to the cell that that point in the grid (regardless of col/rowspan), such that
           * any column / row could be removed and the new grid constructed
           *  @param array {object} aLayout Array to store the calculated layout in
           *  @param {node} nThead The header/footer element for the table
           *  @memberof DataTable#oApi
           */
          function _fnDetectHeader(aLayout, nThead) {
            var nTrs = $(nThead).children("tr");
            var nTr, nCell;
            var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
            var bUnique;
            var fnShiftCol = function(a, i, j) {
              var k = a[i];
              while (k[j]) {
                j++;
              }
              return j;
            };

            aLayout.splice(0, aLayout.length);

            /* We know how many rows there are in the layout - so prep it */
            for (i = 0, iLen = nTrs.length; i < iLen; i++) {
              aLayout.push([]);
            }

            /* Calculate a layout array */
            for (i = 0, iLen = nTrs.length; i < iLen; i++) {
              nTr = nTrs[i];
              iColumn = 0;

              /* For every cell in the row... */
              nCell = nTr.firstChild;
              while (nCell) {
                if (
                  nCell.nodeName.toUpperCase() == "TD" ||
                  nCell.nodeName.toUpperCase() == "TH"
                ) {
                  /* Get the col and rowspan attributes from the DOM and sanitise them */
                  iColspan = nCell.getAttribute("colspan") * 1;
                  iRowspan = nCell.getAttribute("rowspan") * 1;
                  iColspan =
                    !iColspan || iColspan === 0 || iColspan === 1
                      ? 1
                      : iColspan;
                  iRowspan =
                    !iRowspan || iRowspan === 0 || iRowspan === 1
                      ? 1
                      : iRowspan;

                  /* There might be colspan cells already in this row, so shift our target
                   * accordingly
                   */
                  iColShifted = fnShiftCol(aLayout, i, iColumn);

                  /* Cache calculation for unique columns */
                  bUnique = iColspan === 1 ? true : false;

                  /* If there is col / rowspan, copy the information into the layout grid */
                  for (l = 0; l < iColspan; l++) {
                    for (k = 0; k < iRowspan; k++) {
                      aLayout[i + k][iColShifted + l] = {
                        cell: nCell,
                        unique: bUnique,
                      };
                      aLayout[i + k].nTr = nTr;
                    }
                  }
                }
                nCell = nCell.nextSibling;
              }
            }
          }

          /**
           * Get an array of unique th elements, one for each column
           *  @param {object} oSettings dataTables settings object
           *  @param {node} nHeader automatically detect the layout from this node - optional
           *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
           *  @returns array {node} aReturn list of unique th's
           *  @memberof DataTable#oApi
           */
          function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
            var aReturn = [];
            if (!aLayout) {
              aLayout = oSettings.aoHeader;
              if (nHeader) {
                aLayout = [];
                _fnDetectHeader(aLayout, nHeader);
              }
            }

            for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
              for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
                if (
                  aLayout[i][j].unique &&
                  (!aReturn[j] || !oSettings.bSortCellsTop)
                ) {
                  aReturn[j] = aLayout[i][j].cell;
                }
              }
            }

            return aReturn;
          }

          /**
           * Create an Ajax call based on the table's settings, taking into account that
           * parameters can have multiple forms, and backwards compatibility.
           *
           * @param {object} oSettings dataTables settings object
           * @param {array} data Data to send to the server, required by
           *     DataTables - may be augmented by developer callbacks
           * @param {function} fn Callback function to run when data is obtained
           */
          function _fnBuildAjax(oSettings, data, fn) {
            // Compatibility with 1.9-, allow fnServerData and event to manipulate
            _fnCallbackFire(oSettings, "aoServerParams", "serverParams", [
              data,
            ]);

            // Convert to object based for 1.10+ if using the old array scheme which can
            // come from server-side processing or serverParams
            if (data && $.isArray(data)) {
              var tmp = {};
              var rbracket = /(.*?)\[\]$/;

              $.each(data, function(key, val) {
                var match = val.name.match(rbracket);

                if (match) {
                  // Support for arrays
                  var name = match[0];

                  if (!tmp[name]) {
                    tmp[name] = [];
                  }
                  tmp[name].push(val.value);
                } else {
                  tmp[val.name] = val.value;
                }
              });
              data = tmp;
            }

            var ajaxData;
            var ajax = oSettings.ajax;
            var instance = oSettings.oInstance;
            var callback = function(json) {
              _fnCallbackFire(oSettings, null, "xhr", [
                oSettings,
                json,
                oSettings.jqXHR,
              ]);
              fn(json);
            };

            if ($.isPlainObject(ajax) && ajax.data) {
              ajaxData = ajax.data;

              var newData =
                typeof ajaxData === "function"
                  ? ajaxData(data, oSettings) // fn can manipulate data or return
                  : ajaxData; // an object object or array to merge

              // If the function returned something, use that alone
              data =
                typeof ajaxData === "function" && newData
                  ? newData
                  : $.extend(true, data, newData);

              // Remove the data property as we've resolved it already and don't want
              // jQuery to do it again (it is restored at the end of the function)
              delete ajax.data;
            }

            var baseAjax = {
              data: data,
              success: function(json) {
                var error = json.error || json.sError;
                if (error) {
                  _fnLog(oSettings, 0, error);
                }

                oSettings.json = json;
                callback(json);
              },
              dataType: "json",
              cache: false,
              type: oSettings.sServerMethod,
              error: function(xhr, error, thrown) {
                var ret = _fnCallbackFire(oSettings, null, "xhr", [
                  oSettings,
                  null,
                  oSettings.jqXHR,
                ]);

                if ($.inArray(true, ret) === -1) {
                  if (error == "parsererror") {
                    _fnLog(oSettings, 0, "Invalid JSON response", 1);
                  } else if (xhr.readyState === 4) {
                    _fnLog(oSettings, 0, "Ajax error", 7);
                  }
                }

                _fnProcessingDisplay(oSettings, false);
              },
            };

            // Store the data submitted for the API
            oSettings.oAjaxData = data;

            // Allow plug-ins and external processes to modify the data
            _fnCallbackFire(oSettings, null, "preXhr", [oSettings, data]);

            if (oSettings.fnServerData) {
              // DataTables 1.9- compatibility
              oSettings.fnServerData.call(
                instance,
                oSettings.sAjaxSource,
                $.map(data, function(val, key) {
                  // Need to convert back to 1.9 trad format
                  return { name: key, value: val };
                }),
                callback,
                oSettings
              );
            } else if (oSettings.sAjaxSource || typeof ajax === "string") {
              // DataTables 1.9- compatibility
              oSettings.jqXHR = $.ajax(
                $.extend(baseAjax, {
                  url: ajax || oSettings.sAjaxSource,
                })
              );
            } else if (typeof ajax === "function") {
              // Is a function - let the caller define what needs to be done
              oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
            } else {
              // Object to extend the base settings
              oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

              // Restore for next time around
              ajax.data = ajaxData;
            }
          }

          /**
           * Update the table using an Ajax call
           *  @param {object} settings dataTables settings object
           *  @returns {boolean} Block the table drawing or not
           *  @memberof DataTable#oApi
           */
          function _fnAjaxUpdate(settings) {
            if (settings.bAjaxDataGet) {
              settings.iDraw++;
              _fnProcessingDisplay(settings, true);

              _fnBuildAjax(settings, _fnAjaxParameters(settings), function(
                json
              ) {
                _fnAjaxUpdateDraw(settings, json);
              });

              return false;
            }
            return true;
          }

          /**
           * Build up the parameters in an object needed for a server-side processing
           * request. Note that this is basically done twice, is different ways - a modern
           * method which is used by default in DataTables 1.10 which uses objects and
           * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
           * the sAjaxSource option is used in the initialisation, or the legacyAjax
           * option is set.
           *  @param {object} oSettings dataTables settings object
           *  @returns {bool} block the table drawing or not
           *  @memberof DataTable#oApi
           */
          function _fnAjaxParameters(settings) {
            var columns = settings.aoColumns,
              columnCount = columns.length,
              features = settings.oFeatures,
              preSearch = settings.oPreviousSearch,
              preColSearch = settings.aoPreSearchCols,
              i,
              data = [],
              dataProp,
              column,
              columnSearch,
              sort = _fnSortFlatten(settings),
              displayStart = settings._iDisplayStart,
              displayLength =
                features.bPaginate !== false ? settings._iDisplayLength : -1;

            var param = function(name, value) {
              data.push({ name: name, value: value });
            };

            // DataTables 1.9- compatible method
            param("sEcho", settings.iDraw);
            param("iColumns", columnCount);
            param("sColumns", _pluck(columns, "sName").join(","));
            param("iDisplayStart", displayStart);
            param("iDisplayLength", displayLength);

            // DataTables 1.10+ method
            var d = {
              draw: settings.iDraw,
              columns: [],
              order: [],
              start: displayStart,
              length: displayLength,
              search: {
                value: preSearch.sSearch,
                regex: preSearch.bRegex,
              },
            };

            for (i = 0; i < columnCount; i++) {
              column = columns[i];
              columnSearch = preColSearch[i];
              dataProp =
                typeof column.mData == "function" ? "function" : column.mData;

              d.columns.push({
                data: dataProp,
                name: column.sName,
                searchable: column.bSearchable,
                orderable: column.bSortable,
                search: {
                  value: columnSearch.sSearch,
                  regex: columnSearch.bRegex,
                },
              });

              param("mDataProp_" + i, dataProp);

              if (features.bFilter) {
                param("sSearch_" + i, columnSearch.sSearch);
                param("bRegex_" + i, columnSearch.bRegex);
                param("bSearchable_" + i, column.bSearchable);
              }

              if (features.bSort) {
                param("bSortable_" + i, column.bSortable);
              }
            }

            if (features.bFilter) {
              param("sSearch", preSearch.sSearch);
              param("bRegex", preSearch.bRegex);
            }

            if (features.bSort) {
              $.each(sort, function(i, val) {
                d.order.push({ column: val.col, dir: val.dir });

                param("iSortCol_" + i, val.col);
                param("sSortDir_" + i, val.dir);
              });

              param("iSortingCols", sort.length);
            }

            // If the legacy.ajax parameter is null, then we automatically decide which
            // form to use, based on sAjaxSource
            var legacy = DataTable.ext.legacy.ajax;
            if (legacy === null) {
              return settings.sAjaxSource ? data : d;
            }

            // Otherwise, if legacy has been specified then we use that to decide on the
            // form
            return legacy ? data : d;
          }

          /**
           * Data the data from the server (nuking the old) and redraw the table
           *  @param {object} oSettings dataTables settings object
           *  @param {object} json json data return from the server.
           *  @param {string} json.sEcho Tracking flag for DataTables to match requests
           *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
           *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
           *  @param {array} json.aaData The data to display on this page
           *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
           *  @memberof DataTable#oApi
           */
          function _fnAjaxUpdateDraw(settings, json) {
            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
            // Support both
            var compat = function(old, modern) {
              return json[old] !== undefined ? json[old] : json[modern];
            };

            var data = _fnAjaxDataSrc(settings, json);
            var draw = compat("sEcho", "draw");
            var recordsTotal = compat("iTotalRecords", "recordsTotal");
            var recordsFiltered = compat(
              "iTotalDisplayRecords",
              "recordsFiltered"
            );

            if (draw !== undefined) {
              // Protect against out of sequence returns
              if (draw * 1 < settings.iDraw) {
                return;
              }
              settings.iDraw = draw * 1;
            }

            _fnClearTable(settings);
            settings._iRecordsTotal = parseInt(recordsTotal, 10);
            settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

            for (var i = 0, ien = data.length; i < ien; i++) {
              _fnAddData(settings, data[i]);
            }
            settings.aiDisplay = settings.aiDisplayMaster.slice();

            settings.bAjaxDataGet = false;
            _fnDraw(settings);

            if (!settings._bInitComplete) {
              _fnInitComplete(settings, json);
            }

            settings.bAjaxDataGet = true;
            _fnProcessingDisplay(settings, false);
          }

          /**
           * Get the data from the JSON data source to use for drawing a table. Using
           * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
           * source object, or from a processing function.
           *  @param {object} oSettings dataTables settings object
           *  @param  {object} json Data source object / array from the server
           *  @return {array} Array of data to use
           */
          function _fnAjaxDataSrc(oSettings, json) {
            var dataSrc =
              $.isPlainObject(oSettings.ajax) &&
              oSettings.ajax.dataSrc !== undefined
                ? oSettings.ajax.dataSrc
                : oSettings.sAjaxDataProp; // Compatibility with 1.9-.

            // Compatibility with 1.9-. In order to read from aaData, check if the
            // default has been changed, if not, check for aaData
            if (dataSrc === "data") {
              return json.aaData || json[dataSrc];
            }

            return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
          }

          /**
           * Generate the node required for filtering text
           *  @returns {node} Filter control element
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlFilter(settings) {
            var classes = settings.oClasses;
            var tableId = settings.sTableId;
            var language = settings.oLanguage;
            var previousSearch = settings.oPreviousSearch;
            var features = settings.aanFeatures;
            var input =
              '<input type="search" class="' + classes.sFilterInput + '"/>';

            var str = language.sSearch;
            str = str.match(/_INPUT_/)
              ? str.replace("_INPUT_", input)
              : str + input;

            var filter = $("<div/>", {
              id: !features.f ? tableId + "_filter" : null,
              class: classes.sFilter,
            }).append($("<label/>").append(str));

            var searchFn = function() {
              /* Update all other filter input elements for the new display */
              var n = features.f;
              var val = !this.value ? "" : this.value; // mental IE8 fix :-(

              /* Now do the filter */
              if (val != previousSearch.sSearch) {
                _fnFilterComplete(settings, {
                  sSearch: val,
                  bRegex: previousSearch.bRegex,
                  bSmart: previousSearch.bSmart,
                  bCaseInsensitive: previousSearch.bCaseInsensitive,
                });

                // Need to redraw, without resorting
                settings._iDisplayStart = 0;
                _fnDraw(settings);
              }
            };

            var searchDelay =
              settings.searchDelay !== null
                ? settings.searchDelay
                : _fnDataSource(settings) === "ssp"
                ? 400
                : 0;

            var jqFilter = $("input", filter)
              .val(previousSearch.sSearch)
              .attr("placeholder", language.sSearchPlaceholder)
              .on(
                "keyup.DT search.DT input.DT paste.DT cut.DT",
                searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn
              )
              .on("mouseup", function(e) {
                // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
                // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
                // checks the value to see if it has changed. In other browsers it won't have.
                setTimeout(function() {
                  searchFn.call(jqFilter[0]);
                }, 10);
              })
              .on("keypress.DT", function(e) {
                /* Prevent form submission */
                if (e.keyCode == 13) {
                  return false;
                }
              })
              .attr("aria-controls", tableId);

            // Update the input elements whenever the table is filtered
            $(settings.nTable).on("search.dt.DT", function(ev, s) {
              if (settings === s) {
                // IE9 throws an 'unknown error' if document.activeElement is used
                // inside an iframe or frame...
                try {
                  if (jqFilter[0] !== document.activeElement) {
                    jqFilter.val(previousSearch.sSearch);
                  }
                } catch (e) {}
              }
            });

            return filter[0];
          }

          /**
           * Filter the table using both the global filter and column based filtering
           *  @param {object} oSettings dataTables settings object
           *  @param {object} oSearch search information
           *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
           *  @memberof DataTable#oApi
           */
          function _fnFilterComplete(oSettings, oInput, iForce) {
            var oPrevSearch = oSettings.oPreviousSearch;
            var aoPrevSearch = oSettings.aoPreSearchCols;
            var fnSaveFilter = function(oFilter) {
              /* Save the filtering values */
              oPrevSearch.sSearch = oFilter.sSearch;
              oPrevSearch.bRegex = oFilter.bRegex;
              oPrevSearch.bSmart = oFilter.bSmart;
              oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
            };
            var fnRegex = function(o) {
              // Backwards compatibility with the bEscapeRegex option
              return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
            };

            // Resolve any column types that are unknown due to addition or invalidation
            // @todo As per sort - can this be moved into an event handler?
            _fnColumnTypes(oSettings);

            /* In server-side processing all filtering is done by the server, so no point hanging around here */
            if (_fnDataSource(oSettings) != "ssp") {
              /* Global filter */
              _fnFilter(
                oSettings,
                oInput.sSearch,
                iForce,
                fnRegex(oInput),
                oInput.bSmart,
                oInput.bCaseInsensitive
              );
              fnSaveFilter(oInput);

              /* Now do the individual column filter */
              for (var i = 0; i < aoPrevSearch.length; i++) {
                _fnFilterColumn(
                  oSettings,
                  aoPrevSearch[i].sSearch,
                  i,
                  fnRegex(aoPrevSearch[i]),
                  aoPrevSearch[i].bSmart,
                  aoPrevSearch[i].bCaseInsensitive
                );
              }

              /* Custom filtering */
              _fnFilterCustom(oSettings);
            } else {
              fnSaveFilter(oInput);
            }

            /* Tell the draw function we have been filtering */
            oSettings.bFiltered = true;
            _fnCallbackFire(oSettings, null, "search", [oSettings]);
          }

          /**
           * Apply custom filtering functions
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnFilterCustom(settings) {
            var filters = DataTable.ext.search;
            var displayRows = settings.aiDisplay;
            var row, rowIdx;

            for (var i = 0, ien = filters.length; i < ien; i++) {
              var rows = [];

              // Loop over each row and see if it should be included
              for (var j = 0, jen = displayRows.length; j < jen; j++) {
                rowIdx = displayRows[j];
                row = settings.aoData[rowIdx];

                if (
                  filters[i](settings, row._aFilterData, rowIdx, row._aData, j)
                ) {
                  rows.push(rowIdx);
                }
              }

              // So the array reference doesn't break set the results into the
              // existing array
              displayRows.length = 0;
              $.merge(displayRows, rows);
            }
          }

          /**
           * Filter the table on a per-column basis
           *  @param {object} oSettings dataTables settings object
           *  @param {string} sInput string to filter on
           *  @param {int} iColumn column to filter
           *  @param {bool} bRegex treat search string as a regular expression or not
           *  @param {bool} bSmart use smart filtering or not
           *  @param {bool} bCaseInsensitive Do case insenstive matching or not
           *  @memberof DataTable#oApi
           */
          function _fnFilterColumn(
            settings,
            searchStr,
            colIdx,
            regex,
            smart,
            caseInsensitive
          ) {
            if (searchStr === "") {
              return;
            }

            var data;
            var out = [];
            var display = settings.aiDisplay;
            var rpSearch = _fnFilterCreateSearch(
              searchStr,
              regex,
              smart,
              caseInsensitive
            );

            for (var i = 0; i < display.length; i++) {
              data = settings.aoData[display[i]]._aFilterData[colIdx];

              if (rpSearch.test(data)) {
                out.push(display[i]);
              }
            }

            settings.aiDisplay = out;
          }

          /**
           * Filter the data table based on user input and draw the table
           *  @param {object} settings dataTables settings object
           *  @param {string} input string to filter on
           *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
           *  @param {bool} regex treat as a regular expression or not
           *  @param {bool} smart perform smart filtering or not
           *  @param {bool} caseInsensitive Do case insenstive matching or not
           *  @memberof DataTable#oApi
           */
          function _fnFilter(
            settings,
            input,
            force,
            regex,
            smart,
            caseInsensitive
          ) {
            var rpSearch = _fnFilterCreateSearch(
              input,
              regex,
              smart,
              caseInsensitive
            );
            var prevSearch = settings.oPreviousSearch.sSearch;
            var displayMaster = settings.aiDisplayMaster;
            var display, invalidated, i;
            var filtered = [];

            // Need to take account of custom filtering functions - always filter
            if (DataTable.ext.search.length !== 0) {
              force = true;
            }

            // Check if any of the rows were invalidated
            invalidated = _fnFilterData(settings);

            // If the input is blank - we just want the full data set
            if (input.length <= 0) {
              settings.aiDisplay = displayMaster.slice();
            } else {
              // New search - start from the master array
              if (
                invalidated ||
                force ||
                regex ||
                prevSearch.length > input.length ||
                input.indexOf(prevSearch) !== 0 ||
                settings.bSorted // On resort, the display master needs to be
                // re-filtered since indexes will have changed
              ) {
                settings.aiDisplay = displayMaster.slice();
              }

              // Search the display array
              display = settings.aiDisplay;

              for (i = 0; i < display.length; i++) {
                if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
                  filtered.push(display[i]);
                }
              }

              settings.aiDisplay = filtered;
            }
          }

          /**
           * Build a regular expression object suitable for searching a table
           *  @param {string} sSearch string to search for
           *  @param {bool} bRegex treat as a regular expression or not
           *  @param {bool} bSmart perform smart filtering or not
           *  @param {bool} bCaseInsensitive Do case insensitive matching or not
           *  @returns {RegExp} constructed object
           *  @memberof DataTable#oApi
           */
          function _fnFilterCreateSearch(
            search,
            regex,
            smart,
            caseInsensitive
          ) {
            search = regex ? search : _fnEscapeRegex(search);

            if (smart) {
              /* For smart filtering we want to allow the search to work regardless of
               * word order. We also want double quoted text to be preserved, so word
               * order is important - a la google. So this is what we want to
               * generate:
               *
               * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
               */
              var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [""], function(
                word
              ) {
                if (word.charAt(0) === '"') {
                  var m = word.match(/^"(.*)"$/);
                  word = m ? m[1] : word;
                }

                return word.replace('"', "");
              });

              search = "^(?=.*?" + a.join(")(?=.*?") + ").*$";
            }

            return new RegExp(search, caseInsensitive ? "i" : "");
          }

          /**
           * Escape a string such that it can be used in a regular expression
           *  @param {string} sVal string to escape
           *  @returns {string} escaped string
           *  @memberof DataTable#oApi
           */
          var _fnEscapeRegex = DataTable.util.escapeRegex;

          var __filter_div = $("<div>")[0];
          var __filter_div_textContent = __filter_div.textContent !== undefined;

          // Update the filtering data for each row if needed (by invalidation or first run)
          function _fnFilterData(settings) {
            var columns = settings.aoColumns;
            var column;
            var i, j, ien, jen, filterData, cellData, row;
            var fomatters = DataTable.ext.type.search;
            var wasInvalidated = false;

            for (i = 0, ien = settings.aoData.length; i < ien; i++) {
              row = settings.aoData[i];

              if (!row._aFilterData) {
                filterData = [];

                for (j = 0, jen = columns.length; j < jen; j++) {
                  column = columns[j];

                  if (column.bSearchable) {
                    cellData = _fnGetCellData(settings, i, j, "filter");

                    if (fomatters[column.sType]) {
                      cellData = fomatters[column.sType](cellData);
                    }

                    // Search in DataTables 1.10 is string based. In 1.11 this
                    // should be altered to also allow strict type checking.
                    if (cellData === null) {
                      cellData = "";
                    }

                    if (typeof cellData !== "string" && cellData.toString) {
                      cellData = cellData.toString();
                    }
                  } else {
                    cellData = "";
                  }

                  // If it looks like there is an HTML entity in the string,
                  // attempt to decode it so sorting works as expected. Note that
                  // we could use a single line of jQuery to do this, but the DOM
                  // method used here is much faster http://jsperf.com/html-decode
                  if (cellData.indexOf && cellData.indexOf("&") !== -1) {
                    __filter_div.innerHTML = cellData;
                    cellData = __filter_div_textContent
                      ? __filter_div.textContent
                      : __filter_div.innerText;
                  }

                  if (cellData.replace) {
                    cellData = cellData.replace(/[\r\n\u2028]/g, "");
                  }

                  filterData.push(cellData);
                }

                row._aFilterData = filterData;
                row._sFilterRow = filterData.join("  ");
                wasInvalidated = true;
              }
            }

            return wasInvalidated;
          }

          /**
           * Convert from the internal Hungarian notation to camelCase for external
           * interaction
           *  @param {object} obj Object to convert
           *  @returns {object} Inverted object
           *  @memberof DataTable#oApi
           */
          function _fnSearchToCamel(obj) {
            return {
              search: obj.sSearch,
              smart: obj.bSmart,
              regex: obj.bRegex,
              caseInsensitive: obj.bCaseInsensitive,
            };
          }

          /**
           * Convert from camelCase notation to the internal Hungarian. We could use the
           * Hungarian convert function here, but this is cleaner
           *  @param {object} obj Object to convert
           *  @returns {object} Inverted object
           *  @memberof DataTable#oApi
           */
          function _fnSearchToHung(obj) {
            return {
              sSearch: obj.search,
              bSmart: obj.smart,
              bRegex: obj.regex,
              bCaseInsensitive: obj.caseInsensitive,
            };
          }

          /**
           * Generate the node required for the info display
           *  @param {object} oSettings dataTables settings object
           *  @returns {node} Information element
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlInfo(settings) {
            var tid = settings.sTableId,
              nodes = settings.aanFeatures.i,
              n = $("<div/>", {
                class: settings.oClasses.sInfo,
                id: !nodes ? tid + "_info" : null,
              });

            if (!nodes) {
              // Update display on each draw
              settings.aoDrawCallback.push({
                fn: _fnUpdateInfo,
                sName: "information",
              });

              n.attr("role", "status").attr("aria-live", "polite");

              // Table is described by our info div
              $(settings.nTable).attr("aria-describedby", tid + "_info");
            }

            return n[0];
          }

          /**
           * Update the information elements in the display
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnUpdateInfo(settings) {
            /* Show information about the table */
            var nodes = settings.aanFeatures.i;
            if (nodes.length === 0) {
              return;
            }

            var lang = settings.oLanguage,
              start = settings._iDisplayStart + 1,
              end = settings.fnDisplayEnd(),
              max = settings.fnRecordsTotal(),
              total = settings.fnRecordsDisplay(),
              out = total ? lang.sInfo : lang.sInfoEmpty;

            if (total !== max) {
              /* Record set after filtering */
              out += " " + lang.sInfoFiltered;
            }

            // Convert the macros
            out += lang.sInfoPostFix;
            out = _fnInfoMacros(settings, out);

            var callback = lang.fnInfoCallback;
            if (callback !== null) {
              out = callback.call(
                settings.oInstance,
                settings,
                start,
                end,
                max,
                total,
                out
              );
            }

            $(nodes).html(out);
          }

          function _fnInfoMacros(settings, str) {
            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
            // internally
            var formatter = settings.fnFormatNumber,
              start = settings._iDisplayStart + 1,
              len = settings._iDisplayLength,
              vis = settings.fnRecordsDisplay(),
              all = len === -1;

            return str
              .replace(/_START_/g, formatter.call(settings, start))
              .replace(
                /_END_/g,
                formatter.call(settings, settings.fnDisplayEnd())
              )
              .replace(
                /_MAX_/g,
                formatter.call(settings, settings.fnRecordsTotal())
              )
              .replace(/_TOTAL_/g, formatter.call(settings, vis))
              .replace(
                /_PAGE_/g,
                formatter.call(settings, all ? 1 : Math.ceil(start / len))
              )
              .replace(
                /_PAGES_/g,
                formatter.call(settings, all ? 1 : Math.ceil(vis / len))
              );
          }

          /**
           * Draw the table for the first time, adding all required features
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnInitialise(settings) {
            var i,
              iLen,
              iAjaxStart = settings.iInitDisplayStart;
            var columns = settings.aoColumns,
              column;
            var features = settings.oFeatures;
            var deferLoading = settings.bDeferLoading; // value modified by the draw

            /* Ensure that the table data is fully initialised */
            if (!settings.bInitialised) {
              setTimeout(function() {
                _fnInitialise(settings);
              }, 200);
              return;
            }

            /* Show the display HTML options */
            _fnAddOptionsHtml(settings);

            /* Build and draw the header / footer for the table */
            _fnBuildHead(settings);
            _fnDrawHead(settings, settings.aoHeader);
            _fnDrawHead(settings, settings.aoFooter);

            /* Okay to show that something is going on now */
            _fnProcessingDisplay(settings, true);

            /* Calculate sizes for columns */
            if (features.bAutoWidth) {
              _fnCalculateColumnWidths(settings);
            }

            for (i = 0, iLen = columns.length; i < iLen; i++) {
              column = columns[i];

              if (column.sWidth) {
                column.nTh.style.width = _fnStringToCss(column.sWidth);
              }
            }

            _fnCallbackFire(settings, null, "preInit", [settings]);

            // If there is default sorting required - let's do it. The sort function
            // will do the drawing for us. Otherwise we draw the table regardless of the
            // Ajax source - this allows the table to look initialised for Ajax sourcing
            // data (show 'loading' message possibly)
            _fnReDraw(settings);

            // Server-side processing init complete is done by _fnAjaxUpdateDraw
            var dataSrc = _fnDataSource(settings);
            if (dataSrc != "ssp" || deferLoading) {
              // if there is an ajax source load the data
              if (dataSrc == "ajax") {
                _fnBuildAjax(
                  settings,
                  [],
                  function(json) {
                    var aData = _fnAjaxDataSrc(settings, json);

                    // Got the data - add it to the table
                    for (i = 0; i < aData.length; i++) {
                      _fnAddData(settings, aData[i]);
                    }

                    // Reset the init display for cookie saving. We've already done
                    // a filter, and therefore cleared it before. So we need to make
                    // it appear 'fresh'
                    settings.iInitDisplayStart = iAjaxStart;

                    _fnReDraw(settings);

                    _fnProcessingDisplay(settings, false);
                    _fnInitComplete(settings, json);
                  },
                  settings
                );
              } else {
                _fnProcessingDisplay(settings, false);
                _fnInitComplete(settings);
              }
            }
          }

          /**
           * Draw the table for the first time, adding all required features
           *  @param {object} oSettings dataTables settings object
           *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
           *    with client-side processing (optional)
           *  @memberof DataTable#oApi
           */
          function _fnInitComplete(settings, json) {
            settings._bInitComplete = true;

            // When data was added after the initialisation (data or Ajax) we need to
            // calculate the column sizing
            if (json || settings.oInit.aaData) {
              _fnAdjustColumnSizing(settings);
            }

            _fnCallbackFire(settings, null, "plugin-init", [settings, json]);
            _fnCallbackFire(settings, "aoInitComplete", "init", [
              settings,
              json,
            ]);
          }

          function _fnLengthChange(settings, val) {
            var len = parseInt(val, 10);
            settings._iDisplayLength = len;

            _fnLengthOverflow(settings);

            // Fire length change event
            _fnCallbackFire(settings, null, "length", [settings, len]);
          }

          /**
           * Generate the node required for user display length changing
           *  @param {object} settings dataTables settings object
           *  @returns {node} Display length feature node
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlLength(settings) {
            var classes = settings.oClasses,
              tableId = settings.sTableId,
              menu = settings.aLengthMenu,
              d2 = $.isArray(menu[0]),
              lengths = d2 ? menu[0] : menu,
              language = d2 ? menu[1] : menu;

            var select = $("<select/>", {
              name: tableId + "_length",
              "aria-controls": tableId,
              class: classes.sLengthSelect,
            });

            for (var i = 0, ien = lengths.length; i < ien; i++) {
              select[0][i] = new Option(
                typeof language[i] === "number"
                  ? settings.fnFormatNumber(language[i])
                  : language[i],
                lengths[i]
              );
            }

            var div = $("<div><label/></div>").addClass(classes.sLength);
            if (!settings.aanFeatures.l) {
              div[0].id = tableId + "_length";
            }

            div
              .children()
              .append(
                settings.oLanguage.sLengthMenu.replace(
                  "_MENU_",
                  select[0].outerHTML
                )
              );

            // Can't use `select` variable as user might provide their own and the
            // reference is broken by the use of outerHTML
            $("select", div)
              .val(settings._iDisplayLength)
              .on("change.DT", function(e) {
                _fnLengthChange(settings, $(this).val());
                _fnDraw(settings);
              });

            // Update node value whenever anything changes the table's length
            $(settings.nTable).on("length.dt.DT", function(e, s, len) {
              if (settings === s) {
                $("select", div).val(len);
              }
            });

            return div[0];
          }

          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
           * Note that most of the paging logic is done in
           * DataTable.ext.pager
           */

          /**
           * Generate the node required for default pagination
           *  @param {object} oSettings dataTables settings object
           *  @returns {node} Pagination feature node
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlPaginate(settings) {
            var type = settings.sPaginationType,
              plugin = DataTable.ext.pager[type],
              modern = typeof plugin === "function",
              redraw = function(settings) {
                _fnDraw(settings);
              },
              node = $("<div/>").addClass(settings.oClasses.sPaging + type)[0],
              features = settings.aanFeatures;

            if (!modern) {
              plugin.fnInit(settings, node, redraw);
            }

            /* Add a draw callback for the pagination on first instance, to update the paging display */
            if (!features.p) {
              node.id = settings.sTableId + "_paginate";

              settings.aoDrawCallback.push({
                fn: function(settings) {
                  if (modern) {
                    var start = settings._iDisplayStart,
                      len = settings._iDisplayLength,
                      visRecords = settings.fnRecordsDisplay(),
                      all = len === -1,
                      page = all ? 0 : Math.ceil(start / len),
                      pages = all ? 1 : Math.ceil(visRecords / len),
                      buttons = plugin(page, pages),
                      i,
                      ien;

                    for (i = 0, ien = features.p.length; i < ien; i++) {
                      _fnRenderer(settings, "pageButton")(
                        settings,
                        features.p[i],
                        i,
                        buttons,
                        page,
                        pages
                      );
                    }
                  } else {
                    plugin.fnUpdate(settings, redraw);
                  }
                },
                sName: "pagination",
              });
            }

            return node;
          }

          /**
           * Alter the display settings to change the page
           *  @param {object} settings DataTables settings object
           *  @param {string|int} action Paging action to take: "first", "previous",
           *    "next" or "last" or page number to jump to (integer)
           *  @param [bool] redraw Automatically draw the update or not
           *  @returns {bool} true page has changed, false - no change
           *  @memberof DataTable#oApi
           */
          function _fnPageChange(settings, action, redraw) {
            var start = settings._iDisplayStart,
              len = settings._iDisplayLength,
              records = settings.fnRecordsDisplay();

            if (records === 0 || len === -1) {
              start = 0;
            } else if (typeof action === "number") {
              start = action * len;

              if (start > records) {
                start = 0;
              }
            } else if (action == "first") {
              start = 0;
            } else if (action == "previous") {
              start = len >= 0 ? start - len : 0;

              if (start < 0) {
                start = 0;
              }
            } else if (action == "next") {
              if (start + len < records) {
                start += len;
              }
            } else if (action == "last") {
              start = Math.floor((records - 1) / len) * len;
            } else {
              _fnLog(settings, 0, "Unknown paging action: " + action, 5);
            }

            var changed = settings._iDisplayStart !== start;
            settings._iDisplayStart = start;

            if (changed) {
              _fnCallbackFire(settings, null, "page", [settings]);

              if (redraw) {
                _fnDraw(settings);
              }
            }

            return changed;
          }

          /**
           * Generate the node required for the processing node
           *  @param {object} settings dataTables settings object
           *  @returns {node} Processing element
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlProcessing(settings) {
            return $("<div/>", {
              id: !settings.aanFeatures.r
                ? settings.sTableId + "_processing"
                : null,
              class: settings.oClasses.sProcessing,
            })
              .html(settings.oLanguage.sProcessing)
              .insertBefore(settings.nTable)[0];
          }

          /**
           * Display or hide the processing indicator
           *  @param {object} settings dataTables settings object
           *  @param {bool} show Show the processing indicator (true) or not (false)
           *  @memberof DataTable#oApi
           */
          function _fnProcessingDisplay(settings, show) {
            if (settings.oFeatures.bProcessing) {
              $(settings.aanFeatures.r).css("display", show ? "block" : "none");
            }

            _fnCallbackFire(settings, null, "processing", [settings, show]);
          }

          /**
           * Add any control elements for the table - specifically scrolling
           *  @param {object} settings dataTables settings object
           *  @returns {node} Node to add to the DOM
           *  @memberof DataTable#oApi
           */
          function _fnFeatureHtmlTable(settings) {
            var table = $(settings.nTable);

            // Add the ARIA grid role to the table
            table.attr("role", "grid");

            // Scrolling from here on in
            var scroll = settings.oScroll;

            if (scroll.sX === "" && scroll.sY === "") {
              return settings.nTable;
            }

            var scrollX = scroll.sX;
            var scrollY = scroll.sY;
            var classes = settings.oClasses;
            var caption = table.children("caption");
            var captionSide = caption.length ? caption[0]._captionSide : null;
            var headerClone = $(table[0].cloneNode(false));
            var footerClone = $(table[0].cloneNode(false));
            var footer = table.children("tfoot");
            var _div = "<div/>";
            var size = function(s) {
              return !s ? null : _fnStringToCss(s);
            };

            if (!footer.length) {
              footer = null;
            }

            /*
             * The HTML structure that we want to generate in this function is:
             *  div - scroller
             *    div - scroll head
             *      div - scroll head inner
             *        table - scroll head table
             *          thead - thead
             *    div - scroll body
             *      table - table (master table)
             *        thead - thead clone for sizing
             *        tbody - tbody
             *    div - scroll foot
             *      div - scroll foot inner
             *        table - scroll foot table
             *          tfoot - tfoot
             */
            var scroller = $(_div, { class: classes.sScrollWrapper })
              .append(
                $(_div, { class: classes.sScrollHead })
                  .css({
                    overflow: "hidden",
                    position: "relative",
                    border: 0,
                    width: scrollX ? size(scrollX) : "100%",
                  })
                  .append(
                    $(_div, { class: classes.sScrollHeadInner })
                      .css({
                        "box-sizing": "content-box",
                        width: scroll.sXInner || "100%",
                      })
                      .append(
                        headerClone
                          .removeAttr("id")
                          .css("margin-left", 0)
                          .append(captionSide === "top" ? caption : null)
                          .append(table.children("thead"))
                      )
                  )
              )
              .append(
                $(_div, { class: classes.sScrollBody })
                  .css({
                    position: "relative",
                    overflow: "auto",
                    width: size(scrollX),
                  })
                  .append(table)
              );

            if (footer) {
              scroller.append(
                $(_div, { class: classes.sScrollFoot })
                  .css({
                    overflow: "hidden",
                    border: 0,
                    width: scrollX ? size(scrollX) : "100%",
                  })
                  .append(
                    $(_div, { class: classes.sScrollFootInner }).append(
                      footerClone
                        .removeAttr("id")
                        .css("margin-left", 0)
                        .append(captionSide === "bottom" ? caption : null)
                        .append(table.children("tfoot"))
                    )
                  )
              );
            }

            var children = scroller.children();
            var scrollHead = children[0];
            var scrollBody = children[1];
            var scrollFoot = footer ? children[2] : null;

            // When the body is scrolled, then we also want to scroll the headers
            if (scrollX) {
              $(scrollBody).on("scroll.DT", function(e) {
                var scrollLeft = this.scrollLeft;

                scrollHead.scrollLeft = scrollLeft;

                if (footer) {
                  scrollFoot.scrollLeft = scrollLeft;
                }
              });
            }

            $(scrollBody).css("max-height", scrollY);
            if (!scroll.bCollapse) {
              $(scrollBody).css("height", scrollY);
            }

            settings.nScrollHead = scrollHead;
            settings.nScrollBody = scrollBody;
            settings.nScrollFoot = scrollFoot;

            // On redraw - align columns
            settings.aoDrawCallback.push({
              fn: _fnScrollDraw,
              sName: "scrolling",
            });

            return scroller[0];
          }

          /**
           * Update the header, footer and body tables for resizing - i.e. column
           * alignment.
           *
           * Welcome to the most horrible function DataTables. The process that this
           * function follows is basically:
           *   1. Re-create the table inside the scrolling div
           *   2. Take live measurements from the DOM
           *   3. Apply the measurements to align the columns
           *   4. Clean up
           *
           *  @param {object} settings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnScrollDraw(settings) {
            // Given that this is such a monster function, a lot of variables are use
            // to try and keep the minimised size as small as possible
            var scroll = settings.oScroll,
              scrollX = scroll.sX,
              scrollXInner = scroll.sXInner,
              scrollY = scroll.sY,
              barWidth = scroll.iBarWidth,
              divHeader = $(settings.nScrollHead),
              divHeaderStyle = divHeader[0].style,
              divHeaderInner = divHeader.children("div"),
              divHeaderInnerStyle = divHeaderInner[0].style,
              divHeaderTable = divHeaderInner.children("table"),
              divBodyEl = settings.nScrollBody,
              divBody = $(divBodyEl),
              divBodyStyle = divBodyEl.style,
              divFooter = $(settings.nScrollFoot),
              divFooterInner = divFooter.children("div"),
              divFooterTable = divFooterInner.children("table"),
              header = $(settings.nTHead),
              table = $(settings.nTable),
              tableEl = table[0],
              tableStyle = tableEl.style,
              footer = settings.nTFoot ? $(settings.nTFoot) : null,
              browser = settings.oBrowser,
              ie67 = browser.bScrollOversize,
              dtHeaderCells = _pluck(settings.aoColumns, "nTh"),
              headerTrgEls,
              footerTrgEls,
              headerSrcEls,
              footerSrcEls,
              headerCopy,
              footerCopy,
              headerWidths = [],
              footerWidths = [],
              headerContent = [],
              footerContent = [],
              idx,
              correction,
              sanityWidth,
              zeroOut = function(nSizer) {
                var style = nSizer.style;
                style.paddingTop = "0";
                style.paddingBottom = "0";
                style.borderTopWidth = "0";
                style.borderBottomWidth = "0";
                style.height = 0;
              };

            // If the scrollbar visibility has changed from the last draw, we need to
            // adjust the column sizes as the table width will have changed to account
            // for the scrollbar
            var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

            if (
              settings.scrollBarVis !== scrollBarVis &&
              settings.scrollBarVis !== undefined
            ) {
              settings.scrollBarVis = scrollBarVis;
              _fnAdjustColumnSizing(settings);
              return; // adjust column sizing will call this function again
            } else {
              settings.scrollBarVis = scrollBarVis;
            }

            /*
             * 1. Re-create the table inside the scrolling div
             */

            // Remove the old minimised thead and tfoot elements in the inner table
            table.children("thead, tfoot").remove();

            if (footer) {
              footerCopy = footer.clone().prependTo(table);
              footerTrgEls = footer.find("tr"); // the original tfoot is in its own table and must be sized
              footerSrcEls = footerCopy.find("tr");
            }

            // Clone the current header and footer elements and then place it into the inner table
            headerCopy = header.clone().prependTo(table);
            headerTrgEls = header.find("tr"); // original header is in its own table
            headerSrcEls = headerCopy.find("tr");
            headerCopy.find("th, td").removeAttr("tabindex");

            /*
             * 2. Take live measurements from the DOM - do not alter the DOM itself!
             */

            // Remove old sizing and apply the calculated column widths
            // Get the unique column headers in the newly created (cloned) header. We want to apply the
            // calculated sizes to this header
            if (!scrollX) {
              divBodyStyle.width = "100%";
              divHeader[0].style.width = "100%";
            }

            $.each(_fnGetUniqueThs(settings, headerCopy), function(i, el) {
              idx = _fnVisibleToColumnIndex(settings, i);
              el.style.width = settings.aoColumns[idx].sWidth;
            });

            if (footer) {
              _fnApplyToChildren(function(n) {
                n.style.width = "";
              }, footerSrcEls);
            }

            // Size the table as a whole
            sanityWidth = table.outerWidth();
            if (scrollX === "") {
              // No x scrolling
              tableStyle.width = "100%";

              // IE7 will make the width of the table when 100% include the scrollbar
              // - which is shouldn't. When there is a scrollbar we need to take this
              // into account.
              if (
                ie67 &&
                (table.find("tbody").height() > divBodyEl.offsetHeight ||
                  divBody.css("overflow-y") == "scroll")
              ) {
                tableStyle.width = _fnStringToCss(
                  table.outerWidth() - barWidth
                );
              }

              // Recalculate the sanity width
              sanityWidth = table.outerWidth();
            } else if (scrollXInner !== "") {
              // legacy x scroll inner has been given - use it
              tableStyle.width = _fnStringToCss(scrollXInner);

              // Recalculate the sanity width
              sanityWidth = table.outerWidth();
            }

            // Hidden header should have zero height, so remove padding and borders. Then
            // set the width based on the real headers

            // Apply all styles in one pass
            _fnApplyToChildren(zeroOut, headerSrcEls);

            // Read all widths in next pass
            _fnApplyToChildren(function(nSizer) {
              headerContent.push(nSizer.innerHTML);
              headerWidths.push(_fnStringToCss($(nSizer).css("width")));
            }, headerSrcEls);

            // Apply all widths in final pass
            _fnApplyToChildren(function(nToSize, i) {
              // Only apply widths to the DataTables detected header cells - this
              // prevents complex headers from having contradictory sizes applied
              if ($.inArray(nToSize, dtHeaderCells) !== -1) {
                nToSize.style.width = headerWidths[i];
              }
            }, headerTrgEls);

            $(headerSrcEls).height(0);

            /* Same again with the footer if we have one */
            if (footer) {
              _fnApplyToChildren(zeroOut, footerSrcEls);

              _fnApplyToChildren(function(nSizer) {
                footerContent.push(nSizer.innerHTML);
                footerWidths.push(_fnStringToCss($(nSizer).css("width")));
              }, footerSrcEls);

              _fnApplyToChildren(function(nToSize, i) {
                nToSize.style.width = footerWidths[i];
              }, footerTrgEls);

              $(footerSrcEls).height(0);
            }

            /*
             * 3. Apply the measurements
             */

            // "Hide" the header and footer that we used for the sizing. We need to keep
            // the content of the cell so that the width applied to the header and body
            // both match, but we want to hide it completely. We want to also fix their
            // width to what they currently are
            _fnApplyToChildren(function(nSizer, i) {
              nSizer.innerHTML =
                '<div class="dataTables_sizing">' + headerContent[i] + "</div>";
              nSizer.childNodes[0].style.height = "0";
              nSizer.childNodes[0].style.overflow = "hidden";
              nSizer.style.width = headerWidths[i];
            }, headerSrcEls);

            if (footer) {
              _fnApplyToChildren(function(nSizer, i) {
                nSizer.innerHTML =
                  '<div class="dataTables_sizing">' +
                  footerContent[i] +
                  "</div>";
                nSizer.childNodes[0].style.height = "0";
                nSizer.childNodes[0].style.overflow = "hidden";
                nSizer.style.width = footerWidths[i];
              }, footerSrcEls);
            }

            // Sanity check that the table is of a sensible width. If not then we are going to get
            // misalignment - try to prevent this by not allowing the table to shrink below its min width
            if (table.outerWidth() < sanityWidth) {
              // The min width depends upon if we have a vertical scrollbar visible or not */
              correction =
                divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
                divBody.css("overflow-y") == "scroll"
                  ? sanityWidth + barWidth
                  : sanityWidth;

              // IE6/7 are a law unto themselves...
              if (
                ie67 &&
                (divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
                  divBody.css("overflow-y") == "scroll")
              ) {
                tableStyle.width = _fnStringToCss(correction - barWidth);
              }

              // And give the user a warning that we've stopped the table getting too small
              if (scrollX === "" || scrollXInner !== "") {
                _fnLog(settings, 1, "Possible column misalignment", 6);
              }
            } else {
              correction = "100%";
            }

            // Apply to the container elements
            divBodyStyle.width = _fnStringToCss(correction);
            divHeaderStyle.width = _fnStringToCss(correction);

            if (footer) {
              settings.nScrollFoot.style.width = _fnStringToCss(correction);
            }

            /*
             * 4. Clean up
             */
            if (!scrollY) {
              /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
               * the scrollbar height from the visible display, rather than adding it on. We need to
               * set the height in order to sort this. Don't want to do it in any other browsers.
               */
              if (ie67) {
                divBodyStyle.height = _fnStringToCss(
                  tableEl.offsetHeight + barWidth
                );
              }
            }

            /* Finally set the width's of the header and footer tables */
            var iOuterWidth = table.outerWidth();
            divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
            divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

            // Figure out if there are scrollbar present - if so then we need a the header and footer to
            // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
            var bScrolling =
              table.height() > divBodyEl.clientHeight ||
              divBody.css("overflow-y") == "scroll";
            var padding =
              "padding" + (browser.bScrollbarLeft ? "Left" : "Right");
            divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

            if (footer) {
              divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
              divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
              divFooterInner[0].style[padding] = bScrolling
                ? barWidth + "px"
                : "0px";
            }

            // Correct DOM ordering for colgroup - comes before the thead
            table.children("colgroup").insertBefore(table.children("thead"));

            /* Adjust the position of the header in case we loose the y-scrollbar */
            divBody.trigger("scroll");

            // If sorting or filtering has occurred, jump the scrolling back to the top
            // only if we aren't holding the position
            if (
              (settings.bSorted || settings.bFiltered) &&
              !settings._drawHold
            ) {
              divBodyEl.scrollTop = 0;
            }
          }

          /**
           * Apply a given function to the display child nodes of an element array (typically
           * TD children of TR rows
           *  @param {function} fn Method to apply to the objects
           *  @param array {nodes} an1 List of elements to look through for display children
           *  @param array {nodes} an2 Another list (identical structure to the first) - optional
           *  @memberof DataTable#oApi
           */
          function _fnApplyToChildren(fn, an1, an2) {
            var index = 0,
              i = 0,
              iLen = an1.length;
            var nNode1, nNode2;

            while (i < iLen) {
              nNode1 = an1[i].firstChild;
              nNode2 = an2 ? an2[i].firstChild : null;

              while (nNode1) {
                if (nNode1.nodeType === 1) {
                  if (an2) {
                    fn(nNode1, nNode2, index);
                  } else {
                    fn(nNode1, index);
                  }

                  index++;
                }

                nNode1 = nNode1.nextSibling;
                nNode2 = an2 ? nNode2.nextSibling : null;
              }

              i++;
            }
          }

          var __re_html_remove = /<.*?>/g;

          /**
           * Calculate the width of columns for the table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnCalculateColumnWidths(oSettings) {
            var table = oSettings.nTable,
              columns = oSettings.aoColumns,
              scroll = oSettings.oScroll,
              scrollY = scroll.sY,
              scrollX = scroll.sX,
              scrollXInner = scroll.sXInner,
              columnCount = columns.length,
              visibleColumns = _fnGetColumns(oSettings, "bVisible"),
              headerCells = $("th", oSettings.nTHead),
              tableWidthAttr = table.getAttribute("width"), // from DOM element
              tableContainer = table.parentNode,
              userInputs = false,
              i,
              column,
              columnIdx,
              width,
              outerWidth,
              browser = oSettings.oBrowser,
              ie67 = browser.bScrollOversize;

            var styleWidth = table.style.width;
            if (styleWidth && styleWidth.indexOf("%") !== -1) {
              tableWidthAttr = styleWidth;
            }

            /* Convert any user input sizes into pixel sizes */
            for (i = 0; i < visibleColumns.length; i++) {
              column = columns[visibleColumns[i]];

              if (column.sWidth !== null) {
                column.sWidth = _fnConvertToWidth(
                  column.sWidthOrig,
                  tableContainer
                );

                userInputs = true;
              }
            }

            /* If the number of columns in the DOM equals the number that we have to
             * process in DataTables, then we can use the offsets that are created by
             * the web- browser. No custom sizes can be set in order for this to happen,
             * nor scrolling used
             */
            if (
              ie67 ||
              (!userInputs &&
                !scrollX &&
                !scrollY &&
                columnCount == _fnVisbleColumns(oSettings) &&
                columnCount == headerCells.length)
            ) {
              for (i = 0; i < columnCount; i++) {
                var colIdx = _fnVisibleToColumnIndex(oSettings, i);

                if (colIdx !== null) {
                  columns[colIdx].sWidth = _fnStringToCss(
                    headerCells.eq(i).width()
                  );
                }
              }
            } else {
              // Otherwise construct a single row, worst case, table with the widest
              // node in the data, assign any user defined widths, then insert it into
              // the DOM and allow the browser to do all the hard work of calculating
              // table widths
              var tmpTable = $(table)
                .clone() // don't use cloneNode - IE8 will remove events on the main table
                .css("visibility", "hidden")
                .removeAttr("id");

              // Clean up the table body
              tmpTable.find("tbody tr").remove();
              var tr = $("<tr/>").appendTo(tmpTable.find("tbody"));

              // Clone the table header and footer - we can't use the header / footer
              // from the cloned table, since if scrolling is active, the table's
              // real header and footer are contained in different table tags
              tmpTable.find("thead, tfoot").remove();
              tmpTable
                .append($(oSettings.nTHead).clone())
                .append($(oSettings.nTFoot).clone());

              // Remove any assigned widths from the footer (from scrolling)
              tmpTable.find("tfoot th, tfoot td").css("width", "");

              // Apply custom sizing to the cloned header
              headerCells = _fnGetUniqueThs(
                oSettings,
                tmpTable.find("thead")[0]
              );

              for (i = 0; i < visibleColumns.length; i++) {
                column = columns[visibleColumns[i]];

                headerCells[i].style.width =
                  column.sWidthOrig !== null && column.sWidthOrig !== ""
                    ? _fnStringToCss(column.sWidthOrig)
                    : "";

                // For scrollX we need to force the column width otherwise the
                // browser will collapse it. If this width is smaller than the
                // width the column requires, then it will have no effect
                if (column.sWidthOrig && scrollX) {
                  $(headerCells[i]).append(
                    $("<div/>").css({
                      width: column.sWidthOrig,
                      margin: 0,
                      padding: 0,
                      border: 0,
                      height: 1,
                    })
                  );
                }
              }

              // Find the widest cell for each column and put it into the table
              if (oSettings.aoData.length) {
                for (i = 0; i < visibleColumns.length; i++) {
                  columnIdx = visibleColumns[i];
                  column = columns[columnIdx];

                  $(_fnGetWidestNode(oSettings, columnIdx))
                    .clone(false)
                    .append(column.sContentPadding)
                    .appendTo(tr);
                }
              }

              // Tidy the temporary table - remove name attributes so there aren't
              // duplicated in the dom (radio elements for example)
              $("[name]", tmpTable).removeAttr("name");

              // Table has been built, attach to the document so we can work with it.
              // A holding element is used, positioned at the top of the container
              // with minimal height, so it has no effect on if the container scrolls
              // or not. Otherwise it might trigger scrolling when it actually isn't
              // needed
              var holder = $("<div/>")
                .css(
                  scrollX || scrollY
                    ? {
                        position: "absolute",
                        top: 0,
                        left: 0,
                        height: 1,
                        right: 0,
                        overflow: "hidden",
                      }
                    : {}
                )
                .append(tmpTable)
                .appendTo(tableContainer);

              // When scrolling (X or Y) we want to set the width of the table as
              // appropriate. However, when not scrolling leave the table width as it
              // is. This results in slightly different, but I think correct behaviour
              if (scrollX && scrollXInner) {
                tmpTable.width(scrollXInner);
              } else if (scrollX) {
                tmpTable.css("width", "auto");
                tmpTable.removeAttr("width");

                // If there is no width attribute or style, then allow the table to
                // collapse
                if (
                  tmpTable.width() < tableContainer.clientWidth &&
                  tableWidthAttr
                ) {
                  tmpTable.width(tableContainer.clientWidth);
                }
              } else if (scrollY) {
                tmpTable.width(tableContainer.clientWidth);
              } else if (tableWidthAttr) {
                tmpTable.width(tableWidthAttr);
              }

              // Get the width of each column in the constructed table - we need to
              // know the inner width (so it can be assigned to the other table's
              // cells) and the outer width so we can calculate the full width of the
              // table. This is safe since DataTables requires a unique cell for each
              // column, but if ever a header can span multiple columns, this will
              // need to be modified.
              var total = 0;
              for (i = 0; i < visibleColumns.length; i++) {
                var cell = $(headerCells[i]);
                var border = cell.outerWidth() - cell.width();

                // Use getBounding... where possible (not IE8-) because it can give
                // sub-pixel accuracy, which we then want to round up!
                var bounding = browser.bBounding
                  ? Math.ceil(headerCells[i].getBoundingClientRect().width)
                  : cell.outerWidth();

                // Total is tracked to remove any sub-pixel errors as the outerWidth
                // of the table might not equal the total given here (IE!).
                total += bounding;

                // Width for each column to use
                columns[visibleColumns[i]].sWidth = _fnStringToCss(
                  bounding - border
                );
              }

              table.style.width = _fnStringToCss(total);

              // Finished with the table - ditch it
              holder.remove();
            }

            // If there is a width attr, we want to attach an event listener which
            // allows the table sizing to automatically adjust when the window is
            // resized. Use the width attr rather than CSS, since we can't know if the
            // CSS is a relative value or absolute - DOM read is always px.
            if (tableWidthAttr) {
              table.style.width = _fnStringToCss(tableWidthAttr);
            }

            if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
              var bindResize = function() {
                $(window).on(
                  "resize.DT-" + oSettings.sInstance,
                  _fnThrottle(function() {
                    _fnAdjustColumnSizing(oSettings);
                  })
                );
              };

              // IE6/7 will crash if we bind a resize event handler on page load.
              // To be removed in 1.11 which drops IE6/7 support
              if (ie67) {
                setTimeout(bindResize, 1000);
              } else {
                bindResize();
              }

              oSettings._reszEvt = true;
            }
          }

          /**
           * Throttle the calls to a function. Arguments and context are maintained for
           * the throttled function
           *  @param {function} fn Function to be called
           *  @param {int} [freq=200] call frequency in mS
           *  @returns {function} wrapped function
           *  @memberof DataTable#oApi
           */
          var _fnThrottle = DataTable.util.throttle;

          /**
           * Convert a CSS unit width to pixels (e.g. 2em)
           *  @param {string} width width to be converted
           *  @param {node} parent parent to get the with for (required for relative widths) - optional
           *  @returns {int} width in pixels
           *  @memberof DataTable#oApi
           */
          function _fnConvertToWidth(width, parent) {
            if (!width) {
              return 0;
            }

            var n = $("<div/>")
              .css("width", _fnStringToCss(width))
              .appendTo(parent || document.body);

            var val = n[0].offsetWidth;
            n.remove();

            return val;
          }

          /**
           * Get the widest node
           *  @param {object} settings dataTables settings object
           *  @param {int} colIdx column of interest
           *  @returns {node} widest table node
           *  @memberof DataTable#oApi
           */
          function _fnGetWidestNode(settings, colIdx) {
            var idx = _fnGetMaxLenString(settings, colIdx);
            if (idx < 0) {
              return null;
            }

            var data = settings.aoData[idx];
            return !data.nTr // Might not have been created when deferred rendering
              ? $("<td/>").html(
                  _fnGetCellData(settings, idx, colIdx, "display")
                )[0]
              : data.anCells[colIdx];
          }

          /**
           * Get the maximum strlen for each data column
           *  @param {object} settings dataTables settings object
           *  @param {int} colIdx column of interest
           *  @returns {string} max string length for each column
           *  @memberof DataTable#oApi
           */
          function _fnGetMaxLenString(settings, colIdx) {
            var s,
              max = -1,
              maxIdx = -1;

            for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
              s = _fnGetCellData(settings, i, colIdx, "display") + "";
              s = s.replace(__re_html_remove, "");
              s = s.replace(/&nbsp;/g, " ");

              if (s.length > max) {
                max = s.length;
                maxIdx = i;
              }
            }

            return maxIdx;
          }

          /**
           * Append a CSS unit (only if required) to a string
           *  @param {string} value to css-ify
           *  @returns {string} value with css unit
           *  @memberof DataTable#oApi
           */
          function _fnStringToCss(s) {
            if (s === null) {
              return "0px";
            }

            if (typeof s == "number") {
              return s < 0 ? "0px" : s + "px";
            }

            // Check it has a unit character already
            return s.match(/\d$/) ? s + "px" : s;
          }

          function _fnSortFlatten(settings) {
            var i,
              iLen,
              k,
              kLen,
              aSort = [],
              aiOrig = [],
              aoColumns = settings.aoColumns,
              aDataSort,
              iCol,
              sType,
              srcCol,
              fixed = settings.aaSortingFixed,
              fixedObj = $.isPlainObject(fixed),
              nestedSort = [],
              add = function(a) {
                if (a.length && !$.isArray(a[0])) {
                  // 1D array
                  nestedSort.push(a);
                } else {
                  // 2D array
                  $.merge(nestedSort, a);
                }
              };

            // Build the sort array, with pre-fix and post-fix options if they have been
            // specified
            if ($.isArray(fixed)) {
              add(fixed);
            }

            if (fixedObj && fixed.pre) {
              add(fixed.pre);
            }

            add(settings.aaSorting);

            if (fixedObj && fixed.post) {
              add(fixed.post);
            }

            for (i = 0; i < nestedSort.length; i++) {
              srcCol = nestedSort[i][0];
              aDataSort = aoColumns[srcCol].aDataSort;

              for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
                iCol = aDataSort[k];
                sType = aoColumns[iCol].sType || "string";

                if (nestedSort[i]._idx === undefined) {
                  nestedSort[i]._idx = $.inArray(
                    nestedSort[i][1],
                    aoColumns[iCol].asSorting
                  );
                }

                aSort.push({
                  src: srcCol,
                  col: iCol,
                  dir: nestedSort[i][1],
                  index: nestedSort[i]._idx,
                  type: sType,
                  formatter: DataTable.ext.type.order[sType + "-pre"],
                });
              }
            }

            return aSort;
          }

          /**
           * Change the order of the table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           *  @todo This really needs split up!
           */
          function _fnSort(oSettings) {
            var i,
              ien,
              iLen,
              j,
              jLen,
              k,
              kLen,
              sDataType,
              nTh,
              aiOrig = [],
              oExtSort = DataTable.ext.type.order,
              aoData = oSettings.aoData,
              aoColumns = oSettings.aoColumns,
              aDataSort,
              data,
              iCol,
              sType,
              oSort,
              formatters = 0,
              sortCol,
              displayMaster = oSettings.aiDisplayMaster,
              aSort;

            // Resolve any column types that are unknown due to addition or invalidation
            // @todo Can this be moved into a 'data-ready' handler which is called when
            //   data is going to be used in the table?
            _fnColumnTypes(oSettings);

            aSort = _fnSortFlatten(oSettings);

            for (i = 0, ien = aSort.length; i < ien; i++) {
              sortCol = aSort[i];

              // Track if we can use the fast sort algorithm
              if (sortCol.formatter) {
                formatters++;
              }

              // Load the data needed for the sort, for each cell
              _fnSortData(oSettings, sortCol.col);
            }

            /* No sorting required if server-side or no sorting array */
            if (_fnDataSource(oSettings) != "ssp" && aSort.length !== 0) {
              // Create a value - key array of the current row positions such that we can use their
              // current position during the sort, if values match, in order to perform stable sorting
              for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
                aiOrig[displayMaster[i]] = i;
              }

              /* Do the sort - here we want multi-column sorting based on a given data source (column)
               * and sorting function (from oSort) in a certain direction. It's reasonably complex to
               * follow on it's own, but this is what we want (example two column sorting):
               *  fnLocalSorting = function(a,b){
               *    var iTest;
               *    iTest = oSort['string-asc']('data11', 'data12');
               *      if (iTest !== 0)
               *        return iTest;
               *    iTest = oSort['numeric-desc']('data21', 'data22');
               *    if (iTest !== 0)
               *      return iTest;
               *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
               *  }
               * Basically we have a test for each sorting column, if the data in that column is equal,
               * test the next column. If all columns match, then we use a numeric sort on the row
               * positions in the original data array to provide a stable sort.
               *
               * Note - I know it seems excessive to have two sorting methods, but the first is around
               * 15% faster, so the second is only maintained for backwards compatibility with sorting
               * methods which do not have a pre-sort formatting function.
               */
              if (formatters === aSort.length) {
                // All sort types have formatting functions
                displayMaster.sort(function(a, b) {
                  var x,
                    y,
                    k,
                    test,
                    sort,
                    len = aSort.length,
                    dataA = aoData[a]._aSortData,
                    dataB = aoData[b]._aSortData;

                  for (k = 0; k < len; k++) {
                    sort = aSort[k];

                    x = dataA[sort.col];
                    y = dataB[sort.col];

                    test = x < y ? -1 : x > y ? 1 : 0;
                    if (test !== 0) {
                      return sort.dir === "asc" ? test : -test;
                    }
                  }

                  x = aiOrig[a];
                  y = aiOrig[b];
                  return x < y ? -1 : x > y ? 1 : 0;
                });
              } else {
                // Depreciated - remove in 1.11 (providing a plug-in option)
                // Not all sort types have formatting methods, so we have to call their sorting
                // methods.
                displayMaster.sort(function(a, b) {
                  var x,
                    y,
                    k,
                    l,
                    test,
                    sort,
                    fn,
                    len = aSort.length,
                    dataA = aoData[a]._aSortData,
                    dataB = aoData[b]._aSortData;

                  for (k = 0; k < len; k++) {
                    sort = aSort[k];

                    x = dataA[sort.col];
                    y = dataB[sort.col];

                    fn =
                      oExtSort[sort.type + "-" + sort.dir] ||
                      oExtSort["string-" + sort.dir];
                    test = fn(x, y);
                    if (test !== 0) {
                      return test;
                    }
                  }

                  x = aiOrig[a];
                  y = aiOrig[b];
                  return x < y ? -1 : x > y ? 1 : 0;
                });
              }
            }

            /* Tell the draw function that we have sorted the data */
            oSettings.bSorted = true;
          }

          function _fnSortAria(settings) {
            var label;
            var nextSort;
            var columns = settings.aoColumns;
            var aSort = _fnSortFlatten(settings);
            var oAria = settings.oLanguage.oAria;

            // ARIA attributes - need to loop all columns, to update all (removing old
            // attributes as needed)
            for (var i = 0, iLen = columns.length; i < iLen; i++) {
              var col = columns[i];
              var asSorting = col.asSorting;
              var sTitle = col.sTitle.replace(/<.*?>/g, "");
              var th = col.nTh;

              // IE7 is throwing an error when setting these properties with jQuery's
              // attr() and removeAttr() methods...
              th.removeAttribute("aria-sort");

              /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
              if (col.bSortable) {
                if (aSort.length > 0 && aSort[0].col == i) {
                  th.setAttribute(
                    "aria-sort",
                    aSort[0].dir == "asc" ? "ascending" : "descending"
                  );
                  nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
                } else {
                  nextSort = asSorting[0];
                }

                label =
                  sTitle +
                  (nextSort === "asc"
                    ? oAria.sSortAscending
                    : oAria.sSortDescending);
              } else {
                label = sTitle;
              }

              th.setAttribute("aria-label", label);
            }
          }

          /**
           * Function to run on user sort request
           *  @param {object} settings dataTables settings object
           *  @param {node} attachTo node to attach the handler to
           *  @param {int} colIdx column sorting index
           *  @param {boolean} [append=false] Append the requested sort to the existing
           *    sort if true (i.e. multi-column sort)
           *  @param {function} [callback] callback function
           *  @memberof DataTable#oApi
           */
          function _fnSortListener(settings, colIdx, append, callback) {
            var col = settings.aoColumns[colIdx];
            var sorting = settings.aaSorting;
            var asSorting = col.asSorting;
            var nextSortIdx;
            var next = function(a, overflow) {
              var idx = a._idx;
              if (idx === undefined) {
                idx = $.inArray(a[1], asSorting);
              }

              return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
            };

            // Convert to 2D array if needed
            if (typeof sorting[0] === "number") {
              sorting = settings.aaSorting = [sorting];
            }

            // If appending the sort then we are multi-column sorting
            if (append && settings.oFeatures.bSortMulti) {
              // Are we already doing some kind of sort on this column?
              var sortIdx = $.inArray(colIdx, _pluck(sorting, "0"));

              if (sortIdx !== -1) {
                // Yes, modify the sort
                nextSortIdx = next(sorting[sortIdx], true);

                if (nextSortIdx === null && sorting.length === 1) {
                  nextSortIdx = 0; // can't remove sorting completely
                }

                if (nextSortIdx === null) {
                  sorting.splice(sortIdx, 1);
                } else {
                  sorting[sortIdx][1] = asSorting[nextSortIdx];
                  sorting[sortIdx]._idx = nextSortIdx;
                }
              } else {
                // No sort on this column yet
                sorting.push([colIdx, asSorting[0], 0]);
                sorting[sorting.length - 1]._idx = 0;
              }
            } else if (sorting.length && sorting[0][0] == colIdx) {
              // Single column - already sorting on this column, modify the sort
              nextSortIdx = next(sorting[0]);

              sorting.length = 1;
              sorting[0][1] = asSorting[nextSortIdx];
              sorting[0]._idx = nextSortIdx;
            } else {
              // Single column - sort only on this column
              sorting.length = 0;
              sorting.push([colIdx, asSorting[0]]);
              sorting[0]._idx = 0;
            }

            // Run the sort by calling a full redraw
            _fnReDraw(settings);

            // callback used for async user interaction
            if (typeof callback == "function") {
              callback(settings);
            }
          }

          /**
           * Attach a sort handler (click) to a node
           *  @param {object} settings dataTables settings object
           *  @param {node} attachTo node to attach the handler to
           *  @param {int} colIdx column sorting index
           *  @param {function} [callback] callback function
           *  @memberof DataTable#oApi
           */
          function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
            var col = settings.aoColumns[colIdx];

            _fnBindAction(attachTo, {}, function(e) {
              /* If the column is not sortable - don't to anything */
              if (col.bSortable === false) {
                return;
              }

              // If processing is enabled use a timeout to allow the processing
              // display to be shown - otherwise to it synchronously
              if (settings.oFeatures.bProcessing) {
                _fnProcessingDisplay(settings, true);

                setTimeout(function() {
                  _fnSortListener(settings, colIdx, e.shiftKey, callback);

                  // In server-side processing, the draw callback will remove the
                  // processing display
                  if (_fnDataSource(settings) !== "ssp") {
                    _fnProcessingDisplay(settings, false);
                  }
                }, 0);
              } else {
                _fnSortListener(settings, colIdx, e.shiftKey, callback);
              }
            });
          }

          /**
           * Set the sorting classes on table's body, Note: it is safe to call this function
           * when bSort and bSortClasses are false
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnSortingClasses(settings) {
            var oldSort = settings.aLastSort;
            var sortClass = settings.oClasses.sSortColumn;
            var sort = _fnSortFlatten(settings);
            var features = settings.oFeatures;
            var i, ien, colIdx;

            if (features.bSort && features.bSortClasses) {
              // Remove old sorting classes
              for (i = 0, ien = oldSort.length; i < ien; i++) {
                colIdx = oldSort[i].src;

                // Remove column sorting
                $(_pluck(settings.aoData, "anCells", colIdx)).removeClass(
                  sortClass + (i < 2 ? i + 1 : 3)
                );
              }

              // Add new column sorting
              for (i = 0, ien = sort.length; i < ien; i++) {
                colIdx = sort[i].src;

                $(_pluck(settings.aoData, "anCells", colIdx)).addClass(
                  sortClass + (i < 2 ? i + 1 : 3)
                );
              }
            }

            settings.aLastSort = sort;
          }

          // Get the data to sort a column, be it from cache, fresh (populating the
          // cache), or from a sort formatter
          function _fnSortData(settings, idx) {
            // Custom sorting function - provided by the sort data type
            var column = settings.aoColumns[idx];
            var customSort = DataTable.ext.order[column.sSortDataType];
            var customData;

            if (customSort) {
              customData = customSort.call(
                settings.oInstance,
                settings,
                idx,
                _fnColumnIndexToVisible(settings, idx)
              );
            }

            // Use / populate cache
            var row, cellData;
            var formatter = DataTable.ext.type.order[column.sType + "-pre"];

            for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
              row = settings.aoData[i];

              if (!row._aSortData) {
                row._aSortData = [];
              }

              if (!row._aSortData[idx] || customSort) {
                cellData = customSort
                  ? customData[i] // If there was a custom sort function, use data from there
                  : _fnGetCellData(settings, i, idx, "sort");

                row._aSortData[idx] = formatter
                  ? formatter(cellData)
                  : cellData;
              }
            }
          }

          /**
           * Save the state of a table
           *  @param {object} oSettings dataTables settings object
           *  @memberof DataTable#oApi
           */
          function _fnSaveState(settings) {
            if (!settings.oFeatures.bStateSave || settings.bDestroying) {
              return;
            }

            /* Store the interesting variables */
            var state = {
              time: +new Date(),
              start: settings._iDisplayStart,
              length: settings._iDisplayLength,
              order: $.extend(true, [], settings.aaSorting),
              search: _fnSearchToCamel(settings.oPreviousSearch),
              columns: $.map(settings.aoColumns, function(col, i) {
                return {
                  visible: col.bVisible,
                  search: _fnSearchToCamel(settings.aoPreSearchCols[i]),
                };
              }),
            };

            _fnCallbackFire(settings, "aoStateSaveParams", "stateSaveParams", [
              settings,
              state,
            ]);

            settings.oSavedState = state;
            settings.fnStateSaveCallback.call(
              settings.oInstance,
              settings,
              state
            );
          }

          /**
           * Attempt to load a saved table state
           *  @param {object} oSettings dataTables settings object
           *  @param {object} oInit DataTables init object so we can override settings
           *  @param {function} callback Callback to execute when the state has been loaded
           *  @memberof DataTable#oApi
           */
          function _fnLoadState(settings, oInit, callback) {
            var i, ien;
            var columns = settings.aoColumns;
            var loaded = function(s) {
              if (!s || !s.time) {
                callback();
                return;
              }

              // Allow custom and plug-in manipulation functions to alter the saved data set and
              // cancelling of loading by returning false
              var abStateLoad = _fnCallbackFire(
                settings,
                "aoStateLoadParams",
                "stateLoadParams",
                [settings, s]
              );
              if ($.inArray(false, abStateLoad) !== -1) {
                callback();
                return;
              }

              // Reject old data
              var duration = settings.iStateDuration;
              if (duration > 0 && s.time < +new Date() - duration * 1000) {
                callback();
                return;
              }

              // Number of columns have changed - all bets are off, no restore of settings
              if (s.columns && columns.length !== s.columns.length) {
                callback();
                return;
              }

              // Store the saved state so it might be accessed at any time
              settings.oLoadedState = $.extend(true, {}, s);

              // Restore key features - todo - for 1.11 this needs to be done by
              // subscribed events
              if (s.start !== undefined) {
                settings._iDisplayStart = s.start;
                settings.iInitDisplayStart = s.start;
              }
              if (s.length !== undefined) {
                settings._iDisplayLength = s.length;
              }

              // Order
              if (s.order !== undefined) {
                settings.aaSorting = [];
                $.each(s.order, function(i, col) {
                  settings.aaSorting.push(
                    col[0] >= columns.length ? [0, col[1]] : col
                  );
                });
              }

              // Search
              if (s.search !== undefined) {
                $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
              }

              // Columns
              //
              if (s.columns) {
                for (i = 0, ien = s.columns.length; i < ien; i++) {
                  var col = s.columns[i];

                  // Visibility
                  if (col.visible !== undefined) {
                    columns[i].bVisible = col.visible;
                  }

                  // Search
                  if (col.search !== undefined) {
                    $.extend(
                      settings.aoPreSearchCols[i],
                      _fnSearchToHung(col.search)
                    );
                  }
                }
              }

              _fnCallbackFire(settings, "aoStateLoaded", "stateLoaded", [
                settings,
                s,
              ]);
              callback();
            };

            if (!settings.oFeatures.bStateSave) {
              callback();
              return;
            }

            var state = settings.fnStateLoadCallback.call(
              settings.oInstance,
              settings,
              loaded
            );

            if (state !== undefined) {
              loaded(state);
            }
            // otherwise, wait for the loaded callback to be executed
          }

          /**
           * Return the settings object for a particular table
           *  @param {node} table table we are using as a dataTable
           *  @returns {object} Settings object - or null if not found
           *  @memberof DataTable#oApi
           */
          function _fnSettingsFromNode(table) {
            var settings = DataTable.settings;
            var idx = $.inArray(table, _pluck(settings, "nTable"));

            return idx !== -1 ? settings[idx] : null;
          }

          /**
           * Log an error message
           *  @param {object} settings dataTables settings object
           *  @param {int} level log error messages, or display them to the user
           *  @param {string} msg error message
           *  @param {int} tn Technical note id to get more information about the error.
           *  @memberof DataTable#oApi
           */
          function _fnLog(settings, level, msg, tn) {
            msg =
              "DataTables warning: " +
              (settings ? "table id=" + settings.sTableId + " - " : "") +
              msg;

            if (tn) {
              msg +=
                ". For more information about this error, please see " +
                "http://datatables.net/tn/" +
                tn;
            }

            if (!level) {
              // Backwards compatibility pre 1.10
              var ext = DataTable.ext;
              var type = ext.sErrMode || ext.errMode;

              if (settings) {
                _fnCallbackFire(settings, null, "error", [settings, tn, msg]);
              }

              if (type == "alert") {
                alert(msg);
              } else if (type == "throw") {
                throw new Error(msg);
              } else if (typeof type == "function") {
                type(settings, tn, msg);
              }
            } else if (window.console && console.log) {
              console.log(msg);
            }
          }

          /**
           * See if a property is defined on one object, if so assign it to the other object
           *  @param {object} ret target object
           *  @param {object} src source object
           *  @param {string} name property
           *  @param {string} [mappedName] name to map too - optional, name used if not given
           *  @memberof DataTable#oApi
           */
          function _fnMap(ret, src, name, mappedName) {
            if ($.isArray(name)) {
              $.each(name, function(i, val) {
                if ($.isArray(val)) {
                  _fnMap(ret, src, val[0], val[1]);
                } else {
                  _fnMap(ret, src, val);
                }
              });

              return;
            }

            if (mappedName === undefined) {
              mappedName = name;
            }

            if (src[name] !== undefined) {
              ret[mappedName] = src[name];
            }
          }

          /**
           * Extend objects - very similar to jQuery.extend, but deep copy objects, and
           * shallow copy arrays. The reason we need to do this, is that we don't want to
           * deep copy array init values (such as aaSorting) since the dev wouldn't be
           * able to override them, but we do want to deep copy arrays.
           *  @param {object} out Object to extend
           *  @param {object} extender Object from which the properties will be applied to
           *      out
           *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
           *      independent copy with the exception of the `data` or `aaData` parameters
           *      if they are present. This is so you can pass in a collection to
           *      DataTables and have that used as your data source without breaking the
           *      references
           *  @returns {object} out Reference, just for convenience - out === the return.
           *  @memberof DataTable#oApi
           *  @todo This doesn't take account of arrays inside the deep copied objects.
           */
          function _fnExtend(out, extender, breakRefs) {
            var val;

            for (var prop in extender) {
              if (extender.hasOwnProperty(prop)) {
                val = extender[prop];

                if ($.isPlainObject(val)) {
                  if (!$.isPlainObject(out[prop])) {
                    out[prop] = {};
                  }
                  $.extend(true, out[prop], val);
                } else if (
                  breakRefs &&
                  prop !== "data" &&
                  prop !== "aaData" &&
                  $.isArray(val)
                ) {
                  out[prop] = val.slice();
                } else {
                  out[prop] = val;
                }
              }
            }

            return out;
          }

          /**
           * Bind an event handers to allow a click or return key to activate the callback.
           * This is good for accessibility since a return on the keyboard will have the
           * same effect as a click, if the element has focus.
           *  @param {element} n Element to bind the action to
           *  @param {object} oData Data object to pass to the triggered function
           *  @param {function} fn Callback function for when the event is triggered
           *  @memberof DataTable#oApi
           */
          function _fnBindAction(n, oData, fn) {
            $(n)
              .on("click.DT", oData, function(e) {
                $(n).trigger("blur"); // Remove focus outline for mouse users
                fn(e);
              })
              .on("keypress.DT", oData, function(e) {
                if (e.which === 13) {
                  e.preventDefault();
                  fn(e);
                }
              })
              .on("selectstart.DT", function() {
                /* Take the brutal approach to cancelling text selection */
                return false;
              });
          }

          /**
           * Register a callback function. Easily allows a callback function to be added to
           * an array store of callback functions that can then all be called together.
           *  @param {object} oSettings dataTables settings object
           *  @param {string} sStore Name of the array storage for the callbacks in oSettings
           *  @param {function} fn Function to be called back
           *  @param {string} sName Identifying name for the callback (i.e. a label)
           *  @memberof DataTable#oApi
           */
          function _fnCallbackReg(oSettings, sStore, fn, sName) {
            if (fn) {
              oSettings[sStore].push({
                fn: fn,
                sName: sName,
              });
            }
          }

          /**
           * Fire callback functions and trigger events. Note that the loop over the
           * callback array store is done backwards! Further note that you do not want to
           * fire off triggers in time sensitive applications (for example cell creation)
           * as its slow.
           *  @param {object} settings dataTables settings object
           *  @param {string} callbackArr Name of the array storage for the callbacks in
           *      oSettings
           *  @param {string} eventName Name of the jQuery custom event to trigger. If
           *      null no trigger is fired
           *  @param {array} args Array of arguments to pass to the callback function /
           *      trigger
           *  @memberof DataTable#oApi
           */
          function _fnCallbackFire(settings, callbackArr, eventName, args) {
            var ret = [];

            if (callbackArr) {
              ret = $.map(settings[callbackArr].slice().reverse(), function(
                val,
                i
              ) {
                return val.fn.apply(settings.oInstance, args);
              });
            }

            if (eventName !== null) {
              var e = $.Event(eventName + ".dt");

              $(settings.nTable).trigger(e, args);

              ret.push(e.result);
            }

            return ret;
          }

          function _fnLengthOverflow(settings) {
            var start = settings._iDisplayStart,
              end = settings.fnDisplayEnd(),
              len = settings._iDisplayLength;

            /* If we have space to show extra rows (backing up from the end point - then do so */
            if (start >= end) {
              start = end - len;
            }

            // Keep the start record on the current page
            start -= start % len;

            if (len === -1 || start < 0) {
              start = 0;
            }

            settings._iDisplayStart = start;
          }

          function _fnRenderer(settings, type) {
            var renderer = settings.renderer;
            var host = DataTable.ext.renderer[type];

            if ($.isPlainObject(renderer) && renderer[type]) {
              // Specific renderer for this type. If available use it, otherwise use
              // the default.
              return host[renderer[type]] || host._;
            } else if (typeof renderer === "string") {
              // Common renderer - if there is one available for this type use it,
              // otherwise use the default
              return host[renderer] || host._;
            }

            // Use the default
            return host._;
          }

          /**
           * Detect the data source being used for the table. Used to simplify the code
           * a little (ajax) and to make it compress a little smaller.
           *
           *  @param {object} settings dataTables settings object
           *  @returns {string} Data source
           *  @memberof DataTable#oApi
           */
          function _fnDataSource(settings) {
            if (settings.oFeatures.bServerSide) {
              return "ssp";
            } else if (settings.ajax || settings.sAjaxSource) {
              return "ajax";
            }
            return "dom";
          }

          /**
           * Computed structure of the DataTables API, defined by the options passed to
           * `DataTable.Api.register()` when building the API.
           *
           * The structure is built in order to speed creation and extension of the Api
           * objects since the extensions are effectively pre-parsed.
           *
           * The array is an array of objects with the following structure, where this
           * base array represents the Api prototype base:
           *
           *     [
           *       {
           *         name:      'data'                -- string   - Property name
           *         val:       function () {},       -- function - Api method (or undefined if just an object
           *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
           *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
           *       },
           *       {
           *         name:     'row'
           *         val:       {},
           *         methodExt: [ ... ],
           *         propExt:   [
           *           {
           *             name:      'data'
           *             val:       function () {},
           *             methodExt: [ ... ],
           *             propExt:   [ ... ]
           *           },
           *           ...
           *         ]
           *       }
           *     ]
           *
           * @type {Array}
           * @ignore
           */
          var __apiStruct = [];

          /**
           * `Array.prototype` reference.
           *
           * @type object
           * @ignore
           */
          var __arrayProto = Array.prototype;

          /**
           * Abstraction for `context` parameter of the `Api` constructor to allow it to
           * take several different forms for ease of use.
           *
           * Each of the input parameter types will be converted to a DataTables settings
           * object where possible.
           *
           * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
           *   of:
           *
           *   * `string` - jQuery selector. Any DataTables' matching the given selector
           *     with be found and used.
           *   * `node` - `TABLE` node which has already been formed into a DataTable.
           *   * `jQuery` - A jQuery object of `TABLE` nodes.
           *   * `object` - DataTables settings object
           *   * `DataTables.Api` - API instance
           * @return {array|null} Matching DataTables settings objects. `null` or
           *   `undefined` is returned if no matching DataTable is found.
           * @ignore
           */
          var _toSettings = function(mixed) {
            var idx, jq;
            var settings = DataTable.settings;
            var tables = $.map(settings, function(el, i) {
              return el.nTable;
            });

            if (!mixed) {
              return [];
            } else if (mixed.nTable && mixed.oApi) {
              // DataTables settings object
              return [mixed];
            } else if (
              mixed.nodeName &&
              mixed.nodeName.toLowerCase() === "table"
            ) {
              // Table node
              idx = $.inArray(mixed, tables);
              return idx !== -1 ? [settings[idx]] : null;
            } else if (mixed && typeof mixed.settings === "function") {
              return mixed.settings().toArray();
            } else if (typeof mixed === "string") {
              // jQuery selector
              jq = $(mixed);
            } else if (mixed instanceof $) {
              // jQuery object (also DataTables instance)
              jq = mixed;
            }

            if (jq) {
              return jq
                .map(function(i) {
                  idx = $.inArray(this, tables);
                  return idx !== -1 ? settings[idx] : null;
                })
                .toArray();
            }
          };

          /**
           * DataTables API class - used to control and interface with  one or more
           * DataTables enhanced tables.
           *
           * The API class is heavily based on jQuery, presenting a chainable interface
           * that you can use to interact with tables. Each instance of the API class has
           * a "context" - i.e. the tables that it will operate on. This could be a single
           * table, all tables on a page or a sub-set thereof.
           *
           * Additionally the API is designed to allow you to easily work with the data in
           * the tables, retrieving and manipulating it as required. This is done by
           * presenting the API class as an array like interface. The contents of the
           * array depend upon the actions requested by each method (for example
           * `rows().nodes()` will return an array of nodes, while `rows().data()` will
           * return an array of objects or arrays depending upon your table's
           * configuration). The API object has a number of array like methods (`push`,
           * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
           * `unique` etc) to assist your working with the data held in a table.
           *
           * Most methods (those which return an Api instance) are chainable, which means
           * the return from a method call also has all of the methods available that the
           * top level object had. For example, these two calls are equivalent:
           *
           *     // Not chained
           *     api.row.add( {...} );
           *     api.draw();
           *
           *     // Chained
           *     api.row.add( {...} ).draw();
           *
           * @class DataTable.Api
           * @param {array|object|string|jQuery} context DataTable identifier. This is
           *   used to define which DataTables enhanced tables this API will operate on.
           *   Can be one of:
           *
           *   * `string` - jQuery selector. Any DataTables' matching the given selector
           *     with be found and used.
           *   * `node` - `TABLE` node which has already been formed into a DataTable.
           *   * `jQuery` - A jQuery object of `TABLE` nodes.
           *   * `object` - DataTables settings object
           * @param {array} [data] Data to initialise the Api instance with.
           *
           * @example
           *   // Direct initialisation during DataTables construction
           *   var api = $('#example').DataTable();
           *
           * @example
           *   // Initialisation using a DataTables jQuery object
           *   var api = $('#example').dataTable().api();
           *
           * @example
           *   // Initialisation as a constructor
           *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
           */
          _Api = function(context, data) {
            if (!(this instanceof _Api)) {
              return new _Api(context, data);
            }

            var settings = [];
            var ctxSettings = function(o) {
              var a = _toSettings(o);
              if (a) {
                settings.push.apply(settings, a);
              }
            };

            if ($.isArray(context)) {
              for (var i = 0, ien = context.length; i < ien; i++) {
                ctxSettings(context[i]);
              }
            } else {
              ctxSettings(context);
            }

            // Remove duplicates
            this.context = _unique(settings);

            // Initial data
            if (data) {
              $.merge(this, data);
            }

            // selector
            this.selector = {
              rows: null,
              cols: null,
              opts: null,
            };

            _Api.extend(this, this, __apiStruct);
          };

          DataTable.Api = _Api;

          // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
          // isPlainObject.
          $.extend(_Api.prototype, {
            any: function() {
              return this.count() !== 0;
            },

            concat: __arrayProto.concat,

            context: [], // array of table settings objects

            count: function() {
              return this.flatten().length;
            },

            each: function(fn) {
              for (var i = 0, ien = this.length; i < ien; i++) {
                fn.call(this, this[i], i, this);
              }

              return this;
            },

            eq: function(idx) {
              var ctx = this.context;

              return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
            },

            filter: function(fn) {
              var a = [];

              if (__arrayProto.filter) {
                a = __arrayProto.filter.call(this, fn, this);
              } else {
                // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                for (var i = 0, ien = this.length; i < ien; i++) {
                  if (fn.call(this, this[i], i, this)) {
                    a.push(this[i]);
                  }
                }
              }

              return new _Api(this.context, a);
            },

            flatten: function() {
              var a = [];
              return new _Api(this.context, a.concat.apply(a, this.toArray()));
            },

            join: __arrayProto.join,

            indexOf:
              __arrayProto.indexOf ||
              function(obj, start) {
                for (var i = start || 0, ien = this.length; i < ien; i++) {
                  if (this[i] === obj) {
                    return i;
                  }
                }
                return -1;
              },

            iterator: function(flatten, type, fn, alwaysNew) {
              var a = [],
                ret,
                i,
                ien,
                j,
                jen,
                context = this.context,
                rows,
                items,
                item,
                selector = this.selector;

              // Argument shifting
              if (typeof flatten === "string") {
                alwaysNew = fn;
                fn = type;
                type = flatten;
                flatten = false;
              }

              for (i = 0, ien = context.length; i < ien; i++) {
                var apiInst = new _Api(context[i]);

                if (type === "table") {
                  ret = fn.call(apiInst, context[i], i);

                  if (ret !== undefined) {
                    a.push(ret);
                  }
                } else if (type === "columns" || type === "rows") {
                  // this has same length as context - one entry for each table
                  ret = fn.call(apiInst, context[i], this[i], i);

                  if (ret !== undefined) {
                    a.push(ret);
                  }
                } else if (
                  type === "column" ||
                  type === "column-rows" ||
                  type === "row" ||
                  type === "cell"
                ) {
                  // columns and rows share the same structure.
                  // 'this' is an array of column indexes for each context
                  items = this[i];

                  if (type === "column-rows") {
                    rows = _selector_row_indexes(context[i], selector.opts);
                  }

                  for (j = 0, jen = items.length; j < jen; j++) {
                    item = items[j];

                    if (type === "cell") {
                      ret = fn.call(
                        apiInst,
                        context[i],
                        item.row,
                        item.column,
                        i,
                        j
                      );
                    } else {
                      ret = fn.call(apiInst, context[i], item, i, j, rows);
                    }

                    if (ret !== undefined) {
                      a.push(ret);
                    }
                  }
                }
              }

              if (a.length || alwaysNew) {
                var api = new _Api(
                  context,
                  flatten ? a.concat.apply([], a) : a
                );
                var apiSelector = api.selector;
                apiSelector.rows = selector.rows;
                apiSelector.cols = selector.cols;
                apiSelector.opts = selector.opts;
                return api;
              }
              return this;
            },

            lastIndexOf:
              __arrayProto.lastIndexOf ||
              function(obj, start) {
                // Bit cheeky...
                return this.indexOf.apply(this.toArray.reverse(), arguments);
              },

            length: 0,

            map: function(fn) {
              var a = [];

              if (__arrayProto.map) {
                a = __arrayProto.map.call(this, fn, this);
              } else {
                // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                for (var i = 0, ien = this.length; i < ien; i++) {
                  a.push(fn.call(this, this[i], i));
                }
              }

              return new _Api(this.context, a);
            },

            pluck: function(prop) {
              return this.map(function(el) {
                return el[prop];
              });
            },

            pop: __arrayProto.pop,

            push: __arrayProto.push,

            // Does not return an API instance
            reduce:
              __arrayProto.reduce ||
              function(fn, init) {
                return _fnReduce(this, fn, init, 0, this.length, 1);
              },

            reduceRight:
              __arrayProto.reduceRight ||
              function(fn, init) {
                return _fnReduce(this, fn, init, this.length - 1, -1, -1);
              },

            reverse: __arrayProto.reverse,

            // Object with rows, columns and opts
            selector: null,

            shift: __arrayProto.shift,

            slice: function() {
              return new _Api(this.context, this);
            },

            sort: __arrayProto.sort, // ? name - order?

            splice: __arrayProto.splice,

            toArray: function() {
              return __arrayProto.slice.call(this);
            },

            to$: function() {
              return $(this);
            },

            toJQuery: function() {
              return $(this);
            },

            unique: function() {
              return new _Api(this.context, _unique(this));
            },

            unshift: __arrayProto.unshift,
          });

          _Api.extend = function(scope, obj, ext) {
            // Only extend API instances and static properties of the API
            if (
              !ext.length ||
              !obj ||
              (!(obj instanceof _Api) && !obj.__dt_wrapper)
            ) {
              return;
            }

            var i,
              ien,
              struct,
              methodScoping = function(scope, fn, struc) {
                return function() {
                  var ret = fn.apply(scope, arguments);

                  // Method extension
                  _Api.extend(ret, ret, struc.methodExt);
                  return ret;
                };
              };

            for (i = 0, ien = ext.length; i < ien; i++) {
              struct = ext[i];

              // Value
              obj[struct.name] =
                struct.type === "function"
                  ? methodScoping(scope, struct.val, struct)
                  : struct.type === "object"
                  ? {}
                  : struct.val;

              obj[struct.name].__dt_wrapper = true;

              // Property extension
              _Api.extend(scope, obj[struct.name], struct.propExt);
            }
          };

          // @todo - Is there need for an augment function?
          // _Api.augment = function ( inst, name )
          // {
          // 	// Find src object in the structure from the name
          // 	var parts = name.split('.');

          // 	_Api.extend( inst, obj );
          // };

          //     [
          //       {
          //         name:      'data'                -- string   - Property name
          //         val:       function () {},       -- function - Api method (or undefined if just an object
          //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
          //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
          //       },
          //       {
          //         name:     'row'
          //         val:       {},
          //         methodExt: [ ... ],
          //         propExt:   [
          //           {
          //             name:      'data'
          //             val:       function () {},
          //             methodExt: [ ... ],
          //             propExt:   [ ... ]
          //           },
          //           ...
          //         ]
          //       }
          //     ]

          _Api.register = _api_register = function(name, val) {
            if ($.isArray(name)) {
              for (var j = 0, jen = name.length; j < jen; j++) {
                _Api.register(name[j], val);
              }
              return;
            }

            var i,
              ien,
              heir = name.split("."),
              struct = __apiStruct,
              key,
              method;

            var find = function(src, name) {
              for (var i = 0, ien = src.length; i < ien; i++) {
                if (src[i].name === name) {
                  return src[i];
                }
              }
              return null;
            };

            for (i = 0, ien = heir.length; i < ien; i++) {
              method = heir[i].indexOf("()") !== -1;
              key = method ? heir[i].replace("()", "") : heir[i];

              var src = find(struct, key);
              if (!src) {
                src = {
                  name: key,
                  val: {},
                  methodExt: [],
                  propExt: [],
                  type: "object",
                };
                struct.push(src);
              }

              if (i === ien - 1) {
                src.val = val;
                src.type =
                  typeof val === "function"
                    ? "function"
                    : $.isPlainObject(val)
                    ? "object"
                    : "other";
              } else {
                struct = method ? src.methodExt : src.propExt;
              }
            }
          };

          _Api.registerPlural = _api_registerPlural = function(
            pluralName,
            singularName,
            val
          ) {
            _Api.register(pluralName, val);

            _Api.register(singularName, function() {
              var ret = val.apply(this, arguments);

              if (ret === this) {
                // Returned item is the API instance that was passed in, return it
                return this;
              } else if (ret instanceof _Api) {
                // New API instance returned, want the value from the first item
                // in the returned array for the singular result.
                return ret.length
                  ? $.isArray(ret[0])
                    ? new _Api(ret.context, ret[0]) // Array results are 'enhanced'
                    : ret[0]
                  : undefined;
              }

              // Non-API return - just fire it back
              return ret;
            });
          };

          /**
           * Selector for HTML tables. Apply the given selector to the give array of
           * DataTables settings objects.
           *
           * @param {string|integer} [selector] jQuery selector string or integer
           * @param  {array} Array of DataTables settings objects to be filtered
           * @return {array}
           * @ignore
           */
          var __table_selector = function(selector, a) {
            if ($.isArray(selector)) {
              return $.map(selector, function(item) {
                return __table_selector(item, a);
              });
            }

            // Integer is used to pick out a table by index
            if (typeof selector === "number") {
              return [a[selector]];
            }

            // Perform a jQuery selector on the table nodes
            var nodes = $.map(a, function(el, i) {
              return el.nTable;
            });

            return $(nodes)
              .filter(selector)
              .map(function(i) {
                // Need to translate back from the table node to the settings
                var idx = $.inArray(this, nodes);
                return a[idx];
              })
              .toArray();
          };

          /**
           * Context selector for the API's context (i.e. the tables the API instance
           * refers to.
           *
           * @name    DataTable.Api#tables
           * @param {string|integer} [selector] Selector to pick which tables the iterator
           *   should operate on. If not given, all tables in the current context are
           *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
           *   select multiple tables or as an integer to select a single table.
           * @returns {DataTable.Api} Returns a new API instance if a selector is given.
           */
          _api_register("tables()", function(selector) {
            // A new instance is created if there was a selector specified
            return selector !== undefined && selector !== null
              ? new _Api(__table_selector(selector, this.context))
              : this;
          });

          _api_register("table()", function(selector) {
            var tables = this.tables(selector);
            var ctx = tables.context;

            // Truncate to the first matched table
            return ctx.length ? new _Api(ctx[0]) : tables;
          });

          _api_registerPlural("tables().nodes()", "table().node()", function() {
            return this.iterator(
              "table",
              function(ctx) {
                return ctx.nTable;
              },
              1
            );
          });

          _api_registerPlural("tables().body()", "table().body()", function() {
            return this.iterator(
              "table",
              function(ctx) {
                return ctx.nTBody;
              },
              1
            );
          });

          _api_registerPlural(
            "tables().header()",
            "table().header()",
            function() {
              return this.iterator(
                "table",
                function(ctx) {
                  return ctx.nTHead;
                },
                1
              );
            }
          );

          _api_registerPlural(
            "tables().footer()",
            "table().footer()",
            function() {
              return this.iterator(
                "table",
                function(ctx) {
                  return ctx.nTFoot;
                },
                1
              );
            }
          );

          _api_registerPlural(
            "tables().containers()",
            "table().container()",
            function() {
              return this.iterator(
                "table",
                function(ctx) {
                  return ctx.nTableWrapper;
                },
                1
              );
            }
          );

          /**
           * Redraw the tables in the current context.
           */
          _api_register("draw()", function(paging) {
            return this.iterator("table", function(settings) {
              if (paging === "page") {
                _fnDraw(settings);
              } else {
                if (typeof paging === "string") {
                  paging = paging === "full-hold" ? false : true;
                }

                _fnReDraw(settings, paging === false);
              }
            });
          });
          /**
           * Set the current page.
           *
           * Note that if you attempt to show a page which does not exist, DataTables will
           * not throw an error, but rather reset the paging.
           *
           * @param {integer|string} action The paging action to take. This can be one of:
           *  * `integer` - The page index to jump to
           *  * `string` - An action to take:
           *    * `first` - Jump to first page.
           *    * `next` - Jump to the next page
           *    * `previous` - Jump to previous page
           *    * `last` - Jump to the last page.
           * @returns {DataTables.Api} this
           */

          /**
           * Get the current page index.
           *
           * @return {integer} Current page index (zero based)
           */ _api_register("page()", function(action) {
            if (action === undefined) {
              return this.page.info().page; // not an expensive call
            }

            // else, have an action to take on all tables
            return this.iterator("table", function(settings) {
              _fnPageChange(settings, action);
            });
          });

          /**
           * Paging information for the first table in the current context.
           *
           * If you require paging information for another table, use the `table()` method
           * with a suitable selector.
           *
           * @return {object} Object with the following properties set:
           *  * `page` - Current page index (zero based - i.e. the first page is `0`)
           *  * `pages` - Total number of pages
           *  * `start` - Display index for the first record shown on the current page
           *  * `end` - Display index for the last record shown on the current page
           *  * `length` - Display length (number of records). Note that generally `start
           *    + length = end`, but this is not always true, for example if there are
           *    only 2 records to show on the final page, with a length of 10.
           *  * `recordsTotal` - Full data set length
           *  * `recordsDisplay` - Data set length once the current filtering criterion
           *    are applied.
           */
          _api_register("page.info()", function(action) {
            if (this.context.length === 0) {
              return undefined;
            }

            var settings = this.context[0],
              start = settings._iDisplayStart,
              len = settings.oFeatures.bPaginate
                ? settings._iDisplayLength
                : -1,
              visRecords = settings.fnRecordsDisplay(),
              all = len === -1;

            return {
              page: all ? 0 : Math.floor(start / len),
              pages: all ? 1 : Math.ceil(visRecords / len),
              start: start,
              end: settings.fnDisplayEnd(),
              length: len,
              recordsTotal: settings.fnRecordsTotal(),
              recordsDisplay: visRecords,
              serverSide: _fnDataSource(settings) === "ssp",
            };
          });
          /**
           * Set the current page length.
           *
           * @param {integer} Page length to set. Use `-1` to show all records.
           * @returns {DataTables.Api} this
           */

          /**
           * Get the current page length.
           *
           * @return {integer} Current page length. Note `-1` indicates that all records
           *   are to be shown.
           */ _api_register("page.len()", function(len) {
            // Note that we can't call this function 'length()' because `length`
            // is a Javascript property of functions which defines how many arguments
            // the function expects.
            if (len === undefined) {
              return this.context.length !== 0
                ? this.context[0]._iDisplayLength
                : undefined;
            }

            // else, set the page length
            return this.iterator("table", function(settings) {
              _fnLengthChange(settings, len);
            });
          });

          var __reload = function(settings, holdPosition, callback) {
            // Use the draw event to trigger a callback
            if (callback) {
              var api = new _Api(settings);

              api.one("draw", function() {
                callback(api.ajax.json());
              });
            }

            if (_fnDataSource(settings) == "ssp") {
              _fnReDraw(settings, holdPosition);
            } else {
              _fnProcessingDisplay(settings, true);

              // Cancel an existing request
              var xhr = settings.jqXHR;
              if (xhr && xhr.readyState !== 4) {
                xhr.abort();
              }

              // Trigger xhr
              _fnBuildAjax(settings, [], function(json) {
                _fnClearTable(settings);

                var data = _fnAjaxDataSrc(settings, json);
                for (var i = 0, ien = data.length; i < ien; i++) {
                  _fnAddData(settings, data[i]);
                }

                _fnReDraw(settings, holdPosition);
                _fnProcessingDisplay(settings, false);
              });
            }
          };

          /**
           * Get the JSON response from the last Ajax request that DataTables made to the
           * server. Note that this returns the JSON from the first table in the current
           * context.
           *
           * @return {object} JSON received from the server.
           */
          _api_register("ajax.json()", function() {
            var ctx = this.context;

            if (ctx.length > 0) {
              return ctx[0].json;
            }

            // else return undefined;
          });

          /**
           * Get the data submitted in the last Ajax request
           */
          _api_register("ajax.params()", function() {
            var ctx = this.context;

            if (ctx.length > 0) {
              return ctx[0].oAjaxData;
            }

            // else return undefined;
          });

          /**
           * Reload tables from the Ajax data source. Note that this function will
           * automatically re-draw the table when the remote data has been loaded.
           *
           * @param {boolean} [reset=true] Reset (default) or hold the current paging
           *   position. A full re-sort and re-filter is performed when this method is
           *   called, which is why the pagination reset is the default action.
           * @returns {DataTables.Api} this
           */
          _api_register("ajax.reload()", function(callback, resetPaging) {
            return this.iterator("table", function(settings) {
              __reload(settings, resetPaging === false, callback);
            });
          });
          /**
           * Set the Ajax URL. Note that this will set the URL for all tables in the
           * current context.
           *
           * @param {string} url URL to set.
           * @returns {DataTables.Api} this
           */

          /**
           * Get the current Ajax URL. Note that this returns the URL from the first
           * table in the current context.
           *
           * @return {string} Current Ajax source URL
           */ _api_register("ajax.url()", function(url) {
            var ctx = this.context;

            if (url === undefined) {
              // get
              if (ctx.length === 0) {
                return undefined;
              }
              ctx = ctx[0];

              return ctx.ajax
                ? $.isPlainObject(ctx.ajax)
                  ? ctx.ajax.url
                  : ctx.ajax
                : ctx.sAjaxSource;
            }

            // set
            return this.iterator("table", function(settings) {
              if ($.isPlainObject(settings.ajax)) {
                settings.ajax.url = url;
              } else {
                settings.ajax = url;
              }
              // No need to consider sAjaxSource here since DataTables gives priority
              // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
              // value of `sAjaxSource` redundant.
            });
          });

          /**
           * Load data from the newly set Ajax URL. Note that this method is only
           * available when `ajax.url()` is used to set a URL. Additionally, this method
           * has the same effect as calling `ajax.reload()` but is provided for
           * convenience when setting a new URL. Like `ajax.reload()` it will
           * automatically redraw the table once the remote data has been loaded.
           *
           * @returns {DataTables.Api} this
           */
          _api_register("ajax.url().load()", function(callback, resetPaging) {
            // Same as a reload, but makes sense to present it for easy access after a
            // url change
            return this.iterator("table", function(ctx) {
              __reload(ctx, resetPaging === false, callback);
            });
          });

          var _selector_run = function(
            type,
            selector,
            selectFn,
            settings,
            opts
          ) {
            var out = [],
              res,
              a,
              i,
              ien,
              j,
              jen,
              selectorType = typeof selector;

            // Can't just check for isArray here, as an API or jQuery instance might be
            // given with their array like look
            if (
              !selector ||
              selectorType === "string" ||
              selectorType === "function" ||
              selector.length === undefined
            ) {
              selector = [selector];
            }

            for (i = 0, ien = selector.length; i < ien; i++) {
              // Only split on simple strings - complex expressions will be jQuery selectors
              a =
                selector[i] &&
                selector[i].split &&
                !selector[i].match(/[\[\(:]/)
                  ? selector[i].split(",")
                  : [selector[i]];

              for (j = 0, jen = a.length; j < jen; j++) {
                res = selectFn(typeof a[j] === "string" ? $.trim(a[j]) : a[j]);

                if (res && res.length) {
                  out = out.concat(res);
                }
              }
            }

            // selector extensions
            var ext = _ext.selector[type];
            if (ext.length) {
              for (i = 0, ien = ext.length; i < ien; i++) {
                out = ext[i](settings, opts, out);
              }
            }

            return _unique(out);
          };

          var _selector_opts = function(opts) {
            if (!opts) {
              opts = {};
            }

            // Backwards compatibility for 1.9- which used the terminology filter rather
            // than search
            if (opts.filter && opts.search === undefined) {
              opts.search = opts.filter;
            }

            return $.extend(
              {
                search: "none",
                order: "current",
                page: "all",
              },
              opts
            );
          };

          var _selector_first = function(inst) {
            // Reduce the API instance to the first item found
            for (var i = 0, ien = inst.length; i < ien; i++) {
              if (inst[i].length > 0) {
                // Assign the first element to the first item in the instance
                // and truncate the instance and context
                inst[0] = inst[i];
                inst[0].length = 1;
                inst.length = 1;
                inst.context = [inst.context[i]];

                return inst;
              }
            }

            // Not found - return an empty instance
            inst.length = 0;
            return inst;
          };

          var _selector_row_indexes = function(settings, opts) {
            var i,
              ien,
              tmp,
              a = [],
              displayFiltered = settings.aiDisplay,
              displayMaster = settings.aiDisplayMaster;

            var search = opts.search, // none, applied, removed
              order = opts.order, // applied, current, index (original - compatibility with 1.9)
              page = opts.page; // all, current

            if (_fnDataSource(settings) == "ssp") {
              // In server-side processing mode, most options are irrelevant since
              // rows not shown don't exist and the index order is the applied order
              // Removed is a special case - for consistency just return an empty
              // array
              return search === "removed"
                ? []
                : _range(0, displayMaster.length);
            } else if (page == "current") {
              // Current page implies that order=current and fitler=applied, since it is
              // fairly senseless otherwise, regardless of what order and search actually
              // are
              for (
                i = settings._iDisplayStart, ien = settings.fnDisplayEnd();
                i < ien;
                i++
              ) {
                a.push(displayFiltered[i]);
              }
            } else if (order == "current" || order == "applied") {
              if (search == "none") {
                a = displayMaster.slice();
              } else if (search == "applied") {
                a = displayFiltered.slice();
              } else if (search == "removed") {
                // O(n+m) solution by creating a hash map
                var displayFilteredMap = {};

                for (var i = 0, ien = displayFiltered.length; i < ien; i++) {
                  displayFilteredMap[displayFiltered[i]] = null;
                }

                a = $.map(displayMaster, function(el) {
                  return !displayFilteredMap.hasOwnProperty(el) ? el : null;
                });
              }
            } else if (order == "index" || order == "original") {
              for (i = 0, ien = settings.aoData.length; i < ien; i++) {
                if (search == "none") {
                  a.push(i);
                } else {
                  // applied | removed
                  tmp = $.inArray(i, displayFiltered);

                  if (
                    (tmp === -1 && search == "removed") ||
                    (tmp >= 0 && search == "applied")
                  ) {
                    a.push(i);
                  }
                }
              }
            }

            return a;
          };

          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
           * Rows
           *
           * {}          - no selector - use all available rows
           * {integer}   - row aoData index
           * {node}      - TR node
           * {string}    - jQuery selector to apply to the TR elements
           * {array}     - jQuery array of nodes, or simply an array of TR nodes
           *
           */
          var __row_selector = function(settings, selector, opts) {
            var rows;
            var run = function(sel) {
              var selInt = _intVal(sel);
              var i, ien;
              var aoData = settings.aoData;

              // Short cut - selector is a number and no options provided (default is
              // all records, so no need to check if the index is in there, since it
              // must be - dev error if the index doesn't exist).
              if (selInt !== null && !opts) {
                return [selInt];
              }

              if (!rows) {
                rows = _selector_row_indexes(settings, opts);
              }

              if (selInt !== null && $.inArray(selInt, rows) !== -1) {
                // Selector - integer
                return [selInt];
              } else if (sel === null || sel === undefined || sel === "") {
                // Selector - none
                return rows;
              }

              // Selector - function
              if (typeof sel === "function") {
                return $.map(rows, function(idx) {
                  var row = aoData[idx];
                  return sel(idx, row._aData, row.nTr) ? idx : null;
                });
              }

              // Selector - node
              if (sel.nodeName) {
                var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup
                var cellIdx = sel._DT_CellIndex;

                if (rowIdx !== undefined) {
                  // Make sure that the row is actually still present in the table
                  return aoData[rowIdx] && aoData[rowIdx].nTr === sel
                    ? [rowIdx]
                    : [];
                } else if (cellIdx) {
                  return aoData[cellIdx.row] &&
                    aoData[cellIdx.row].nTr === sel.parentNode
                    ? [cellIdx.row]
                    : [];
                } else {
                  var host = $(sel).closest("*[data-dt-row]");
                  return host.length ? [host.data("dt-row")] : [];
                }
              }

              // ID selector. Want to always be able to select rows by id, regardless
              // of if the tr element has been created or not, so can't rely upon
              // jQuery here - hence a custom implementation. This does not match
              // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
              // but to select it using a CSS selector engine (like Sizzle or
              // querySelect) it would need to need to be escaped for some characters.
              // DataTables simplifies this for row selectors since you can select
              // only a row. A # indicates an id any anything that follows is the id -
              // unescaped.
              if (typeof sel === "string" && sel.charAt(0) === "#") {
                // get row index from id
                var rowObj = settings.aIds[sel.replace(/^#/, "")];
                if (rowObj !== undefined) {
                  return [rowObj.idx];
                }

                // need to fall through to jQuery in case there is DOM id that
                // matches
              }

              // Get nodes in the order from the `rows` array with null values removed
              var nodes = _removeEmpty(
                _pluck_order(settings.aoData, rows, "nTr")
              );

              // Selector - jQuery selector string, array of nodes or jQuery object/
              // As jQuery's .filter() allows jQuery objects to be passed in filter,
              // it also allows arrays, so this will cope with all three options
              return $(nodes)
                .filter(sel)
                .map(function() {
                  return this._DT_RowIndex;
                })
                .toArray();
            };

            return _selector_run("row", selector, run, settings, opts);
          };

          _api_register("rows()", function(selector, opts) {
            // argument shifting
            if (selector === undefined) {
              selector = "";
            } else if ($.isPlainObject(selector)) {
              opts = selector;
              selector = "";
            }

            opts = _selector_opts(opts);

            var inst = this.iterator(
              "table",
              function(settings) {
                return __row_selector(settings, selector, opts);
              },
              1
            );

            // Want argument shifting here and in __row_selector?
            inst.selector.rows = selector;
            inst.selector.opts = opts;

            return inst;
          });

          _api_register("rows().nodes()", function() {
            return this.iterator(
              "row",
              function(settings, row) {
                return settings.aoData[row].nTr || undefined;
              },
              1
            );
          });

          _api_register("rows().data()", function() {
            return this.iterator(
              true,
              "rows",
              function(settings, rows) {
                return _pluck_order(settings.aoData, rows, "_aData");
              },
              1
            );
          });

          _api_registerPlural("rows().cache()", "row().cache()", function(
            type
          ) {
            return this.iterator(
              "row",
              function(settings, row) {
                var r = settings.aoData[row];
                return type === "search" ? r._aFilterData : r._aSortData;
              },
              1
            );
          });

          _api_registerPlural(
            "rows().invalidate()",
            "row().invalidate()",
            function(src) {
              return this.iterator("row", function(settings, row) {
                _fnInvalidate(settings, row, src);
              });
            }
          );

          _api_registerPlural("rows().indexes()", "row().index()", function() {
            return this.iterator(
              "row",
              function(settings, row) {
                return row;
              },
              1
            );
          });

          _api_registerPlural("rows().ids()", "row().id()", function(hash) {
            var a = [];
            var context = this.context;

            // `iterator` will drop undefined values, but in this case we want them
            for (var i = 0, ien = context.length; i < ien; i++) {
              for (var j = 0, jen = this[i].length; j < jen; j++) {
                var id = context[i].rowIdFn(
                  context[i].aoData[this[i][j]]._aData
                );
                a.push((hash === true ? "#" : "") + id);
              }
            }

            return new _Api(context, a);
          });

          _api_registerPlural("rows().remove()", "row().remove()", function() {
            var that = this;

            this.iterator("row", function(settings, row, thatIdx) {
              var data = settings.aoData;
              var rowData = data[row];
              var i, ien, j, jen;
              var loopRow, loopCells;

              data.splice(row, 1);

              // Update the cached indexes
              for (i = 0, ien = data.length; i < ien; i++) {
                loopRow = data[i];
                loopCells = loopRow.anCells;

                // Rows
                if (loopRow.nTr !== null) {
                  loopRow.nTr._DT_RowIndex = i;
                }

                // Cells
                if (loopCells !== null) {
                  for (j = 0, jen = loopCells.length; j < jen; j++) {
                    loopCells[j]._DT_CellIndex.row = i;
                  }
                }
              }

              // Delete from the display arrays
              _fnDeleteIndex(settings.aiDisplayMaster, row);
              _fnDeleteIndex(settings.aiDisplay, row);
              _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

              // For server-side processing tables - subtract the deleted row from the count
              if (settings._iRecordsDisplay > 0) {
                settings._iRecordsDisplay--;
              }

              // Check for an 'overflow' they case for displaying the table
              _fnLengthOverflow(settings);

              // Remove the row's ID reference if there is one
              var id = settings.rowIdFn(rowData._aData);
              if (id !== undefined) {
                delete settings.aIds[id];
              }
            });

            this.iterator("table", function(settings) {
              for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
                settings.aoData[i].idx = i;
              }
            });

            return this;
          });

          _api_register("rows.add()", function(rows) {
            var newRows = this.iterator(
              "table",
              function(settings) {
                var row, i, ien;
                var out = [];

                for (i = 0, ien = rows.length; i < ien; i++) {
                  row = rows[i];

                  if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
                    out.push(_fnAddTr(settings, row)[0]);
                  } else {
                    out.push(_fnAddData(settings, row));
                  }
                }

                return out;
              },
              1
            );

            // Return an Api.rows() extended instance, so rows().nodes() etc can be used
            var modRows = this.rows(-1);
            modRows.pop();
            $.merge(modRows, newRows);

            return modRows;
          });

          /**
           *
           */
          _api_register("row()", function(selector, opts) {
            return _selector_first(this.rows(selector, opts));
          });

          _api_register("row().data()", function(data) {
            var ctx = this.context;

            if (data === undefined) {
              // Get
              return ctx.length && this.length
                ? ctx[0].aoData[this[0]]._aData
                : undefined;
            }

            // Set
            var row = ctx[0].aoData[this[0]];
            row._aData = data;

            // If the DOM has an id, and the data source is an array
            if ($.isArray(data) && row.nTr && row.nTr.id) {
              _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);
            }

            // Automatically invalidate
            _fnInvalidate(ctx[0], this[0], "data");

            return this;
          });

          _api_register("row().node()", function() {
            var ctx = this.context;

            return ctx.length && this.length
              ? ctx[0].aoData[this[0]].nTr || null
              : null;
          });

          _api_register("row.add()", function(row) {
            // Allow a jQuery object to be passed in - only a single row is added from
            // it though - the first element in the set
            if (row instanceof $ && row.length) {
              row = row[0];
            }

            var rows = this.iterator("table", function(settings) {
              if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
                return _fnAddTr(settings, row)[0];
              }
              return _fnAddData(settings, row);
            });

            // Return an Api.rows() extended instance, with the newly added row selected
            return this.row(rows[0]);
          });

          var __details_add = function(ctx, row, data, klass) {
            // Convert to array of TR elements
            var rows = [];
            var addRow = function(r, k) {
              // Recursion to allow for arrays of jQuery objects
              if ($.isArray(r) || r instanceof $) {
                for (var i = 0, ien = r.length; i < ien; i++) {
                  addRow(r[i], k);
                }
                return;
              }

              // If we get a TR element, then just add it directly - up to the dev
              // to add the correct number of columns etc
              if (r.nodeName && r.nodeName.toLowerCase() === "tr") {
                rows.push(r);
              } else {
                // Otherwise create a row with a wrapper
                var created = $("<tr><td/></tr>").addClass(k);
                $("td", created)
                  .addClass(k)
                  .html(r)[0].colSpan = _fnVisbleColumns(ctx);

                rows.push(created[0]);
              }
            };

            addRow(data, klass);

            if (row._details) {
              row._details.detach();
            }

            row._details = $(rows);

            // If the children were already shown, that state should be retained
            if (row._detailsShow) {
              row._details.insertAfter(row.nTr);
            }
          };

          var __details_remove = function(api, idx) {
            var ctx = api.context;

            if (ctx.length) {
              var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

              if (row && row._details) {
                row._details.remove();

                row._detailsShow = undefined;
                row._details = undefined;
              }
            }
          };

          var __details_display = function(api, show) {
            var ctx = api.context;

            if (ctx.length && api.length) {
              var row = ctx[0].aoData[api[0]];

              if (row._details) {
                row._detailsShow = show;

                if (show) {
                  row._details.insertAfter(row.nTr);
                } else {
                  row._details.detach();
                }

                __details_events(ctx[0]);
              }
            }
          };

          var __details_events = function(settings) {
            var api = new _Api(settings);
            var namespace = ".dt.DT_details";
            var drawEvent = "draw" + namespace;
            var colvisEvent = "column-visibility" + namespace;
            var destroyEvent = "destroy" + namespace;
            var data = settings.aoData;

            api.off(drawEvent + " " + colvisEvent + " " + destroyEvent);

            if (_pluck(data, "_details").length > 0) {
              // On each draw, insert the required elements into the document
              api.on(drawEvent, function(e, ctx) {
                if (settings !== ctx) {
                  return;
                }

                api
                  .rows({ page: "current" })
                  .eq(0)
                  .each(function(idx) {
                    // Internal data grab
                    var row = data[idx];

                    if (row._detailsShow) {
                      row._details.insertAfter(row.nTr);
                    }
                  });
              });

              // Column visibility change - update the colspan
              api.on(colvisEvent, function(e, ctx, idx, vis) {
                if (settings !== ctx) {
                  return;
                }

                // Update the colspan for the details rows (note, only if it already has
                // a colspan)
                var row,
                  visible = _fnVisbleColumns(ctx);

                for (var i = 0, ien = data.length; i < ien; i++) {
                  row = data[i];

                  if (row._details) {
                    row._details
                      .children("td[colspan]")
                      .attr("colspan", visible);
                  }
                }
              });

              // Table destroyed - nuke any child rows
              api.on(destroyEvent, function(e, ctx) {
                if (settings !== ctx) {
                  return;
                }

                for (var i = 0, ien = data.length; i < ien; i++) {
                  if (data[i]._details) {
                    __details_remove(api, i);
                  }
                }
              });
            }
          };

          // Strings for the method names to help minification
          var _emp = "";
          var _child_obj = _emp + "row().child";
          var _child_mth = _child_obj + "()";

          // data can be:
          //  tr
          //  string
          //  jQuery or array of any of the above
          _api_register(_child_mth, function(data, klass) {
            var ctx = this.context;

            if (data === undefined) {
              // get
              return ctx.length && this.length
                ? ctx[0].aoData[this[0]]._details
                : undefined;
            } else if (data === true) {
              // show
              this.child.show();
            } else if (data === false) {
              // remove
              __details_remove(this);
            } else if (ctx.length && this.length) {
              // set
              __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
            }

            return this;
          });

          _api_register(
            [
              _child_obj + ".show()",
              _child_mth + ".show()", // only when `child()` was called with parameters (without
            ],
            function(show) {
              // it returns an object and this method is not executed)
              __details_display(this, true);
              return this;
            }
          );

          _api_register(
            [
              _child_obj + ".hide()",
              _child_mth + ".hide()", // only when `child()` was called with parameters (without
            ],
            function() {
              // it returns an object and this method is not executed)
              __details_display(this, false);
              return this;
            }
          );

          _api_register(
            [
              _child_obj + ".remove()",
              _child_mth + ".remove()", // only when `child()` was called with parameters (without
            ],
            function() {
              // it returns an object and this method is not executed)
              __details_remove(this);
              return this;
            }
          );

          _api_register(_child_obj + ".isShown()", function() {
            var ctx = this.context;

            if (ctx.length && this.length) {
              // _detailsShown as false or undefined will fall through to return false
              return ctx[0].aoData[this[0]]._detailsShow || false;
            }
            return false;
          });

          /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
           * Columns
           *
           * {integer}           - column index (>=0 count from left, <0 count from right)
           * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
           * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
           * "{string}:name"     - column name
           * "{string}"          - jQuery selector on column header nodes
           *
           */

          // can be an array of these items, comma separated list, or an array of comma
          // separated lists

          var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;

          // r1 and r2 are redundant - but it means that the parameters match for the
          // iterator callback in columns().data()
          var __columnData = function(settings, column, r1, r2, rows) {
            var a = [];
            for (var row = 0, ien = rows.length; row < ien; row++) {
              a.push(_fnGetCellData(settings, rows[row], column));
            }
            return a;
          };

          var __column_selector = function(settings, selector, opts) {
            var columns = settings.aoColumns,
              names = _pluck(columns, "sName"),
              nodes = _pluck(columns, "nTh");

            var run = function(s) {
              var selInt = _intVal(s);

              // Selector - all
              if (s === "") {
                return _range(columns.length);
              }

              // Selector - index
              if (selInt !== null) {
                return [
                  selInt >= 0
                    ? selInt // Count from left
                    : columns.length + selInt, // Count from right (+ because its a negative value)
                ];
              }

              // Selector = function
              if (typeof s === "function") {
                var rows = _selector_row_indexes(settings, opts);

                return $.map(columns, function(col, idx) {
                  return s(
                    idx,
                    __columnData(settings, idx, 0, 0, rows),
                    nodes[idx]
                  )
                    ? idx
                    : null;
                });
              }

              // jQuery or string selector
              var match =
                typeof s === "string" ? s.match(__re_column_selector) : "";

              if (match) {
                switch (match[2]) {
                  case "visIdx":
                  case "visible":
                    var idx = parseInt(match[1], 10);
                    // Visible index given, convert to column index
                    if (idx < 0) {
                      // Counting from the right
                      var visColumns = $.map(columns, function(col, i) {
                        return col.bVisible ? i : null;
                      });
                      return [visColumns[visColumns.length + idx]];
                    }
                    // Counting from the left
                    return [_fnVisibleToColumnIndex(settings, idx)];

                  case "name":
                    // match by name. `names` is column index complete and in order
                    return $.map(names, function(name, i) {
                      return name === match[1] ? i : null;
                    });

                  default:
                    return [];
                }
              }

              // Cell in the table body
              if (s.nodeName && s._DT_CellIndex) {
                return [s._DT_CellIndex.column];
              }

              // jQuery selector on the TH elements for the columns
              var jqResult = $(nodes)
                .filter(s)
                .map(function() {
                  return $.inArray(this, nodes); // `nodes` is column index complete and in order
                })
                .toArray();

              if (jqResult.length || !s.nodeName) {
                return jqResult;
              }

              // Otherwise a node which might have a `dt-column` data attribute, or be
              // a child or such an element
              var host = $(s).closest("*[data-dt-column]");
              return host.length ? [host.data("dt-column")] : [];
            };

            return _selector_run("column", selector, run, settings, opts);
          };

          var __setColumnVis = function(settings, column, vis) {
            var cols = settings.aoColumns,
              col = cols[column],
              data = settings.aoData,
              row,
              cells,
              i,
              ien,
              tr;

            // Get
            if (vis === undefined) {
              return col.bVisible;
            }

            // Set
            // No change
            if (col.bVisible === vis) {
              return;
            }

            if (vis) {
              // Insert column
              // Need to decide if we should use appendChild or insertBefore
              var insertBefore = $.inArray(
                true,
                _pluck(cols, "bVisible"),
                column + 1
              );

              for (i = 0, ien = data.length; i < ien; i++) {
                tr = data[i].nTr;
                cells = data[i].anCells;

                if (tr) {
                  // insertBefore can act like appendChild if 2nd arg is null
                  tr.insertBefore(cells[column], cells[insertBefore] || null);
                }
              }
            } else {
              // Remove column
              $(_pluck(settings.aoData, "anCells", column)).detach();
            }

            // Common actions
            col.bVisible = vis;
          };

          _api_register("columns()", function(selector, opts) {
            // argument shifting
            if (selector === undefined) {
              selector = "";
            } else if ($.isPlainObject(selector)) {
              opts = selector;
              selector = "";
            }

            opts = _selector_opts(opts);

            var inst = this.iterator(
              "table",
              function(settings) {
                return __column_selector(settings, selector, opts);
              },
              1
            );

            // Want argument shifting here and in _row_selector?
            inst.selector.cols = selector;
            inst.selector.opts = opts;

            return inst;
          });

          _api_registerPlural(
            "columns().header()",
            "column().header()",
            function(selector, opts) {
              return this.iterator(
                "column",
                function(settings, column) {
                  return settings.aoColumns[column].nTh;
                },
                1
              );
            }
          );

          _api_registerPlural(
            "columns().footer()",
            "column().footer()",
            function(selector, opts) {
              return this.iterator(
                "column",
                function(settings, column) {
                  return settings.aoColumns[column].nTf;
                },
                1
              );
            }
          );

          _api_registerPlural(
            "columns().data()",
            "column().data()",
            function() {
              return this.iterator("column-rows", __columnData, 1);
            }
          );

          _api_registerPlural(
            "columns().dataSrc()",
            "column().dataSrc()",
            function() {
              return this.iterator(
                "column",
                function(settings, column) {
                  return settings.aoColumns[column].mData;
                },
                1
              );
            }
          );

          _api_registerPlural("columns().cache()", "column().cache()", function(
            type
          ) {
            return this.iterator(
              "column-rows",
              function(settings, column, i, j, rows) {
                return _pluck_order(
                  settings.aoData,
                  rows,
                  type === "search" ? "_aFilterData" : "_aSortData",
                  column
                );
              },
              1
            );
          });

          _api_registerPlural(
            "columns().nodes()",
            "column().nodes()",
            function() {
              return this.iterator(
                "column-rows",
                function(settings, column, i, j, rows) {
                  return _pluck_order(settings.aoData, rows, "anCells", column);
                },
                1
              );
            }
          );

          _api_registerPlural(
            "columns().visible()",
            "column().visible()",
            function(vis, calc) {
              var that = this;
              var ret = this.iterator("column", function(settings, column) {
                if (vis === undefined) {
                  return settings.aoColumns[column].bVisible;
                } // else
                __setColumnVis(settings, column, vis);
              });

              // Group the column visibility changes
              if (vis !== undefined) {
                this.iterator("table", function(settings) {
                  // Redraw the header after changes
                  _fnDrawHead(settings, settings.aoHeader);
                  _fnDrawHead(settings, settings.aoFooter);

                  // Update colspan for no records display. Child rows and extensions will use their own
                  // listeners to do this - only need to update the empty table item here
                  if (!settings.aiDisplay.length) {
                    $(settings.nTBody)
                      .find("td[colspan]")
                      .attr("colspan", _fnVisbleColumns(settings));
                  }

                  _fnSaveState(settings);

                  // Second loop once the first is done for events
                  that.iterator("column", function(settings, column) {
                    _fnCallbackFire(settings, null, "column-visibility", [
                      settings,
                      column,
                      vis,
                      calc,
                    ]);
                  });

                  if (calc === undefined || calc) {
                    that.columns.adjust();
                  }
                });
              }

              return ret;
            }
          );

          _api_registerPlural(
            "columns().indexes()",
            "column().index()",
            function(type) {
              return this.iterator(
                "column",
                function(settings, column) {
                  return type === "visible"
                    ? _fnColumnIndexToVisible(settings, column)
                    : column;
                },
                1
              );
            }
          );

          _api_register("columns.adjust()", function() {
            return this.iterator(
              "table",
              function(settings) {
                _fnAdjustColumnSizing(settings);
              },
              1
            );
          });

          _api_register("column.index()", function(type, idx) {
            if (this.context.length !== 0) {
              var ctx = this.context[0];

              if (type === "fromVisible" || type === "toData") {
                return _fnVisibleToColumnIndex(ctx, idx);
              } else if (type === "fromData" || type === "toVisible") {
                return _fnColumnIndexToVisible(ctx, idx);
              }
            }
          });

          _api_register("column()", function(selector, opts) {
            return _selector_first(this.columns(selector, opts));
          });

          var __cell_selector = function(settings, selector, opts) {
            var data = settings.aoData;
            var rows = _selector_row_indexes(settings, opts);
            var cells = _removeEmpty(_pluck_order(data, rows, "anCells"));
            var allCells = $([].concat.apply([], cells));
            var row;
            var columns = settings.aoColumns.length;
            var a, i, ien, j, o, host;

            var run = function(s) {
              var fnSelector = typeof s === "function";

              if (s === null || s === undefined || fnSelector) {
                // All cells and function selectors
                a = [];

                for (i = 0, ien = rows.length; i < ien; i++) {
                  row = rows[i];

                  for (j = 0; j < columns; j++) {
                    o = {
                      row: row,
                      column: j,
                    };

                    if (fnSelector) {
                      // Selector - function
                      host = data[row];

                      if (
                        s(
                          o,
                          _fnGetCellData(settings, row, j),
                          host.anCells ? host.anCells[j] : null
                        )
                      ) {
                        a.push(o);
                      }
                    } else {
                      // Selector - all
                      a.push(o);
                    }
                  }
                }

                return a;
              }

              // Selector - index
              if ($.isPlainObject(s)) {
                // Valid cell index and its in the array of selectable rows
                return s.column !== undefined &&
                  s.row !== undefined &&
                  $.inArray(s.row, rows) !== -1
                  ? [s]
                  : [];
              }

              // Selector - jQuery filtered cells
              var jqResult = allCells
                .filter(s)
                .map(function(i, el) {
                  return {
                    // use a new object, in case someone changes the values
                    row: el._DT_CellIndex.row,
                    column: el._DT_CellIndex.column,
                  };
                })
                .toArray();

              if (jqResult.length || !s.nodeName) {
                return jqResult;
              }

              // Otherwise the selector is a node, and there is one last option - the
              // element might be a child of an element which has dt-row and dt-column
              // data attributes
              host = $(s).closest("*[data-dt-row]");
              return host.length
                ? [
                    {
                      row: host.data("dt-row"),
                      column: host.data("dt-column"),
                    },
                  ]
                : [];
            };

            return _selector_run("cell", selector, run, settings, opts);
          };

          _api_register("cells()", function(rowSelector, columnSelector, opts) {
            // Argument shifting
            if ($.isPlainObject(rowSelector)) {
              // Indexes
              if (rowSelector.row === undefined) {
                // Selector options in first parameter
                opts = rowSelector;
                rowSelector = null;
              } else {
                // Cell index objects in first parameter
                opts = columnSelector;
                columnSelector = null;
              }
            }
            if ($.isPlainObject(columnSelector)) {
              opts = columnSelector;
              columnSelector = null;
            }

            // Cell selector
            if (columnSelector === null || columnSelector === undefined) {
              return this.iterator("table", function(settings) {
                return __cell_selector(
                  settings,
                  rowSelector,
                  _selector_opts(opts)
                );
              });
            }

            // The default built in options need to apply to row and columns
            var internalOpts = opts
              ? {
                  page: opts.page,
                  order: opts.order,
                  search: opts.search,
                }
              : {};

            // Row + column selector
            var columns = this.columns(columnSelector, internalOpts);
            var rows = this.rows(rowSelector, internalOpts);
            var i, ien, j, jen;

            var cellsNoOpts = this.iterator(
              "table",
              function(settings, idx) {
                var a = [];

                for (i = 0, ien = rows[idx].length; i < ien; i++) {
                  for (j = 0, jen = columns[idx].length; j < jen; j++) {
                    a.push({
                      row: rows[idx][i],
                      column: columns[idx][j],
                    });
                  }
                }

                return a;
              },
              1
            );

            // There is currently only one extension which uses a cell selector extension
            // It is a _major_ performance drag to run this if it isn't needed, so this is
            // an extension specific check at the moment
            var cells =
              opts && opts.selected
                ? this.cells(cellsNoOpts, opts)
                : cellsNoOpts;

            $.extend(cells.selector, {
              cols: columnSelector,
              rows: rowSelector,
              opts: opts,
            });

            return cells;
          });

          _api_registerPlural("cells().nodes()", "cell().node()", function() {
            return this.iterator(
              "cell",
              function(settings, row, column) {
                var data = settings.aoData[row];

                return data && data.anCells ? data.anCells[column] : undefined;
              },
              1
            );
          });

          _api_register("cells().data()", function() {
            return this.iterator(
              "cell",
              function(settings, row, column) {
                return _fnGetCellData(settings, row, column);
              },
              1
            );
          });

          _api_registerPlural("cells().cache()", "cell().cache()", function(
            type
          ) {
            type = type === "search" ? "_aFilterData" : "_aSortData";

            return this.iterator(
              "cell",
              function(settings, row, column) {
                return settings.aoData[row][type][column];
              },
              1
            );
          });

          _api_registerPlural("cells().render()", "cell().render()", function(
            type
          ) {
            return this.iterator(
              "cell",
              function(settings, row, column) {
                return _fnGetCellData(settings, row, column, type);
              },
              1
            );
          });

          _api_registerPlural(
            "cells().indexes()",
            "cell().index()",
            function() {
              return this.iterator(
                "cell",
                function(settings, row, column) {
                  return {
                    row: row,
                    column: column,
                    columnVisible: _fnColumnIndexToVisible(settings, column),
                  };
                },
                1
              );
            }
          );

          _api_registerPlural(
            "cells().invalidate()",
            "cell().invalidate()",
            function(src) {
              return this.iterator("cell", function(settings, row, column) {
                _fnInvalidate(settings, row, src, column);
              });
            }
          );

          _api_register("cell()", function(rowSelector, columnSelector, opts) {
            return _selector_first(
              this.cells(rowSelector, columnSelector, opts)
            );
          });

          _api_register("cell().data()", function(data) {
            var ctx = this.context;
            var cell = this[0];

            if (data === undefined) {
              // Get
              return ctx.length && cell.length
                ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column)
                : undefined;
            }

            // Set
            _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
            _fnInvalidate(ctx[0], cell[0].row, "data", cell[0].column);

            return this;
          });
          /**
           * Set the ordering for the table.
           *
           * @param {array} order 2D array of sorting information to be applied.
           * @returns {DataTables.Api} this
           */
          /**
           * Set the ordering for the table.
           *
           * @param {integer} order Column index to sort upon.
           * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
           * @returns {DataTables.Api} this
           */
          /**
           * Set the ordering for the table.
           *
           * @param {array} order 1D array of sorting information to be applied.
           * @param {array} [...] Optional additional sorting conditions
           * @returns {DataTables.Api} this
           */

          /**
           * Get current ordering (sorting) that has been applied to the table.
           *
           * @returns {array} 2D array containing the sorting information for the first
           *   table in the current context. Each element in the parent array represents
           *   a column being sorted upon (i.e. multi-sorting with two columns would have
           *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
           *   the column index that the sorting condition applies to, the second is the
           *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
           *   index of the sorting order from the `column.sorting` initialisation array.
           */ _api_register("order()", function(order, dir) {
            var ctx = this.context;

            if (order === undefined) {
              // get
              return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
            }

            // set
            if (typeof order === "number") {
              // Simple column / direction passed in
              order = [[order, dir]];
            } else if (order.length && !$.isArray(order[0])) {
              // Arguments passed in (list of 1D arrays)
              order = Array.prototype.slice.call(arguments);
            }
            // otherwise a 2D array was passed in

            return this.iterator("table", function(settings) {
              settings.aaSorting = order.slice();
            });
          });

          /**
           * Attach a sort listener to an element for a given column
           *
           * @param {node|jQuery|string} node Identifier for the element(s) to attach the
           *   listener to. This can take the form of a single DOM node, a jQuery
           *   collection of nodes or a jQuery selector which will identify the node(s).
           * @param {integer} column the column that a click on this node will sort on
           * @param {function} [callback] callback function when sort is run
           * @returns {DataTables.Api} this
           */
          _api_register("order.listener()", function(node, column, callback) {
            return this.iterator("table", function(settings) {
              _fnSortAttachListener(settings, node, column, callback);
            });
          });

          _api_register("order.fixed()", function(set) {
            if (!set) {
              var ctx = this.context;
              var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;

              return $.isArray(fixed) ? { pre: fixed } : fixed;
            }

            return this.iterator("table", function(settings) {
              settings.aaSortingFixed = $.extend(true, {}, set);
            });
          });

          // Order by the selected column(s)
          _api_register(["columns().order()", "column().order()"], function(
            dir
          ) {
            var that = this;

            return this.iterator("table", function(settings, i) {
              var sort = [];

              $.each(that[i], function(j, col) {
                sort.push([col, dir]);
              });

              settings.aaSorting = sort;
            });
          });

          _api_register("search()", function(input, regex, smart, caseInsen) {
            var ctx = this.context;

            if (input === undefined) {
              // get
              return ctx.length !== 0
                ? ctx[0].oPreviousSearch.sSearch
                : undefined;
            }

            // set
            return this.iterator("table", function(settings) {
              if (!settings.oFeatures.bFilter) {
                return;
              }

              _fnFilterComplete(
                settings,
                $.extend({}, settings.oPreviousSearch, {
                  sSearch: input + "",
                  bRegex: regex === null ? false : regex,
                  bSmart: smart === null ? true : smart,
                  bCaseInsensitive: caseInsen === null ? true : caseInsen,
                }),
                1
              );
            });
          });

          _api_registerPlural(
            "columns().search()",
            "column().search()",
            function(input, regex, smart, caseInsen) {
              return this.iterator("column", function(settings, column) {
                var preSearch = settings.aoPreSearchCols;

                if (input === undefined) {
                  // get
                  return preSearch[column].sSearch;
                }

                // set
                if (!settings.oFeatures.bFilter) {
                  return;
                }

                $.extend(preSearch[column], {
                  sSearch: input + "",
                  bRegex: regex === null ? false : regex,
                  bSmart: smart === null ? true : smart,
                  bCaseInsensitive: caseInsen === null ? true : caseInsen,
                });

                _fnFilterComplete(settings, settings.oPreviousSearch, 1);
              });
            }
          );

          /*
           * State API methods
           */

          _api_register("state()", function() {
            return this.context.length ? this.context[0].oSavedState : null;
          });

          _api_register("state.clear()", function() {
            return this.iterator("table", function(settings) {
              // Save an empty object
              settings.fnStateSaveCallback.call(
                settings.oInstance,
                settings,
                {}
              );
            });
          });

          _api_register("state.loaded()", function() {
            return this.context.length ? this.context[0].oLoadedState : null;
          });

          _api_register("state.save()", function() {
            return this.iterator("table", function(settings) {
              _fnSaveState(settings);
            });
          });

          /**
           * Provide a common method for plug-ins to check the version of DataTables being
           * used, in order to ensure compatibility.
           *
           *  @param {string} version Version string to check for, in the format "X.Y.Z".
           *    Note that the formats "X" and "X.Y" are also acceptable.
           *  @returns {boolean} true if this version of DataTables is greater or equal to
           *    the required version, or false if this version of DataTales is not
           *    suitable
           *  @static
           *  @dtopt API-Static
           *
           *  @example
           *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
           */
          DataTable.versionCheck = DataTable.fnVersionCheck = function(
            version
          ) {
            var aThis = DataTable.version.split(".");
            var aThat = version.split(".");
            var iThis, iThat;

            for (var i = 0, iLen = aThat.length; i < iLen; i++) {
              iThis = parseInt(aThis[i], 10) || 0;
              iThat = parseInt(aThat[i], 10) || 0;

              // Parts are the same, keep comparing
              if (iThis === iThat) {
                continue;
              }

              // Parts are different, return immediately
              return iThis > iThat;
            }

            return true;
          };

          /**
           * Check if a `<table>` node is a DataTable table already or not.
           *
           *  @param {node|jquery|string} table Table node, jQuery object or jQuery
           *      selector for the table to test. Note that if more than more than one
           *      table is passed on, only the first will be checked
           *  @returns {boolean} true the table given is a DataTable, or false otherwise
           *  @static
           *  @dtopt API-Static
           *
           *  @example
           *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
           *      $('#example').dataTable();
           *    }
           */
          DataTable.isDataTable = DataTable.fnIsDataTable = function(table) {
            var t = $(table).get(0);
            var is = false;

            if (table instanceof DataTable.Api) {
              return true;
            }

            $.each(DataTable.settings, function(i, o) {
              var head = o.nScrollHead ? $("table", o.nScrollHead)[0] : null;
              var foot = o.nScrollFoot ? $("table", o.nScrollFoot)[0] : null;

              if (o.nTable === t || head === t || foot === t) {
                is = true;
              }
            });

            return is;
          };

          /**
           * Get all DataTable tables that have been initialised - optionally you can
           * select to get only currently visible tables.
           *
           *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
           *    or visible tables only.
           *  @returns {array} Array of `table` nodes (not DataTable instances) which are
           *    DataTables
           *  @static
           *  @dtopt API-Static
           *
           *  @example
           *    $.each( $.fn.dataTable.tables(true), function () {
           *      $(table).DataTable().columns.adjust();
           *    } );
           */
          DataTable.tables = DataTable.fnTables = function(visible) {
            var api = false;

            if ($.isPlainObject(visible)) {
              api = visible.api;
              visible = visible.visible;
            }

            var a = $.map(DataTable.settings, function(o) {
              if (!visible || (visible && $(o.nTable).is(":visible"))) {
                return o.nTable;
              }
            });

            return api ? new _Api(a) : a;
          };

          /**
           * Convert from camel case parameters to Hungarian notation. This is made public
           * for the extensions to provide the same ability as DataTables core to accept
           * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
           * parameters.
           *
           *  @param {object} src The model object which holds all parameters that can be
           *    mapped.
           *  @param {object} user The object to convert from camel case to Hungarian.
           *  @param {boolean} force When set to `true`, properties which already have a
           *    Hungarian value in the `user` object will be overwritten. Otherwise they
           *    won't be.
           */
          DataTable.camelToHungarian = _fnCamelToHungarian;

          /**
           *
           */
          _api_register("$()", function(selector, opts) {
            var rows = this.rows(opts).nodes(), // Get all rows
              jqRows = $(rows);

            return $(
              [].concat(
                jqRows.filter(selector).toArray(),
                jqRows.find(selector).toArray()
              )
            );
          });

          // jQuery functions to operate on the tables
          $.each(["on", "one", "off"], function(i, key) {
            _api_register(key + "()", function(/* event, handler */) {
              var args = Array.prototype.slice.call(arguments);

              // Add the `dt` namespace automatically if it isn't already present
              args[0] = $.map(args[0].split(/\s/), function(e) {
                return !e.match(/\.dt\b/) ? e + ".dt" : e;
              }).join(" ");

              var inst = $(this.tables().nodes());
              inst[key].apply(inst, args);
              return this;
            });
          });

          _api_register("clear()", function() {
            return this.iterator("table", function(settings) {
              _fnClearTable(settings);
            });
          });

          _api_register("settings()", function() {
            return new _Api(this.context, this.context);
          });

          _api_register("init()", function() {
            var ctx = this.context;
            return ctx.length ? ctx[0].oInit : null;
          });

          _api_register("data()", function() {
            return this.iterator("table", function(settings) {
              return _pluck(settings.aoData, "_aData");
            }).flatten();
          });

          _api_register("destroy()", function(remove) {
            remove = remove || false;

            return this.iterator("table", function(settings) {
              var orig = settings.nTableWrapper.parentNode;
              var classes = settings.oClasses;
              var table = settings.nTable;
              var tbody = settings.nTBody;
              var thead = settings.nTHead;
              var tfoot = settings.nTFoot;
              var jqTable = $(table);
              var jqTbody = $(tbody);
              var jqWrapper = $(settings.nTableWrapper);
              var rows = $.map(settings.aoData, function(r) {
                return r.nTr;
              });
              var i, ien;

              // Flag to note that the table is currently being destroyed - no action
              // should be taken
              settings.bDestroying = true;

              // Fire off the destroy callbacks for plug-ins etc
              _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [
                settings,
              ]);

              // If not being removed from the document, make all columns visible
              if (!remove) {
                new _Api(settings).columns().visible(true);
              }

              // Blitz all `DT` namespaced events (these are internal events, the
              // lowercase, `dt` events are user subscribed and they are responsible
              // for removing them
              jqWrapper
                .off(".DT")
                .find(":not(tbody *)")
                .off(".DT");
              $(window).off(".DT-" + settings.sInstance);

              // When scrolling we had to break the table up - restore it
              if (table != thead.parentNode) {
                jqTable.children("thead").detach();
                jqTable.append(thead);
              }

              if (tfoot && table != tfoot.parentNode) {
                jqTable.children("tfoot").detach();
                jqTable.append(tfoot);
              }

              settings.aaSorting = [];
              settings.aaSortingFixed = [];
              _fnSortingClasses(settings);

              $(rows).removeClass(settings.asStripeClasses.join(" "));

              $("th, td", thead).removeClass(
                classes.sSortable +
                  " " +
                  classes.sSortableAsc +
                  " " +
                  classes.sSortableDesc +
                  " " +
                  classes.sSortableNone
              );

              // Add the TR elements back into the table in their original order
              jqTbody.children().detach();
              jqTbody.append(rows);

              // Remove the DataTables generated nodes, events and classes
              var removedMethod = remove ? "remove" : "detach";
              jqTable[removedMethod]();
              jqWrapper[removedMethod]();

              // If we need to reattach the table to the document
              if (!remove && orig) {
                // insertBefore acts like appendChild if !arg[1]
                orig.insertBefore(table, settings.nTableReinsertBefore);

                // Restore the width of the original table - was read from the style property,
                // so we can restore directly to that
                jqTable
                  .css("width", settings.sDestroyWidth)
                  .removeClass(classes.sTable);

                // If the were originally stripe classes - then we add them back here.
                // Note this is not fool proof (for example if not all rows had stripe
                // classes - but it's a good effort without getting carried away
                ien = settings.asDestroyStripes.length;

                if (ien) {
                  jqTbody.children().each(function(i) {
                    $(this).addClass(settings.asDestroyStripes[i % ien]);
                  });
                }
              }

              /* Remove the settings object from the settings array */
              var idx = $.inArray(settings, DataTable.settings);
              if (idx !== -1) {
                DataTable.settings.splice(idx, 1);
              }
            });
          });

          // Add the `every()` method for rows, columns and cells in a compact form
          $.each(["column", "row", "cell"], function(i, type) {
            _api_register(type + "s().every()", function(fn) {
              var opts = this.selector.opts;
              var api = this;

              return this.iterator(type, function(
                settings,
                arg1,
                arg2,
                arg3,
                arg4
              ) {
                // Rows and columns:
                //  arg1 - index
                //  arg2 - table counter
                //  arg3 - loop counter
                //  arg4 - undefined
                // Cells:
                //  arg1 - row index
                //  arg2 - column index
                //  arg3 - table counter
                //  arg4 - loop counter
                fn.call(
                  api[type](
                    arg1,
                    type === "cell" ? arg2 : opts,
                    type === "cell" ? opts : undefined
                  ),
                  arg1,
                  arg2,
                  arg3,
                  arg4
                );
              });
            });
          });

          // i18n method for extensions to be able to use the language object from the
          // DataTable
          _api_register("i18n()", function(token, def, plural) {
            var ctx = this.context[0];
            var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

            if (resolved === undefined) {
              resolved = def;
            }

            if (plural !== undefined && $.isPlainObject(resolved)) {
              resolved =
                resolved[plural] !== undefined ? resolved[plural] : resolved._;
            }

            return resolved.replace("%d", plural); // nb: plural might be undefined,
          });
          /**
           * Version string for plug-ins to check compatibility. Allowed format is
           * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
           * only for non-release builds. See http://semver.org/ for more information.
           *  @member
           *  @type string
           *  @default Version number
           */
          DataTable.version = "1.10.21";

          /**
           * Private data store, containing all of the settings objects that are
           * created for the tables on a given page.
           *
           * Note that the `DataTable.settings` object is aliased to
           * `jQuery.fn.dataTableExt` through which it may be accessed and
           * manipulated, or `jQuery.fn.dataTable.settings`.
           *  @member
           *  @type array
           *  @default []
           *  @private
           */
          DataTable.settings = [];

          /**
           * Object models container, for the various models that DataTables has
           * available to it. These models define the objects that are used to hold
           * the active state and configuration of the table.
           *  @namespace
           */
          DataTable.models = {};

          /**
           * Template object for the way in which DataTables holds information about
           * search information for the global filter and individual column filters.
           *  @namespace
           */
          DataTable.models.oSearch = {
            /**
             * Flag to indicate if the filtering should be case insensitive or not
             *  @type boolean
             *  @default true
             */
            bCaseInsensitive: true,

            /**
             * Applied search term
             *  @type string
             *  @default <i>Empty string</i>
             */
            sSearch: "",

            /**
             * Flag to indicate if the search term should be interpreted as a
             * regular expression (true) or not (false) and therefore and special
             * regex characters escaped.
             *  @type boolean
             *  @default false
             */
            bRegex: false,

            /**
             * Flag to indicate if DataTables is to use its smart filtering or not.
             *  @type boolean
             *  @default true
             */
            bSmart: true,
          };

          /**
           * Template object for the way in which DataTables holds information about
           * each individual row. This is the object format used for the settings
           * aoData array.
           *  @namespace
           */
          DataTable.models.oRow = {
            /**
             * TR element for the row
             *  @type node
             *  @default null
             */
            nTr: null,

            /**
             * Array of TD elements for each row. This is null until the row has been
             * created.
             *  @type array nodes
             *  @default []
             */
            anCells: null,

            /**
             * Data object from the original data source for the row. This is either
             * an array if using the traditional form of DataTables, or an object if
             * using mData options. The exact type will depend on the passed in
             * data from the data source, or will be an array if using DOM a data
             * source.
             *  @type array|object
             *  @default []
             */
            _aData: [],

            /**
             * Sorting data cache - this array is ostensibly the same length as the
             * number of columns (although each index is generated only as it is
             * needed), and holds the data that is used for sorting each column in the
             * row. We do this cache generation at the start of the sort in order that
             * the formatting of the sort data need be done only once for each cell
             * per sort. This array should not be read from or written to by anything
             * other than the master sorting methods.
             *  @type array
             *  @default null
             *  @private
             */
            _aSortData: null,

            /**
             * Per cell filtering data cache. As per the sort data cache, used to
             * increase the performance of the filtering in DataTables
             *  @type array
             *  @default null
             *  @private
             */
            _aFilterData: null,

            /**
             * Filtering data cache. This is the same as the cell filtering cache, but
             * in this case a string rather than an array. This is easily computed with
             * a join on `_aFilterData`, but is provided as a cache so the join isn't
             * needed on every search (memory traded for performance)
             *  @type array
             *  @default null
             *  @private
             */
            _sFilterRow: null,

            /**
             * Cache of the class name that DataTables has applied to the row, so we
             * can quickly look at this variable rather than needing to do a DOM check
             * on className for the nTr property.
             *  @type string
             *  @default <i>Empty string</i>
             *  @private
             */
            _sRowStripe: "",

            /**
             * Denote if the original data source was from the DOM, or the data source
             * object. This is used for invalidating data, so DataTables can
             * automatically read data from the original source, unless uninstructed
             * otherwise.
             *  @type string
             *  @default null
             *  @private
             */
            src: null,

            /**
             * Index in the aoData array. This saves an indexOf lookup when we have the
             * object, but want to know the index
             *  @type integer
             *  @default -1
             *  @private
             */
            idx: -1,
          };

          /**
           * Template object for the column information object in DataTables. This object
           * is held in the settings aoColumns array and contains all the information that
           * DataTables needs about each individual column.
           *
           * Note that this object is related to {@link DataTable.defaults.column}
           * but this one is the internal data store for DataTables's cache of columns.
           * It should NOT be manipulated outside of DataTables. Any configuration should
           * be done through the initialisation options.
           *  @namespace
           */
          DataTable.models.oColumn = {
            /**
             * Column index. This could be worked out on-the-fly with $.inArray, but it
             * is faster to just hold it as a variable
             *  @type integer
             *  @default null
             */
            idx: null,

            /**
             * A list of the columns that sorting should occur on when this column
             * is sorted. That this property is an array allows multi-column sorting
             * to be defined for a column (for example first name / last name columns
             * would benefit from this). The values are integers pointing to the
             * columns to be sorted on (typically it will be a single integer pointing
             * at itself, but that doesn't need to be the case).
             *  @type array
             */
            aDataSort: null,

            /**
             * Define the sorting directions that are applied to the column, in sequence
             * as the column is repeatedly sorted upon - i.e. the first value is used
             * as the sorting direction when the column if first sorted (clicked on).
             * Sort it again (click again) and it will move on to the next index.
             * Repeat until loop.
             *  @type array
             */
            asSorting: null,

            /**
             * Flag to indicate if the column is searchable, and thus should be included
             * in the filtering or not.
             *  @type boolean
             */
            bSearchable: null,

            /**
             * Flag to indicate if the column is sortable or not.
             *  @type boolean
             */
            bSortable: null,

            /**
             * Flag to indicate if the column is currently visible in the table or not
             *  @type boolean
             */
            bVisible: null,

            /**
             * Store for manual type assignment using the `column.type` option. This
             * is held in store so we can manipulate the column's `sType` property.
             *  @type string
             *  @default null
             *  @private
             */
            _sManualType: null,

            /**
             * Flag to indicate if HTML5 data attributes should be used as the data
             * source for filtering or sorting. True is either are.
             *  @type boolean
             *  @default false
             *  @private
             */
            _bAttrSrc: false,

            /**
             * Developer definable function that is called whenever a cell is created (Ajax source,
             * etc) or processed for input (DOM source). This can be used as a compliment to mRender
             * allowing you to modify the DOM element (add background colour for example) when the
             * element is available.
             *  @type function
             *  @param {element} nTd The TD node that has been created
             *  @param {*} sData The Data for the cell
             *  @param {array|object} oData The data for the whole row
             *  @param {int} iRow The row index for the aoData data store
             *  @default null
             */
            fnCreatedCell: null,

            /**
             * Function to get data from a cell in a column. You should <b>never</b>
             * access data directly through _aData internally in DataTables - always use
             * the method attached to this property. It allows mData to function as
             * required. This function is automatically assigned by the column
             * initialisation method
             *  @type function
             *  @param {array|object} oData The data array/object for the array
             *    (i.e. aoData[]._aData)
             *  @param {string} sSpecific The specific data type you want to get -
             *    'display', 'type' 'filter' 'sort'
             *  @returns {*} The data for the cell from the given row's data
             *  @default null
             */
            fnGetData: null,

            /**
             * Function to set data for a cell in the column. You should <b>never</b>
             * set the data directly to _aData internally in DataTables - always use
             * this method. It allows mData to function as required. This function
             * is automatically assigned by the column initialisation method
             *  @type function
             *  @param {array|object} oData The data array/object for the array
             *    (i.e. aoData[]._aData)
             *  @param {*} sValue Value to set
             *  @default null
             */
            fnSetData: null,

            /**
             * Property to read the value for the cells in the column from the data
             * source array / object. If null, then the default content is used, if a
             * function is given then the return from the function is used.
             *  @type function|int|string|null
             *  @default null
             */
            mData: null,

            /**
             * Partner property to mData which is used (only when defined) to get
             * the data - i.e. it is basically the same as mData, but without the
             * 'set' option, and also the data fed to it is the result from mData.
             * This is the rendering method to match the data method of mData.
             *  @type function|int|string|null
             *  @default null
             */
            mRender: null,

            /**
             * Unique header TH/TD element for this column - this is what the sorting
             * listener is attached to (if sorting is enabled.)
             *  @type node
             *  @default null
             */
            nTh: null,

            /**
             * Unique footer TH/TD element for this column (if there is one). Not used
             * in DataTables as such, but can be used for plug-ins to reference the
             * footer for each column.
             *  @type node
             *  @default null
             */
            nTf: null,

            /**
             * The class to apply to all TD elements in the table's TBODY for the column
             *  @type string
             *  @default null
             */
            sClass: null,

            /**
             * When DataTables calculates the column widths to assign to each column,
             * it finds the longest string in each column and then constructs a
             * temporary table and reads the widths from that. The problem with this
             * is that "mmm" is much wider then "iiii", but the latter is a longer
             * string - thus the calculation can go wrong (doing it properly and putting
             * it into an DOM object and measuring that is horribly(!) slow). Thus as
             * a "work around" we provide this option. It will append its value to the
             * text that is found to be the longest string for the column - i.e. padding.
             *  @type string
             */
            sContentPadding: null,

            /**
             * Allows a default value to be given for a column's data, and will be used
             * whenever a null data source is encountered (this can be because mData
             * is set to null, or because the data source itself is null).
             *  @type string
             *  @default null
             */
            sDefaultContent: null,

            /**
             * Name for the column, allowing reference to the column by name as well as
             * by index (needs a lookup to work by name).
             *  @type string
             */
            sName: null,

            /**
             * Custom sorting data type - defines which of the available plug-ins in
             * afnSortData the custom sorting will use - if any is defined.
             *  @type string
             *  @default std
             */
            sSortDataType: "std",

            /**
             * Class to be applied to the header element when sorting on this column
             *  @type string
             *  @default null
             */
            sSortingClass: null,

            /**
             * Class to be applied to the header element when sorting on this column -
             * when jQuery UI theming is used.
             *  @type string
             *  @default null
             */
            sSortingClassJUI: null,

            /**
             * Title of the column - what is seen in the TH element (nTh).
             *  @type string
             */
            sTitle: null,

            /**
             * Column sorting and filtering type
             *  @type string
             *  @default null
             */
            sType: null,

            /**
             * Width of the column
             *  @type string
             *  @default null
             */
            sWidth: null,

            /**
             * Width of the column when it was first "encountered"
             *  @type string
             *  @default null
             */
            sWidthOrig: null,
          };

          /*
           * Developer note: The properties of the object below are given in Hungarian
           * notation, that was used as the interface for DataTables prior to v1.10, however
           * from v1.10 onwards the primary interface is camel case. In order to avoid
           * breaking backwards compatibility utterly with this change, the Hungarian
           * version is still, internally the primary interface, but is is not documented
           * - hence the @name tags in each doc comment. This allows a Javascript function
           * to create a map from Hungarian notation to camel case (going the other direction
           * would require each property to be listed, which would at around 3K to the size
           * of DataTables, while this method is about a 0.5K hit.
           *
           * Ultimately this does pave the way for Hungarian notation to be dropped
           * completely, but that is a massive amount of work and will break current
           * installs (therefore is on-hold until v2).
           */

          /**
           * Initialisation options that can be given to DataTables at initialisation
           * time.
           *  @namespace
           */
          DataTable.defaults = {
            /**
             * An array of data to use for the table, passed in at initialisation which
             * will be used in preference to any data which is already in the DOM. This is
             * particularly useful for constructing tables purely in Javascript, for
             * example with a custom Ajax call.
             *  @type array
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.data
             *
             *  @example
             *    // Using a 2D array data source
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "data": [
             *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
             *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
             *        ],
             *        "columns": [
             *          { "title": "Engine" },
             *          { "title": "Browser" },
             *          { "title": "Platform" },
             *          { "title": "Version" },
             *          { "title": "Grade" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using an array of objects as a data source (`data`)
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "data": [
             *          {
             *            "engine":   "Trident",
             *            "browser":  "Internet Explorer 4.0",
             *            "platform": "Win 95+",
             *            "version":  4,
             *            "grade":    "X"
             *          },
             *          {
             *            "engine":   "Trident",
             *            "browser":  "Internet Explorer 5.0",
             *            "platform": "Win 95+",
             *            "version":  5,
             *            "grade":    "C"
             *          }
             *        ],
             *        "columns": [
             *          { "title": "Engine",   "data": "engine" },
             *          { "title": "Browser",  "data": "browser" },
             *          { "title": "Platform", "data": "platform" },
             *          { "title": "Version",  "data": "version" },
             *          { "title": "Grade",    "data": "grade" }
             *        ]
             *      } );
             *    } );
             */
            aaData: null,

            /**
             * If ordering is enabled, then DataTables will perform a first pass sort on
             * initialisation. You can define which column(s) the sort is performed
             * upon, and the sorting direction, with this variable. The `sorting` array
             * should contain an array for each column to be sorted initially containing
             * the column's index and a direction string ('asc' or 'desc').
             *  @type array
             *  @default [[0,'asc']]
             *
             *  @dtopt Option
             *  @name DataTable.defaults.order
             *
             *  @example
             *    // Sort by 3rd column first, and then 4th column
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "order": [[2,'asc'], [3,'desc']]
             *      } );
             *    } );
             *
             *    // No initial sorting
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "order": []
             *      } );
             *    } );
             */
            aaSorting: [[0, "asc"]],

            /**
             * This parameter is basically identical to the `sorting` parameter, but
             * cannot be overridden by user interaction with the table. What this means
             * is that you could have a column (visible or hidden) which the sorting
             * will always be forced on first - any sorting after that (from the user)
             * will then be performed as required. This can be useful for grouping rows
             * together.
             *  @type array
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.orderFixed
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "orderFixed": [[0,'asc']]
             *      } );
             *    } )
             */
            aaSortingFixed: [],

            /**
             * DataTables can be instructed to load data to display in the table from a
             * Ajax source. This option defines how that Ajax call is made and where to.
             *
             * The `ajax` property has three different modes of operation, depending on
             * how it is defined. These are:
             *
             * * `string` - Set the URL from where the data should be loaded from.
             * * `object` - Define properties for `jQuery.ajax`.
             * * `function` - Custom data get function
             *
             * `string`
             * --------
             *
             * As a string, the `ajax` property simply defines the URL from which
             * DataTables will load data.
             *
             * `object`
             * --------
             *
             * As an object, the parameters in the object are passed to
             * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
             * of the Ajax request. DataTables has a number of default parameters which
             * you can override using this option. Please refer to the jQuery
             * documentation for a full description of the options available, although
             * the following parameters provide additional options in DataTables or
             * require special consideration:
             *
             * * `data` - As with jQuery, `data` can be provided as an object, but it
             *   can also be used as a function to manipulate the data DataTables sends
             *   to the server. The function takes a single parameter, an object of
             *   parameters with the values that DataTables has readied for sending. An
             *   object may be returned which will be merged into the DataTables
             *   defaults, or you can add the items to the object that was passed in and
             *   not return anything from the function. This supersedes `fnServerParams`
             *   from DataTables 1.9-.
             *
             * * `dataSrc` - By default DataTables will look for the property `data` (or
             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
             *   from an Ajax source or for server-side processing - this parameter
             *   allows that property to be changed. You can use Javascript dotted
             *   object notation to get a data source for multiple levels of nesting, or
             *   it my be used as a function. As a function it takes a single parameter,
             *   the JSON returned from the server, which can be manipulated as
             *   required, with the returned value being that used by DataTables as the
             *   data source for the table. This supersedes `sAjaxDataProp` from
             *   DataTables 1.9-.
             *
             * * `success` - Should not be overridden it is used internally in
             *   DataTables. To manipulate / transform the data returned by the server
             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
             *
             * `function`
             * ----------
             *
             * As a function, making the Ajax call is left up to yourself allowing
             * complete control of the Ajax request. Indeed, if desired, a method other
             * than Ajax could be used to obtain the required data, such as Web storage
             * or an AIR database.
             *
             * The function is given four parameters and no return is required. The
             * parameters are:
             *
             * 1. _object_ - Data to send to the server
             * 2. _function_ - Callback function that must be executed when the required
             *    data has been obtained. That data should be passed into the callback
             *    as the only parameter
             * 3. _object_ - DataTables settings object for the table
             *
             * Note that this supersedes `fnServerData` from DataTables 1.9-.
             *
             *  @type string|object|function
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.ajax
             *  @since 1.10.0
             *
             * @example
             *   // Get JSON data from a file via Ajax.
             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
             *   $('#example').dataTable( {
             *     "ajax": "data.json"
             *   } );
             *
             * @example
             *   // Get JSON data from a file via Ajax, using `dataSrc` to change
             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": "tableData"
             *     }
             *   } );
             *
             * @example
             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
             *   // from a plain array rather than an array in an object
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": ""
             *     }
             *   } );
             *
             * @example
             *   // Manipulate the data returned from the server - add a link to data
             *   // (note this can, should, be done using `render` for the column - this
             *   // is just a simple example of how the data can be manipulated).
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": function ( json ) {
             *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
             *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
             *         }
             *         return json;
             *       }
             *     }
             *   } );
             *
             * @example
             *   // Add data to the request
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "data": function ( d ) {
             *         return {
             *           "extra_search": $('#extra').val()
             *         };
             *       }
             *     }
             *   } );
             *
             * @example
             *   // Send request as POST
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "type": "POST"
             *     }
             *   } );
             *
             * @example
             *   // Get the data from localStorage (could interface with a form for
             *   // adding, editing and removing rows).
             *   $('#example').dataTable( {
             *     "ajax": function (data, callback, settings) {
             *       callback(
             *         JSON.parse( localStorage.getItem('dataTablesData') )
             *       );
             *     }
             *   } );
             */
            ajax: null,

            /**
             * This parameter allows you to readily specify the entries in the length drop
             * down menu that DataTables shows when pagination is enabled. It can be
             * either a 1D array of options which will be used for both the displayed
             * option and the value, or a 2D array which will use the array in the first
             * position as the value, and the array in the second position as the
             * displayed options (useful for language strings such as 'All').
             *
             * Note that the `pageLength` property will be automatically set to the
             * first value given in this array, unless `pageLength` is also provided.
             *  @type array
             *  @default [ 10, 25, 50, 100 ]
             *
             *  @dtopt Option
             *  @name DataTable.defaults.lengthMenu
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
             *      } );
             *    } );
             */
            aLengthMenu: [10, 25, 50, 100],

            /**
             * The `columns` option in the initialisation parameter allows you to define
             * details about the way individual columns behave. For a full list of
             * column options that can be set, please see
             * {@link DataTable.defaults.column}. Note that if you use `columns` to
             * define your columns, you must have an entry in the array for every single
             * column that you have in your table (these can be null if you don't which
             * to specify any options).
             *  @member
             *
             *  @name DataTable.defaults.column
             */
            aoColumns: null,

            /**
             * Very similar to `columns`, `columnDefs` allows you to target a specific
             * column, multiple columns, or all columns, using the `targets` property of
             * each object in the array. This allows great flexibility when creating
             * tables, as the `columnDefs` arrays can be of any length, targeting the
             * columns you specifically want. `columnDefs` may use any of the column
             * options available: {@link DataTable.defaults.column}, but it _must_
             * have `targets` defined in each object in the array. Values in the `targets`
             * array may be:
             *   <ul>
             *     <li>a string - class name will be matched on the TH for the column</li>
             *     <li>0 or a positive integer - column index counting from the left</li>
             *     <li>a negative integer - column index counting from the right</li>
             *     <li>the string "_all" - all columns (i.e. assign a default)</li>
             *   </ul>
             *  @member
             *
             *  @name DataTable.defaults.columnDefs
             */
            aoColumnDefs: null,

            /**
             * Basically the same as `search`, this parameter defines the individual column
             * filtering state at initialisation time. The array must be of the same size
             * as the number of columns, and each element be an object with the parameters
             * `search` and `escapeRegex` (the latter is optional). 'null' is also
             * accepted and the default will be used.
             *  @type array
             *  @default []
             *
             *  @dtopt Option
             *  @name DataTable.defaults.searchCols
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "searchCols": [
             *          null,
             *          { "search": "My filter" },
             *          null,
             *          { "search": "^[0-9]", "escapeRegex": false }
             *        ]
             *      } );
             *    } )
             */
            aoSearchCols: [],

            /**
             * An array of CSS classes that should be applied to displayed rows. This
             * array may be of any length, and DataTables will apply each class
             * sequentially, looping when required.
             *  @type array
             *  @default null <i>Will take the values determined by the `oClasses.stripe*`
             *    options</i>
             *
             *  @dtopt Option
             *  @name DataTable.defaults.stripeClasses
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
             *      } );
             *    } )
             */
            asStripeClasses: null,

            /**
             * Enable or disable automatic column width calculation. This can be disabled
             * as an optimisation (it takes some time to calculate the widths) if the
             * tables widths are passed in using `columns`.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.autoWidth
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "autoWidth": false
             *      } );
             *    } );
             */
            bAutoWidth: true,

            /**
             * Deferred rendering can provide DataTables with a huge speed boost when you
             * are using an Ajax or JS data source for the table. This option, when set to
             * true, will cause DataTables to defer the creation of the table elements for
             * each row until they are needed for a draw - saving a significant amount of
             * time.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.deferRender
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajax": "sources/arrays.txt",
             *        "deferRender": true
             *      } );
             *    } );
             */
            bDeferRender: false,

            /**
             * Replace a DataTable which matches the given selector and replace it with
             * one which has the properties of the new initialisation object passed. If no
             * table matches the selector, then the new DataTable will be constructed as
             * per normal.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.destroy
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "srollY": "200px",
             *        "paginate": false
             *      } );
             *
             *      // Some time later....
             *      $('#example').dataTable( {
             *        "filter": false,
             *        "destroy": true
             *      } );
             *    } );
             */
            bDestroy: false,

            /**
             * Enable or disable filtering of data. Filtering in DataTables is "smart" in
             * that it allows the end user to input multiple words (space separated) and
             * will match a row containing those words, even if not in the order that was
             * specified (this allow matching across multiple columns). Note that if you
             * wish to use filtering in DataTables this must remain 'true' - to remove the
             * default filtering input box and retain filtering abilities, please use
             * {@link DataTable.defaults.dom}.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.searching
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "searching": false
             *      } );
             *    } );
             */
            bFilter: true,

            /**
             * Enable or disable the table information display. This shows information
             * about the data that is currently visible on the page, including information
             * about filtered data if that action is being performed.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.info
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "info": false
             *      } );
             *    } );
             */
            bInfo: true,

            /**
             * Allows the end user to select the size of a formatted page from a select
             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.lengthChange
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "lengthChange": false
             *      } );
             *    } );
             */
            bLengthChange: true,

            /**
             * Enable or disable pagination.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.paging
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "paging": false
             *      } );
             *    } );
             */
            bPaginate: true,

            /**
             * Enable or disable the display of a 'processing' indicator when the table is
             * being processed (e.g. a sort). This is particularly useful for tables with
             * large amounts of data where it can take a noticeable amount of time to sort
             * the entries.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.processing
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "processing": true
             *      } );
             *    } );
             */
            bProcessing: false,

            /**
             * Retrieve the DataTables object for the given selector. Note that if the
             * table has already been initialised, this parameter will cause DataTables
             * to simply return the object that has already been set up - it will not take
             * account of any changes you might have made to the initialisation object
             * passed to DataTables (setting this parameter to true is an acknowledgement
             * that you understand this). `destroy` can be used to reinitialise a table if
             * you need.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.retrieve
             *
             *  @example
             *    $(document).ready( function() {
             *      initTable();
             *      tableActions();
             *    } );
             *
             *    function initTable ()
             *    {
             *      return $('#example').dataTable( {
             *        "scrollY": "200px",
             *        "paginate": false,
             *        "retrieve": true
             *      } );
             *    }
             *
             *    function tableActions ()
             *    {
             *      var table = initTable();
             *      // perform API operations with oTable
             *    }
             */
            bRetrieve: false,

            /**
             * When vertical (y) scrolling is enabled, DataTables will force the height of
             * the table's viewport to the given height at all times (useful for layout).
             * However, this can look odd when filtering data down to a small data set,
             * and the footer is left "floating" further down. This parameter (when
             * enabled) will cause DataTables to collapse the table's viewport down when
             * the result set will fit within the given Y height.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.scrollCollapse
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollY": "200",
             *        "scrollCollapse": true
             *      } );
             *    } );
             */
            bScrollCollapse: false,

            /**
             * Configure DataTables to use server-side processing. Note that the
             * `ajax` parameter must also be given in order to give DataTables a
             * source to obtain the required data for each draw.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverSide
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "xhr.php"
             *      } );
             *    } );
             */
            bServerSide: false,

            /**
             * Enable or disable sorting of columns. Sorting of individual columns can be
             * disabled by the `sortable` option for each column.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.ordering
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "ordering": false
             *      } );
             *    } );
             */
            bSort: true,

            /**
             * Enable or display DataTables' ability to sort multiple columns at the
             * same time (activated by shift-click by the user).
             *  @type boolean
             *  @default true
             *
             *  @dtopt Options
             *  @name DataTable.defaults.orderMulti
             *
             *  @example
             *    // Disable multiple column sorting ability
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "orderMulti": false
             *      } );
             *    } );
             */
            bSortMulti: true,

            /**
             * Allows control over whether DataTables should use the top (true) unique
             * cell that is found for a single column, or the bottom (false - default).
             * This is useful when using complex headers.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.orderCellsTop
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "orderCellsTop": true
             *      } );
             *    } );
             */
            bSortCellsTop: false,

            /**
             * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
             * `sorting\_3` to the columns which are currently being sorted on. This is
             * presented as a feature switch as it can increase processing time (while
             * classes are removed and added) so for large data sets you might want to
             * turn this off.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.orderClasses
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "orderClasses": false
             *      } );
             *    } );
             */
            bSortClasses: true,

            /**
             * Enable or disable state saving. When enabled HTML5 `localStorage` will be
             * used to save table display information such as pagination information,
             * display length, filtering and sorting. As such when the end user reloads
             * the page the display display will match what thy had previously set up.
             *
             * Due to the use of `localStorage` the default state saving is not supported
             * in IE6 or 7. If state saving is required in those browsers, use
             * `stateSaveCallback` to provide a storage solution such as cookies.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.stateSave
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "stateSave": true
             *      } );
             *    } );
             */
            bStateSave: false,

            /**
             * This function is called when a TR element is created (and all TD child
             * elements have been inserted), or registered if using a DOM source, allowing
             * manipulation of the TR element (adding classes etc).
             *  @type function
             *  @param {node} row "TR" element for the current row
             *  @param {array} data Raw data array for this row
             *  @param {int} dataIndex The index of this row in the internal aoData array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.createdRow
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "createdRow": function( row, data, dataIndex ) {
             *          // Bold the grade for all 'A' grade browsers
             *          if ( data[4] == "A" )
             *          {
             *            $('td:eq(4)', row).html( '<b>A</b>' );
             *          }
             *        }
             *      } );
             *    } );
             */
            fnCreatedRow: null,

            /**
             * This function is called on every 'draw' event, and allows you to
             * dynamically modify any aspect you want about the created DOM.
             *  @type function
             *  @param {object} settings DataTables settings object
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.drawCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "drawCallback": function( settings ) {
             *          alert( 'DataTables has redrawn the table' );
             *        }
             *      } );
             *    } );
             */
            fnDrawCallback: null,

            /**
             * Identical to fnHeaderCallback() but for the table footer this function
             * allows you to modify the table footer on every 'draw' event.
             *  @type function
             *  @param {node} foot "TR" element for the footer
             *  @param {array} data Full table data (as derived from the original HTML)
             *  @param {int} start Index for the current display starting point in the
             *    display array
             *  @param {int} end Index for the current display ending point in the
             *    display array
             *  @param {array int} display Index array to translate the visual position
             *    to the full data array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.footerCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "footerCallback": function( tfoot, data, start, end, display ) {
             *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
             *        }
             *      } );
             *    } )
             */
            fnFooterCallback: null,

            /**
             * When rendering large numbers in the information element for the table
             * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
             * to have a comma separator for the 'thousands' units (e.g. 1 million is
             * rendered as "1,000,000") to help readability for the end user. This
             * function will override the default method DataTables uses.
             *  @type function
             *  @member
             *  @param {int} toFormat number to be formatted
             *  @returns {string} formatted string for DataTables to show the number
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.formatNumber
             *
             *  @example
             *    // Format a number using a single quote for the separator (note that
             *    // this can also be done with the language.thousands option)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "formatNumber": function ( toFormat ) {
             *          return toFormat.toString().replace(
             *            /\B(?=(\d{3})+(?!\d))/g, "'"
             *          );
             *        };
             *      } );
             *    } );
             */
            fnFormatNumber: function(toFormat) {
              return toFormat
                .toString()
                .replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
            },

            /**
             * This function is called on every 'draw' event, and allows you to
             * dynamically modify the header row. This can be used to calculate and
             * display useful information about the table.
             *  @type function
             *  @param {node} head "TR" element for the header
             *  @param {array} data Full table data (as derived from the original HTML)
             *  @param {int} start Index for the current display starting point in the
             *    display array
             *  @param {int} end Index for the current display ending point in the
             *    display array
             *  @param {array int} display Index array to translate the visual position
             *    to the full data array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.headerCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "fheaderCallback": function( head, data, start, end, display ) {
             *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
             *        }
             *      } );
             *    } )
             */
            fnHeaderCallback: null,

            /**
             * The information element can be used to convey information about the current
             * state of the table. Although the internationalisation options presented by
             * DataTables are quite capable of dealing with most customisations, there may
             * be times where you wish to customise the string further. This callback
             * allows you to do exactly that.
             *  @type function
             *  @param {object} oSettings DataTables settings object
             *  @param {int} start Starting position in data for the draw
             *  @param {int} end End position in data for the draw
             *  @param {int} max Total number of rows in the table (regardless of
             *    filtering)
             *  @param {int} total Total number of rows in the data set, after filtering
             *  @param {string} pre The string that DataTables has formatted using it's
             *    own rules
             *  @returns {string} The string to be displayed in the information element.
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.infoCallback
             *
             *  @example
             *    $('#example').dataTable( {
             *      "infoCallback": function( settings, start, end, max, total, pre ) {
             *        return start +" to "+ end;
             *      }
             *    } );
             */
            fnInfoCallback: null,

            /**
             * Called when the table has been initialised. Normally DataTables will
             * initialise sequentially and there will be no need for this function,
             * however, this does not hold true when using external language information
             * since that is obtained using an async XHR call.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} json The JSON object request from the server - only
             *    present if client-side Ajax sourced data is used
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.initComplete
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "initComplete": function(settings, json) {
             *          alert( 'DataTables has finished its initialisation.' );
             *        }
             *      } );
             *    } )
             */
            fnInitComplete: null,

            /**
             * Called at the very start of each table draw and can be used to cancel the
             * draw by returning false, any other return (including undefined) results in
             * the full draw occurring).
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @returns {boolean} False will cancel the draw, anything else (including no
             *    return) will allow it to complete.
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.preDrawCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "preDrawCallback": function( settings ) {
             *          if ( $('#test').val() == 1 ) {
             *            return false;
             *          }
             *        }
             *      } );
             *    } );
             */
            fnPreDrawCallback: null,

            /**
             * This function allows you to 'post process' each row after it have been
             * generated for each table draw, but before it is rendered on screen. This
             * function might be used for setting the row class name etc.
             *  @type function
             *  @param {node} row "TR" element for the current row
             *  @param {array} data Raw data array for this row
             *  @param {int} displayIndex The display index for the current table draw
             *  @param {int} displayIndexFull The index of the data in the full list of
             *    rows (after filtering)
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.rowCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
             *          // Bold the grade for all 'A' grade browsers
             *          if ( data[4] == "A" ) {
             *            $('td:eq(4)', row).html( '<b>A</b>' );
             *          }
             *        }
             *      } );
             *    } );
             */
            fnRowCallback: null,

            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * This parameter allows you to override the default function which obtains
             * the data from the server so something more suitable for your application.
             * For example you could use POST data, or pull information from a Gears or
             * AIR database.
             *  @type function
             *  @member
             *  @param {string} source HTTP source to obtain the data from (`ajax`)
             *  @param {array} data A key/value pair object containing the data to send
             *    to the server
             *  @param {function} callback to be called on completion of the data get
             *    process that will draw the data on the page.
             *  @param {object} settings DataTables settings object
             *
             *  @dtopt Callbacks
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverData
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            fnServerData: null,

            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             *  It is often useful to send extra data to the server when making an Ajax
             * request - for example custom filtering information, and this callback
             * function makes it trivial to send extra information to the server. The
             * passed in parameter is the data set that has been constructed by
             * DataTables, and you can add to this or modify it as you require.
             *  @type function
             *  @param {array} data Data array (array of objects which are name/value
             *    pairs) that has been constructed by DataTables and will be sent to the
             *    server. In the case of Ajax sourced data with server-side processing
             *    this will be an empty array, for server-side processing there will be a
             *    significant number of parameters!
             *  @returns {undefined} Ensure that you modify the data array passed in,
             *    as this is passed by reference.
             *
             *  @dtopt Callbacks
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverParams
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            fnServerParams: null,

            /**
             * Load the table state. With this function you can define from where, and how, the
             * state of a table is loaded. By default DataTables will load from `localStorage`
             * but you might wish to use a server-side database or cookies.
             *  @type function
             *  @member
             *  @param {object} settings DataTables settings object
             *  @param {object} callback Callback that can be executed when done. It
             *    should be passed the loaded state object.
             *  @return {object} The DataTables state object to be loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoadCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadCallback": function (settings, callback) {
             *          $.ajax( {
             *            "url": "/state_load",
             *            "dataType": "json",
             *            "success": function (json) {
             *              callback( json );
             *            }
             *          } );
             *        }
             *      } );
             *    } );
             */
            fnStateLoadCallback: function(settings) {
              try {
                return JSON.parse(
                  (settings.iStateDuration === -1
                    ? sessionStorage
                    : localStorage
                  ).getItem(
                    "DataTables_" + settings.sInstance + "_" + location.pathname
                  )
                );
              } catch (e) {
                return {};
              }
            },

            /**
             * Callback which allows modification of the saved state prior to loading that state.
             * This callback is called when the table is loading state from the stored data, but
             * prior to the settings object being modified by the saved state. Note that for
             * plug-in authors, you should use the `stateLoadParams` event to load parameters for
             * a plug-in.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object that is to be loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoadParams
             *
             *  @example
             *    // Remove a saved filter, so filtering is never loaded
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadParams": function (settings, data) {
             *          data.oSearch.sSearch = "";
             *        }
             *      } );
             *    } );
             *
             *  @example
             *    // Disallow state loading by returning false
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadParams": function (settings, data) {
             *          return false;
             *        }
             *      } );
             *    } );
             */
            fnStateLoadParams: null,

            /**
             * Callback that is called when the state has been loaded from the state saving method
             * and the DataTables settings object has been modified as a result of the loaded state.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object that was loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoaded
             *
             *  @example
             *    // Show an alert with the filtering value that was saved
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoaded": function (settings, data) {
             *          alert( 'Saved filter was: '+data.oSearch.sSearch );
             *        }
             *      } );
             *    } );
             */
            fnStateLoaded: null,

            /**
             * Save the table state. This function allows you to define where and how the state
             * information for the table is stored By default DataTables will use `localStorage`
             * but you might wish to use a server-side database or cookies.
             *  @type function
             *  @member
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object to be saved
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateSaveCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateSaveCallback": function (settings, data) {
             *          // Send an Ajax request to the server with the state object
             *          $.ajax( {
             *            "url": "/state_save",
             *            "data": data,
             *            "dataType": "json",
             *            "method": "POST"
             *            "success": function () {}
             *          } );
             *        }
             *      } );
             *    } );
             */
            fnStateSaveCallback: function(settings, data) {
              try {
                (settings.iStateDuration === -1
                  ? sessionStorage
                  : localStorage
                ).setItem(
                  "DataTables_" + settings.sInstance + "_" + location.pathname,
                  JSON.stringify(data)
                );
              } catch (e) {}
            },

            /**
             * Callback which allows modification of the state to be saved. Called when the table
             * has changed state a new state save is required. This method allows modification of
             * the state saving object prior to actually doing the save, including addition or
             * other state properties or modification. Note that for plug-in authors, you should
             * use the `stateSaveParams` event to save parameters for a plug-in.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object to be saved
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateSaveParams
             *
             *  @example
             *    // Remove a saved filter, so filtering is never saved
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateSaveParams": function (settings, data) {
             *          data.oSearch.sSearch = "";
             *        }
             *      } );
             *    } );
             */
            fnStateSaveParams: null,

            /**
             * Duration for which the saved state information is considered valid. After this period
             * has elapsed the state will be returned to the default.
             * Value is given in seconds.
             *  @type int
             *  @default 7200 <i>(2 hours)</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.stateDuration
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateDuration": 60*60*24; // 1 day
             *      } );
             *    } )
             */
            iStateDuration: 7200,

            /**
             * When enabled DataTables will not make a request to the server for the first
             * page draw - rather it will use the data already on the page (no sorting etc
             * will be applied to it), thus saving on an XHR at load time. `deferLoading`
             * is used to indicate that deferred loading is required, but it is also used
             * to tell DataTables how many records there are in the full table (allowing
             * the information element and pagination to be displayed correctly). In the case
             * where a filtering is applied to the table on initial load, this can be
             * indicated by giving the parameter as an array, where the first element is
             * the number of records available after filtering and the second element is the
             * number of records without filtering (allowing the table information element
             * to be shown correctly).
             *  @type int | array
             *  @default null
             *
             *  @dtopt Options
             *  @name DataTable.defaults.deferLoading
             *
             *  @example
             *    // 57 records available in the table, no filtering applied
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "scripts/server_processing.php",
             *        "deferLoading": 57
             *      } );
             *    } );
             *
             *  @example
             *    // 57 records after filtering, 100 without filtering (an initial filter applied)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "scripts/server_processing.php",
             *        "deferLoading": [ 57, 100 ],
             *        "search": {
             *          "search": "my_filter"
             *        }
             *      } );
             *    } );
             */
            iDeferLoading: null,

            /**
             * Number of rows to display on a single page when using pagination. If
             * feature enabled (`lengthChange`) then the end user will be able to override
             * this to a custom setting using a pop-up menu.
             *  @type int
             *  @default 10
             *
             *  @dtopt Options
             *  @name DataTable.defaults.pageLength
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "pageLength": 50
             *      } );
             *    } )
             */
            iDisplayLength: 10,

            /**
             * Define the starting point for data display when using DataTables with
             * pagination. Note that this parameter is the number of records, rather than
             * the page number, so if you have 10 records per page and want to start on
             * the third page, it should be "20".
             *  @type int
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.displayStart
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "displayStart": 20
             *      } );
             *    } )
             */
            iDisplayStart: 0,

            /**
             * By default DataTables allows keyboard navigation of the table (sorting, paging,
             * and filtering) by adding a `tabindex` attribute to the required elements. This
             * allows you to tab through the controls and press the enter key to activate them.
             * The tabindex is default 0, meaning that the tab follows the flow of the document.
             * You can overrule this using this parameter if you wish. Use a value of -1 to
             * disable built-in keyboard navigation.
             *  @type int
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.tabIndex
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "tabIndex": 1
             *      } );
             *    } );
             */
            iTabIndex: 0,

            /**
             * Classes that DataTables assigns to the various components and features
             * that it adds to the HTML table. This allows classes to be configured
             * during initialisation in addition to through the static
             * {@link DataTable.ext.oStdClasses} object).
             *  @namespace
             *  @name DataTable.defaults.classes
             */
            oClasses: {},

            /**
             * All strings that DataTables uses in the user interface that it creates
             * are defined in this object, allowing you to modified them individually or
             * completely replace them all as required.
             *  @namespace
             *  @name DataTable.defaults.language
             */
            oLanguage: {
              /**
               * Strings that are used for WAI-ARIA labels and controls only (these are not
               * actually visible on the page, but will be read by screenreaders, and thus
               * must be internationalised as well).
               *  @namespace
               *  @name DataTable.defaults.language.aria
               */
              oAria: {
                /**
                 * ARIA label that is added to the table headers when the column may be
                 * sorted ascending by activing the column (click or return when focused).
                 * Note that the column header is prefixed to this string.
                 *  @type string
                 *  @default : activate to sort column ascending
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.aria.sortAscending
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "aria": {
                 *            "sortAscending": " - click/return to sort ascending"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sSortAscending: ": activate to sort column ascending",

                /**
                 * ARIA label that is added to the table headers when the column may be
                 * sorted descending by activing the column (click or return when focused).
                 * Note that the column header is prefixed to this string.
                 *  @type string
                 *  @default : activate to sort column ascending
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.aria.sortDescending
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "aria": {
                 *            "sortDescending": " - click/return to sort descending"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sSortDescending: ": activate to sort column descending",
              },

              /**
               * Pagination string used by DataTables for the built-in pagination
               * control types.
               *  @namespace
               *  @name DataTable.defaults.language.paginate
               */
              oPaginate: {
                /**
                 * Text to use when using the 'full_numbers' type of pagination for the
                 * button to take the user to the first page.
                 *  @type string
                 *  @default First
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.paginate.first
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "paginate": {
                 *            "first": "First page"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sFirst: "First",

                /**
                 * Text to use when using the 'full_numbers' type of pagination for the
                 * button to take the user to the last page.
                 *  @type string
                 *  @default Last
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.paginate.last
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "paginate": {
                 *            "last": "Last page"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sLast: "Last",

                /**
                 * Text to use for the 'next' pagination button (to take the user to the
                 * next page).
                 *  @type string
                 *  @default Next
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.paginate.next
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "paginate": {
                 *            "next": "Next page"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sNext: "Next",

                /**
                 * Text to use for the 'previous' pagination button (to take the user to
                 * the previous page).
                 *  @type string
                 *  @default Previous
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.paginate.previous
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "paginate": {
                 *            "previous": "Previous page"
                 *          }
                 *        }
                 *      } );
                 *    } );
                 */
                sPrevious: "Previous",
              },

              /**
               * This string is shown in preference to `zeroRecords` when the table is
               * empty of data (regardless of filtering). Note that this is an optional
               * parameter - if it is not given, the value of `zeroRecords` will be used
               * instead (either the default or given value).
               *  @type string
               *  @default No data available in table
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.emptyTable
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "emptyTable": "No data available in table"
               *        }
               *      } );
               *    } );
               */
              sEmptyTable: "No data available in table",

              /**
               * This string gives information to the end user about the information
               * that is current on display on the page. The following tokens can be
               * used in the string and will be dynamically replaced as the table
               * display updates. This tokens can be placed anywhere in the string, or
               * removed as needed by the language requires:
               *
               * * `\_START\_` - Display index of the first record on the current page
               * * `\_END\_` - Display index of the last record on the current page
               * * `\_TOTAL\_` - Number of records in the table after filtering
               * * `\_MAX\_` - Number of records in the table without filtering
               * * `\_PAGE\_` - Current page number
               * * `\_PAGES\_` - Total number of pages of data in the table
               *
               *  @type string
               *  @default Showing _START_ to _END_ of _TOTAL_ entries
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.info
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "info": "Showing page _PAGE_ of _PAGES_"
               *        }
               *      } );
               *    } );
               */
              sInfo: "Showing _START_ to _END_ of _TOTAL_ entries",

              /**
               * Display information string for when the table is empty. Typically the
               * format of this string should match `info`.
               *  @type string
               *  @default Showing 0 to 0 of 0 entries
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.infoEmpty
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "infoEmpty": "No entries to show"
               *        }
               *      } );
               *    } );
               */
              sInfoEmpty: "Showing 0 to 0 of 0 entries",

              /**
               * When a user filters the information in a table, this string is appended
               * to the information (`info`) to give an idea of how strong the filtering
               * is. The variable _MAX_ is dynamically updated.
               *  @type string
               *  @default (filtered from _MAX_ total entries)
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.infoFiltered
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "infoFiltered": " - filtering from _MAX_ records"
               *        }
               *      } );
               *    } );
               */
              sInfoFiltered: "(filtered from _MAX_ total entries)",

              /**
               * If can be useful to append extra information to the info string at times,
               * and this variable does exactly that. This information will be appended to
               * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
               * being used) at all times.
               *  @type string
               *  @default <i>Empty string</i>
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.infoPostFix
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "infoPostFix": "All records shown are derived from real information."
               *        }
               *      } );
               *    } );
               */
              sInfoPostFix: "",

              /**
               * This decimal place operator is a little different from the other
               * language options since DataTables doesn't output floating point
               * numbers, so it won't ever use this for display of a number. Rather,
               * what this parameter does is modify the sort methods of the table so
               * that numbers which are in a format which has a character other than
               * a period (`.`) as a decimal place will be sorted numerically.
               *
               * Note that numbers with different decimal places cannot be shown in
               * the same table and still be sortable, the table must be consistent.
               * However, multiple different tables on the page can use different
               * decimal place characters.
               *  @type string
               *  @default
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.decimal
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "decimal": ","
               *          "thousands": "."
               *        }
               *      } );
               *    } );
               */
              sDecimal: "",

              /**
               * DataTables has a build in number formatter (`formatNumber`) which is
               * used to format large numbers that are used in the table information.
               * By default a comma is used, but this can be trivially changed to any
               * character you wish with this parameter.
               *  @type string
               *  @default ,
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.thousands
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "thousands": "'"
               *        }
               *      } );
               *    } );
               */
              sThousands: ",",

              /**
               * Detail the action that will be taken when the drop down menu for the
               * pagination length option is changed. The '_MENU_' variable is replaced
               * with a default select list of 10, 25, 50 and 100, and can be replaced
               * with a custom select box if required.
               *  @type string
               *  @default Show _MENU_ entries
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.lengthMenu
               *
               *  @example
               *    // Language change only
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "lengthMenu": "Display _MENU_ records"
               *        }
               *      } );
               *    } );
               *
               *  @example
               *    // Language and options change
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "lengthMenu": 'Display <select>'+
               *            '<option value="10">10</option>'+
               *            '<option value="20">20</option>'+
               *            '<option value="30">30</option>'+
               *            '<option value="40">40</option>'+
               *            '<option value="50">50</option>'+
               *            '<option value="-1">All</option>'+
               *            '</select> records'
               *        }
               *      } );
               *    } );
               */
              sLengthMenu: "Show _MENU_ entries",

              /**
               * When using Ajax sourced data and during the first draw when DataTables is
               * gathering the data, this message is shown in an empty row in the table to
               * indicate to the end user the the data is being loaded. Note that this
               * parameter is not used when loading data by server-side processing, just
               * Ajax sourced data with client-side processing.
               *  @type string
               *  @default Loading...
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.loadingRecords
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "loadingRecords": "Please wait - loading..."
               *        }
               *      } );
               *    } );
               */
              sLoadingRecords: "Loading...",

              /**
               * Text which is displayed when the table is processing a user action
               * (usually a sort command or similar).
               *  @type string
               *  @default Processing...
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.processing
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "processing": "DataTables is currently busy"
               *        }
               *      } );
               *    } );
               */
              sProcessing: "Processing...",

              /**
               * Details the actions that will be taken when the user types into the
               * filtering input text box. The variable "_INPUT_", if used in the string,
               * is replaced with the HTML text box for the filtering input allowing
               * control over where it appears in the string. If "_INPUT_" is not given
               * then the input box is appended to the string automatically.
               *  @type string
               *  @default Search:
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.search
               *
               *  @example
               *    // Input text box will be appended at the end automatically
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "search": "Filter records:"
               *        }
               *      } );
               *    } );
               *
               *  @example
               *    // Specify where the filter should appear
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "search": "Apply filter _INPUT_ to table"
               *        }
               *      } );
               *    } );
               */
              sSearch: "Search:",

              /**
               * Assign a `placeholder` attribute to the search `input` element
               *  @type string
               *  @default
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.searchPlaceholder
               */
              sSearchPlaceholder: "",

              /**
               * All of the language information can be stored in a file on the
               * server-side, which DataTables will look up if this parameter is passed.
               * It must store the URL of the language file, which is in a JSON format,
               * and the object has the same properties as the oLanguage object in the
               * initialiser object (i.e. the above parameters). Please refer to one of
               * the example language files to see how this works in action.
               *  @type string
               *  @default <i>Empty string - i.e. disabled</i>
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.url
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
               *        }
               *      } );
               *    } );
               */
              sUrl: "",

              /**
               * Text shown inside the table records when the is no information to be
               * displayed after filtering. `emptyTable` is shown when there is simply no
               * information in the table at all (regardless of filtering).
               *  @type string
               *  @default No matching records found
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.zeroRecords
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "zeroRecords": "No records to display"
               *        }
               *      } );
               *    } );
               */
              sZeroRecords: "No matching records found",
            },

            /**
             * This parameter allows you to have define the global filtering state at
             * initialisation time. As an object the `search` parameter must be
             * defined, but all other parameters are optional. When `regex` is true,
             * the search string will be treated as a regular expression, when false
             * (default) it will be treated as a straight string. When `smart`
             * DataTables will use it's smart filtering methods (to word match at
             * any point in the data), when false this will not be done.
             *  @namespace
             *  @extends DataTable.models.oSearch
             *
             *  @dtopt Options
             *  @name DataTable.defaults.search
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "search": {"search": "Initial search"}
             *      } );
             *    } )
             */
            oSearch: $.extend({}, DataTable.models.oSearch),

            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * By default DataTables will look for the property `data` (or `aaData` for
             * compatibility with DataTables 1.9-) when obtaining data from an Ajax
             * source or for server-side processing - this parameter allows that
             * property to be changed. You can use Javascript dotted object notation to
             * get a data source for multiple levels of nesting.
             *  @type string
             *  @default data
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.ajaxDataProp
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            sAjaxDataProp: "data",

            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * You can instruct DataTables to load data from an external
             * source using this parameter (use aData if you want to pass data in you
             * already have). Simply provide a url a JSON object can be obtained from.
             *  @type string
             *  @default null
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.ajaxSource
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            sAjaxSource: null,

            /**
             * This initialisation variable allows you to specify exactly where in the
             * DOM you want DataTables to inject the various controls it adds to the page
             * (for example you might want the pagination controls at the top of the
             * table). DIV elements (with or without a custom class) can also be added to
             * aid styling. The follow syntax is used:
             *   <ul>
             *     <li>The following options are allowed:
             *       <ul>
             *         <li>'l' - Length changing</li>
             *         <li>'f' - Filtering input</li>
             *         <li>'t' - The table!</li>
             *         <li>'i' - Information</li>
             *         <li>'p' - Pagination</li>
             *         <li>'r' - pRocessing</li>
             *       </ul>
             *     </li>
             *     <li>The following constants are allowed:
             *       <ul>
             *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
             *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
             *       </ul>
             *     </li>
             *     <li>The following syntax is expected:
             *       <ul>
             *         <li>'&lt;' and '&gt;' - div elements</li>
             *         <li>'&lt;"class" and '&gt;' - div with a class</li>
             *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
             *       </ul>
             *     </li>
             *     <li>Examples:
             *       <ul>
             *         <li>'&lt;"wrapper"flipt&gt;'</li>
             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
             *       </ul>
             *     </li>
             *   </ul>
             *  @type string
             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
             *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.dom
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
             *      } );
             *    } );
             */
            sDom: "lfrtip",

            /**
             * Search delay option. This will throttle full table searches that use the
             * DataTables provided search input element (it does not effect calls to
             * `dt-api search()`, providing a delay before the search is made.
             *  @type integer
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.searchDelay
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "searchDelay": 200
             *      } );
             *    } )
             */
            searchDelay: null,

            /**
             * DataTables features six different built-in options for the buttons to
             * display for pagination control:
             *
             * * `numbers` - Page number buttons only
             * * `simple` - 'Previous' and 'Next' buttons only
             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
             * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
             *
             * Further methods can be added using {@link DataTable.ext.oPagination}.
             *  @type string
             *  @default simple_numbers
             *
             *  @dtopt Options
             *  @name DataTable.defaults.pagingType
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "pagingType": "full_numbers"
             *      } );
             *    } )
             */
            sPaginationType: "simple_numbers",

            /**
             * Enable horizontal scrolling. When a table is too wide to fit into a
             * certain layout, or you have a large number of columns in the table, you
             * can enable x-scrolling to show the table in a viewport, which can be
             * scrolled. This property can be `true` which will allow the table to
             * scroll horizontally when needed, or any CSS unit, or a number (in which
             * case it will be treated as a pixel measurement). Setting as simply `true`
             * is recommended.
             *  @type boolean|string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Features
             *  @name DataTable.defaults.scrollX
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollX": true,
             *        "scrollCollapse": true
             *      } );
             *    } );
             */
            sScrollX: "",

            /**
             * This property can be used to force a DataTable to use more width than it
             * might otherwise do when x-scrolling is enabled. For example if you have a
             * table which requires to be well spaced, this parameter is useful for
             * "over-sizing" the table, and thus forcing scrolling. This property can by
             * any CSS unit, or a number (in which case it will be treated as a pixel
             * measurement).
             *  @type string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.scrollXInner
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollX": "100%",
             *        "scrollXInner": "110%"
             *      } );
             *    } );
             */
            sScrollXInner: "",

            /**
             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
             * to the given height, and enable scrolling for any data which overflows the
             * current viewport. This can be used as an alternative to paging to display
             * a lot of data in a small area (although paging and scrolling can both be
             * enabled at the same time). This property can be any CSS unit, or a number
             * (in which case it will be treated as a pixel measurement).
             *  @type string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Features
             *  @name DataTable.defaults.scrollY
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollY": "200px",
             *        "paginate": false
             *      } );
             *    } );
             */
            sScrollY: "",

            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * Set the HTTP method that is used to make the Ajax call for server-side
             * processing or Ajax sourced data.
             *  @type string
             *  @default GET
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverMethod
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            sServerMethod: "GET",

            /**
             * DataTables makes use of renderers when displaying HTML elements for
             * a table. These renderers can be added or modified by plug-ins to
             * generate suitable mark-up for a site. For example the Bootstrap
             * integration plug-in for DataTables uses a paging button renderer to
             * display pagination buttons in the mark-up required by Bootstrap.
             *
             * For further information about the renderers available see
             * DataTable.ext.renderer
             *  @type string|object
             *  @default null
             *
             *  @name DataTable.defaults.renderer
             *
             */
            renderer: null,

            /**
             * Set the data property name that DataTables should use to get a row's id
             * to set as the `id` property in the node.
             *  @type string
             *  @default DT_RowId
             *
             *  @name DataTable.defaults.rowId
             */
            rowId: "DT_RowId",
          };

          _fnHungarianMap(DataTable.defaults);

          /*
           * Developer note - See note in model.defaults.js about the use of Hungarian
           * notation and camel case.
           */

          /**
           * Column options that can be given to DataTables at initialisation time.
           *  @namespace
           */
          DataTable.defaults.column = {
            /**
             * Define which column(s) an order will occur on for this column. This
             * allows a column's ordering to take multiple columns into account when
             * doing a sort or use the data from a different column. For example first
             * name / last name columns make sense to do a multi-column sort over the
             * two columns.
             *  @type array|int
             *  @default null <i>Takes the value of the column index automatically</i>
             *
             *  @name DataTable.defaults.column.orderData
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
             *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
             *          { "orderData": 2, "targets": [ 2 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "orderData": [ 0, 1 ] },
             *          { "orderData": [ 1, 0 ] },
             *          { "orderData": 2 },
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            aDataSort: null,
            iDataSort: -1,

            /**
             * You can control the default ordering direction, and even alter the
             * behaviour of the sort handler (i.e. only allow ascending ordering etc)
             * using this parameter.
             *  @type array
             *  @default [ 'asc', 'desc' ]
             *
             *  @name DataTable.defaults.column.orderSequence
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
             *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
             *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          { "orderSequence": [ "asc" ] },
             *          { "orderSequence": [ "desc", "asc", "asc" ] },
             *          { "orderSequence": [ "desc" ] },
             *          null
             *        ]
             *      } );
             *    } );
             */
            asSorting: ["asc", "desc"],

            /**
             * Enable or disable filtering on the data in this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.searchable
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "searchable": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "searchable": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            bSearchable: true,

            /**
             * Enable or disable ordering on this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.orderable
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderable": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "orderable": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            bSortable: true,

            /**
             * Enable or disable the display of this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.visible
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "visible": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "visible": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            bVisible: true,

            /**
             * Developer definable function that is called whenever a cell is created (Ajax source,
             * etc) or processed for input (DOM source). This can be used as a compliment to mRender
             * allowing you to modify the DOM element (add background colour for example) when the
             * element is available.
             *  @type function
             *  @param {element} td The TD node that has been created
             *  @param {*} cellData The Data for the cell
             *  @param {array|object} rowData The data for the whole row
             *  @param {int} row The row index for the aoData data store
             *  @param {int} col The column index for aoColumns
             *
             *  @name DataTable.defaults.column.createdCell
             *  @dtopt Columns
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [3],
             *          "createdCell": function (td, cellData, rowData, row, col) {
             *            if ( cellData == "1.7" ) {
             *              $(td).css('color', 'blue')
             *            }
             *          }
             *        } ]
             *      });
             *    } );
             */
            fnCreatedCell: null,

            /**
             * This parameter has been replaced by `data` in DataTables to ensure naming
             * consistency. `dataProp` can still be used, as there is backwards
             * compatibility in DataTables for this option, but it is strongly
             * recommended that you use `data` in preference to `dataProp`.
             *  @name DataTable.defaults.column.dataProp
             */

            /**
             * This property can be used to read data from any data source property,
             * including deeply nested objects / properties. `data` can be given in a
             * number of different ways which effect its behaviour:
             *
             * * `integer` - treated as an array index for the data source. This is the
             *   default that DataTables uses (incrementally increased for each column).
             * * `string` - read an object property from the data source. There are
             *   three 'special' options that can be used in the string to alter how
             *   DataTables reads the data from the source object:
             *    * `.` - Dotted Javascript notation. Just as you use a `.` in
             *      Javascript to read from nested objects, so to can the options
             *      specified in `data`. For example: `browser.version` or
             *      `browser.name`. If your object parameter name contains a period, use
             *      `\\` to escape it - i.e. `first\\.name`.
             *    * `[]` - Array notation. DataTables can automatically combine data
             *      from and array source, joining the data with the characters provided
             *      between the two brackets. For example: `name[, ]` would provide a
             *      comma-space separated list from the source array. If no characters
             *      are provided between the brackets, the original array source is
             *      returned.
             *    * `()` - Function notation. Adding `()` to the end of a parameter will
             *      execute a function of the name given. For example: `browser()` for a
             *      simple function on the data source, `browser.version()` for a
             *      function in a nested property or even `browser().version` to get an
             *      object property if the function called returns an object. Note that
             *      function notation is recommended for use in `render` rather than
             *      `data` as it is much simpler to use as a renderer.
             * * `null` - use the original data source for the row rather than plucking
             *   data directly from it. This action has effects on two other
             *   initialisation options:
             *    * `defaultContent` - When null is given as the `data` option and
             *      `defaultContent` is specified for the column, the value defined by
             *      `defaultContent` will be used for the cell.
             *    * `render` - When null is used for the `data` option and the `render`
             *      option is specified for the column, the whole data source for the
             *      row is used for the renderer.
             * * `function` - the function given will be executed whenever DataTables
             *   needs to set or get the data for a cell in the column. The function
             *   takes three parameters:
             *    * Parameters:
             *      * `{array|object}` The data source for the row
             *      * `{string}` The type call data requested - this will be 'set' when
             *        setting data or 'filter', 'display', 'type', 'sort' or undefined
             *        when gathering data. Note that when `undefined` is given for the
             *        type DataTables expects to get the raw data for the object back<
             *      * `{*}` Data to set when the second parameter is 'set'.
             *    * Return:
             *      * The return value from the function is not required when 'set' is
             *        the type of call, but otherwise the return is what will be used
             *        for the data requested.
             *
             * Note that `data` is a getter and setter option. If you just require
             * formatting of data for output, you will likely want to use `render` which
             * is simply a getter and thus simpler to use.
             *
             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
             * name change reflects the flexibility of this property and is consistent
             * with the naming of mRender. If 'mDataProp' is given, then it will still
             * be used by DataTables, as it automatically maps the old name to the new
             * if required.
             *
             *  @type string|int|function|null
             *  @default null <i>Use automatically calculated column index</i>
             *
             *  @name DataTable.defaults.column.data
             *  @dtopt Columns
             *
             *  @example
             *    // Read table data from objects
             *    // JSON structure for each row:
             *    //   {
             *    //      "engine": {value},
             *    //      "browser": {value},
             *    //      "platform": {value},
             *    //      "version": {value},
             *    //      "grade": {value}
             *    //   }
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/objects.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          { "data": "platform" },
             *          { "data": "version" },
             *          { "data": "grade" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Read information from deeply nested objects
             *    // JSON structure for each row:
             *    //   {
             *    //      "engine": {value},
             *    //      "browser": {value},
             *    //      "platform": {
             *    //         "inner": {value}
             *    //      },
             *    //      "details": [
             *    //         {value}, {value}
             *    //      ]
             *    //   }
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/deep.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          { "data": "platform.inner" },
             *          { "data": "details.0" },
             *          { "data": "details.1" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `data` as a function to provide different information for
             *    // sorting, filtering and display. In this case, currency (price)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": function ( source, type, val ) {
             *            if (type === 'set') {
             *              source.price = val;
             *              // Store the computed dislay and filter values for efficiency
             *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
             *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             *              return;
             *            }
             *            else if (type === 'display') {
             *              return source.price_display;
             *            }
             *            else if (type === 'filter') {
             *              return source.price_filter;
             *            }
             *            // 'sort', 'type' and undefined all just use the integer
             *            return source.price;
             *          }
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using default content
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null,
             *          "defaultContent": "Click to edit"
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using array notation - outputting a list from an array
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": "name[, ]"
             *        } ]
             *      } );
             *    } );
             *
             */
            mData: null,

            /**
             * This property is the rendering partner to `data` and it is suggested that
             * when you want to manipulate data for display (including filtering,
             * sorting etc) without altering the underlying data for the table, use this
             * property. `render` can be considered to be the the read only companion to
             * `data` which is read / write (then as such more complex). Like `data`
             * this option can be given in a number of different ways to effect its
             * behaviour:
             *
             * * `integer` - treated as an array index for the data source. This is the
             *   default that DataTables uses (incrementally increased for each column).
             * * `string` - read an object property from the data source. There are
             *   three 'special' options that can be used in the string to alter how
             *   DataTables reads the data from the source object:
             *    * `.` - Dotted Javascript notation. Just as you use a `.` in
             *      Javascript to read from nested objects, so to can the options
             *      specified in `data`. For example: `browser.version` or
             *      `browser.name`. If your object parameter name contains a period, use
             *      `\\` to escape it - i.e. `first\\.name`.
             *    * `[]` - Array notation. DataTables can automatically combine data
             *      from and array source, joining the data with the characters provided
             *      between the two brackets. For example: `name[, ]` would provide a
             *      comma-space separated list from the source array. If no characters
             *      are provided between the brackets, the original array source is
             *      returned.
             *    * `()` - Function notation. Adding `()` to the end of a parameter will
             *      execute a function of the name given. For example: `browser()` for a
             *      simple function on the data source, `browser.version()` for a
             *      function in a nested property or even `browser().version` to get an
             *      object property if the function called returns an object.
             * * `object` - use different data for the different data types requested by
             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
             *   of the object is the data type the property refers to and the value can
             *   defined using an integer, string or function using the same rules as
             *   `render` normally does. Note that an `_` option _must_ be specified.
             *   This is the default value to use if you haven't specified a value for
             *   the data type requested by DataTables.
             * * `function` - the function given will be executed whenever DataTables
             *   needs to set or get the data for a cell in the column. The function
             *   takes three parameters:
             *    * Parameters:
             *      * {array|object} The data source for the row (based on `data`)
             *      * {string} The type call data requested - this will be 'filter',
             *        'display', 'type' or 'sort'.
             *      * {array|object} The full data source for the row (not based on
             *        `data`)
             *    * Return:
             *      * The return value from the function is what will be used for the
             *        data requested.
             *
             *  @type string|int|function|object|null
             *  @default null Use the data source value.
             *
             *  @name DataTable.defaults.column.render
             *  @dtopt Columns
             *
             *  @example
             *    // Create a comma separated list from an array of objects
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/deep.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          {
             *            "data": "platform",
             *            "render": "[, ].name"
             *          }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Execute a function to obtain data
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null, // Use the full data source object for the renderer's source
             *          "render": "browserName()"
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // As an object, extracting different data for the different types
             *    // This would be used with a data source such as:
             *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
             *    // (which has both forms) is used for filtering for if a user inputs either format, while
             *    // the formatted phone number is the one that is shown in the table.
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null, // Use the full data source object for the renderer's source
             *          "render": {
             *            "_": "phone",
             *            "filter": "phone_filter",
             *            "display": "phone_display"
             *          }
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Use as a function to create a link from the data source
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": "download_link",
             *          "render": function ( data, type, full ) {
             *            return '<a href="'+data+'">Download</a>';
             *          }
             *        } ]
             *      } );
             *    } );
             */
            mRender: null,

            /**
             * Change the cell type created for the column - either TD cells or TH cells. This
             * can be useful as TH cells have semantic meaning in the table body, allowing them
             * to act as a header for a row (you may wish to add scope='row' to the TH elements).
             *  @type string
             *  @default td
             *
             *  @name DataTable.defaults.column.cellType
             *  @dtopt Columns
             *
             *  @example
             *    // Make the first column use TH cells
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "cellType": "th"
             *        } ]
             *      } );
             *    } );
             */
            sCellType: "td",

            /**
             * Class to give to each cell in this column.
             *  @type string
             *  @default <i>Empty string</i>
             *
             *  @name DataTable.defaults.column.class
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "class": "my_class", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "class": "my_class" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            sClass: "",

            /**
             * When DataTables calculates the column widths to assign to each column,
             * it finds the longest string in each column and then constructs a
             * temporary table and reads the widths from that. The problem with this
             * is that "mmm" is much wider then "iiii", but the latter is a longer
             * string - thus the calculation can go wrong (doing it properly and putting
             * it into an DOM object and measuring that is horribly(!) slow). Thus as
             * a "work around" we provide this option. It will append its value to the
             * text that is found to be the longest string for the column - i.e. padding.
             * Generally you shouldn't need this!
             *  @type string
             *  @default <i>Empty string<i>
             *
             *  @name DataTable.defaults.column.contentPadding
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          null,
             *          {
             *            "contentPadding": "mmm"
             *          }
             *        ]
             *      } );
             *    } );
             */
            sContentPadding: "",

            /**
             * Allows a default value to be given for a column's data, and will be used
             * whenever a null data source is encountered (this can be because `data`
             * is set to null, or because the data source itself is null).
             *  @type string
             *  @default null
             *
             *  @name DataTable.defaults.column.defaultContent
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          {
             *            "data": null,
             *            "defaultContent": "Edit",
             *            "targets": [ -1 ]
             *          }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          null,
             *          {
             *            "data": null,
             *            "defaultContent": "Edit"
             *          }
             *        ]
             *      } );
             *    } );
             */
            sDefaultContent: null,

            /**
             * This parameter is only used in DataTables' server-side processing. It can
             * be exceptionally useful to know what columns are being displayed on the
             * client side, and to map these to database fields. When defined, the names
             * also allow DataTables to reorder information from the server if it comes
             * back in an unexpected order (i.e. if you switch your columns around on the
             * client-side, your server-side code does not also need updating).
             *  @type string
             *  @default <i>Empty string</i>
             *
             *  @name DataTable.defaults.column.name
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "name": "engine", "targets": [ 0 ] },
             *          { "name": "browser", "targets": [ 1 ] },
             *          { "name": "platform", "targets": [ 2 ] },
             *          { "name": "version", "targets": [ 3 ] },
             *          { "name": "grade", "targets": [ 4 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "name": "engine" },
             *          { "name": "browser" },
             *          { "name": "platform" },
             *          { "name": "version" },
             *          { "name": "grade" }
             *        ]
             *      } );
             *    } );
             */
            sName: "",

            /**
             * Defines a data source type for the ordering which can be used to read
             * real-time information from the table (updating the internally cached
             * version) prior to ordering. This allows ordering to occur on user
             * editable elements such as form inputs.
             *  @type string
             *  @default std
             *
             *  @name DataTable.defaults.column.orderDataType
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
             *          { "type": "numeric", "targets": [ 3 ] },
             *          { "orderDataType": "dom-select", "targets": [ 4 ] },
             *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          { "orderDataType": "dom-text" },
             *          { "orderDataType": "dom-text", "type": "numeric" },
             *          { "orderDataType": "dom-select" },
             *          { "orderDataType": "dom-checkbox" }
             *        ]
             *      } );
             *    } );
             */
            sSortDataType: "std",

            /**
             * The title of this column.
             *  @type string
             *  @default null <i>Derived from the 'TH' value for this column in the
             *    original HTML table.</i>
             *
             *  @name DataTable.defaults.column.title
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "title": "My column title", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "title": "My column title" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            sTitle: null,

            /**
             * The type allows you to specify how the data for this column will be
             * ordered. Four types (string, numeric, date and html (which will strip
             * HTML tags before ordering)) are currently available. Note that only date
             * formats understood by Javascript's Date() object will be accepted as type
             * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
             * 'numeric', 'date' or 'html' (by default). Further types can be adding
             * through plug-ins.
             *  @type string
             *  @default null <i>Auto-detected from raw data</i>
             *
             *  @name DataTable.defaults.column.type
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "type": "html", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "type": "html" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            sType: null,

            /**
             * Defining the width of the column, this parameter may take any CSS value
             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
             * been given a specific width through this interface ensuring that the table
             * remains readable.
             *  @type string
             *  @default null <i>Automatic</i>
             *
             *  @name DataTable.defaults.column.width
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "width": "20%", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "width": "20%" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            sWidth: null,
          };

          _fnHungarianMap(DataTable.defaults.column);

          /**
           * DataTables settings object - this holds all the information needed for a
           * given table, including configuration, data and current application of the
           * table options. DataTables does not have a single instance for each DataTable
           * with the settings attached to that instance, but rather instances of the
           * DataTable "class" are created on-the-fly as needed (typically by a
           * $().dataTable() call) and the settings object is then applied to that
           * instance.
           *
           * Note that this object is related to {@link DataTable.defaults} but this
           * one is the internal data store for DataTables's cache of columns. It should
           * NOT be manipulated outside of DataTables. Any configuration should be done
           * through the initialisation options.
           *  @namespace
           *  @todo Really should attach the settings object to individual instances so we
           *    don't need to create new instances on each $().dataTable() call (if the
           *    table already exists). It would also save passing oSettings around and
           *    into every single function. However, this is a very significant
           *    architecture change for DataTables and will almost certainly break
           *    backwards compatibility with older installations. This is something that
           *    will be done in 2.0.
           */
          DataTable.models.oSettings = {
            /**
             * Primary features of DataTables and their enablement state.
             *  @namespace
             */
            oFeatures: {
              /**
               * Flag to say if DataTables should automatically try to calculate the
               * optimum table and columns widths (true) or not (false).
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bAutoWidth: null,

              /**
               * Delay the creation of TR and TD elements until they are actually
               * needed by a driven page draw. This can give a significant speed
               * increase for Ajax source and Javascript source data, but makes no
               * difference at all fro DOM and server-side processing tables.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bDeferRender: null,

              /**
               * Enable filtering on the table or not. Note that if this is disabled
               * then there is no filtering at all on the table, including fnFilter.
               * To just remove the filtering input use sDom and remove the 'f' option.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bFilter: null,

              /**
               * Table information element (the 'Showing x of y records' div) enable
               * flag.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bInfo: null,

              /**
               * Present a user control allowing the end user to change the page size
               * when pagination is enabled.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bLengthChange: null,

              /**
               * Pagination enabled or not. Note that if this is disabled then length
               * changing must also be disabled.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bPaginate: null,

              /**
               * Processing indicator enable flag whenever DataTables is enacting a
               * user request - typically an Ajax request for server-side processing.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bProcessing: null,

              /**
               * Server-side processing enabled flag - when enabled DataTables will
               * get all data from the server for every draw - there is no filtering,
               * sorting or paging done on the client-side.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bServerSide: null,

              /**
               * Sorting enablement flag.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bSort: null,

              /**
               * Multi-column sorting
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bSortMulti: null,

              /**
               * Apply a class to the columns which are being sorted to provide a
               * visual highlight or not. This can slow things down when enabled since
               * there is a lot of DOM interaction.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bSortClasses: null,

              /**
               * State saving enablement flag.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bStateSave: null,
            },

            /**
             * Scrolling settings for a table.
             *  @namespace
             */
            oScroll: {
              /**
               * When the table is shorter in height than sScrollY, collapse the
               * table container down to the height of the table (when true).
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type boolean
               */
              bCollapse: null,

              /**
               * Width of the scrollbar for the web-browser's platform. Calculated
               * during table initialisation.
               *  @type int
               *  @default 0
               */
              iBarWidth: 0,

              /**
               * Viewport width for horizontal scrolling. Horizontal scrolling is
               * disabled if an empty string.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type string
               */
              sX: null,

              /**
               * Width to expand the table to when using x-scrolling. Typically you
               * should not need to use this.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type string
               *  @deprecated
               */
              sXInner: null,

              /**
               * Viewport height for vertical scrolling. Vertical scrolling is disabled
               * if an empty string.
               * Note that this parameter will be set by the initialisation routine. To
               * set a default use {@link DataTable.defaults}.
               *  @type string
               */
              sY: null,
            },

            /**
             * Language information for the table.
             *  @namespace
             *  @extends DataTable.defaults.oLanguage
             */
            oLanguage: {
              /**
               * Information callback function. See
               * {@link DataTable.defaults.fnInfoCallback}
               *  @type function
               *  @default null
               */
              fnInfoCallback: null,
            },

            /**
             * Browser support parameters
             *  @namespace
             */
            oBrowser: {
              /**
               * Indicate if the browser incorrectly calculates width:100% inside a
               * scrolling element (IE6/7)
               *  @type boolean
               *  @default false
               */
              bScrollOversize: false,

              /**
               * Determine if the vertical scrollbar is on the right or left of the
               * scrolling container - needed for rtl language layout, although not
               * all browsers move the scrollbar (Safari).
               *  @type boolean
               *  @default false
               */
              bScrollbarLeft: false,

              /**
               * Flag for if `getBoundingClientRect` is fully supported or not
               *  @type boolean
               *  @default false
               */
              bBounding: false,

              /**
               * Browser scrollbar width
               *  @type integer
               *  @default 0
               */
              barWidth: 0,
            },

            ajax: null,

            /**
             * Array referencing the nodes which are used for the features. The
             * parameters of this object match what is allowed by sDom - i.e.
             *   <ul>
             *     <li>'l' - Length changing</li>
             *     <li>'f' - Filtering input</li>
             *     <li>'t' - The table!</li>
             *     <li>'i' - Information</li>
             *     <li>'p' - Pagination</li>
             *     <li>'r' - pRocessing</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            aanFeatures: [],

            /**
             * Store data information - see {@link DataTable.models.oRow} for detailed
             * information.
             *  @type array
             *  @default []
             */
            aoData: [],

            /**
             * Array of indexes which are in the current display (after filtering etc)
             *  @type array
             *  @default []
             */
            aiDisplay: [],

            /**
             * Array of indexes for display - no filtering
             *  @type array
             *  @default []
             */
            aiDisplayMaster: [],

            /**
             * Map of row ids to data indexes
             *  @type object
             *  @default {}
             */
            aIds: {},

            /**
             * Store information about each column that is in use
             *  @type array
             *  @default []
             */
            aoColumns: [],

            /**
             * Store information about the table's header
             *  @type array
             *  @default []
             */
            aoHeader: [],

            /**
             * Store information about the table's footer
             *  @type array
             *  @default []
             */
            aoFooter: [],

            /**
             * Store the applied global search information in case we want to force a
             * research or compare the old search to a new one.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @namespace
             *  @extends DataTable.models.oSearch
             */
            oPreviousSearch: {},

            /**
             * Store the applied search for each column - see
             * {@link DataTable.models.oSearch} for the format that is used for the
             * filtering information for each column.
             *  @type array
             *  @default []
             */
            aoPreSearchCols: [],

            /**
             * Sorting that is applied to the table. Note that the inner arrays are
             * used in the following manner:
             * <ul>
             *   <li>Index 0 - column number</li>
             *   <li>Index 1 - current sorting direction</li>
             * </ul>
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @todo These inner arrays should really be objects
             */
            aaSorting: null,

            /**
             * Sorting that is always applied to the table (i.e. prefixed in front of
             * aaSorting).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            aaSortingFixed: [],

            /**
             * Classes to use for the striping of a table.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            asStripeClasses: null,

            /**
             * If restoring a table - we should restore its striping classes as well
             *  @type array
             *  @default []
             */
            asDestroyStripes: [],

            /**
             * If restoring a table - we should restore its width
             *  @type int
             *  @default 0
             */
            sDestroyWidth: 0,

            /**
             * Callback functions array for every time a row is inserted (i.e. on a draw).
             *  @type array
             *  @default []
             */
            aoRowCallback: [],

            /**
             * Callback functions for the header on each draw.
             *  @type array
             *  @default []
             */
            aoHeaderCallback: [],

            /**
             * Callback function for the footer on each draw.
             *  @type array
             *  @default []
             */
            aoFooterCallback: [],

            /**
             * Array of callback functions for draw callback functions
             *  @type array
             *  @default []
             */
            aoDrawCallback: [],

            /**
             * Array of callback functions for row created function
             *  @type array
             *  @default []
             */
            aoRowCreatedCallback: [],

            /**
             * Callback functions for just before the table is redrawn. A return of
             * false will be used to cancel the draw.
             *  @type array
             *  @default []
             */
            aoPreDrawCallback: [],

            /**
             * Callback functions for when the table has been initialised.
             *  @type array
             *  @default []
             */
            aoInitComplete: [],

            /**
             * Callbacks for modifying the settings to be stored for state saving, prior to
             * saving state.
             *  @type array
             *  @default []
             */
            aoStateSaveParams: [],

            /**
             * Callbacks for modifying the settings that have been stored for state saving
             * prior to using the stored values to restore the state.
             *  @type array
             *  @default []
             */
            aoStateLoadParams: [],

            /**
             * Callbacks for operating on the settings object once the saved state has been
             * loaded
             *  @type array
             *  @default []
             */
            aoStateLoaded: [],

            /**
             * Cache the table ID for quick access
             *  @type string
             *  @default <i>Empty string</i>
             */
            sTableId: "",

            /**
             * The TABLE node for the main table
             *  @type node
             *  @default null
             */
            nTable: null,

            /**
             * Permanent ref to the thead element
             *  @type node
             *  @default null
             */
            nTHead: null,

            /**
             * Permanent ref to the tfoot element - if it exists
             *  @type node
             *  @default null
             */
            nTFoot: null,

            /**
             * Permanent ref to the tbody element
             *  @type node
             *  @default null
             */
            nTBody: null,

            /**
             * Cache the wrapper node (contains all DataTables controlled elements)
             *  @type node
             *  @default null
             */
            nTableWrapper: null,

            /**
             * Indicate if when using server-side processing the loading of data
             * should be deferred until the second draw.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             *  @default false
             */
            bDeferLoading: false,

            /**
             * Indicate if all required information has been read in
             *  @type boolean
             *  @default false
             */
            bInitialised: false,

            /**
             * Information about open rows. Each object in the array has the parameters
             * 'nTr' and 'nParent'
             *  @type array
             *  @default []
             */
            aoOpenRows: [],

            /**
             * Dictate the positioning of DataTables' control elements - see
             * {@link DataTable.model.oInit.sDom}.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default null
             */
            sDom: null,

            /**
             * Search delay (in mS)
             *  @type integer
             *  @default null
             */
            searchDelay: null,

            /**
             * Which type of pagination should be used.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default two_button
             */
            sPaginationType: "two_button",

            /**
             * The state duration (for `stateSave`) in seconds.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type int
             *  @default 0
             */
            iStateDuration: 0,

            /**
             * Array of callback functions for state saving. Each array element is an
             * object with the following parameters:
             *   <ul>
             *     <li>function:fn - function to call. Takes two parameters, oSettings
             *       and the JSON string to save that has been thus far created. Returns
             *       a JSON string to be inserted into a json object
             *       (i.e. '"param": [ 0, 1, 2]')</li>
             *     <li>string:sName - name of callback</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            aoStateSave: [],

            /**
             * Array of callback functions for state loading. Each array element is an
             * object with the following parameters:
             *   <ul>
             *     <li>function:fn - function to call. Takes two parameters, oSettings
             *       and the object stored. May return false to cancel state loading</li>
             *     <li>string:sName - name of callback</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            aoStateLoad: [],

            /**
             * State that was saved. Useful for back reference
             *  @type object
             *  @default null
             */
            oSavedState: null,

            /**
             * State that was loaded. Useful for back reference
             *  @type object
             *  @default null
             */
            oLoadedState: null,

            /**
             * Source url for AJAX data for the table.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default null
             */
            sAjaxSource: null,

            /**
             * Property from a given object from which to read the table data from. This
             * can be an empty string (when not server-side processing), in which case
             * it is  assumed an an array is given directly.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            sAjaxDataProp: null,

            /**
             * Note if draw should be blocked while getting data
             *  @type boolean
             *  @default true
             */
            bAjaxDataGet: true,

            /**
             * The last jQuery XHR object that was used for server-side data gathering.
             * This can be used for working with the XHR information in one of the
             * callbacks
             *  @type object
             *  @default null
             */
            jqXHR: null,

            /**
             * JSON returned from the server in the last Ajax request
             *  @type object
             *  @default undefined
             */
            json: undefined,

            /**
             * Data submitted as part of the last Ajax request
             *  @type object
             *  @default undefined
             */
            oAjaxData: undefined,

            /**
             * Function to get the server-side data.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type function
             */
            fnServerData: null,

            /**
             * Functions which are called prior to sending an Ajax request so extra
             * parameters can easily be sent to the server
             *  @type array
             *  @default []
             */
            aoServerParams: [],

            /**
             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
             * required).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            sServerMethod: null,

            /**
             * Format numbers for display.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type function
             */
            fnFormatNumber: null,

            /**
             * List of options that can be used for the user selectable length menu.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            aLengthMenu: null,

            /**
             * Counter for the draws that the table does. Also used as a tracker for
             * server-side processing
             *  @type int
             *  @default 0
             */
            iDraw: 0,

            /**
             * Indicate if a redraw is being done - useful for Ajax
             *  @type boolean
             *  @default false
             */
            bDrawing: false,

            /**
             * Draw index (iDraw) of the last error when parsing the returned data
             *  @type int
             *  @default -1
             */
            iDrawError: -1,

            /**
             * Paging display length
             *  @type int
             *  @default 10
             */
            _iDisplayLength: 10,

            /**
             * Paging start point - aiDisplay index
             *  @type int
             *  @default 0
             */
            _iDisplayStart: 0,

            /**
             * Server-side processing - number of records in the result set
             * (i.e. before filtering), Use fnRecordsTotal rather than
             * this property to get the value of the number of records, regardless of
             * the server-side processing setting.
             *  @type int
             *  @default 0
             *  @private
             */
            _iRecordsTotal: 0,

            /**
             * Server-side processing - number of records in the current display set
             * (i.e. after filtering). Use fnRecordsDisplay rather than
             * this property to get the value of the number of records, regardless of
             * the server-side processing setting.
             *  @type boolean
             *  @default 0
             *  @private
             */
            _iRecordsDisplay: 0,

            /**
             * The classes to use for the table
             *  @type object
             *  @default {}
             */
            oClasses: {},

            /**
             * Flag attached to the settings object so you can check in the draw
             * callback if filtering has been done in the draw. Deprecated in favour of
             * events.
             *  @type boolean
             *  @default false
             *  @deprecated
             */
            bFiltered: false,

            /**
             * Flag attached to the settings object so you can check in the draw
             * callback if sorting has been done in the draw. Deprecated in favour of
             * events.
             *  @type boolean
             *  @default false
             *  @deprecated
             */
            bSorted: false,

            /**
             * Indicate that if multiple rows are in the header and there is more than
             * one unique cell per column, if the top one (true) or bottom one (false)
             * should be used for sorting / title by DataTables.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            bSortCellsTop: null,

            /**
             * Initialisation object that is used for the table
             *  @type object
             *  @default null
             */
            oInit: null,

            /**
             * Destroy callback functions - for plug-ins to attach themselves to the
             * destroy so they can clean up markup and events.
             *  @type array
             *  @default []
             */
            aoDestroyCallback: [],

            /**
             * Get the number of records in the current record set, before filtering
             *  @type function
             */
            fnRecordsTotal: function() {
              return _fnDataSource(this) == "ssp"
                ? this._iRecordsTotal * 1
                : this.aiDisplayMaster.length;
            },

            /**
             * Get the number of records in the current record set, after filtering
             *  @type function
             */
            fnRecordsDisplay: function() {
              return _fnDataSource(this) == "ssp"
                ? this._iRecordsDisplay * 1
                : this.aiDisplay.length;
            },

            /**
             * Get the display end point - aiDisplay index
             *  @type function
             */
            fnDisplayEnd: function() {
              var len = this._iDisplayLength,
                start = this._iDisplayStart,
                calc = start + len,
                records = this.aiDisplay.length,
                features = this.oFeatures,
                paginate = features.bPaginate;

              if (features.bServerSide) {
                return paginate === false || len === -1
                  ? start + records
                  : Math.min(start + len, this._iRecordsDisplay);
              } else {
                return !paginate || calc > records || len === -1
                  ? records
                  : calc;
              }
            },

            /**
             * The DataTables object for this table
             *  @type object
             *  @default null
             */
            oInstance: null,

            /**
             * Unique identifier for each instance of the DataTables object. If there
             * is an ID on the table node, then it takes that value, otherwise an
             * incrementing internal counter is used.
             *  @type string
             *  @default null
             */
            sInstance: null,

            /**
             * tabindex attribute value that is added to DataTables control elements, allowing
             * keyboard navigation of the table and its controls.
             */
            iTabIndex: 0,

            /**
             * DIV container for the footer scrolling table if scrolling
             */
            nScrollHead: null,

            /**
             * DIV container for the footer scrolling table if scrolling
             */
            nScrollFoot: null,

            /**
             * Last applied sort
             *  @type array
             *  @default []
             */
            aLastSort: [],

            /**
             * Stored plug-in instances
             *  @type object
             *  @default {}
             */
            oPlugins: {},

            /**
             * Function used to get a row's id from the row's data
             *  @type function
             *  @default null
             */
            rowIdFn: null,

            /**
             * Data location where to store a row's id
             *  @type string
             *  @default null
             */
            rowId: null,
          };

          /**
           * Extension object for DataTables that is used to provide all extension
           * options.
           *
           * Note that the `DataTable.ext` object is available through
           * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
           * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
           *  @namespace
           *  @extends DataTable.models.ext
           */

          /**
           * DataTables extensions
           *
           * This namespace acts as a collection area for plug-ins that can be used to
           * extend DataTables capabilities. Indeed many of the build in methods
           * use this method to provide their own capabilities (sorting methods for
           * example).
           *
           * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
           * reasons
           *
           *  @namespace
           */
          DataTable.ext = _ext = {
            /**
             * Buttons. For use with the Buttons extension for DataTables. This is
             * defined here so other extensions can define buttons regardless of load
             * order. It is _not_ used by DataTables core.
             *
             *  @type object
             *  @default {}
             */
            buttons: {},

            /**
             * Element class names
             *
             *  @type object
             *  @default {}
             */
            classes: {},

            /**
             * DataTables build type (expanded by the download builder)
             *
             *  @type string
             */
            builder: "-source-",

            /**
             * Error reporting.
             *
             * How should DataTables report an error. Can take the value 'alert',
             * 'throw', 'none' or a function.
             *
             *  @type string|function
             *  @default alert
             */
            errMode: "alert",

            /**
             * Feature plug-ins.
             *
             * This is an array of objects which describe the feature plug-ins that are
             * available to DataTables. These feature plug-ins are then available for
             * use through the `dom` initialisation option.
             *
             * Each feature plug-in is described by an object which must have the
             * following properties:
             *
             * * `fnInit` - function that is used to initialise the plug-in,
             * * `cFeature` - a character so the feature can be enabled by the `dom`
             *   instillation option. This is case sensitive.
             *
             * The `fnInit` function has the following input parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             *
             * And the following return is expected:
             *
             * * {node|null} The element which contains your feature. Note that the
             *   return may also be void if your plug-in does not require to inject any
             *   DOM elements into DataTables control (`dom`) - for example this might
             *   be useful when developing a plug-in which allows table control via
             *   keyboard entry
             *
             *  @type array
             *
             *  @example
             *    $.fn.dataTable.ext.features.push( {
             *      "fnInit": function( oSettings ) {
             *        return new TableTools( { "oDTSettings": oSettings } );
             *      },
             *      "cFeature": "T"
             *    } );
             */
            feature: [],

            /**
             * Row searching.
             *
             * This method of searching is complimentary to the default type based
             * searching, and a lot more comprehensive as it allows you complete control
             * over the searching logic. Each element in this array is a function
             * (parameters described below) that is called for every row in the table,
             * and your logic decides if it should be included in the searching data set
             * or not.
             *
             * Searching functions have the following input parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             * 2. `{array|object}` Data for the row to be processed (same as the
             *    original format that was passed in as the data source, or an array
             *    from a DOM data source
             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
             *    can be useful to retrieve the `TR` element if you need DOM interaction.
             *
             * And the following return is expected:
             *
             * * {boolean} Include the row in the searched result set (true) or not
             *   (false)
             *
             * Note that as with the main search ability in DataTables, technically this
             * is "filtering", since it is subtractive. However, for consistency in
             * naming we call it searching here.
             *
             *  @type array
             *  @default []
             *
             *  @example
             *    // The following example shows custom search being applied to the
             *    // fourth column (i.e. the data[3] index) based on two input values
             *    // from the end-user, matching the data in a certain range.
             *    $.fn.dataTable.ext.search.push(
             *      function( settings, data, dataIndex ) {
             *        var min = document.getElementById('min').value * 1;
             *        var max = document.getElementById('max').value * 1;
             *        var version = data[3] == "-" ? 0 : data[3]*1;
             *
             *        if ( min == "" && max == "" ) {
             *          return true;
             *        }
             *        else if ( min == "" && version < max ) {
             *          return true;
             *        }
             *        else if ( min < version && "" == max ) {
             *          return true;
             *        }
             *        else if ( min < version && version < max ) {
             *          return true;
             *        }
             *        return false;
             *      }
             *    );
             */
            search: [],

            /**
             * Selector extensions
             *
             * The `selector` option can be used to extend the options available for the
             * selector modifier options (`selector-modifier` object data type) that
             * each of the three built in selector types offer (row, column and cell +
             * their plural counterparts). For example the Select extension uses this
             * mechanism to provide an option to select only rows, columns and cells
             * that have been marked as selected by the end user (`{selected: true}`),
             * which can be used in conjunction with the existing built in selector
             * options.
             *
             * Each property is an array to which functions can be pushed. The functions
             * take three attributes:
             *
             * * Settings object for the host table
             * * Options object (`selector-modifier` object type)
             * * Array of selected item indexes
             *
             * The return is an array of the resulting item indexes after the custom
             * selector has been applied.
             *
             *  @type object
             */
            selector: {
              cell: [],
              column: [],
              row: [],
            },

            /**
             * Internal functions, exposed for used in plug-ins.
             *
             * Please note that you should not need to use the internal methods for
             * anything other than a plug-in (and even then, try to avoid if possible).
             * The internal function may change between releases.
             *
             *  @type object
             *  @default {}
             */
            internal: {},

            /**
             * Legacy configuration options. Enable and disable legacy options that
             * are available in DataTables.
             *
             *  @type object
             */
            legacy: {
              /**
               * Enable / disable DataTables 1.9 compatible server-side processing
               * requests
               *
               *  @type boolean
               *  @default null
               */
              ajax: null,
            },

            /**
             * Pagination plug-in methods.
             *
             * Each entry in this object is a function and defines which buttons should
             * be shown by the pagination rendering method that is used for the table:
             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
             * buttons are displayed in the document, while the functions here tell it
             * what buttons to display. This is done by returning an array of button
             * descriptions (what each button will do).
             *
             * Pagination types (the four built in options and any additional plug-in
             * options defined here) can be used through the `paginationType`
             * initialisation parameter.
             *
             * The functions defined take two parameters:
             *
             * 1. `{int} page` The current page index
             * 2. `{int} pages` The number of pages in the table
             *
             * Each function is expected to return an array where each element of the
             * array can be one of:
             *
             * * `first` - Jump to first page when activated
             * * `last` - Jump to last page when activated
             * * `previous` - Show previous page when activated
             * * `next` - Show next page when activated
             * * `{int}` - Show page of the index given
             * * `{array}` - A nested array containing the above elements to add a
             *   containing 'DIV' element (might be useful for styling).
             *
             * Note that DataTables v1.9- used this object slightly differently whereby
             * an object with two functions would be defined for each plug-in. That
             * ability is still supported by DataTables 1.10+ to provide backwards
             * compatibility, but this option of use is now decremented and no longer
             * documented in DataTables 1.10+.
             *
             *  @type object
             *  @default {}
             *
             *  @example
             *    // Show previous, next and current page buttons only
             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
             *      return [ 'previous', page, 'next' ];
             *    };
             */
            pager: {},

            renderer: {
              pageButton: {},
              header: {},
            },

            /**
             * Ordering plug-ins - custom data source
             *
             * The extension options for ordering of data available here is complimentary
             * to the default type based ordering that DataTables typically uses. It
             * allows much greater control over the the data that is being used to
             * order a column, but is necessarily therefore more complex.
             *
             * This type of ordering is useful if you want to do ordering based on data
             * live from the DOM (for example the contents of an 'input' element) rather
             * than just the static string that DataTables knows of.
             *
             * The way these plug-ins work is that you create an array of the values you
             * wish to be ordering for the column in question and then return that
             * array. The data in the array much be in the index order of the rows in
             * the table (not the currently ordering order!). Which order data gathering
             * function is run here depends on the `dt-init columns.orderDataType`
             * parameter that is used for the column (if any).
             *
             * The functions defined take two parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             * 2. `{int}` Target column index
             *
             * Each function is expected to return an array:
             *
             * * `{array}` Data for the column to be ordering upon
             *
             *  @type array
             *
             *  @example
             *    // Ordering using `input` node values
             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
             *    {
             *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
             *        return $('input', td).val();
             *      } );
             *    }
             */
            order: {},

            /**
             * Type based plug-ins.
             *
             * Each column in DataTables has a type assigned to it, either by automatic
             * detection or by direct assignment using the `type` option for the column.
             * The type of a column will effect how it is ordering and search (plug-ins
             * can also make use of the column type if required).
             *
             * @namespace
             */
            type: {
              /**
               * Type detection functions.
               *
               * The functions defined in this object are used to automatically detect
               * a column's type, making initialisation of DataTables super easy, even
               * when complex data is in the table.
               *
               * The functions defined take two parameters:
               *
               *  1. `{*}` Data from the column cell to be analysed
               *  2. `{settings}` DataTables settings object. This can be used to
               *     perform context specific type detection - for example detection
               *     based on language settings such as using a comma for a decimal
               *     place. Generally speaking the options from the settings will not
               *     be required
               *
               * Each function is expected to return:
               *
               * * `{string|null}` Data type detected, or null if unknown (and thus
               *   pass it on to the other type detection functions.
               *
               *  @type array
               *
               *  @example
               *    // Currency type detection plug-in:
               *    $.fn.dataTable.ext.type.detect.push(
               *      function ( data, settings ) {
               *        // Check the numeric part
               *        if ( ! data.substring(1).match(/[0-9]/) ) {
               *          return null;
               *        }
               *
               *        // Check prefixed by currency
               *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
               *          return 'currency';
               *        }
               *        return null;
               *      }
               *    );
               */
              detect: [],

              /**
               * Type based search formatting.
               *
               * The type based searching functions can be used to pre-format the
               * data to be search on. For example, it can be used to strip HTML
               * tags or to de-format telephone numbers for numeric only searching.
               *
               * Note that is a search is not defined for a column of a given type,
               * no search formatting will be performed.
               *
               * Pre-processing of searching data plug-ins - When you assign the sType
               * for a column (or have it automatically detected for you by DataTables
               * or a type detection plug-in), you will typically be using this for
               * custom sorting, but it can also be used to provide custom searching
               * by allowing you to pre-processing the data and returning the data in
               * the format that should be searched upon. This is done by adding
               * functions this object with a parameter name which matches the sType
               * for that target column. This is the corollary of <i>afnSortData</i>
               * for searching data.
               *
               * The functions defined take a single parameter:
               *
               *  1. `{*}` Data from the column cell to be prepared for searching
               *
               * Each function is expected to return:
               *
               * * `{string|null}` Formatted string that will be used for the searching.
               *
               *  @type object
               *  @default {}
               *
               *  @example
               *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
               *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
               *    }
               */
              search: {},

              /**
               * Type based ordering.
               *
               * The column type tells DataTables what ordering to apply to the table
               * when a column is sorted upon. The order for each type that is defined,
               * is defined by the functions available in this object.
               *
               * Each ordering option can be described by three properties added to
               * this object:
               *
               * * `{type}-pre` - Pre-formatting function
               * * `{type}-asc` - Ascending order function
               * * `{type}-desc` - Descending order function
               *
               * All three can be used together, only `{type}-pre` or only
               * `{type}-asc` and `{type}-desc` together. It is generally recommended
               * that only `{type}-pre` is used, as this provides the optimal
               * implementation in terms of speed, although the others are provided
               * for compatibility with existing Javascript sort functions.
               *
               * `{type}-pre`: Functions defined take a single parameter:
               *
               *  1. `{*}` Data from the column cell to be prepared for ordering
               *
               * And return:
               *
               * * `{*}` Data to be sorted upon
               *
               * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
               * functions, taking two parameters:
               *
               *  1. `{*}` Data to compare to the second parameter
               *  2. `{*}` Data to compare to the first parameter
               *
               * And returning:
               *
               * * `{*}` Ordering match: <0 if first parameter should be sorted lower
               *   than the second parameter, ===0 if the two parameters are equal and
               *   >0 if the first parameter should be sorted height than the second
               *   parameter.
               *
               *  @type object
               *  @default {}
               *
               *  @example
               *    // Numeric ordering of formatted numbers with a pre-formatter
               *    $.extend( $.fn.dataTable.ext.type.order, {
               *      "string-pre": function(x) {
               *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
               *        return parseFloat( a );
               *      }
               *    } );
               *
               *  @example
               *    // Case-sensitive string ordering, with no pre-formatting method
               *    $.extend( $.fn.dataTable.ext.order, {
               *      "string-case-asc": function(x,y) {
               *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
               *      },
               *      "string-case-desc": function(x,y) {
               *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
               *      }
               *    } );
               */
              order: {},
            },

            /**
             * Unique DataTables instance counter
             *
             * @type int
             * @private
             */
            _unique: 0,

            //
            // Depreciated
            // The following properties are retained for backwards compatiblity only.
            // The should not be used in new projects and will be removed in a future
            // version
            //

            /**
             * Version check function.
             *  @type function
             *  @depreciated Since 1.10
             */
            fnVersionCheck: DataTable.fnVersionCheck,

            /**
             * Index for what 'this' index API functions should use
             *  @type int
             *  @deprecated Since v1.10
             */
            iApiIndex: 0,

            /**
             * jQuery UI class container
             *  @type object
             *  @deprecated Since v1.10
             */
            oJUIClasses: {},

            /**
             * Software version
             *  @type string
             *  @deprecated Since v1.10
             */
            sVersion: DataTable.version,
          };

          //
          // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
          //
          $.extend(_ext, {
            afnFiltering: _ext.search,
            aTypes: _ext.type.detect,
            ofnSearch: _ext.type.search,
            oSort: _ext.type.order,
            afnSortData: _ext.order,
            aoFeatures: _ext.feature,
            oApi: _ext.internal,
            oStdClasses: _ext.classes,
            oPagination: _ext.pager,
          });

          $.extend(DataTable.ext.classes, {
            sTable: "dataTable",
            sNoFooter: "no-footer",

            /* Paging buttons */
            sPageButton: "paginate_button",
            sPageButtonActive: "current",
            sPageButtonDisabled: "disabled",

            /* Striping classes */
            sStripeOdd: "odd",
            sStripeEven: "even",

            /* Empty row */
            sRowEmpty: "dataTables_empty",

            /* Features */
            sWrapper: "dataTables_wrapper",
            sFilter: "dataTables_filter",
            sInfo: "dataTables_info",
            sPaging:
              "dataTables_paginate paging_" /* Note that the type is postfixed */,
            sLength: "dataTables_length",
            sProcessing: "dataTables_processing",

            /* Sorting */
            sSortAsc: "sorting_asc",
            sSortDesc: "sorting_desc",
            sSortable: "sorting" /* Sortable in both directions */,
            sSortableAsc: "sorting_asc_disabled",
            sSortableDesc: "sorting_desc_disabled",
            sSortableNone: "sorting_disabled",
            sSortColumn:
              "sorting_" /* Note that an int is postfixed for the sorting order */,

            /* Filtering */
            sFilterInput: "",

            /* Page length */
            sLengthSelect: "",

            /* Scrolling */
            sScrollWrapper: "dataTables_scroll",
            sScrollHead: "dataTables_scrollHead",
            sScrollHeadInner: "dataTables_scrollHeadInner",
            sScrollBody: "dataTables_scrollBody",
            sScrollFoot: "dataTables_scrollFoot",
            sScrollFootInner: "dataTables_scrollFootInner",

            /* Misc */
            sHeaderTH: "",
            sFooterTH: "",

            // Deprecated
            sSortJUIAsc: "",
            sSortJUIDesc: "",
            sSortJUI: "",
            sSortJUIAscAllowed: "",
            sSortJUIDescAllowed: "",
            sSortJUIWrapper: "",
            sSortIcon: "",
            sJUIHeader: "",
            sJUIFooter: "",
          });

          var extPagination = DataTable.ext.pager;

          function _numbers(page, pages) {
            var numbers = [],
              buttons = extPagination.numbers_length,
              half = Math.floor(buttons / 2),
              i = 1;

            if (pages <= buttons) {
              numbers = _range(0, pages);
            } else if (page <= half) {
              numbers = _range(0, buttons - 2);
              numbers.push("ellipsis");
              numbers.push(pages - 1);
            } else if (page >= pages - 1 - half) {
              numbers = _range(pages - (buttons - 2), pages);
              numbers.splice(0, 0, "ellipsis"); // no unshift in ie6
              numbers.splice(0, 0, 0);
            } else {
              numbers = _range(page - half + 2, page + half - 1);
              numbers.push("ellipsis");
              numbers.push(pages - 1);
              numbers.splice(0, 0, "ellipsis");
              numbers.splice(0, 0, 0);
            }

            numbers.DT_el = "span";
            return numbers;
          }

          $.extend(extPagination, {
            simple: function(page, pages) {
              return ["previous", "next"];
            },

            full: function(page, pages) {
              return ["first", "previous", "next", "last"];
            },

            numbers: function(page, pages) {
              return [_numbers(page, pages)];
            },

            simple_numbers: function(page, pages) {
              return ["previous", _numbers(page, pages), "next"];
            },

            full_numbers: function(page, pages) {
              return [
                "first",
                "previous",
                _numbers(page, pages),
                "next",
                "last",
              ];
            },

            first_last_numbers: function(page, pages) {
              return ["first", _numbers(page, pages), "last"];
            },

            // For testing and plug-ins to use
            _numbers: _numbers,

            // Number of number buttons (including ellipsis) to show. _Must be odd!_
            numbers_length: 7,
          });

          $.extend(true, DataTable.ext.renderer, {
            pageButton: {
              _: function(settings, host, idx, buttons, page, pages) {
                var classes = settings.oClasses;
                var lang = settings.oLanguage.oPaginate;
                var aria = settings.oLanguage.oAria.paginate || {};
                var btnDisplay,
                  btnClass,
                  counter = 0;

                var attach = function(container, buttons) {
                  var i, ien, node, button, tabIndex;
                  var disabledClass = classes.sPageButtonDisabled;
                  var clickHandler = function(e) {
                    _fnPageChange(settings, e.data.action, true);
                  };

                  for (i = 0, ien = buttons.length; i < ien; i++) {
                    button = buttons[i];

                    if ($.isArray(button)) {
                      var inner = $(
                        "<" + (button.DT_el || "div") + "/>"
                      ).appendTo(container);
                      attach(inner, button);
                    } else {
                      btnDisplay = null;
                      btnClass = button;
                      tabIndex = settings.iTabIndex;

                      switch (button) {
                        case "ellipsis":
                          container.append(
                            '<span class="ellipsis">&#x2026;</span>'
                          );
                          break;

                        case "first":
                          btnDisplay = lang.sFirst;

                          if (page === 0) {
                            tabIndex = -1;
                            btnClass += " " + disabledClass;
                          }
                          break;

                        case "previous":
                          btnDisplay = lang.sPrevious;

                          if (page === 0) {
                            tabIndex = -1;
                            btnClass += " " + disabledClass;
                          }
                          break;

                        case "next":
                          btnDisplay = lang.sNext;

                          if (pages === 0 || page === pages - 1) {
                            tabIndex = -1;
                            btnClass += " " + disabledClass;
                          }
                          break;

                        case "last":
                          btnDisplay = lang.sLast;

                          if (page === pages - 1) {
                            tabIndex = -1;
                            btnClass += " " + disabledClass;
                          }
                          break;

                        default:
                          btnDisplay = button + 1;
                          btnClass =
                            page === button ? classes.sPageButtonActive : "";
                          break;
                      }

                      if (btnDisplay !== null) {
                        node = $("<a>", {
                          class: classes.sPageButton + " " + btnClass,
                          "aria-controls": settings.sTableId,
                          "aria-label": aria[button],
                          "data-dt-idx": counter,
                          tabindex: tabIndex,
                          id:
                            idx === 0 && typeof button === "string"
                              ? settings.sTableId + "_" + button
                              : null,
                        })
                          .html(btnDisplay)
                          .appendTo(container);

                        _fnBindAction(node, { action: button }, clickHandler);

                        counter++;
                      }
                    }
                  }
                };

                // IE9 throws an 'unknown error' if document.activeElement is used
                // inside an iframe or frame. Try / catch the error. Not good for
                // accessibility, but neither are frames.
                var activeEl;

                try {
                  // Because this approach is destroying and recreating the paging
                  // elements, focus is lost on the select button which is bad for
                  // accessibility. So we want to restore focus once the draw has
                  // completed
                  activeEl = $(host)
                    .find(document.activeElement)
                    .data("dt-idx");
                } catch (e) {}

                attach($(host).empty(), buttons);

                if (activeEl !== undefined) {
                  $(host)
                    .find("[data-dt-idx=" + activeEl + "]")
                    .trigger("focus");
                }
              },
            },
          });

          // Built in type detection. See model.ext.aTypes for information about
          // what is required from this methods.
          $.extend(DataTable.ext.type.detect, [
            // Plain numbers - first since V8 detects some plain numbers as dates
            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
            function(d, settings) {
              var decimal = settings.oLanguage.sDecimal;
              return _isNumber(d, decimal) ? "num" + decimal : null;
            },

            // Dates (only those recognised by the browser's Date.parse)
            function(d, settings) {
              // V8 tries _very_ hard to make a string passed into `Date.parse()`
              // valid, so we need to use a regex to restrict date formats. Use a
              // plug-in for anything other than ISO8601 style strings
              if (d && !(d instanceof Date) && !_re_date.test(d)) {
                return null;
              }
              var parsed = Date.parse(d);
              return (parsed !== null && !isNaN(parsed)) || _empty(d)
                ? "date"
                : null;
            },

            // Formatted numbers
            function(d, settings) {
              var decimal = settings.oLanguage.sDecimal;
              return _isNumber(d, decimal, true) ? "num-fmt" + decimal : null;
            },

            // HTML numeric
            function(d, settings) {
              var decimal = settings.oLanguage.sDecimal;
              return _htmlNumeric(d, decimal) ? "html-num" + decimal : null;
            },

            // HTML numeric, formatted
            function(d, settings) {
              var decimal = settings.oLanguage.sDecimal;
              return _htmlNumeric(d, decimal, true)
                ? "html-num-fmt" + decimal
                : null;
            },

            // HTML (this is strict checking - there must be html)
            function(d, settings) {
              return _empty(d) ||
                (typeof d === "string" && d.indexOf("<") !== -1)
                ? "html"
                : null;
            },
          ]);

          // Filter formatting functions. See model.ext.ofnSearch for information about
          // what is required from these methods.
          //
          // Note that additional search methods are added for the html numbers and
          // html formatted numbers by `_addNumericSort()` when we know what the decimal
          // place is

          $.extend(DataTable.ext.type.search, {
            html: function(data) {
              return _empty(data)
                ? data
                : typeof data === "string"
                ? data.replace(_re_new_lines, " ").replace(_re_html, "")
                : "";
            },

            string: function(data) {
              return _empty(data)
                ? data
                : typeof data === "string"
                ? data.replace(_re_new_lines, " ")
                : data;
            },
          });

          var __numericReplace = function(d, decimalPlace, re1, re2) {
            if (d !== 0 && (!d || d === "-")) {
              return -Infinity;
            }

            // If a decimal place other than `.` is used, it needs to be given to the
            // function so we can detect it and replace with a `.` which is the only
            // decimal place Javascript recognises - it is not locale aware.
            if (decimalPlace) {
              d = _numToDecimal(d, decimalPlace);
            }

            if (d.replace) {
              if (re1) {
                d = d.replace(re1, "");
              }

              if (re2) {
                d = d.replace(re2, "");
              }
            }

            return d * 1;
          };

          // Add the numeric 'deformatting' functions for sorting and search. This is done
          // in a function to provide an easy ability for the language options to add
          // additional methods if a non-period decimal place is used.
          function _addNumericSort(decimalPlace) {
            $.each(
              {
                // Plain numbers
                num: function(d) {
                  return __numericReplace(d, decimalPlace);
                },

                // Formatted numbers
                "num-fmt": function(d) {
                  return __numericReplace(
                    d,
                    decimalPlace,
                    _re_formatted_numeric
                  );
                },

                // HTML numeric
                "html-num": function(d) {
                  return __numericReplace(d, decimalPlace, _re_html);
                },

                // HTML numeric, formatted
                "html-num-fmt": function(d) {
                  return __numericReplace(
                    d,
                    decimalPlace,
                    _re_html,
                    _re_formatted_numeric
                  );
                },
              },
              function(key, fn) {
                // Add the ordering method
                _ext.type.order[key + decimalPlace + "-pre"] = fn;

                // For HTML types add a search formatter that will strip the HTML
                if (key.match(/^html\-/)) {
                  _ext.type.search[key + decimalPlace] = _ext.type.search.html;
                }
              }
            );
          }

          // Default sort methods
          $.extend(_ext.type.order, {
            // Dates
            "date-pre": function(d) {
              var ts = Date.parse(d);
              return isNaN(ts) ? -Infinity : ts;
            },

            // html
            "html-pre": function(a) {
              return _empty(a)
                ? ""
                : a.replace
                ? a.replace(/<.*?>/g, "").toLowerCase()
                : a + "";
            },

            // string
            "string-pre": function(a) {
              // This is a little complex, but faster than always calling toString,
              // http://jsperf.com/tostring-v-check
              return _empty(a)
                ? ""
                : typeof a === "string"
                ? a.toLowerCase()
                : !a.toString
                ? ""
                : a.toString();
            },

            // string-asc and -desc are retained only for compatibility with the old
            // sort methods
            "string-asc": function(x, y) {
              return x < y ? -1 : x > y ? 1 : 0;
            },

            "string-desc": function(x, y) {
              return x < y ? 1 : x > y ? -1 : 0;
            },
          });

          // Numeric sorting types - order doesn't matter here
          _addNumericSort("");

          $.extend(true, DataTable.ext.renderer, {
            header: {
              _: function(settings, cell, column, classes) {
                // No additional mark-up required
                // Attach a sort listener to update on sort - note that using the
                // `DT` namespace will allow the event to be removed automatically
                // on destroy, while the `dt` namespaced event is the one we are
                // listening for
                $(settings.nTable).on("order.dt.DT", function(
                  e,
                  ctx,
                  sorting,
                  columns
                ) {
                  if (settings !== ctx) {
                    // need to check this this is the host
                    return; // table, not a nested one
                  }

                  var colIdx = column.idx;

                  cell
                    .removeClass(
                      column.sSortingClass +
                        " " +
                        classes.sSortAsc +
                        " " +
                        classes.sSortDesc
                    )
                    .addClass(
                      columns[colIdx] == "asc"
                        ? classes.sSortAsc
                        : columns[colIdx] == "desc"
                        ? classes.sSortDesc
                        : column.sSortingClass
                    );
                });
              },

              jqueryui: function(settings, cell, column, classes) {
                $("<div/>")
                  .addClass(classes.sSortJUIWrapper)
                  .append(cell.contents())
                  .append(
                    $("<span/>").addClass(
                      classes.sSortIcon + " " + column.sSortingClassJUI
                    )
                  )
                  .appendTo(cell);

                // Attach a sort listener to update on sort
                $(settings.nTable).on("order.dt.DT", function(
                  e,
                  ctx,
                  sorting,
                  columns
                ) {
                  if (settings !== ctx) {
                    return;
                  }

                  var colIdx = column.idx;

                  cell
                    .removeClass(classes.sSortAsc + " " + classes.sSortDesc)
                    .addClass(
                      columns[colIdx] == "asc"
                        ? classes.sSortAsc
                        : columns[colIdx] == "desc"
                        ? classes.sSortDesc
                        : column.sSortingClass
                    );

                  cell
                    .find("span." + classes.sSortIcon)
                    .removeClass(
                      classes.sSortJUIAsc +
                        " " +
                        classes.sSortJUIDesc +
                        " " +
                        classes.sSortJUI +
                        " " +
                        classes.sSortJUIAscAllowed +
                        " " +
                        classes.sSortJUIDescAllowed
                    )
                    .addClass(
                      columns[colIdx] == "asc"
                        ? classes.sSortJUIAsc
                        : columns[colIdx] == "desc"
                        ? classes.sSortJUIDesc
                        : column.sSortingClassJUI
                    );
                });
              },
            },
          });

          /*
           * Public helper functions. These aren't used internally by DataTables, or
           * called by any of the options passed into DataTables, but they can be used
           * externally by developers working with DataTables. They are helper functions
           * to make working with DataTables a little bit easier.
           */

          var __htmlEscapeEntities = function(d) {
            return typeof d === "string"
              ? d
                  .replace(/&/g, "&amp;")
                  .replace(/</g, "&lt;")
                  .replace(/>/g, "&gt;")
                  .replace(/"/g, "&quot;")
              : d;
          };

          /**
           * Helpers for `columns.render`.
           *
           * The options defined here can be used with the `columns.render` initialisation
           * option to provide a display renderer. The following functions are defined:
           *
           * * `number` - Will format numeric data (defined by `columns.data`) for
           *   display, retaining the original unformatted data for sorting and filtering.
           *   It takes 5 parameters:
           *   * `string` - Thousands grouping separator
           *   * `string` - Decimal point indicator
           *   * `integer` - Number of decimal points to show
           *   * `string` (optional) - Prefix.
           *   * `string` (optional) - Postfix (/suffix).
           * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
           *   parameters.
           *
           * @example
           *   // Column definition using the number renderer
           *   {
           *     data: "salary",
           *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
           *   }
           *
           * @namespace
           */
          DataTable.render = {
            number: function(thousands, decimal, precision, prefix, postfix) {
              return {
                display: function(d) {
                  if (typeof d !== "number" && typeof d !== "string") {
                    return d;
                  }

                  var negative = d < 0 ? "-" : "";
                  var flo = parseFloat(d);

                  // If NaN then there isn't much formatting that we can do - just
                  // return immediately, escaping any HTML (this was supposed to
                  // be a number after all)
                  if (isNaN(flo)) {
                    return __htmlEscapeEntities(d);
                  }

                  flo = flo.toFixed(precision);
                  d = Math.abs(flo);

                  var intPart = parseInt(d, 10);
                  var floatPart = precision
                    ? decimal + (d - intPart).toFixed(precision).substring(2)
                    : "";

                  return (
                    negative +
                    (prefix || "") +
                    intPart
                      .toString()
                      .replace(/\B(?=(\d{3})+(?!\d))/g, thousands) +
                    floatPart +
                    (postfix || "")
                  );
                },
              };
            },

            text: function() {
              return {
                display: __htmlEscapeEntities,
                filter: __htmlEscapeEntities,
              };
            },
          };

          /*
           * This is really a good bit rubbish this method of exposing the internal methods
           * publicly... - To be fixed in 2.0 using methods on the prototype
           */

          /**
           * Create a wrapper function for exporting an internal functions to an external API.
           *  @param {string} fn API function name
           *  @returns {function} wrapped function
           *  @memberof DataTable#internal
           */
          function _fnExternApiFunc(fn) {
            return function() {
              var args = [
                _fnSettingsFromNode(this[DataTable.ext.iApiIndex]),
              ].concat(Array.prototype.slice.call(arguments));
              return DataTable.ext.internal[fn].apply(this, args);
            };
          }

          /**
           * Reference to internal functions for use by plug-in developers. Note that
           * these methods are references to internal functions and are considered to be
           * private. If you use these methods, be aware that they are liable to change
           * between versions.
           *  @namespace
           */
          $.extend(DataTable.ext.internal, {
            _fnExternApiFunc: _fnExternApiFunc,
            _fnBuildAjax: _fnBuildAjax,
            _fnAjaxUpdate: _fnAjaxUpdate,
            _fnAjaxParameters: _fnAjaxParameters,
            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
            _fnAjaxDataSrc: _fnAjaxDataSrc,
            _fnAddColumn: _fnAddColumn,
            _fnColumnOptions: _fnColumnOptions,
            _fnAdjustColumnSizing: _fnAdjustColumnSizing,
            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
            _fnColumnIndexToVisible: _fnColumnIndexToVisible,
            _fnVisbleColumns: _fnVisbleColumns,
            _fnGetColumns: _fnGetColumns,
            _fnColumnTypes: _fnColumnTypes,
            _fnApplyColumnDefs: _fnApplyColumnDefs,
            _fnHungarianMap: _fnHungarianMap,
            _fnCamelToHungarian: _fnCamelToHungarian,
            _fnLanguageCompat: _fnLanguageCompat,
            _fnBrowserDetect: _fnBrowserDetect,
            _fnAddData: _fnAddData,
            _fnAddTr: _fnAddTr,
            _fnNodeToDataIndex: _fnNodeToDataIndex,
            _fnNodeToColumnIndex: _fnNodeToColumnIndex,
            _fnGetCellData: _fnGetCellData,
            _fnSetCellData: _fnSetCellData,
            _fnSplitObjNotation: _fnSplitObjNotation,
            _fnGetObjectDataFn: _fnGetObjectDataFn,
            _fnSetObjectDataFn: _fnSetObjectDataFn,
            _fnGetDataMaster: _fnGetDataMaster,
            _fnClearTable: _fnClearTable,
            _fnDeleteIndex: _fnDeleteIndex,
            _fnInvalidate: _fnInvalidate,
            _fnGetRowElements: _fnGetRowElements,
            _fnCreateTr: _fnCreateTr,
            _fnBuildHead: _fnBuildHead,
            _fnDrawHead: _fnDrawHead,
            _fnDraw: _fnDraw,
            _fnReDraw: _fnReDraw,
            _fnAddOptionsHtml: _fnAddOptionsHtml,
            _fnDetectHeader: _fnDetectHeader,
            _fnGetUniqueThs: _fnGetUniqueThs,
            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
            _fnFilterComplete: _fnFilterComplete,
            _fnFilterCustom: _fnFilterCustom,
            _fnFilterColumn: _fnFilterColumn,
            _fnFilter: _fnFilter,
            _fnFilterCreateSearch: _fnFilterCreateSearch,
            _fnEscapeRegex: _fnEscapeRegex,
            _fnFilterData: _fnFilterData,
            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
            _fnUpdateInfo: _fnUpdateInfo,
            _fnInfoMacros: _fnInfoMacros,
            _fnInitialise: _fnInitialise,
            _fnInitComplete: _fnInitComplete,
            _fnLengthChange: _fnLengthChange,
            _fnFeatureHtmlLength: _fnFeatureHtmlLength,
            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
            _fnPageChange: _fnPageChange,
            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
            _fnProcessingDisplay: _fnProcessingDisplay,
            _fnFeatureHtmlTable: _fnFeatureHtmlTable,
            _fnScrollDraw: _fnScrollDraw,
            _fnApplyToChildren: _fnApplyToChildren,
            _fnCalculateColumnWidths: _fnCalculateColumnWidths,
            _fnThrottle: _fnThrottle,
            _fnConvertToWidth: _fnConvertToWidth,
            _fnGetWidestNode: _fnGetWidestNode,
            _fnGetMaxLenString: _fnGetMaxLenString,
            _fnStringToCss: _fnStringToCss,
            _fnSortFlatten: _fnSortFlatten,
            _fnSort: _fnSort,
            _fnSortAria: _fnSortAria,
            _fnSortListener: _fnSortListener,
            _fnSortAttachListener: _fnSortAttachListener,
            _fnSortingClasses: _fnSortingClasses,
            _fnSortData: _fnSortData,
            _fnSaveState: _fnSaveState,
            _fnLoadState: _fnLoadState,
            _fnSettingsFromNode: _fnSettingsFromNode,
            _fnLog: _fnLog,
            _fnMap: _fnMap,
            _fnBindAction: _fnBindAction,
            _fnCallbackReg: _fnCallbackReg,
            _fnCallbackFire: _fnCallbackFire,
            _fnLengthOverflow: _fnLengthOverflow,
            _fnRenderer: _fnRenderer,
            _fnDataSource: _fnDataSource,
            _fnRowAttributes: _fnRowAttributes,
            _fnExtend: _fnExtend,
            _fnCalculateEnd: function() {}, // Used by a lot of plug-ins, but redundant
            // in 1.10, so this dead-end function is
            // added to prevent errors
          });

          // jQuery access
          $.fn.dataTable = DataTable;

          // Provide access to the host jQuery object (circular reference)
          DataTable.$ = $;

          // Legacy aliases
          $.fn.dataTableSettings = DataTable.settings;
          $.fn.dataTableExt = DataTable.ext;

          // With a capital `D` we return a DataTables API instance rather than a
          // jQuery object
          $.fn.DataTable = function(opts) {
            return $(this)
              .dataTable(opts)
              .api();
          };

          // All properties that are available to $.fn.dataTable should also be
          // available on $.fn.DataTable
          $.each(DataTable, function(prop, val) {
            $.fn.DataTable[prop] = val;
          });

          // Information about events fired by DataTables - for documentation.
          /**
           * Draw event, fired whenever the table is redrawn on the page, at the same
           * point as fnDrawCallback. This may be useful for binding events or
           * performing calculations when the table is altered at all.
           *  @name DataTable#draw.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * Search event, fired when the searching applied to the table (using the
           * built-in global search, or column filters) is altered.
           *  @name DataTable#search.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * Page change event, fired when the paging of the table is altered.
           *  @name DataTable#page.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * Order event, fired when the ordering applied to the table is altered.
           *  @name DataTable#order.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * DataTables initialisation complete event, fired when the table is fully
           * drawn, including Ajax data loaded, if Ajax data is required.
           *  @name DataTable#init.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} oSettings DataTables settings object
           *  @param {object} json The JSON object request from the server - only
           *    present if client-side Ajax sourced data is used</li></ol>
           */

          /**
           * State save event, fired when the table has changed state a new state save
           * is required. This event allows modification of the state saving object
           * prior to actually doing the save, including addition or other state
           * properties (for plug-ins) or modification of a DataTables core property.
           *  @name DataTable#stateSaveParams.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} oSettings DataTables settings object
           *  @param {object} json The state information to be saved
           */

          /**
           * State load event, fired when the table is loading state from the stored
           * data, but prior to the settings object being modified by the saved state
           * - allowing modification of the saved state is required or loading of
           * state for a plug-in.
           *  @name DataTable#stateLoadParams.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} oSettings DataTables settings object
           *  @param {object} json The saved state information
           */

          /**
           * State loaded event, fired when state has been loaded from stored data and
           * the settings object has been modified by the loaded data.
           *  @name DataTable#stateLoaded.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} oSettings DataTables settings object
           *  @param {object} json The saved state information
           */

          /**
           * Processing event, fired when DataTables is doing some kind of processing
           * (be it, order, search or anything else). It can be used to indicate to
           * the end user that there is something happening, or that something has
           * finished.
           *  @name DataTable#processing.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} oSettings DataTables settings object
           *  @param {boolean} bShow Flag for if DataTables is doing processing or not
           */

          /**
           * Ajax (XHR) event, fired whenever an Ajax request is completed from a
           * request to made to the server for new data. This event is called before
           * DataTables processed the returned data, so it can also be used to pre-
           * process the data returned from the server, if needed.
           *
           * Note that this trigger is called in `fnServerData`, if you override
           * `fnServerData` and which to use this event, you need to trigger it in you
           * success function.
           *  @name DataTable#xhr.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           *  @param {object} json JSON returned from the server
           *
           *  @example
           *     // Use a custom property returned from the server in another DOM element
           *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
           *       $('#status').html( json.status );
           *     } );
           *
           *  @example
           *     // Pre-process the data returned from the server
           *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
           *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
           *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
           *       }
           *       // Note no return - manipulate the data directly in the JSON object.
           *     } );
           */

          /**
           * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
           * or passing the bDestroy:true parameter in the initialisation object. This
           * can be used to remove bound events, added DOM nodes, etc.
           *  @name DataTable#destroy.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * Page length change event, fired when number of records to show on each
           * page (the length) is changed.
           *  @name DataTable#length.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           *  @param {integer} len New length
           */

          /**
           * Column sizing has changed.
           *  @name DataTable#column-sizing.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           */

          /**
           * Column visibility has changed.
           *  @name DataTable#column-visibility.dt
           *  @event
           *  @param {event} e jQuery event object
           *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
           *  @param {int} column Column index
           *  @param {bool} vis `false` if column now hidden, or `true` if visible
           */

          return $.fn.dataTable;
        });

        /***/
      },

    /***/ "./node_modules/jquery/dist/jquery.js":
      /*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         * jQuery JavaScript Library v3.5.1
         * https://jquery.com/
         *
         * Includes Sizzle.js
         * https://sizzlejs.com/
         *
         * Copyright JS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2020-05-04T22:49Z
         */
        (function(global, factory) {
          "use strict";

          if (true && typeof module.exports === "object") {
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket #14549 for more info.
            module.exports = global.document
              ? factory(global, true)
              : function(w) {
                  if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                  }
                  return factory(w);
                };
          } else {
            factory(global);
          }

          // Pass this if window is not defined yet
        })(typeof window !== "undefined" ? window : this, function(
          window,
          noGlobal
        ) {
          // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
          // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
          // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
          // enough that all such attempts are guarded in a try block.
          "use strict";

          var arr = [];

          var getProto = Object.getPrototypeOf;

          var slice = arr.slice;

          var flat = arr.flat
            ? function(array) {
                return arr.flat.call(array);
              }
            : function(array) {
                return arr.concat.apply([], array);
              };

          var push = arr.push;

          var indexOf = arr.indexOf;

          var class2type = {};

          var toString = class2type.toString;

          var hasOwn = class2type.hasOwnProperty;

          var fnToString = hasOwn.toString;

          var ObjectFunctionString = fnToString.call(Object);

          var support = {};

          var isFunction = function isFunction(obj) {
            // Support: Chrome <=57, Firefox <=52
            // In some browsers, typeof returns "function" for HTML <object> elements
            // (i.e., `typeof document.createElement( "object" ) === "function"`).
            // We don't want to classify *any* DOM node as a function.
            return (
              typeof obj === "function" && typeof obj.nodeType !== "number"
            );
          };

          var isWindow = function isWindow(obj) {
            return obj != null && obj === obj.window;
          };

          var document = window.document;

          var preservedScriptAttributes = {
            type: true,
            src: true,
            nonce: true,
            noModule: true,
          };

          function DOMEval(code, node, doc) {
            doc = doc || document;

            var i,
              val,
              script = doc.createElement("script");

            script.text = code;
            if (node) {
              for (i in preservedScriptAttributes) {
                // Support: Firefox 64+, Edge 18+
                // Some browsers don't support the "nonce" property on scripts.
                // On the other hand, just using `getAttribute` is not enough as
                // the `nonce` attribute is reset to an empty string whenever it
                // becomes browsing-context connected.
                // See https://github.com/whatwg/html/issues/2369
                // See https://html.spec.whatwg.org/#nonce-attributes
                // The `node.getAttribute` check was added for the sake of
                // `jQuery.globalEval` so that it can fake a nonce-containing node
                // via an object.
                val = node[i] || (node.getAttribute && node.getAttribute(i));
                if (val) {
                  script.setAttribute(i, val);
                }
              }
            }
            doc.head.appendChild(script).parentNode.removeChild(script);
          }

          function toType(obj) {
            if (obj == null) {
              return obj + "";
            }

            // Support: Android <=2.3 only (functionish RegExp)
            return typeof obj === "object" || typeof obj === "function"
              ? class2type[toString.call(obj)] || "object"
              : typeof obj;
          }
          /* global Symbol */
          // Defining this global in .eslintrc.json would create a danger of using the global
          // unguarded in another place, it seems safer to define global only for this module

          var version = "3.5.1",
            // Define a local copy of jQuery
            jQuery = function(selector, context) {
              // The jQuery object is actually just the init constructor 'enhanced'
              // Need init if jQuery is called (just allow error to be thrown if not included)
              return new jQuery.fn.init(selector, context);
            };

          jQuery.fn = jQuery.prototype = {
            // The current version of jQuery being used
            jquery: version,

            constructor: jQuery,

            // The default length of a jQuery object is 0
            length: 0,

            toArray: function() {
              return slice.call(this);
            },

            // Get the Nth element in the matched element set OR
            // Get the whole matched element set as a clean array
            get: function(num) {
              // Return all the elements in a clean array
              if (num == null) {
                return slice.call(this);
              }

              // Return just the one element from the set
              return num < 0 ? this[num + this.length] : this[num];
            },

            // Take an array of elements and push it onto the stack
            // (returning the new matched element set)
            pushStack: function(elems) {
              // Build a new jQuery matched element set
              var ret = jQuery.merge(this.constructor(), elems);

              // Add the old object onto the stack (as a reference)
              ret.prevObject = this;

              // Return the newly-formed element set
              return ret;
            },

            // Execute a callback for every element in the matched set.
            each: function(callback) {
              return jQuery.each(this, callback);
            },

            map: function(callback) {
              return this.pushStack(
                jQuery.map(this, function(elem, i) {
                  return callback.call(elem, i, elem);
                })
              );
            },

            slice: function() {
              return this.pushStack(slice.apply(this, arguments));
            },

            first: function() {
              return this.eq(0);
            },

            last: function() {
              return this.eq(-1);
            },

            even: function() {
              return this.pushStack(
                jQuery.grep(this, function(_elem, i) {
                  return (i + 1) % 2;
                })
              );
            },

            odd: function() {
              return this.pushStack(
                jQuery.grep(this, function(_elem, i) {
                  return i % 2;
                })
              );
            },

            eq: function(i) {
              var len = this.length,
                j = +i + (i < 0 ? len : 0);
              return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
            },

            end: function() {
              return this.prevObject || this.constructor();
            },

            // For internal use only.
            // Behaves like an Array's method, not like a jQuery method.
            push: push,
            sort: arr.sort,
            splice: arr.splice,
          };

          jQuery.extend = jQuery.fn.extend = function() {
            var options,
              name,
              src,
              copy,
              copyIsArray,
              clone,
              target = arguments[0] || {},
              i = 1,
              length = arguments.length,
              deep = false;

            // Handle a deep copy situation
            if (typeof target === "boolean") {
              deep = target;

              // Skip the boolean and the target
              target = arguments[i] || {};
              i++;
            }

            // Handle case when target is a string or something (possible in deep copy)
            if (typeof target !== "object" && !isFunction(target)) {
              target = {};
            }

            // Extend jQuery itself if only one argument is passed
            if (i === length) {
              target = this;
              i--;
            }

            for (; i < length; i++) {
              // Only deal with non-null/undefined values
              if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                  copy = options[name];

                  // Prevent Object.prototype pollution
                  // Prevent never-ending loop
                  if (name === "__proto__" || target === copy) {
                    continue;
                  }

                  // Recurse if we're merging plain objects or arrays
                  if (
                    deep &&
                    copy &&
                    (jQuery.isPlainObject(copy) ||
                      (copyIsArray = Array.isArray(copy)))
                  ) {
                    src = target[name];

                    // Ensure proper type for the source value
                    if (copyIsArray && !Array.isArray(src)) {
                      clone = [];
                    } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                      clone = {};
                    } else {
                      clone = src;
                    }
                    copyIsArray = false;

                    // Never move original objects, clone them
                    target[name] = jQuery.extend(deep, clone, copy);

                    // Don't bring in undefined values
                  } else if (copy !== undefined) {
                    target[name] = copy;
                  }
                }
              }
            }

            // Return the modified object
            return target;
          };

          jQuery.extend({
            // Unique for each copy of jQuery on the page
            expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

            // Assume jQuery is ready without the ready module
            isReady: true,

            error: function(msg) {
              throw new Error(msg);
            },

            noop: function() {},

            isPlainObject: function(obj) {
              var proto, Ctor;

              // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects
              if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
              }

              proto = getProto(obj);

              // Objects with no prototype (e.g., `Object.create( null )`) are plain
              if (!proto) {
                return true;
              }

              // Objects with prototype are plain iff they were constructed by a global Object function
              Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor === "function" &&
                fnToString.call(Ctor) === ObjectFunctionString
              );
            },

            isEmptyObject: function(obj) {
              var name;

              for (name in obj) {
                return false;
              }
              return true;
            },

            // Evaluates a script in a provided context; falls back to the global one
            // if not specified.
            globalEval: function(code, options, doc) {
              DOMEval(code, { nonce: options && options.nonce }, doc);
            },

            each: function(obj, callback) {
              var length,
                i = 0;

              if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              } else {
                for (i in obj) {
                  if (callback.call(obj[i], i, obj[i]) === false) {
                    break;
                  }
                }
              }

              return obj;
            },

            // results is for internal usage only
            makeArray: function(arr, results) {
              var ret = results || [];

              if (arr != null) {
                if (isArrayLike(Object(arr))) {
                  jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                  push.call(ret, arr);
                }
              }

              return ret;
            },

            inArray: function(elem, arr, i) {
              return arr == null ? -1 : indexOf.call(arr, elem, i);
            },

            // Support: Android <=4.0 only, PhantomJS 1 only
            // push.apply(_, arraylike) throws on ancient WebKit
            merge: function(first, second) {
              var len = +second.length,
                j = 0,
                i = first.length;

              for (; j < len; j++) {
                first[i++] = second[j];
              }

              first.length = i;

              return first;
            },

            grep: function(elems, callback, invert) {
              var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

              // Go through the array, only saving the items
              // that pass the validator function
              for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                  matches.push(elems[i]);
                }
              }

              return matches;
            },

            // arg is for internal usage only
            map: function(elems, callback, arg) {
              var length,
                value,
                i = 0,
                ret = [];

              // Go through the array, translating each of the items to their new values
              if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }

                // Go through every key on the object,
              } else {
                for (i in elems) {
                  value = callback(elems[i], i, arg);

                  if (value != null) {
                    ret.push(value);
                  }
                }
              }

              // Flatten any nested arrays
              return flat(ret);
            },

            // A global GUID counter for objects
            guid: 1,

            // jQuery.support is not used in Core but other projects attach their
            // properties to it so it needs to exist.
            support: support,
          });

          if (typeof Symbol === "function") {
            jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
          }

          // Populate the class2type map
          jQuery.each(
            "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
              " "
            ),
            function(_i, name) {
              class2type["[object " + name + "]"] = name.toLowerCase();
            }
          );

          function isArrayLike(obj) {
            // Support: real iOS 8.2 only (not reproducible in simulator)
            // `in` check used to prevent JIT error (gh-2145)
            // hasOwn isn't used here due to false negatives
            // regarding Nodelist length in IE
            var length = !!obj && "length" in obj && obj.length,
              type = toType(obj);

            if (isFunction(obj) || isWindow(obj)) {
              return false;
            }

            return (
              type === "array" ||
              length === 0 ||
              (typeof length === "number" && length > 0 && length - 1 in obj)
            );
          }
          var Sizzle =
            /*!
             * Sizzle CSS Selector Engine v2.3.5
             * https://sizzlejs.com/
             *
             * Copyright JS Foundation and other contributors
             * Released under the MIT license
             * https://js.foundation/
             *
             * Date: 2020-03-14
             */
            (function(window) {
              var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,
                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,
                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function(a, b) {
                  if (a === b) {
                    hasDuplicate = true;
                  }
                  return 0;
                },
                // Instance methods
                hasOwn = {}.hasOwnProperty,
                arr = [],
                pop = arr.pop,
                pushNative = arr.push,
                push = arr.push,
                slice = arr.slice,
                // Use a stripped-down indexOf as it's faster than native
                // https://jsperf.com/thor-indexof-vs-for/5
                indexOf = function(list, elem) {
                  var i = 0,
                    len = list.length;
                  for (; i < len; i++) {
                    if (list[i] === elem) {
                      return i;
                    }
                  }
                  return -1;
                },
                booleans =
                  "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
                  "ismap|loop|multiple|open|readonly|required|scoped",
                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",
                // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                identifier =
                  "(?:\\\\[\\da-fA-F]{1,6}" +
                  whitespace +
                  "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes =
                  "\\[" +
                  whitespace +
                  "*(" +
                  identifier +
                  ")(?:" +
                  whitespace +
                  // Operator (capture 2)
                  "*([*^$|!~]?=)" +
                  whitespace +
                  // "Attribute values must be CSS identifiers [capture 5]
                  // or strings [capture 3 or capture 4]"
                  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
                  identifier +
                  "))|)" +
                  whitespace +
                  "*\\]",
                pseudos =
                  ":(" +
                  identifier +
                  ")(?:\\((" +
                  // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                  // 1. quoted (capture 3; capture 4 or capture 5)
                  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                  // 2. simple (capture 6)
                  "((?:\\\\.|[^\\\\()[\\]]|" +
                  attributes +
                  ")*)|" +
                  // 3. anything else (capture 2)
                  ".*" +
                  ")\\)|)",
                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp(
                  "^" +
                    whitespace +
                    "+|((?:^|[^\\\\])(?:\\\\.)*)" +
                    whitespace +
                    "+$",
                  "g"
                ),
                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp(
                  "^" +
                    whitespace +
                    "*([>+~]|" +
                    whitespace +
                    ")" +
                    whitespace +
                    "*"
                ),
                rdescend = new RegExp(whitespace + "|>"),
                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),
                matchExpr = {
                  ID: new RegExp("^#(" + identifier + ")"),
                  CLASS: new RegExp("^\\.(" + identifier + ")"),
                  TAG: new RegExp("^(" + identifier + "|[*])"),
                  ATTR: new RegExp("^" + attributes),
                  PSEUDO: new RegExp("^" + pseudos),
                  CHILD: new RegExp(
                    "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                      whitespace +
                      "*(even|odd|(([+-]|)(\\d*)n|)" +
                      whitespace +
                      "*(?:([+-]|)" +
                      whitespace +
                      "*(\\d+)|))" +
                      whitespace +
                      "*\\)|)",
                    "i"
                  ),
                  bool: new RegExp("^(?:" + booleans + ")$", "i"),

                  // For use in libraries implementing .is()
                  // We use this for POS matching in `select`
                  needsContext: new RegExp(
                    "^" +
                      whitespace +
                      "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                      whitespace +
                      "*((?:-\\d)?\\d*)" +
                      whitespace +
                      "*\\)|)(?=[^-]|$)",
                    "i"
                  ),
                },
                rhtml = /HTML$/i,
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,
                rnative = /^[^{]+\{\s*\[native \w/,
                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                rsibling = /[+~]/,
                // CSS escapes
                // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp(
                  "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
                  "g"
                ),
                funescape = function(escape, nonHex) {
                  var high = "0x" + escape.slice(1) - 0x10000;

                  return nonHex
                    ? // Strip the backslash prefix from a non-hex escape sequence
                      nonHex
                    : // Replace a hexadecimal escape sequence with the encoded Unicode code point
                    // Support: IE <=11+
                    // For values outside the Basic Multilingual Plane (BMP), manually construct a
                    // surrogate pair
                    high < 0
                    ? String.fromCharCode(high + 0x10000)
                    : String.fromCharCode(
                        (high >> 10) | 0xd800,
                        (high & 0x3ff) | 0xdc00
                      );
                },
                // CSS string/identifier serialization
                // https://drafts.csswg.org/cssom/#common-serializing-idioms
                rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function(ch, asCodePoint) {
                  if (asCodePoint) {
                    // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                    if (ch === "\0") {
                      return "\uFFFD";
                    }

                    // Control characters and (dependent upon position) numbers get escaped as code points
                    return (
                      ch.slice(0, -1) +
                      "\\" +
                      ch.charCodeAt(ch.length - 1).toString(16) +
                      " "
                    );
                  }

                  // Other potentially-special ASCII characters get backslash-escaped
                  return "\\" + ch;
                },
                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function() {
                  setDocument();
                },
                inDisabledFieldset = addCombinator(
                  function(elem) {
                    return (
                      elem.disabled === true &&
                      elem.nodeName.toLowerCase() === "fieldset"
                    );
                  },
                  { dir: "parentNode", next: "legend" }
                );

              // Optimize for push.apply( _, NodeList )
              try {
                push.apply(
                  (arr = slice.call(preferredDoc.childNodes)),
                  preferredDoc.childNodes
                );

                // Support: Android<4.0
                // Detect silently failing push.apply
                // eslint-disable-next-line no-unused-expressions
                arr[preferredDoc.childNodes.length].nodeType;
              } catch (e) {
                push = {
                  apply: arr.length
                    ? // Leverage slice if possible
                      function(target, els) {
                        pushNative.apply(target, slice.call(els));
                      }
                    : // Support: IE<9
                      // Otherwise append directly
                      function(target, els) {
                        var j = target.length,
                          i = 0;

                        // Can't trust NodeList.length
                        while ((target[j++] = els[i++])) {}
                        target.length = j - 1;
                      },
                };
              }

              function Sizzle(selector, context, results, seed) {
                var m,
                  i,
                  elem,
                  nid,
                  match,
                  groups,
                  newSelector,
                  newContext = context && context.ownerDocument,
                  // nodeType defaults to 9, since context defaults to document
                  nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (
                  typeof selector !== "string" ||
                  !selector ||
                  (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                ) {
                  return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {
                  setDocument(context);
                  context = context || document;

                  if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (
                      nodeType !== 11 &&
                      (match = rquickExpr.exec(selector))
                    ) {
                      // ID selector
                      if ((m = match[1])) {
                        // Document context
                        if (nodeType === 9) {
                          if ((elem = context.getElementById(m))) {
                            // Support: IE, Opera, Webkit
                            // TODO: identify versions
                            // getElementById can match elements by name instead of ID
                            if (elem.id === m) {
                              results.push(elem);
                              return results;
                            }
                          } else {
                            return results;
                          }

                          // Element context
                        } else {
                          // Support: IE, Opera, Webkit
                          // TODO: identify versions
                          // getElementById can match elements by name instead of ID
                          if (
                            newContext &&
                            (elem = newContext.getElementById(m)) &&
                            contains(context, elem) &&
                            elem.id === m
                          ) {
                            results.push(elem);
                            return results;
                          }
                        }

                        // Type selector
                      } else if (match[2]) {
                        push.apply(
                          results,
                          context.getElementsByTagName(selector)
                        );
                        return results;

                        // Class selector
                      } else if (
                        (m = match[3]) &&
                        support.getElementsByClassName &&
                        context.getElementsByClassName
                      ) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                      }
                    }

                    // Take advantage of querySelectorAll
                    if (
                      support.qsa &&
                      !nonnativeSelectorCache[selector + " "] &&
                      (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
                      // Support: IE 8 only
                      // Exclude object elements
                      (nodeType !== 1 ||
                        context.nodeName.toLowerCase() !== "object")
                    ) {
                      newSelector = selector;
                      newContext = context;

                      // qSA considers elements outside a scoping root when evaluating child or
                      // descendant combinators, which is not what we want.
                      // In such cases, we work around the behavior by prefixing every selector in the
                      // list with an ID selector referencing the scope context.
                      // The technique has to be used as well when a leading combinator is used
                      // as such selectors are not recognized by querySelectorAll.
                      // Thanks to Andrew Dupont for this technique.
                      if (
                        nodeType === 1 &&
                        (rdescend.test(selector) || rcombinators.test(selector))
                      ) {
                        // Expand context for sibling selectors
                        newContext =
                          (rsibling.test(selector) &&
                            testContext(context.parentNode)) ||
                          context;

                        // We can use :scope instead of the ID hack if the browser
                        // supports it & if we're not changing the context.
                        if (newContext !== context || !support.scope) {
                          // Capture the context ID, setting it first if necessary
                          if ((nid = context.getAttribute("id"))) {
                            nid = nid.replace(rcssescape, fcssescape);
                          } else {
                            context.setAttribute("id", (nid = expando));
                          }
                        }

                        // Prefix every selector in the list
                        groups = tokenize(selector);
                        i = groups.length;
                        while (i--) {
                          groups[i] =
                            (nid ? "#" + nid : ":scope") +
                            " " +
                            toSelector(groups[i]);
                        }
                        newSelector = groups.join(",");
                      }

                      try {
                        push.apply(
                          results,
                          newContext.querySelectorAll(newSelector)
                        );
                        return results;
                      } catch (qsaError) {
                        nonnativeSelectorCache(selector, true);
                      } finally {
                        if (nid === expando) {
                          context.removeAttribute("id");
                        }
                      }
                    }
                  }
                }

                // All others
                return select(
                  selector.replace(rtrim, "$1"),
                  context,
                  results,
                  seed
                );
              }

              /**
               * Create key-value caches of limited size
               * @returns {function(string, object)} Returns the Object data after storing it on itself with
               *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
               *	deleting the oldest entry
               */
              function createCache() {
                var keys = [];

                function cache(key, value) {
                  // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                  if (keys.push(key + " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                  }
                  return (cache[key + " "] = value);
                }
                return cache;
              }

              /**
               * Mark a function for special use by Sizzle
               * @param {Function} fn The function to mark
               */
              function markFunction(fn) {
                fn[expando] = true;
                return fn;
              }

              /**
               * Support testing using an element
               * @param {Function} fn Passed the created element and returns a boolean result
               */
              function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                  return !!fn(el);
                } catch (e) {
                  return false;
                } finally {
                  // Remove from its parent by default
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }

                  // release memory in IE
                  el = null;
                }
              }

              /**
               * Adds the same handler for all of the specified attrs
               * @param {String} attrs Pipe-separated list of attributes
               * @param {Function} handler The method that will be applied
               */
              function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                  i = arr.length;

                while (i--) {
                  Expr.attrHandle[arr[i]] = handler;
                }
              }

              /**
               * Checks document order of two siblings
               * @param {Element} a
               * @param {Element} b
               * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
               */
              function siblingCheck(a, b) {
                var cur = b && a,
                  diff =
                    cur &&
                    a.nodeType === 1 &&
                    b.nodeType === 1 &&
                    a.sourceIndex - b.sourceIndex;

                // Use IE sourceIndex if available on both nodes
                if (diff) {
                  return diff;
                }

                // Check if b follows a
                if (cur) {
                  while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                      return -1;
                    }
                  }
                }

                return a ? 1 : -1;
              }

              /**
               * Returns a function to use in pseudos for input types
               * @param {String} type
               */
              function createInputPseudo(type) {
                return function(elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === "input" && elem.type === type;
                };
              }

              /**
               * Returns a function to use in pseudos for buttons
               * @param {String} type
               */
              function createButtonPseudo(type) {
                return function(elem) {
                  var name = elem.nodeName.toLowerCase();
                  return (
                    (name === "input" || name === "button") &&
                    elem.type === type
                  );
                };
              }

              /**
               * Returns a function to use in pseudos for :enabled/:disabled
               * @param {Boolean} disabled true for :disabled; false for :enabled
               */
              function createDisabledPseudo(disabled) {
                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function(elem) {
                  // Only certain elements can match :enabled or :disabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                  if ("form" in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                      // Option elements defer to a parent optgroup if present
                      if ("label" in elem) {
                        if ("label" in elem.parentNode) {
                          return elem.parentNode.disabled === disabled;
                        } else {
                          return elem.disabled === disabled;
                        }
                      }

                      // Support: IE 6 - 11
                      // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                      return (
                        elem.isDisabled === disabled ||
                        // Where there is no isDisabled, check manually
                        /* jshint -W018 */
                        (elem.isDisabled !== !disabled &&
                          inDisabledFieldset(elem) === disabled)
                      );
                    }

                    return elem.disabled === disabled;

                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                    // even exist on them, let alone have a boolean value.
                  } else if ("label" in elem) {
                    return elem.disabled === disabled;
                  }

                  // Remaining elements are neither :enabled nor :disabled
                  return false;
                };
              }

              /**
               * Returns a function to use in pseudos for positionals
               * @param {Function} fn
               */
              function createPositionalPseudo(fn) {
                return markFunction(function(argument) {
                  argument = +argument;
                  return markFunction(function(seed, matches) {
                    var j,
                      matchIndexes = fn([], seed.length, argument),
                      i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                      if (seed[(j = matchIndexes[i])]) {
                        seed[j] = !(matches[j] = seed[j]);
                      }
                    }
                  });
                });
              }

              /**
               * Checks a node for validity as a Sizzle context
               * @param {Element|Object=} context
               * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
               */
              function testContext(context) {
                return (
                  context &&
                  typeof context.getElementsByTagName !== "undefined" &&
                  context
                );
              }

              // Expose support vars for convenience
              support = Sizzle.support = {};

              /**
               * Detects XML nodes
               * @param {Element|Object} elem An element or a document
               * @returns {Boolean} True iff elem is a non-HTML XML node
               */
              isXML = Sizzle.isXML = function(elem) {
                var namespace = elem.namespaceURI,
                  docElem = (elem.ownerDocument || elem).documentElement;

                // Support: IE <=8
                // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
                // https://bugs.jquery.com/ticket/4833
                return !rhtml.test(
                  namespace || (docElem && docElem.nodeName) || "HTML"
                );
              };

              /**
               * Sets document-related variables once based on the current document
               * @param {Element|Object} [doc] An element or document object to use to set the document
               * @returns {Object} Returns the current document
               */
              setDocument = Sizzle.setDocument = function(node) {
                var hasCompare,
                  subWindow,
                  doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  doc == document ||
                  doc.nodeType !== 9 ||
                  !doc.documentElement
                ) {
                  return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                // Support: IE 9 - 11+, Edge 12 - 18+
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  preferredDoc != document &&
                  (subWindow = document.defaultView) &&
                  subWindow.top !== subWindow
                ) {
                  // Support: IE 11, Edge
                  if (subWindow.addEventListener) {
                    subWindow.addEventListener("unload", unloadHandler, false);

                    // Support: IE 9 - 10 only
                  } else if (subWindow.attachEvent) {
                    subWindow.attachEvent("onunload", unloadHandler);
                  }
                }

                // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
                // Safari 4 - 5 only, Opera <=11.6 - 12.x only
                // IE/Edge & older browsers don't support the :scope pseudo-class.
                // Support: Safari 6.0 only
                // Safari 6.0 supports :scope but it's an alias of :root there.
                support.scope = assert(function(el) {
                  docElem
                    .appendChild(el)
                    .appendChild(document.createElement("div"));
                  return (
                    typeof el.querySelectorAll !== "undefined" &&
                    !el.querySelectorAll(":scope fieldset div").length
                  );
                });

                /* Attributes
	---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert(function(el) {
                  el.className = "i";
                  return !el.getAttribute("className");
                });

                /* getElement(s)By*
	---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert(function(el) {
                  el.appendChild(document.createComment(""));
                  return !el.getElementsByTagName("*").length;
                });

                // Support: IE<9
                support.getElementsByClassName = rnative.test(
                  document.getElementsByClassName
                );

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function(el) {
                  docElem.appendChild(el).id = expando;
                  return (
                    !document.getElementsByName ||
                    !document.getElementsByName(expando).length
                  );
                });

                // ID filter and find
                if (support.getById) {
                  Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                      return elem.getAttribute("id") === attrId;
                    };
                  };
                  Expr.find["ID"] = function(id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var elem = context.getElementById(id);
                      return elem ? [elem] : [];
                    }
                  };
                } else {
                  Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                      var node =
                        typeof elem.getAttributeNode !== "undefined" &&
                        elem.getAttributeNode("id");
                      return node && node.value === attrId;
                    };
                  };

                  // Support: IE 6 - 7 only
                  // getElementById is not reliable as a find shortcut
                  Expr.find["ID"] = function(id, context) {
                    if (
                      typeof context.getElementById !== "undefined" &&
                      documentIsHTML
                    ) {
                      var node,
                        i,
                        elems,
                        elem = context.getElementById(id);

                      if (elem) {
                        // Verify the id attribute
                        node = elem.getAttributeNode("id");
                        if (node && node.value === id) {
                          return [elem];
                        }

                        // Fall back on getElementsByName
                        elems = context.getElementsByName(id);
                        i = 0;
                        while ((elem = elems[i++])) {
                          node = elem.getAttributeNode("id");
                          if (node && node.value === id) {
                            return [elem];
                          }
                        }
                      }

                      return [];
                    }
                  };
                }

                // Tag
                Expr.find["TAG"] = support.getElementsByTagName
                  ? function(tag, context) {
                      if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(tag);

                        // DocumentFragment nodes don't have gEBTN
                      } else if (support.qsa) {
                        return context.querySelectorAll(tag);
                      }
                    }
                  : function(tag, context) {
                      var elem,
                        tmp = [],
                        i = 0,
                        // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                        results = context.getElementsByTagName(tag);

                      // Filter out possible comments
                      if (tag === "*") {
                        while ((elem = results[i++])) {
                          if (elem.nodeType === 1) {
                            tmp.push(elem);
                          }
                        }

                        return tmp;
                      }
                      return results;
                    };

                // Class
                Expr.find["CLASS"] =
                  support.getElementsByClassName &&
                  function(className, context) {
                    if (
                      typeof context.getElementsByClassName !== "undefined" &&
                      documentIsHTML
                    ) {
                      return context.getElementsByClassName(className);
                    }
                  };

                /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See https://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                  // Build QSA regex
                  // Regex strategy adopted from Diego Perini
                  assert(function(el) {
                    var input;

                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // https://bugs.jquery.com/ticket/12359
                    docElem.appendChild(el).innerHTML =
                      "<a id='" +
                      expando +
                      "'></a>" +
                      "<select id='" +
                      expando +
                      "-\r\\' msallowcapture=''>" +
                      "<option selected=''></option></select>";

                    // Support: IE8, Opera 11-12.16
                    // Nothing should be selected when empty strings follow ^= or $= or *=
                    // The test attribute must be unknown in Opera but "safe" for WinRT
                    // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                    if (el.querySelectorAll("[msallowcapture^='']").length) {
                      rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }

                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!el.querySelectorAll("[selected]").length) {
                      rbuggyQSA.push(
                        "\\[" + whitespace + "*(?:value|" + booleans + ")"
                      );
                    }

                    // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                    if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                      rbuggyQSA.push("~=");
                    }

                    // Support: IE 11+, Edge 15 - 18+
                    // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                    // Adding a temporary attribute to the document before the selection works
                    // around the issue.
                    // Interestingly, IE 10 & older don't seem to have the issue.
                    input = document.createElement("input");
                    input.setAttribute("name", "");
                    el.appendChild(input);
                    if (!el.querySelectorAll("[name='']").length) {
                      rbuggyQSA.push(
                        "\\[" +
                          whitespace +
                          "*name" +
                          whitespace +
                          "*=" +
                          whitespace +
                          "*(?:''|\"\")"
                      );
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!el.querySelectorAll(":checked").length) {
                      rbuggyQSA.push(":checked");
                    }

                    // Support: Safari 8+, iOS 8+
                    // https://bugs.webkit.org/show_bug.cgi?id=136851
                    // In-page `selector#id sibling-combinator selector` fails
                    if (!el.querySelectorAll("a#" + expando + "+*").length) {
                      rbuggyQSA.push(".#.+[+~]");
                    }

                    // Support: Firefox <=3.6 - 5 only
                    // Old Firefox doesn't throw on a badly-escaped identifier.
                    el.querySelectorAll("\\\f");
                    rbuggyQSA.push("[\\r\\n\\f]");
                  });

                  assert(function(el) {
                    el.innerHTML =
                      "<a href='' disabled='disabled'></a>" +
                      "<select disabled='disabled'><option/></select>";

                    // Support: Windows 8 Native Apps
                    // The type and name attributes are restricted during .innerHTML assignment
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    el.appendChild(input).setAttribute("name", "D");

                    // Support: IE8
                    // Enforce case-sensitivity of name attribute
                    if (el.querySelectorAll("[name=d]").length) {
                      rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (el.querySelectorAll(":enabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Support: IE9-11+
                    // IE's :disabled selector does not pick up the children of disabled fieldsets
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(":disabled").length !== 2) {
                      rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Support: Opera 10 - 11 only
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    el.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                  });
                }

                if (
                  (support.matchesSelector = rnative.test(
                    (matches =
                      docElem.matches ||
                      docElem.webkitMatchesSelector ||
                      docElem.mozMatchesSelector ||
                      docElem.oMatchesSelector ||
                      docElem.msMatchesSelector)
                  ))
                ) {
                  assert(function(el) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(el, "*");

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(el, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                  });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches =
                  rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                /* Contains
	---------------------------------------------------------------------- */
                hasCompare = rnative.test(docElem.compareDocumentPosition);

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains =
                  hasCompare || rnative.test(docElem.contains)
                    ? function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                          bup = b && b.parentNode;
                        return (
                          a === bup ||
                          !!(
                            bup &&
                            bup.nodeType === 1 &&
                            (adown.contains
                              ? adown.contains(bup)
                              : a.compareDocumentPosition &&
                                a.compareDocumentPosition(bup) & 16)
                          )
                        );
                      }
                    : function(a, b) {
                        if (b) {
                          while ((b = b.parentNode)) {
                            if (b === a) {
                              return true;
                            }
                          }
                        }
                        return false;
                      };

                /* Sorting
	---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare
                  ? function(a, b) {
                      // Flag for duplicate removal
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      // Sort on method existence if only one input has compareDocumentPosition
                      var compare =
                        !a.compareDocumentPosition - !b.compareDocumentPosition;
                      if (compare) {
                        return compare;
                      }

                      // Calculate position if both inputs belong to the same document
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      compare =
                        (a.ownerDocument || a) == (b.ownerDocument || b)
                          ? a.compareDocumentPosition(b)
                          : // Otherwise we know they are disconnected
                            1;

                      // Disconnected nodes
                      if (
                        compare & 1 ||
                        (!support.sortDetached &&
                          b.compareDocumentPosition(a) === compare)
                      ) {
                        // Choose the first element that is related to our preferred document
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (
                          a == document ||
                          (a.ownerDocument == preferredDoc &&
                            contains(preferredDoc, a))
                        ) {
                          return -1;
                        }

                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (
                          b == document ||
                          (b.ownerDocument == preferredDoc &&
                            contains(preferredDoc, b))
                        ) {
                          return 1;
                        }

                        // Maintain original order
                        return sortInput
                          ? indexOf(sortInput, a) - indexOf(sortInput, b)
                          : 0;
                      }

                      return compare & 4 ? -1 : 1;
                    }
                  : function(a, b) {
                      // Exit early if the nodes are identical
                      if (a === b) {
                        hasDuplicate = true;
                        return 0;
                      }

                      var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                      // Parentless nodes are either documents or disconnected
                      if (!aup || !bup) {
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        /* eslint-disable eqeqeq */
                        return a == document
                          ? -1
                          : b == document
                          ? 1
                          : /* eslint-enable eqeqeq */
                          aup
                          ? -1
                          : bup
                          ? 1
                          : sortInput
                          ? indexOf(sortInput, a) - indexOf(sortInput, b)
                          : 0;

                        // If the nodes are siblings, we can do a quick check
                      } else if (aup === bup) {
                        return siblingCheck(a, b);
                      }

                      // Otherwise we need full lists of their ancestors for comparison
                      cur = a;
                      while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                      }
                      cur = b;
                      while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                      }

                      // Walk down the tree looking for a discrepancy
                      while (ap[i] === bp[i]) {
                        i++;
                      }

                      return i
                        ? // Do a sibling check if the nodes have a common ancestor
                          siblingCheck(ap[i], bp[i])
                        : // Otherwise nodes in our document sort first
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        /* eslint-disable eqeqeq */
                        ap[i] == preferredDoc
                        ? -1
                        : bp[i] == preferredDoc
                        ? 1
                        : /* eslint-enable eqeqeq */
                          0;
                    };

                return document;
              };

              Sizzle.matches = function(expr, elements) {
                return Sizzle(expr, null, null, elements);
              };

              Sizzle.matchesSelector = function(elem, expr) {
                setDocument(elem);

                if (
                  support.matchesSelector &&
                  documentIsHTML &&
                  !nonnativeSelectorCache[expr + " "] &&
                  (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                  (!rbuggyQSA || !rbuggyQSA.test(expr))
                ) {
                  try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (
                      ret ||
                      support.disconnectedMatch ||
                      // As well, disconnected nodes are said to be in a document
                      // fragment in IE 9
                      (elem.document && elem.document.nodeType !== 11)
                    ) {
                      return ret;
                    }
                  } catch (e) {
                    nonnativeSelectorCache(expr, true);
                  }
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
              };

              Sizzle.contains = function(context, elem) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((context.ownerDocument || context) != document) {
                  setDocument(context);
                }
                return contains(context, elem);
              };

              Sizzle.attr = function(elem, name) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((elem.ownerDocument || elem) != document) {
                  setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                  // Don't get fooled by Object.prototype properties (jQuery #13807)
                  val =
                    fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                      ? fn(elem, name, !documentIsHTML)
                      : undefined;

                return val !== undefined
                  ? val
                  : support.attributes || !documentIsHTML
                  ? elem.getAttribute(name)
                  : (val = elem.getAttributeNode(name)) && val.specified
                  ? val.value
                  : null;
              };

              Sizzle.escape = function(sel) {
                return (sel + "").replace(rcssescape, fcssescape);
              };

              Sizzle.error = function(msg) {
                throw new Error(
                  "Syntax error, unrecognized expression: " + msg
                );
              };

              /**
               * Document sorting and removing duplicates
               * @param {ArrayLike} results
               */
              Sizzle.uniqueSort = function(results) {
                var elem,
                  duplicates = [],
                  j = 0,
                  i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                  while ((elem = results[i++])) {
                    if (elem === results[i]) {
                      j = duplicates.push(i);
                    }
                  }
                  while (j--) {
                    results.splice(duplicates[j], 1);
                  }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
              };

              /**
               * Utility function for retrieving the text value of an array of DOM nodes
               * @param {Array|Element} elem
               */
              getText = Sizzle.getText = function(elem) {
                var node,
                  ret = "",
                  i = 0,
                  nodeType = elem.nodeType;

                if (!nodeType) {
                  // If no nodeType, this is expected to be an array
                  while ((node = elem[i++])) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                  }
                } else if (
                  nodeType === 1 ||
                  nodeType === 9 ||
                  nodeType === 11
                ) {
                  // Use textContent for elements
                  // innerText usage removed for consistency of new lines (jQuery #11153)
                  if (typeof elem.textContent === "string") {
                    return elem.textContent;
                  } else {
                    // Traverse its children
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      ret += getText(elem);
                    }
                  }
                } else if (nodeType === 3 || nodeType === 4) {
                  return elem.nodeValue;
                }

                // Do not include comment or processing instruction nodes

                return ret;
              };

              Expr = Sizzle.selectors = {
                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                  ">": { dir: "parentNode", first: true },
                  " ": { dir: "parentNode" },
                  "+": { dir: "previousSibling", first: true },
                  "~": { dir: "previousSibling" },
                },

                preFilter: {
                  ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || "").replace(
                      runescape,
                      funescape
                    );

                    if (match[2] === "~=") {
                      match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                  },

                  CHILD: function(match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                      // nth-* requires argument
                      if (!match[3]) {
                        Sizzle.error(match[0]);
                      }

                      // numeric x and y parameters for Expr.filter.CHILD
                      // remember that false/true cast respectively to 0/1
                      match[4] = +(match[4]
                        ? match[5] + (match[6] || 1)
                        : 2 * (match[3] === "even" || match[3] === "odd"));
                      match[5] = +(match[7] + match[8] || match[3] === "odd");

                      // other types prohibit arguments
                    } else if (match[3]) {
                      Sizzle.error(match[0]);
                    }

                    return match;
                  },

                  PSEUDO: function(match) {
                    var excess,
                      unquoted = !match[6] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                      return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[3]) {
                      match[2] = match[4] || match[5] || "";

                      // Strip excess characters from unquoted arguments
                    } else if (
                      unquoted &&
                      rpseudo.test(unquoted) &&
                      // Get excess from tokenize (recursively)
                      (excess = tokenize(unquoted, true)) &&
                      // advance to the next closing parenthesis
                      (excess =
                        unquoted.indexOf(")", unquoted.length - excess) -
                        unquoted.length)
                    ) {
                      // excess is a negative index
                      match[0] = match[0].slice(0, excess);
                      match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                  },
                },

                filter: {
                  TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector
                      .replace(runescape, funescape)
                      .toLowerCase();
                    return nodeNameSelector === "*"
                      ? function() {
                          return true;
                        }
                      : function(elem) {
                          return (
                            elem.nodeName &&
                            elem.nodeName.toLowerCase() === nodeName
                          );
                        };
                  },

                  CLASS: function(className) {
                    var pattern = classCache[className + " "];

                    return (
                      pattern ||
                      ((pattern = new RegExp(
                        "(^|" +
                          whitespace +
                          ")" +
                          className +
                          "(" +
                          whitespace +
                          "|$)"
                      )) &&
                        classCache(className, function(elem) {
                          return pattern.test(
                            (typeof elem.className === "string" &&
                              elem.className) ||
                              (typeof elem.getAttribute !== "undefined" &&
                                elem.getAttribute("class")) ||
                              ""
                          );
                        }))
                    );
                  },

                  ATTR: function(name, operator, check) {
                    return function(elem) {
                      var result = Sizzle.attr(elem, name);

                      if (result == null) {
                        return operator === "!=";
                      }
                      if (!operator) {
                        return true;
                      }

                      result += "";

                      /* eslint-disable max-len */

                      return operator === "="
                        ? result === check
                        : operator === "!="
                        ? result !== check
                        : operator === "^="
                        ? check && result.indexOf(check) === 0
                        : operator === "*="
                        ? check && result.indexOf(check) > -1
                        : operator === "$="
                        ? check && result.slice(-check.length) === check
                        : operator === "~="
                        ? (
                            " " +
                            result.replace(rwhitespace, " ") +
                            " "
                          ).indexOf(check) > -1
                        : operator === "|="
                        ? result === check ||
                          result.slice(0, check.length + 1) === check + "-"
                        : false;
                      /* eslint-enable max-len */
                    };
                  },

                  CHILD: function(type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                      forward = type.slice(-4) !== "last",
                      ofType = what === "of-type";

                    return first === 1 && last === 0
                      ? // Shortcut for :nth-*(n)
                        function(elem) {
                          return !!elem.parentNode;
                        }
                      : function(elem, _context, xml) {
                          var cache,
                            uniqueCache,
                            outerCache,
                            node,
                            nodeIndex,
                            start,
                            dir =
                              simple !== forward
                                ? "nextSibling"
                                : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;

                          if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                              while (dir) {
                                node = elem;
                                while ((node = node[dir])) {
                                  if (
                                    ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1
                                  ) {
                                    return false;
                                  }
                                }

                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir =
                                  type === "only" && !start && "nextSibling";
                              }
                              return true;
                            }

                            start = [
                              forward ? parent.firstChild : parent.lastChild,
                            ];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                              // Seek `elem` from a previously-cached index

                              // ...in a gzip-friendly way
                              node = parent;
                              outerCache =
                                node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              cache = uniqueCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex && cache[2];
                              node = nodeIndex && parent.childNodes[nodeIndex];

                              while (
                                (node =
                                  (++nodeIndex && node && node[dir]) ||
                                  // Fallback to seeking `elem` from the start
                                  (diff = nodeIndex = 0) ||
                                  start.pop())
                              ) {
                                // When found, cache indexes on `parent` and break
                                if (
                                  node.nodeType === 1 &&
                                  ++diff &&
                                  node === elem
                                ) {
                                  uniqueCache[type] = [
                                    dirruns,
                                    nodeIndex,
                                    diff,
                                  ];
                                  break;
                                }
                              }
                            } else {
                              // Use previously-cached element index if available
                              if (useCache) {
                                // ...in a gzip-friendly way
                                node = elem;
                                outerCache =
                                  node[expando] || (node[expando] = {});

                                // Support: IE <9 only
                                // Defend against cloned attroperties (jQuery gh-1709)
                                uniqueCache =
                                  outerCache[node.uniqueID] ||
                                  (outerCache[node.uniqueID] = {});

                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                              }

                              // xml :nth-child(...)
                              // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                              if (diff === false) {
                                // Use the same loop as above to seek `elem` from the start
                                while (
                                  (node =
                                    (++nodeIndex && node && node[dir]) ||
                                    (diff = nodeIndex = 0) ||
                                    start.pop())
                                ) {
                                  if (
                                    (ofType
                                      ? node.nodeName.toLowerCase() === name
                                      : node.nodeType === 1) &&
                                    ++diff
                                  ) {
                                    // Cache the index of each encountered element
                                    if (useCache) {
                                      outerCache =
                                        node[expando] || (node[expando] = {});

                                      // Support: IE <9 only
                                      // Defend against cloned attroperties (jQuery gh-1709)
                                      uniqueCache =
                                        outerCache[node.uniqueID] ||
                                        (outerCache[node.uniqueID] = {});

                                      uniqueCache[type] = [dirruns, diff];
                                    }

                                    if (node === elem) {
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return (
                              diff === first ||
                              (diff % first === 0 && diff / first >= 0)
                            );
                          }
                        };
                  },

                  PSEUDO: function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                      fn =
                        Expr.pseudos[pseudo] ||
                        Expr.setFilters[pseudo.toLowerCase()] ||
                        Sizzle.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                      return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                      args = [pseudo, pseudo, "", argument];
                      return Expr.setFilters.hasOwnProperty(
                        pseudo.toLowerCase()
                      )
                        ? markFunction(function(seed, matches) {
                            var idx,
                              matched = fn(seed, argument),
                              i = matched.length;
                            while (i--) {
                              idx = indexOf(seed, matched[i]);
                              seed[idx] = !(matches[idx] = matched[i]);
                            }
                          })
                        : function(elem) {
                            return fn(elem, 0, args);
                          };
                    }

                    return fn;
                  },
                },

                pseudos: {
                  // Potentially complex pseudos
                  not: markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                      results = [],
                      matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando]
                      ? markFunction(function(seed, matches, _context, xml) {
                          var elem,
                            unmatched = matcher(seed, null, xml, []),
                            i = seed.length;

                          // Match elements unmatched by `matcher`
                          while (i--) {
                            if ((elem = unmatched[i])) {
                              seed[i] = !(matches[i] = elem);
                            }
                          }
                        })
                      : function(elem, _context, xml) {
                          input[0] = elem;
                          matcher(input, null, xml, results);

                          // Don't keep the element (issue #299)
                          input[0] = null;
                          return !results.pop();
                        };
                  }),

                  has: markFunction(function(selector) {
                    return function(elem) {
                      return Sizzle(selector, elem).length > 0;
                    };
                  }),

                  contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                      return (
                        (elem.textContent || getText(elem)).indexOf(text) > -1
                      );
                    };
                  }),

                  // "Whether an element is represented by a :lang() selector
                  // is based solely on the element's language value
                  // being equal to the identifier C,
                  // or beginning with the identifier C immediately followed by "-".
                  // The matching of C against the element's language value is performed case-insensitively.
                  // The identifier C does not have to be a valid language name."
                  // http://www.w3.org/TR/selectors/#lang-pseudo
                  lang: markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                      Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                      var elemLang;
                      do {
                        if (
                          (elemLang = documentIsHTML
                            ? elem.lang
                            : elem.getAttribute("xml:lang") ||
                              elem.getAttribute("lang"))
                        ) {
                          elemLang = elemLang.toLowerCase();
                          return (
                            elemLang === lang ||
                            elemLang.indexOf(lang + "-") === 0
                          );
                        }
                      } while ((elem = elem.parentNode) && elem.nodeType === 1);
                      return false;
                    };
                  }),

                  // Miscellaneous
                  target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                  },

                  root: function(elem) {
                    return elem === docElem;
                  },

                  focus: function(elem) {
                    return (
                      elem === document.activeElement &&
                      (!document.hasFocus || document.hasFocus()) &&
                      !!(elem.type || elem.href || ~elem.tabIndex)
                    );
                  },

                  // Boolean properties
                  enabled: createDisabledPseudo(false),
                  disabled: createDisabledPseudo(true),

                  checked: function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (
                      (nodeName === "input" && !!elem.checked) ||
                      (nodeName === "option" && !!elem.selected)
                    );
                  },

                  selected: function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                      // eslint-disable-next-line no-unused-expressions
                      elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                  },

                  // Contents
                  empty: function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      if (elem.nodeType < 6) {
                        return false;
                      }
                    }
                    return true;
                  },

                  parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                  },

                  // Element/input types
                  header: function(elem) {
                    return rheader.test(elem.nodeName);
                  },

                  input: function(elem) {
                    return rinputs.test(elem.nodeName);
                  },

                  button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (
                      (name === "input" && elem.type === "button") ||
                      name === "button"
                    );
                  },

                  text: function(elem) {
                    var attr;
                    return (
                      elem.nodeName.toLowerCase() === "input" &&
                      elem.type === "text" &&
                      // Support: IE<8
                      // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                      ((attr = elem.getAttribute("type")) == null ||
                        attr.toLowerCase() === "text")
                    );
                  },

                  // Position-in-collection
                  first: createPositionalPseudo(function() {
                    return [0];
                  }),

                  last: createPositionalPseudo(function(_matchIndexes, length) {
                    return [length - 1];
                  }),

                  eq: createPositionalPseudo(function(
                    _matchIndexes,
                    length,
                    argument
                  ) {
                    return [argument < 0 ? argument + length : argument];
                  }),

                  even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  lt: createPositionalPseudo(function(
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i =
                      argument < 0
                        ? argument + length
                        : argument > length
                        ? length
                        : argument;
                    for (; --i >= 0; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  gt: createPositionalPseudo(function(
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),
                },
              };

              Expr.pseudos["nth"] = Expr.pseudos["eq"];

              // Add button/input type pseudos
              for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true,
              }) {
                Expr.pseudos[i] = createInputPseudo(i);
              }
              for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
              }

              // Easy API for creating new setFilters
              function setFilters() {}
              setFilters.prototype = Expr.filters = Expr.pseudos;
              Expr.setFilters = new setFilters();

              tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                var matched,
                  match,
                  tokens,
                  type,
                  soFar,
                  groups,
                  preFilters,
                  cached = tokenCache[selector + " "];

                if (cached) {
                  return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {
                  // Comma and first run
                  if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                      // Don't consume trailing commas as valid
                      soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                  }

                  matched = false;

                  // Combinators
                  if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,

                      // Cast descendant combinators to space
                      type: match[0].replace(rtrim, " "),
                    });
                    soFar = soFar.slice(matched.length);
                  }

                  // Filters
                  for (type in Expr.filter) {
                    if (
                      (match = matchExpr[type].exec(soFar)) &&
                      (!preFilters[type] || (match = preFilters[type](match)))
                    ) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,
                        type: type,
                        matches: match,
                      });
                      soFar = soFar.slice(matched.length);
                    }
                  }

                  if (!matched) {
                    break;
                  }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly
                  ? soFar.length
                  : soFar
                  ? Sizzle.error(selector)
                  : // Cache the tokens
                    tokenCache(selector, groups).slice(0);
              };

              function toSelector(tokens) {
                var i = 0,
                  len = tokens.length,
                  selector = "";
                for (; i < len; i++) {
                  selector += tokens[i].value;
                }
                return selector;
              }

              function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                  skip = combinator.next,
                  key = skip || dir,
                  checkNonElements = base && key === "parentNode",
                  doneName = done++;

                return combinator.first
                  ? // Check against closest ancestor/preceding element
                    function(elem, context, xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          return matcher(elem, context, xml);
                        }
                      }
                      return false;
                    }
                  : // Check against all ancestor/preceding elements
                    function(elem, context, xml) {
                      var oldCache,
                        uniqueCache,
                        outerCache,
                        newCache = [dirruns, doneName];

                      // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                      if (xml) {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                              return true;
                            }
                          }
                        }
                      } else {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});

                            // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)
                            uniqueCache =
                              outerCache[elem.uniqueID] ||
                              (outerCache[elem.uniqueID] = {});

                            if (skip && skip === elem.nodeName.toLowerCase()) {
                              elem = elem[dir] || elem;
                            } else if (
                              (oldCache = uniqueCache[key]) &&
                              oldCache[0] === dirruns &&
                              oldCache[1] === doneName
                            ) {
                              // Assign to newCache so results back-propagate to previous elements
                              return (newCache[2] = oldCache[2]);
                            } else {
                              // Reuse newcache so results back-propagate to previous elements
                              uniqueCache[key] = newCache;

                              // A match means we're done; a fail means we have to keep checking
                              if ((newCache[2] = matcher(elem, context, xml))) {
                                return true;
                              }
                            }
                          }
                        }
                      }
                      return false;
                    };
              }

              function elementMatcher(matchers) {
                return matchers.length > 1
                  ? function(elem, context, xml) {
                      var i = matchers.length;
                      while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                          return false;
                        }
                      }
                      return true;
                    }
                  : matchers[0];
              }

              function multipleContexts(selector, contexts, results) {
                var i = 0,
                  len = contexts.length;
                for (; i < len; i++) {
                  Sizzle(selector, contexts[i], results);
                }
                return results;
              }

              function condense(unmatched, map, filter, context, xml) {
                var elem,
                  newUnmatched = [],
                  i = 0,
                  len = unmatched.length,
                  mapped = map != null;

                for (; i < len; i++) {
                  if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                      newUnmatched.push(elem);
                      if (mapped) {
                        map.push(i);
                      }
                    }
                  }
                }

                return newUnmatched;
              }

              function setMatcher(
                preFilter,
                selector,
                matcher,
                postFilter,
                postFinder,
                postSelector
              ) {
                if (postFilter && !postFilter[expando]) {
                  postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                  postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function(seed, results, context, xml) {
                  var temp,
                    i,
                    elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    // Get initial elements from seed or context
                    elems =
                      seed ||
                      multipleContexts(
                        selector || "*",
                        context.nodeType ? [context] : context,
                        []
                      ),
                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn =
                      preFilter && (seed || !selector)
                        ? condense(elems, preMap, preFilter, context, xml)
                        : elems,
                    matcherOut = matcher
                      ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                        postFinder ||
                        (seed ? preFilter : preexisting || postFilter)
                        ? // ...intermediate processing is necessary
                          []
                        : // ...otherwise use results directly
                          results
                      : matcherIn;

                  // Find primary matches
                  if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                  }

                  // Apply postFilter
                  if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                      if ((elem = temp[i])) {
                        matcherOut[postMap[i]] = !(matcherIn[
                          postMap[i]
                        ] = elem);
                      }
                    }
                  }

                  if (seed) {
                    if (postFinder || preFilter) {
                      if (postFinder) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while (i--) {
                          if ((elem = matcherOut[i])) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push((matcherIn[i] = elem));
                          }
                        }
                        postFinder(null, (matcherOut = []), temp, xml);
                      }

                      // Move matched elements from seed to results to keep them synchronized
                      i = matcherOut.length;
                      while (i--) {
                        if (
                          (elem = matcherOut[i]) &&
                          (temp = postFinder
                            ? indexOf(seed, elem)
                            : preMap[i]) > -1
                        ) {
                          seed[temp] = !(results[temp] = elem);
                        }
                      }
                    }

                    // Add elements to results, through postFinder if defined
                  } else {
                    matcherOut = condense(
                      matcherOut === results
                        ? matcherOut.splice(preexisting, matcherOut.length)
                        : matcherOut
                    );
                    if (postFinder) {
                      postFinder(null, results, matcherOut, xml);
                    } else {
                      push.apply(results, matcherOut);
                    }
                  }
                });
              }

              function matcherFromTokens(tokens) {
                var checkContext,
                  matcher,
                  j,
                  len = tokens.length,
                  leadingRelative = Expr.relative[tokens[0].type],
                  implicitRelative = leadingRelative || Expr.relative[" "],
                  i = leadingRelative ? 1 : 0,
                  // The foundational matcher ensures that elements are reachable from top-level context(s)
                  matchContext = addCombinator(
                    function(elem) {
                      return elem === checkContext;
                    },
                    implicitRelative,
                    true
                  ),
                  matchAnyContext = addCombinator(
                    function(elem) {
                      return indexOf(checkContext, elem) > -1;
                    },
                    implicitRelative,
                    true
                  ),
                  matchers = [
                    function(elem, context, xml) {
                      var ret =
                        (!leadingRelative &&
                          (xml || context !== outermostContext)) ||
                        ((checkContext = context).nodeType
                          ? matchContext(elem, context, xml)
                          : matchAnyContext(elem, context, xml));

                      // Avoid hanging onto element (issue #299)
                      checkContext = null;
                      return ret;
                    },
                  ];

                for (; i < len; i++) {
                  if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [
                      addCombinator(elementMatcher(matchers), matcher),
                    ];
                  } else {
                    matcher = Expr.filter[tokens[i].type].apply(
                      null,
                      tokens[i].matches
                    );

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                      // Find the next relative operator (if any) for proper handling
                      j = ++i;
                      for (; j < len; j++) {
                        if (Expr.relative[tokens[j].type]) {
                          break;
                        }
                      }
                      return setMatcher(
                        i > 1 && elementMatcher(matchers),
                        i > 1 &&
                          toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens
                              .slice(0, i - 1)
                              .concat({
                                value: tokens[i - 2].type === " " ? "*" : "",
                              })
                          ).replace(rtrim, "$1"),
                        matcher,
                        i < j && matcherFromTokens(tokens.slice(i, j)),
                        j < len &&
                          matcherFromTokens((tokens = tokens.slice(j))),
                        j < len && toSelector(tokens)
                      );
                    }
                    matchers.push(matcher);
                  }
                }

                return elementMatcher(matchers);
              }

              function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                  byElement = elementMatchers.length > 0,
                  superMatcher = function(
                    seed,
                    context,
                    xml,
                    results,
                    outermost
                  ) {
                    var elem,
                      j,
                      matcher,
                      matchedCount = 0,
                      i = "0",
                      unmatched = seed && [],
                      setMatched = [],
                      contextBackup = outermostContext,
                      // We must always have either seed elements or outermost context
                      elems =
                        seed || (byElement && Expr.find["TAG"]("*", outermost)),
                      // Use integer dirruns iff this is the outermost matcher
                      dirrunsUnique = (dirruns +=
                        contextBackup == null ? 1 : Math.random() || 0.1),
                      len = elems.length;

                    if (outermost) {
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      outermostContext =
                        context == document || context || outermost;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Support: IE<9, Safari
                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                      if (byElement && elem) {
                        j = 0;

                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (!context && elem.ownerDocument != document) {
                          setDocument(elem);
                          xml = !documentIsHTML;
                        }
                        while ((matcher = elementMatchers[j++])) {
                          if (matcher(elem, context || document, xml)) {
                            results.push(elem);
                            break;
                          }
                        }
                        if (outermost) {
                          dirruns = dirrunsUnique;
                        }
                      }

                      // Track unmatched elements for set filters
                      if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                          matchedCount--;
                        }

                        // Lengthen the array for every element, matched or not
                        if (seed) {
                          unmatched.push(elem);
                        }
                      }
                    }

                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                    // makes the latter nonnegative.
                    matchedCount += i;

                    // Apply set filters to unmatched elements
                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                    // no element matchers and no seed.
                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                    // numerically zero.
                    if (bySet && i !== matchedCount) {
                      j = 0;
                      while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                      }

                      if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                          while (i--) {
                            if (!(unmatched[i] || setMatched[i])) {
                              setMatched[i] = pop.call(results);
                            }
                          }
                        }

                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                      }

                      // Add matches to results
                      push.apply(results, setMatched);

                      // Seedless set matches succeeding multiple successful matchers stipulate sorting
                      if (
                        outermost &&
                        !seed &&
                        setMatched.length > 0 &&
                        matchedCount + setMatchers.length > 1
                      ) {
                        Sizzle.uniqueSort(results);
                      }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                      dirruns = dirrunsUnique;
                      outermostContext = contextBackup;
                    }

                    return unmatched;
                  };

                return bySet ? markFunction(superMatcher) : superMatcher;
              }

              compile = Sizzle.compile = function(
                selector,
                match /* Internal Use Only */
              ) {
                var i,
                  setMatchers = [],
                  elementMatchers = [],
                  cached = compilerCache[selector + " "];

                if (!cached) {
                  // Generate a function of recursive functions that can be used to check each element
                  if (!match) {
                    match = tokenize(selector);
                  }
                  i = match.length;
                  while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                      setMatchers.push(cached);
                    } else {
                      elementMatchers.push(cached);
                    }
                  }

                  // Cache the compiled function
                  cached = compilerCache(
                    selector,
                    matcherFromGroupMatchers(elementMatchers, setMatchers)
                  );

                  // Save selector and tokenization
                  cached.selector = selector;
                }
                return cached;
              };

              /**
               * A low-level selection function that works with Sizzle's compiled
               *  selector functions
               * @param {String|Function} selector A selector or a pre-compiled
               *  selector function built with Sizzle.compile
               * @param {Element} context
               * @param {Array} [results]
               * @param {Array} [seed] A set of elements to match against
               */
              select = Sizzle.select = function(
                selector,
                context,
                results,
                seed
              ) {
                var i,
                  tokens,
                  token,
                  type,
                  find,
                  compiled = typeof selector === "function" && selector,
                  match =
                    !seed &&
                    tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {
                  // Reduce context if the leading compound selector is an ID
                  tokens = match[0] = match[0].slice(0);
                  if (
                    tokens.length > 2 &&
                    (token = tokens[0]).type === "ID" &&
                    context.nodeType === 9 &&
                    documentIsHTML &&
                    Expr.relative[tokens[1].type]
                  ) {
                    context = (Expr.find["ID"](
                      token.matches[0].replace(runescape, funescape),
                      context
                    ) || [])[0];
                    if (!context) {
                      return results;

                      // Precompiled matchers will still verify ancestry, so step up a level
                    } else if (compiled) {
                      context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                  }

                  // Fetch a seed set for right-to-left matching
                  i = matchExpr["needsContext"].test(selector)
                    ? 0
                    : tokens.length;
                  while (i--) {
                    token = tokens[i];

                    // Abort if we hit a combinator
                    if (Expr.relative[(type = token.type)]) {
                      break;
                    }
                    if ((find = Expr.find[type])) {
                      // Search, expanding context for leading sibling combinators
                      if (
                        (seed = find(
                          token.matches[0].replace(runescape, funescape),
                          (rsibling.test(tokens[0].type) &&
                            testContext(context.parentNode)) ||
                            context
                        ))
                      ) {
                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                          push.apply(results, seed);
                          return results;
                        }

                        break;
                      }
                    }
                  }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                  seed,
                  context,
                  !documentIsHTML,
                  results,
                  !context ||
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                );
                return results;
              };

              // One-time assignments

              // Sort stability
              support.sortStable =
                expando
                  .split("")
                  .sort(sortOrder)
                  .join("") === expando;

              // Support: Chrome 14-35+
              // Always assume duplicates if they aren't passed to the comparison function
              support.detectDuplicates = !!hasDuplicate;

              // Initialize against the default document
              setDocument();

              // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
              // Detached nodes confoundingly follow *each other*
              support.sortDetached = assert(function(el) {
                // Should return 1, but returns 4 (following)
                return (
                  el.compareDocumentPosition(
                    document.createElement("fieldset")
                  ) & 1
                );
              });

              // Support: IE<8
              // Prevent attribute/property "interpolation"
              // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
              if (
                !assert(function(el) {
                  el.innerHTML = "<a href='#'></a>";
                  return el.firstChild.getAttribute("href") === "#";
                })
              ) {
                addHandle("type|href|height|width", function(
                  elem,
                  name,
                  isXML
                ) {
                  if (!isXML) {
                    return elem.getAttribute(
                      name,
                      name.toLowerCase() === "type" ? 1 : 2
                    );
                  }
                });
              }

              // Support: IE<9
              // Use defaultValue in place of getAttribute("value")
              if (
                !support.attributes ||
                !assert(function(el) {
                  el.innerHTML = "<input/>";
                  el.firstChild.setAttribute("value", "");
                  return el.firstChild.getAttribute("value") === "";
                })
              ) {
                addHandle("value", function(elem, _name, isXML) {
                  if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                  }
                });
              }

              // Support: IE<9
              // Use getAttributeNode to fetch booleans when getAttribute lies
              if (
                !assert(function(el) {
                  return el.getAttribute("disabled") == null;
                })
              ) {
                addHandle(booleans, function(elem, name, isXML) {
                  var val;
                  if (!isXML) {
                    return elem[name] === true
                      ? name.toLowerCase()
                      : (val = elem.getAttributeNode(name)) && val.specified
                      ? val.value
                      : null;
                  }
                });
              }

              return Sizzle;
            })(window);

          jQuery.find = Sizzle;
          jQuery.expr = Sizzle.selectors;

          // Deprecated
          jQuery.expr[":"] = jQuery.expr.pseudos;
          jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
          jQuery.text = Sizzle.getText;
          jQuery.isXMLDoc = Sizzle.isXML;
          jQuery.contains = Sizzle.contains;
          jQuery.escapeSelector = Sizzle.escape;

          var dir = function(elem, dir, until) {
            var matched = [],
              truncate = until !== undefined;

            while ((elem = elem[dir]) && elem.nodeType !== 9) {
              if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                  break;
                }
                matched.push(elem);
              }
            }
            return matched;
          };

          var siblings = function(n, elem) {
            var matched = [];

            for (; n; n = n.nextSibling) {
              if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
              }
            }

            return matched;
          };

          var rneedsContext = jQuery.expr.match.needsContext;

          function nodeName(elem, name) {
            return (
              elem.nodeName &&
              elem.nodeName.toLowerCase() === name.toLowerCase()
            );
          }
          var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

          // Implement the identical functionality for filter and not
          function winnow(elements, qualifier, not) {
            if (isFunction(qualifier)) {
              return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
              });
            }

            // Single element
            if (qualifier.nodeType) {
              return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) !== not;
              });
            }

            // Arraylike of elements (jQuery, arguments, Array)
            if (typeof qualifier !== "string") {
              return jQuery.grep(elements, function(elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
              });
            }

            // Filtered directly for both simple and complex selectors
            return jQuery.filter(qualifier, elements, not);
          }

          jQuery.filter = function(expr, elems, not) {
            var elem = elems[0];

            if (not) {
              expr = ":not(" + expr + ")";
            }

            if (elems.length === 1 && elem.nodeType === 1) {
              return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
            }

            return jQuery.find.matches(
              expr,
              jQuery.grep(elems, function(elem) {
                return elem.nodeType === 1;
              })
            );
          };

          jQuery.fn.extend({
            find: function(selector) {
              var i,
                ret,
                len = this.length,
                self = this;

              if (typeof selector !== "string") {
                return this.pushStack(
                  jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                      if (jQuery.contains(self[i], this)) {
                        return true;
                      }
                    }
                  })
                );
              }

              ret = this.pushStack([]);

              for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
              }

              return len > 1 ? jQuery.uniqueSort(ret) : ret;
            },
            filter: function(selector) {
              return this.pushStack(winnow(this, selector || [], false));
            },
            not: function(selector) {
              return this.pushStack(winnow(this, selector || [], true));
            },
            is: function(selector) {
              return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test(selector)
                  ? jQuery(selector)
                  : selector || [],
                false
              ).length;
            },
          });

          // Initialize a jQuery object

          // A central reference to the root jQuery(document)
          var rootjQuery,
            // A simple way to check for HTML strings
            // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
            // Strict HTML recognition (#11290: must start with <)
            // Shortcut simple #id case for speed
            rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
            init = (jQuery.fn.init = function(selector, context, root) {
              var match, elem;

              // HANDLE: $(""), $(null), $(undefined), $(false)
              if (!selector) {
                return this;
              }

              // Method init() accepts an alternate rootjQuery
              // so migrate can support jQuery.sub (gh-2101)
              root = root || rootjQuery;

              // Handle HTML strings
              if (typeof selector === "string") {
                if (
                  selector[0] === "<" &&
                  selector[selector.length - 1] === ">" &&
                  selector.length >= 3
                ) {
                  // Assume that strings that start and end with <> are HTML and skip the regex check
                  match = [null, selector, null];
                } else {
                  match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {
                  // HANDLE: $(html) -> $(array)
                  if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;

                    // Option to run scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge(
                      this,
                      jQuery.parseHTML(
                        match[1],
                        context && context.nodeType
                          ? context.ownerDocument || context
                          : document,
                        true
                      )
                    );

                    // HANDLE: $(html, props)
                    if (
                      rsingleTag.test(match[1]) &&
                      jQuery.isPlainObject(context)
                    ) {
                      for (match in context) {
                        // Properties of context are called as methods if possible
                        if (isFunction(this[match])) {
                          this[match](context[match]);

                          // ...and otherwise set as attributes
                        } else {
                          this.attr(match, context[match]);
                        }
                      }
                    }

                    return this;

                    // HANDLE: $(#id)
                  } else {
                    elem = document.getElementById(match[2]);

                    if (elem) {
                      // Inject the element directly into the jQuery object
                      this[0] = elem;
                      this.length = 1;
                    }
                    return this;
                  }

                  // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                  return (context || root).find(selector);

                  // HANDLE: $(expr, context)
                  // (which is just equivalent to: $(context).find(expr)
                } else {
                  return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
              } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
              } else if (isFunction(selector)) {
                return root.ready !== undefined
                  ? root.ready(selector)
                  : // Execute immediately if ready is not present
                    selector(jQuery);
              }

              return jQuery.makeArray(selector, this);
            });

          // Give the init function the jQuery prototype for later instantiation
          init.prototype = jQuery.fn;

          // Initialize central reference
          rootjQuery = jQuery(document);

          var rparentsprev = /^(?:parents|prev(?:Until|All))/,
            // Methods guaranteed to produce a unique set when starting from a unique set
            guaranteedUnique = {
              children: true,
              contents: true,
              next: true,
              prev: true,
            };

          jQuery.fn.extend({
            has: function(target) {
              var targets = jQuery(target, this),
                l = targets.length;

              return this.filter(function() {
                var i = 0;
                for (; i < l; i++) {
                  if (jQuery.contains(this, targets[i])) {
                    return true;
                  }
                }
              });
            },

            closest: function(selectors, context) {
              var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery(selectors);

              // Positional selectors never match, since there's no _selection_ context
              if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                  for (
                    cur = this[i];
                    cur && cur !== context;
                    cur = cur.parentNode
                  ) {
                    // Always skip document fragments
                    if (
                      cur.nodeType < 11 &&
                      (targets
                        ? targets.index(cur) > -1
                        : // Don't pass non-elements to Sizzle
                          cur.nodeType === 1 &&
                          jQuery.find.matchesSelector(cur, selectors))
                    ) {
                      matched.push(cur);
                      break;
                    }
                  }
                }
              }

              return this.pushStack(
                matched.length > 1 ? jQuery.uniqueSort(matched) : matched
              );
            },

            // Determine the position of an element within the set
            index: function(elem) {
              // No argument, return index in parent
              if (!elem) {
                return this[0] && this[0].parentNode
                  ? this.first().prevAll().length
                  : -1;
              }

              // Index in selector
              if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
              }

              // Locate the position of the desired element
              return indexOf.call(
                this,

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem
              );
            },

            add: function(selector, context) {
              return this.pushStack(
                jQuery.uniqueSort(
                  jQuery.merge(this.get(), jQuery(selector, context))
                )
              );
            },

            addBack: function(selector) {
              return this.add(
                selector == null
                  ? this.prevObject
                  : this.prevObject.filter(selector)
              );
            },
          });

          function sibling(cur, dir) {
            while ((cur = cur[dir]) && cur.nodeType !== 1) {}
            return cur;
          }

          jQuery.each(
            {
              parent: function(elem) {
                var parent = elem.parentNode;
                return parent && parent.nodeType !== 11 ? parent : null;
              },
              parents: function(elem) {
                return dir(elem, "parentNode");
              },
              parentsUntil: function(elem, _i, until) {
                return dir(elem, "parentNode", until);
              },
              next: function(elem) {
                return sibling(elem, "nextSibling");
              },
              prev: function(elem) {
                return sibling(elem, "previousSibling");
              },
              nextAll: function(elem) {
                return dir(elem, "nextSibling");
              },
              prevAll: function(elem) {
                return dir(elem, "previousSibling");
              },
              nextUntil: function(elem, _i, until) {
                return dir(elem, "nextSibling", until);
              },
              prevUntil: function(elem, _i, until) {
                return dir(elem, "previousSibling", until);
              },
              siblings: function(elem) {
                return siblings((elem.parentNode || {}).firstChild, elem);
              },
              children: function(elem) {
                return siblings(elem.firstChild);
              },
              contents: function(elem) {
                if (
                  elem.contentDocument != null &&
                  // Support: IE 11+
                  // <object> elements with no `data` attribute has an object
                  // `contentDocument` with a `null` prototype.
                  getProto(elem.contentDocument)
                ) {
                  return elem.contentDocument;
                }

                // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                // Treat the template element as a regular one in browsers that
                // don't support it.
                if (nodeName(elem, "template")) {
                  elem = elem.content || elem;
                }

                return jQuery.merge([], elem.childNodes);
              },
            },
            function(name, fn) {
              jQuery.fn[name] = function(until, selector) {
                var matched = jQuery.map(this, fn, until);

                if (name.slice(-5) !== "Until") {
                  selector = until;
                }

                if (selector && typeof selector === "string") {
                  matched = jQuery.filter(selector, matched);
                }

                if (this.length > 1) {
                  // Remove duplicates
                  if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                  }

                  // Reverse order for parents* and prev-derivatives
                  if (rparentsprev.test(name)) {
                    matched.reverse();
                  }
                }

                return this.pushStack(matched);
              };
            }
          );
          var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

          // Convert String-formatted options into Object-formatted ones
          function createOptions(options) {
            var object = {};
            jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
              object[flag] = true;
            });
            return object;
          }

          /*
           * Create a callback list using the following parameters:
           *
           *	options: an optional list of space-separated options that will change how
           *			the callback list behaves or a more traditional option object
           *
           * By default a callback list will act like an event callback list and can be
           * "fired" multiple times.
           *
           * Possible options:
           *
           *	once:			will ensure the callback list can only be fired once (like a Deferred)
           *
           *	memory:			will keep track of previous values and will call any callback added
           *					after the list has been fired right away with the latest "memorized"
           *					values (like a Deferred)
           *
           *	unique:			will ensure a callback can only be added once (no duplicate in the list)
           *
           *	stopOnFalse:	interrupt callings when a callback returns false
           *
           */
          jQuery.Callbacks = function(options) {
            // Convert options from String-formatted to Object-formatted if needed
            // (we check in cache first)
            options =
              typeof options === "string"
                ? createOptions(options)
                : jQuery.extend({}, options);

            var // Flag to know if list is currently firing
              firing,
              // Last fire value for non-forgettable lists
              memory,
              // Flag to know if list was already fired
              fired,
              // Flag to prevent firing
              locked,
              // Actual callback list
              list = [],
              // Queue of execution data for repeatable lists
              queue = [],
              // Index of currently firing callback (modified by add/remove as needed)
              firingIndex = -1,
              // Fire callbacks
              fire = function() {
                // Enforce single-firing
                locked = locked || options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                  memory = queue.shift();
                  while (++firingIndex < list.length) {
                    // Run callback and check for early termination
                    if (
                      list[firingIndex].apply(memory[0], memory[1]) === false &&
                      options.stopOnFalse
                    ) {
                      // Jump to end and forget the data so .add doesn't re-fire
                      firingIndex = list.length;
                      memory = false;
                    }
                  }
                }

                // Forget the data if we're done with it
                if (!options.memory) {
                  memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if (locked) {
                  // Keep an empty list if we have data for future add calls
                  if (memory) {
                    list = [];

                    // Otherwise, this object is spent
                  } else {
                    list = "";
                  }
                }
              },
              // Actual Callbacks object
              self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                  if (list) {
                    // If we have memory from a past run, we should fire after adding
                    if (memory && !firing) {
                      firingIndex = list.length - 1;
                      queue.push(memory);
                    }

                    (function add(args) {
                      jQuery.each(args, function(_, arg) {
                        if (isFunction(arg)) {
                          if (!options.unique || !self.has(arg)) {
                            list.push(arg);
                          }
                        } else if (
                          arg &&
                          arg.length &&
                          toType(arg) !== "string"
                        ) {
                          // Inspect recursively
                          add(arg);
                        }
                      });
                    })(arguments);

                    if (memory && !firing) {
                      fire();
                    }
                  }
                  return this;
                },

                // Remove a callback from the list
                remove: function() {
                  jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                      list.splice(index, 1);

                      // Handle firing indexes
                      if (index <= firingIndex) {
                        firingIndex--;
                      }
                    }
                  });
                  return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function(fn) {
                  return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function() {
                  if (list) {
                    list = [];
                  }
                  return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function() {
                  locked = queue = [];
                  list = memory = "";
                  return this;
                },
                disabled: function() {
                  return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function() {
                  locked = queue = [];
                  if (!memory && !firing) {
                    list = memory = "";
                  }
                  return this;
                },
                locked: function() {
                  return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function(context, args) {
                  if (!locked) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    queue.push(args);
                    if (!firing) {
                      fire();
                    }
                  }
                  return this;
                },

                // Call all the callbacks with the given arguments
                fire: function() {
                  self.fireWith(this, arguments);
                  return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function() {
                  return !!fired;
                },
              };

            return self;
          };

          function Identity(v) {
            return v;
          }
          function Thrower(ex) {
            throw ex;
          }

          function adoptValue(value, resolve, reject, noValue) {
            var method;

            try {
              // Check for promise aspect first to privilege synchronous behavior
              if (value && isFunction((method = value.promise))) {
                method
                  .call(value)
                  .done(resolve)
                  .fail(reject);

                // Other thenables
              } else if (value && isFunction((method = value.then))) {
                method.call(value, resolve, reject);

                // Other non-thenables
              } else {
                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                // * false: [ value ].slice( 0 ) => resolve( value )
                // * true: [ value ].slice( 1 ) => resolve()
                resolve.apply(undefined, [value].slice(noValue));
              }

              // For Promises/A+, convert exceptions into rejections
              // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
              // Deferred#then to conditionally suppress rejection.
            } catch (value) {
              // Support: Android 4.0 only
              // Strict mode functions invoked without .call/.apply get global-object context
              reject.apply(undefined, [value]);
            }
          }

          jQuery.extend({
            Deferred: function(func) {
              var tuples = [
                  // action, add listener, callbacks,
                  // ... .then handlers, argument index, [final state]
                  [
                    "notify",
                    "progress",
                    jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"),
                    2,
                  ],
                  [
                    "resolve",
                    "done",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    0,
                    "resolved",
                  ],
                  [
                    "reject",
                    "fail",
                    jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"),
                    1,
                    "rejected",
                  ],
                ],
                state = "pending",
                promise = {
                  state: function() {
                    return state;
                  },
                  always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                  },
                  catch: function(fn) {
                    return promise.then(null, fn);
                  },

                  // Keep pipe for back-compat
                  pipe: function(/* fnDone, fnFail, fnProgress */) {
                    var fns = arguments;

                    return jQuery
                      .Deferred(function(newDefer) {
                        jQuery.each(tuples, function(_i, tuple) {
                          // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                          var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                          // deferred.progress(function() { bind to newDefer or newDefer.notify })
                          // deferred.done(function() { bind to newDefer or newDefer.resolve })
                          // deferred.fail(function() { bind to newDefer or newDefer.reject })
                          deferred[tuple[1]](function() {
                            var returned = fn && fn.apply(this, arguments);
                            if (returned && isFunction(returned.promise)) {
                              returned
                                .promise()
                                .progress(newDefer.notify)
                                .done(newDefer.resolve)
                                .fail(newDefer.reject);
                            } else {
                              newDefer[tuple[0] + "With"](
                                this,
                                fn ? [returned] : arguments
                              );
                            }
                          });
                        });
                        fns = null;
                      })
                      .promise();
                  },
                  then: function(onFulfilled, onRejected, onProgress) {
                    var maxDepth = 0;
                    function resolve(depth, deferred, handler, special) {
                      return function() {
                        var that = this,
                          args = arguments,
                          mightThrow = function() {
                            var returned, then;

                            // Support: Promises/A+ section 2.3.3.3.3
                            // https://promisesaplus.com/#point-59
                            // Ignore double-resolution attempts
                            if (depth < maxDepth) {
                              return;
                            }

                            returned = handler.apply(that, args);

                            // Support: Promises/A+ section 2.3.1
                            // https://promisesaplus.com/#point-48
                            if (returned === deferred.promise()) {
                              throw new TypeError("Thenable self-resolution");
                            }

                            // Support: Promises/A+ sections 2.3.3.1, 3.5
                            // https://promisesaplus.com/#point-54
                            // https://promisesaplus.com/#point-75
                            // Retrieve `then` only once
                            then =
                              returned &&
                              // Support: Promises/A+ section 2.3.4
                              // https://promisesaplus.com/#point-64
                              // Only check objects and functions for thenability
                              (typeof returned === "object" ||
                                typeof returned === "function") &&
                              returned.then;

                            // Handle a returned thenable
                            if (isFunction(then)) {
                              // Special processors (notify) just wait for resolution
                              if (special) {
                                then.call(
                                  returned,
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    special
                                  ),
                                  resolve(maxDepth, deferred, Thrower, special)
                                );

                                // Normal processors (resolve) also hook into progress
                              } else {
                                // ...and disregard older resolution values
                                maxDepth++;

                                then.call(
                                  returned,
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    special
                                  ),
                                  resolve(maxDepth, deferred, Thrower, special),
                                  resolve(
                                    maxDepth,
                                    deferred,
                                    Identity,
                                    deferred.notifyWith
                                  )
                                );
                              }

                              // Handle all other returned values
                            } else {
                              // Only substitute handlers pass on context
                              // and multiple values (non-spec behavior)
                              if (handler !== Identity) {
                                that = undefined;
                                args = [returned];
                              }

                              // Process the value(s)
                              // Default process is resolve
                              (special || deferred.resolveWith)(that, args);
                            }
                          },
                          // Only normal processors (resolve) catch and reject exceptions
                          process = special
                            ? mightThrow
                            : function() {
                                try {
                                  mightThrow();
                                } catch (e) {
                                  if (jQuery.Deferred.exceptionHook) {
                                    jQuery.Deferred.exceptionHook(
                                      e,
                                      process.stackTrace
                                    );
                                  }

                                  // Support: Promises/A+ section 2.3.3.3.4.1
                                  // https://promisesaplus.com/#point-61
                                  // Ignore post-resolution exceptions
                                  if (depth + 1 >= maxDepth) {
                                    // Only substitute handlers pass on context
                                    // and multiple values (non-spec behavior)
                                    if (handler !== Thrower) {
                                      that = undefined;
                                      args = [e];
                                    }

                                    deferred.rejectWith(that, args);
                                  }
                                }
                              };

                        // Support: Promises/A+ section 2.3.3.3.1
                        // https://promisesaplus.com/#point-57
                        // Re-resolve promises immediately to dodge false rejection from
                        // subsequent errors
                        if (depth) {
                          process();
                        } else {
                          // Call an optional hook to record the stack, in case of exception
                          // since it's otherwise lost when execution goes async
                          if (jQuery.Deferred.getStackHook) {
                            process.stackTrace = jQuery.Deferred.getStackHook();
                          }
                          window.setTimeout(process);
                        }
                      };
                    }

                    return jQuery
                      .Deferred(function(newDefer) {
                        // progress_handlers.add( ... )
                        tuples[0][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onProgress) ? onProgress : Identity,
                            newDefer.notifyWith
                          )
                        );

                        // fulfilled_handlers.add( ... )
                        tuples[1][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onFulfilled) ? onFulfilled : Identity
                          )
                        );

                        // rejected_handlers.add( ... )
                        tuples[2][3].add(
                          resolve(
                            0,
                            newDefer,
                            isFunction(onRejected) ? onRejected : Thrower
                          )
                        );
                      })
                      .promise();
                  },

                  // Get a promise for this deferred
                  // If obj is provided, the promise aspect is added to the object
                  promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                  },
                },
                deferred = {};

              // Add list-specific methods
              jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2],
                  stateString = tuple[5];

                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                  list.add(
                    function() {
                      // state = "resolved" (i.e., fulfilled)
                      // state = "rejected"
                      state = stateString;
                    },

                    // rejected_callbacks.disable
                    // fulfilled_callbacks.disable
                    tuples[3 - i][2].disable,

                    // rejected_handlers.disable
                    // fulfilled_handlers.disable
                    tuples[3 - i][3].disable,

                    // progress_callbacks.lock
                    tuples[0][2].lock,

                    // progress_handlers.lock
                    tuples[0][3].lock
                  );
                }

                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);

                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[tuple[0]] = function() {
                  deferred[tuple[0] + "With"](
                    this === deferred ? undefined : this,
                    arguments
                  );
                  return this;
                };

                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[tuple[0] + "With"] = list.fireWith;
              });

              // Make the deferred a promise
              promise.promise(deferred);

              // Call given func if any
              if (func) {
                func.call(deferred, deferred);
              }

              // All done!
              return deferred;
            },

            // Deferred helper
            when: function(singleValue) {
              var // count of uncompleted subordinates
                remaining = arguments.length,
                // count of unprocessed arguments
                i = remaining,
                // subordinate fulfillment data
                resolveContexts = Array(i),
                resolveValues = slice.call(arguments),
                // the master Deferred
                master = jQuery.Deferred(),
                // subordinate callback factory
                updateFunc = function(i) {
                  return function(value) {
                    resolveContexts[i] = this;
                    resolveValues[i] =
                      arguments.length > 1 ? slice.call(arguments) : value;
                    if (!--remaining) {
                      master.resolveWith(resolveContexts, resolveValues);
                    }
                  };
                };

              // Single- and empty arguments are adopted like Promise.resolve
              if (remaining <= 1) {
                adoptValue(
                  singleValue,
                  master.done(updateFunc(i)).resolve,
                  master.reject,
                  !remaining
                );

                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (
                  master.state() === "pending" ||
                  isFunction(resolveValues[i] && resolveValues[i].then)
                ) {
                  return master.then();
                }
              }

              // Multiple arguments are aggregated like Promise.all array elements
              while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
              }

              return master.promise();
            },
          });

          // These usually indicate a programmer mistake during development,
          // warn about them ASAP rather than swallowing them by default.
          var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

          jQuery.Deferred.exceptionHook = function(error, stack) {
            // Support: IE 8 - 9 only
            // Console exists when dev tools are open, which can happen at any time
            if (
              window.console &&
              window.console.warn &&
              error &&
              rerrorNames.test(error.name)
            ) {
              window.console.warn(
                "jQuery.Deferred exception: " + error.message,
                error.stack,
                stack
              );
            }
          };

          jQuery.readyException = function(error) {
            window.setTimeout(function() {
              throw error;
            });
          };

          // The deferred used on DOM ready
          var readyList = jQuery.Deferred();

          jQuery.fn.ready = function(fn) {
            readyList
              .then(fn)

              // Wrap jQuery.readyException in a function so that the lookup
              // happens at the time of error handling instead of callback
              // registration.
              .catch(function(error) {
                jQuery.readyException(error);
              });

            return this;
          };

          jQuery.extend({
            // Is the DOM ready to be used? Set to true once it occurs.
            isReady: false,

            // A counter to track how many items to wait for before
            // the ready event fires. See #6781
            readyWait: 1,

            // Handle when the DOM is ready
            ready: function(wait) {
              // Abort if there are pending holds or we're already ready
              if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
              }

              // Remember that the DOM is ready
              jQuery.isReady = true;

              // If a normal DOM Ready event fired, decrement, and wait if need be
              if (wait !== true && --jQuery.readyWait > 0) {
                return;
              }

              // If there are functions bound, to execute
              readyList.resolveWith(document, [jQuery]);
            },
          });

          jQuery.ready.then = readyList.then;

          // The ready event handler and self cleanup method
          function completed() {
            document.removeEventListener("DOMContentLoaded", completed);
            window.removeEventListener("load", completed);
            jQuery.ready();
          }

          // Catch cases where $(document).ready() is called
          // after the browser event has already occurred.
          // Support: IE <=9 - 10 only
          // Older IE sometimes signals "interactive" too soon
          if (
            document.readyState === "complete" ||
            (document.readyState !== "loading" &&
              !document.documentElement.doScroll)
          ) {
            // Handle it asynchronously to allow scripts the opportunity to delay ready
            window.setTimeout(jQuery.ready);
          } else {
            // Use the handy event callback
            document.addEventListener("DOMContentLoaded", completed);

            // A fallback to window.onload, that will always work
            window.addEventListener("load", completed);
          }

          // Multifunctional method to get and set values of a collection
          // The value/s can optionally be executed if it's a function
          var access = function(
            elems,
            fn,
            key,
            value,
            chainable,
            emptyGet,
            raw
          ) {
            var i = 0,
              len = elems.length,
              bulk = key == null;

            // Sets many values
            if (toType(key) === "object") {
              chainable = true;
              for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
              }

              // Sets one value
            } else if (value !== undefined) {
              chainable = true;

              if (!isFunction(value)) {
                raw = true;
              }

              if (bulk) {
                // Bulk operations run against the entire set
                if (raw) {
                  fn.call(elems, value);
                  fn = null;

                  // ...except when executing function values
                } else {
                  bulk = fn;
                  fn = function(elem, _key, value) {
                    return bulk.call(jQuery(elem), value);
                  };
                }
              }

              if (fn) {
                for (; i < len; i++) {
                  fn(
                    elems[i],
                    key,
                    raw ? value : value.call(elems[i], i, fn(elems[i], key))
                  );
                }
              }
            }

            if (chainable) {
              return elems;
            }

            // Gets
            if (bulk) {
              return fn.call(elems);
            }

            return len ? fn(elems[0], key) : emptyGet;
          };

          // Matches dashed string for camelizing
          var rmsPrefix = /^-ms-/,
            rdashAlpha = /-([a-z])/g;

          // Used by camelCase as callback to replace()
          function fcamelCase(_all, letter) {
            return letter.toUpperCase();
          }

          // Convert dashed to camelCase; used by the css and data modules
          // Support: IE <=9 - 11, Edge 12 - 15
          // Microsoft forgot to hump their vendor prefix (#9572)
          function camelCase(string) {
            return string
              .replace(rmsPrefix, "ms-")
              .replace(rdashAlpha, fcamelCase);
          }
          var acceptData = function(owner) {
            // Accepts only:
            //  - Node
            //    - Node.ELEMENT_NODE
            //    - Node.DOCUMENT_NODE
            //  - Object
            //    - Any
            return (
              owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
            );
          };

          function Data() {
            this.expando = jQuery.expando + Data.uid++;
          }

          Data.uid = 1;

          Data.prototype = {
            cache: function(owner) {
              // Check if the owner object already has a cache
              var value = owner[this.expando];

              // If not, create one
              if (!value) {
                value = {};

                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {
                  // If it is a node unlikely to be stringify-ed or looped over
                  // use plain assignment
                  if (owner.nodeType) {
                    owner[this.expando] = value;

                    // Otherwise secure it in a non-enumerable property
                    // configurable must be true to allow the property to be
                    // deleted when data is removed
                  } else {
                    Object.defineProperty(owner, this.expando, {
                      value: value,
                      configurable: true,
                    });
                  }
                }
              }

              return value;
            },
            set: function(owner, data, value) {
              var prop,
                cache = this.cache(owner);

              // Handle: [ owner, key, value ] args
              // Always use camelCase key (gh-2257)
              if (typeof data === "string") {
                cache[camelCase(data)] = value;

                // Handle: [ owner, { properties } ] args
              } else {
                // Copy the properties one-by-one to the cache object
                for (prop in data) {
                  cache[camelCase(prop)] = data[prop];
                }
              }
              return cache;
            },
            get: function(owner, key) {
              return key === undefined
                ? this.cache(owner)
                : // Always use camelCase key (gh-2257)
                  owner[this.expando] && owner[this.expando][camelCase(key)];
            },
            access: function(owner, key, value) {
              // In cases where either:
              //
              //   1. No key was specified
              //   2. A string key was specified, but no value provided
              //
              // Take the "read" path and allow the get method to determine
              // which value to return, respectively either:
              //
              //   1. The entire cache object
              //   2. The data stored at the key
              //
              if (
                key === undefined ||
                (key && typeof key === "string" && value === undefined)
              ) {
                return this.get(owner, key);
              }

              // When the key is not a string, or both a key and value
              // are specified, set or extend (existing objects) with either:
              //
              //   1. An object of properties
              //   2. A key and value
              //
              this.set(owner, key, value);

              // Since the "set" path can have two possible entry points
              // return the expected data based on which path was taken[*]
              return value !== undefined ? value : key;
            },
            remove: function(owner, key) {
              var i,
                cache = owner[this.expando];

              if (cache === undefined) {
                return;
              }

              if (key !== undefined) {
                // Support array or space separated string of keys
                if (Array.isArray(key)) {
                  // If key is an array of keys...
                  // We always set camelCase keys, so remove that.
                  key = key.map(camelCase);
                } else {
                  key = camelCase(key);

                  // If a key with the spaces exists, use it.
                  // Otherwise, create an array by matching non-whitespace
                  key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }

                i = key.length;

                while (i--) {
                  delete cache[key[i]];
                }
              }

              // Remove the expando if there's no more data
              if (key === undefined || jQuery.isEmptyObject(cache)) {
                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) {
                  owner[this.expando] = undefined;
                } else {
                  delete owner[this.expando];
                }
              }
            },
            hasData: function(owner) {
              var cache = owner[this.expando];
              return cache !== undefined && !jQuery.isEmptyObject(cache);
            },
          };
          var dataPriv = new Data();

          var dataUser = new Data();

          //	Implementation Summary
          //
          //	1. Enforce API surface and semantic compatibility with 1.9.x branch
          //	2. Improve the module's maintainability by reducing the storage
          //		paths to a single mechanism.
          //	3. Use the same single mechanism to support "private" and "user" data.
          //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
          //	5. Avoid exposing implementation details on user objects (eg. expando properties)
          //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

          var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
            rmultiDash = /[A-Z]/g;

          function getData(data) {
            if (data === "true") {
              return true;
            }

            if (data === "false") {
              return false;
            }

            if (data === "null") {
              return null;
            }

            // Only convert to a number if it doesn't change the string
            if (data === +data + "") {
              return +data;
            }

            if (rbrace.test(data)) {
              return JSON.parse(data);
            }

            return data;
          }

          function dataAttr(elem, key, data) {
            var name;

            // If nothing was found internally, try to fetch any
            // data from the HTML5 data-* attribute
            if (data === undefined && elem.nodeType === 1) {
              name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
              data = elem.getAttribute(name);

              if (typeof data === "string") {
                try {
                  data = getData(data);
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
              } else {
                data = undefined;
              }
            }
            return data;
          }

          jQuery.extend({
            hasData: function(elem) {
              return dataUser.hasData(elem) || dataPriv.hasData(elem);
            },

            data: function(elem, name, data) {
              return dataUser.access(elem, name, data);
            },

            removeData: function(elem, name) {
              dataUser.remove(elem, name);
            },

            // TODO: Now that all calls to _data and _removeData have been replaced
            // with direct calls to dataPriv methods, these can be deprecated.
            _data: function(elem, name, data) {
              return dataPriv.access(elem, name, data);
            },

            _removeData: function(elem, name) {
              dataPriv.remove(elem, name);
            },
          });

          jQuery.fn.extend({
            data: function(key, value) {
              var i,
                name,
                data,
                elem = this[0],
                attrs = elem && elem.attributes;

              // Gets all values
              if (key === undefined) {
                if (this.length) {
                  data = dataUser.get(elem);

                  if (
                    elem.nodeType === 1 &&
                    !dataPriv.get(elem, "hasDataAttrs")
                  ) {
                    i = attrs.length;
                    while (i--) {
                      // Support: IE 11 only
                      // The attrs elements can be null (#14894)
                      if (attrs[i]) {
                        name = attrs[i].name;
                        if (name.indexOf("data-") === 0) {
                          name = camelCase(name.slice(5));
                          dataAttr(elem, name, data[name]);
                        }
                      }
                    }
                    dataPriv.set(elem, "hasDataAttrs", true);
                  }
                }

                return data;
              }

              // Sets multiple values
              if (typeof key === "object") {
                return this.each(function() {
                  dataUser.set(this, key);
                });
              }

              return access(
                this,
                function(value) {
                  var data;

                  // The calling jQuery object (element matches) is not empty
                  // (and therefore has an element appears at this[ 0 ]) and the
                  // `value` parameter was not undefined. An empty jQuery object
                  // will result in `undefined` for elem = this[ 0 ] which will
                  // throw an exception if an attempt to read a data cache is made.
                  if (elem && value === undefined) {
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                      return data;
                    }

                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                      return data;
                    }

                    // We tried really hard, but the data doesn't exist.
                    return;
                  }

                  // Set the data...
                  this.each(function() {
                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                  });
                },
                null,
                value,
                arguments.length > 1,
                null,
                true
              );
            },

            removeData: function(key) {
              return this.each(function() {
                dataUser.remove(this, key);
              });
            },
          });

          jQuery.extend({
            queue: function(elem, type, data) {
              var queue;

              if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                  if (!queue || Array.isArray(data)) {
                    queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                  } else {
                    queue.push(data);
                  }
                }
                return queue || [];
              }
            },

            dequeue: function(elem, type) {
              type = type || "fx";

              var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function() {
                  jQuery.dequeue(elem, type);
                };

              // If the fx queue is dequeued, always remove the progress sentinel
              if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
              }

              if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                  queue.unshift("inprogress");
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
              }

              if (!startLength && hooks) {
                hooks.empty.fire();
              }
            },

            // Not public - generate a queueHooks object, or return the current one
            _queueHooks: function(elem, type) {
              var key = type + "queueHooks";
              return (
                dataPriv.get(elem, key) ||
                dataPriv.access(elem, key, {
                  empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [type + "queue", key]);
                  }),
                })
              );
            },
          });

          jQuery.fn.extend({
            queue: function(type, data) {
              var setter = 2;

              if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
              }

              if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
              }

              return data === undefined
                ? this
                : this.each(function() {
                    var queue = jQuery.queue(this, type, data);

                    // Ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                      jQuery.dequeue(this, type);
                    }
                  });
            },
            dequeue: function(type) {
              return this.each(function() {
                jQuery.dequeue(this, type);
              });
            },
            clearQueue: function(type) {
              return this.queue(type || "fx", []);
            },

            // Get a promise resolved when queues of a certain type
            // are emptied (fx is the type by default)
            promise: function(type, obj) {
              var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                  if (!--count) {
                    defer.resolveWith(elements, [elements]);
                  }
                };

              if (typeof type !== "string") {
                obj = type;
                type = undefined;
              }
              type = type || "fx";

              while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                  count++;
                  tmp.empty.add(resolve);
                }
              }
              resolve();
              return defer.promise(obj);
            },
          });
          var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

          var rcssNum = new RegExp(
            "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$",
            "i"
          );

          var cssExpand = ["Top", "Right", "Bottom", "Left"];

          var documentElement = document.documentElement;

          var isAttached = function(elem) {
              return jQuery.contains(elem.ownerDocument, elem);
            },
            composed = { composed: true };

          // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
          // Check attachment across shadow DOM boundaries when possible (gh-3504)
          // Support: iOS 10.0-10.2 only
          // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
          // leading to errors. We need to check for `getRootNode`.
          if (documentElement.getRootNode) {
            isAttached = function(elem) {
              return (
                jQuery.contains(elem.ownerDocument, elem) ||
                elem.getRootNode(composed) === elem.ownerDocument
              );
            };
          }
          var isHiddenWithinTree = function(elem, el) {
            // isHiddenWithinTree might be called from jQuery#filter function;
            // in that case, element will be second argument
            elem = el || elem;

            // Inline style trumps all
            return (
              elem.style.display === "none" ||
              (elem.style.display === "" &&
                // Otherwise, check computed style
                // Support: Firefox <=43 - 45
                // Disconnected elements can have computed display: none, so first confirm that elem is
                // in the document.
                isAttached(elem) &&
                jQuery.css(elem, "display") === "none")
            );
          };

          function adjustCSS(elem, prop, valueParts, tween) {
            var adjusted,
              scale,
              maxIterations = 20,
              currentValue = tween
                ? function() {
                    return tween.cur();
                  }
                : function() {
                    return jQuery.css(elem, prop, "");
                  },
              initial = currentValue(),
              unit =
                (valueParts && valueParts[3]) ||
                (jQuery.cssNumber[prop] ? "" : "px"),
              // Starting value computation is required for potential unit mismatches
              initialInUnit =
                elem.nodeType &&
                (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
                rcssNum.exec(jQuery.css(elem, prop));

            if (initialInUnit && initialInUnit[3] !== unit) {
              // Support: Firefox <=54
              // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
              initial = initial / 2;

              // Trust units reported by jQuery.css
              unit = unit || initialInUnit[3];

              // Iteratively approximate from a nonzero starting point
              initialInUnit = +initial || 1;

              while (maxIterations--) {
                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style(elem, prop, initialInUnit + unit);
                if (
                  (1 - scale) *
                    (1 - (scale = currentValue() / initial || 0.5)) <=
                  0
                ) {
                  maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
              }

              initialInUnit = initialInUnit * 2;
              jQuery.style(elem, prop, initialInUnit + unit);

              // Make sure we update the tween properties later on
              valueParts = valueParts || [];
            }

            if (valueParts) {
              initialInUnit = +initialInUnit || +initial || 0;

              // Apply relative offset (+=/-=) if specified
              adjusted = valueParts[1]
                ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                : +valueParts[2];
              if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
              }
            }
            return adjusted;
          }

          var defaultDisplayMap = {};

          function getDefaultDisplay(elem) {
            var temp,
              doc = elem.ownerDocument,
              nodeName = elem.nodeName,
              display = defaultDisplayMap[nodeName];

            if (display) {
              return display;
            }

            temp = doc.body.appendChild(doc.createElement(nodeName));
            display = jQuery.css(temp, "display");

            temp.parentNode.removeChild(temp);

            if (display === "none") {
              display = "block";
            }
            defaultDisplayMap[nodeName] = display;

            return display;
          }

          function showHide(elements, show) {
            var display,
              elem,
              values = [],
              index = 0,
              length = elements.length;

            // Determine new display value for elements that need to change
            for (; index < length; index++) {
              elem = elements[index];
              if (!elem.style) {
                continue;
              }

              display = elem.style.display;
              if (show) {
                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                  values[index] = dataPriv.get(elem, "display") || null;
                  if (!values[index]) {
                    elem.style.display = "";
                  }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                  values[index] = getDefaultDisplay(elem);
                }
              } else {
                if (display !== "none") {
                  values[index] = "none";

                  // Remember what we're overwriting
                  dataPriv.set(elem, "display", display);
                }
              }
            }

            // Set the display of the elements in a second loop to avoid constant reflow
            for (index = 0; index < length; index++) {
              if (values[index] != null) {
                elements[index].style.display = values[index];
              }
            }

            return elements;
          }

          jQuery.fn.extend({
            show: function() {
              return showHide(this, true);
            },
            hide: function() {
              return showHide(this);
            },
            toggle: function(state) {
              if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
              }

              return this.each(function() {
                if (isHiddenWithinTree(this)) {
                  jQuery(this).show();
                } else {
                  jQuery(this).hide();
                }
              });
            },
          });
          var rcheckableType = /^(?:checkbox|radio)$/i;

          var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

          var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

          (function() {
            var fragment = document.createDocumentFragment(),
              div = fragment.appendChild(document.createElement("div")),
              input = document.createElement("input");

            // Support: Android 4.0 - 4.3 only
            // Check state lost if the name is set (#11217)
            // Support: Windows Web Apps (WWA)
            // `name` and `type` must use .setAttribute for WWA (#14901)
            input.setAttribute("type", "radio");
            input.setAttribute("checked", "checked");
            input.setAttribute("name", "t");

            div.appendChild(input);

            // Support: Android <=4.1 only
            // Older WebKit doesn't clone checked state correctly in fragments
            support.checkClone = div
              .cloneNode(true)
              .cloneNode(true).lastChild.checked;

            // Support: IE <=11 only
            // Make sure textarea (and checkbox) defaultValue is properly cloned
            div.innerHTML = "<textarea>x</textarea>";
            support.noCloneChecked = !!div.cloneNode(true).lastChild
              .defaultValue;

            // Support: IE <=9 only
            // IE <=9 replaces <option> tags with their contents when inserted outside of
            // the select element.
            div.innerHTML = "<option></option>";
            support.option = !!div.lastChild;
          })();

          // We have to close these tags to support XHTML (#13200)
          var wrapMap = {
            // XHTML parsers do not magically insert elements in the
            // same way that tag soup parsers do. So we cannot shorten
            // this by omitting <tbody> or other required elements.
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

            _default: [0, "", ""],
          };

          wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption =
            wrapMap.thead;
          wrapMap.th = wrapMap.td;

          // Support: IE <=9 only
          if (!support.option) {
            wrapMap.optgroup = wrapMap.option = [
              1,
              "<select multiple='multiple'>",
              "</select>",
            ];
          }

          function getAll(context, tag) {
            // Support: IE <=9 - 11 only
            // Use typeof to avoid zero-argument method invocation on host objects (#15151)
            var ret;

            if (typeof context.getElementsByTagName !== "undefined") {
              ret = context.getElementsByTagName(tag || "*");
            } else if (typeof context.querySelectorAll !== "undefined") {
              ret = context.querySelectorAll(tag || "*");
            } else {
              ret = [];
            }

            if (tag === undefined || (tag && nodeName(context, tag))) {
              return jQuery.merge([context], ret);
            }

            return ret;
          }

          // Mark scripts as having already been evaluated
          function setGlobalEval(elems, refElements) {
            var i = 0,
              l = elems.length;

            for (; i < l; i++) {
              dataPriv.set(
                elems[i],
                "globalEval",
                !refElements || dataPriv.get(refElements[i], "globalEval")
              );
            }
          }

          var rhtml = /<|&#?\w+;/;

          function buildFragment(elems, context, scripts, selection, ignored) {
            var elem,
              tmp,
              tag,
              wrap,
              attached,
              j,
              fragment = context.createDocumentFragment(),
              nodes = [],
              i = 0,
              l = elems.length;

            for (; i < l; i++) {
              elem = elems[i];

              if (elem || elem === 0) {
                // Add nodes directly
                if (toType(elem) === "object") {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                  // Convert non-html into a text node
                } else if (!rhtml.test(elem)) {
                  nodes.push(context.createTextNode(elem));

                  // Convert html into DOM nodes
                } else {
                  tmp =
                    tmp || fragment.appendChild(context.createElement("div"));

                  // Deserialize a standard representation
                  tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                  wrap = wrapMap[tag] || wrapMap._default;
                  tmp.innerHTML =
                    wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                  // Descend through wrappers to the right content
                  j = wrap[0];
                  while (j--) {
                    tmp = tmp.lastChild;
                  }

                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(nodes, tmp.childNodes);

                  // Remember the top-level container
                  tmp = fragment.firstChild;

                  // Ensure the created nodes are orphaned (#12392)
                  tmp.textContent = "";
                }
              }
            }

            // Remove wrapper from fragment
            fragment.textContent = "";

            i = 0;
            while ((elem = nodes[i++])) {
              // Skip elements already in the context collection (trac-4087)
              if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                  ignored.push(elem);
                }
                continue;
              }

              attached = isAttached(elem);

              // Append to fragment
              tmp = getAll(fragment.appendChild(elem), "script");

              // Preserve script evaluation history
              if (attached) {
                setGlobalEval(tmp);
              }

              // Capture executables
              if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                  if (rscriptType.test(elem.type || "")) {
                    scripts.push(elem);
                  }
                }
              }
            }

            return fragment;
          }

          var rkeyEvent = /^key/,
            rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
            rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

          function returnTrue() {
            return true;
          }

          function returnFalse() {
            return false;
          }

          // Support: IE <=9 - 11+
          // focus() and blur() are asynchronous, except when they are no-op.
          // So expect focus to be synchronous when the element is already active,
          // and blur to be synchronous when the element is not already active.
          // (focus and blur are always synchronous in other supported browsers,
          // this just defines when we can count on it).
          function expectSync(elem, type) {
            return (elem === safeActiveElement()) === (type === "focus");
          }

          // Support: IE <=9 only
          // Accessing document.activeElement can throw unexpectedly
          // https://bugs.jquery.com/ticket/13393
          function safeActiveElement() {
            try {
              return document.activeElement;
            } catch (err) {}
          }

          function on(elem, types, selector, data, fn, one) {
            var origFn, type;

            // Types can be a map of types/handlers
            if (typeof types === "object") {
              // ( types-Object, selector, data )
              if (typeof selector !== "string") {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
              }
              for (type in types) {
                on(elem, type, selector, data, types[type], one);
              }
              return elem;
            }

            if (data == null && fn == null) {
              // ( types, fn )
              fn = selector;
              data = selector = undefined;
            } else if (fn == null) {
              if (typeof selector === "string") {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
              } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
              }
            }
            if (fn === false) {
              fn = returnFalse;
            } else if (!fn) {
              return elem;
            }

            if (one === 1) {
              origFn = fn;
              fn = function(event) {
                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
              };

              // Use same guid so caller can remove using origFn
              fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return elem.each(function() {
              jQuery.event.add(this, types, fn, data, selector);
            });
          }

          /*
           * Helper functions for managing events -- not part of the public interface.
           * Props to Dean Edwards' addEvent library for many of the ideas.
           */
          jQuery.event = {
            global: {},

            add: function(elem, types, handler, data, selector) {
              var handleObjIn,
                eventHandle,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.get(elem);

              // Only attach events to objects that accept data
              if (!acceptData(elem)) {
                return;
              }

              // Caller can pass in an object of custom data in lieu of the handler
              if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
              }

              // Ensure that invalid selectors throw exceptions at attach time
              // Evaluate against documentElement in case elem is a non-element node (e.g., document)
              if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
              }

              // Make sure that the handler has a unique ID, used to find/remove it later
              if (!handler.guid) {
                handler.guid = jQuery.guid++;
              }

              // Init the element's event structure and main handler, if this is the first
              if (!(events = elemData.events)) {
                events = elemData.events = Object.create(null);
              }
              if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                  // Discard the second event of a jQuery.event.trigger() and
                  // when an event is called after a page has unloaded
                  return typeof jQuery !== "undefined" &&
                    jQuery.event.triggered !== e.type
                    ? jQuery.event.dispatch.apply(elem, arguments)
                    : undefined;
                };
              }

              // Handle multiple events separated by a space
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                  continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type =
                  (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend(
                  {
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext:
                      selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join("."),
                  },
                  handleObjIn
                );

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                  handlers = events[type] = [];
                  handlers.delegateCount = 0;

                  // Only use addEventListener if the special events handler returns false
                  if (
                    !special.setup ||
                    special.setup.call(elem, data, namespaces, eventHandle) ===
                      false
                  ) {
                    if (elem.addEventListener) {
                      elem.addEventListener(type, eventHandle);
                    }
                  }
                }

                if (special.add) {
                  special.add.call(elem, handleObj);

                  if (!handleObj.handler.guid) {
                    handleObj.handler.guid = handler.guid;
                  }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                  handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                  handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
              }
            },

            // Detach an event or set of events from an element
            remove: function(elem, types, handler, selector, mappedTypes) {
              var j,
                origCount,
                tmp,
                events,
                t,
                handleObj,
                special,
                handlers,
                type,
                namespaces,
                origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

              if (!elemData || !(events = elemData.events)) {
                return;
              }

              // Once for each type.namespace in types; type may be omitted
              types = (types || "").match(rnothtmlwhite) || [""];
              t = types.length;
              while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                  for (type in events) {
                    jQuery.event.remove(
                      elem,
                      type + types[t],
                      handler,
                      selector,
                      true
                    );
                  }
                  continue;
                }

                special = jQuery.event.special[type] || {};
                type =
                  (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp =
                  tmp[2] &&
                  new RegExp(
                    "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                  );

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                  handleObj = handlers[j];

                  if (
                    (mappedTypes || origType === handleObj.origType) &&
                    (!handler || handler.guid === handleObj.guid) &&
                    (!tmp || tmp.test(handleObj.namespace)) &&
                    (!selector ||
                      selector === handleObj.selector ||
                      (selector === "**" && handleObj.selector))
                  ) {
                    handlers.splice(j, 1);

                    if (handleObj.selector) {
                      handlers.delegateCount--;
                    }
                    if (special.remove) {
                      special.remove.call(elem, handleObj);
                    }
                  }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                  if (
                    !special.teardown ||
                    special.teardown.call(elem, namespaces, elemData.handle) ===
                      false
                  ) {
                    jQuery.removeEvent(elem, type, elemData.handle);
                  }

                  delete events[type];
                }
              }

              // Remove data and the expando if it's no longer used
              if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
              }
            },

            dispatch: function(nativeEvent) {
              var i,
                j,
                ret,
                matched,
                handleObj,
                handlerQueue,
                args = new Array(arguments.length),
                // Make a writable jQuery.Event from the native event object
                event = jQuery.event.fix(nativeEvent),
                handlers =
                  (dataPriv.get(this, "events") || Object.create(null))[
                    event.type
                  ] || [],
                special = jQuery.event.special[event.type] || {};

              // Use the fix-ed jQuery.Event rather than the (read-only) native event
              args[0] = event;

              for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
              }

              event.delegateTarget = this;

              // Call the preDispatch hook for the mapped type, and let it bail if desired
              if (
                special.preDispatch &&
                special.preDispatch.call(this, event) === false
              ) {
                return;
              }

              // Determine handlers
              handlerQueue = jQuery.event.handlers.call(this, event, handlers);

              // Run delegates first; they may want to stop propagation beneath us
              i = 0;
              while (
                (matched = handlerQueue[i++]) &&
                !event.isPropagationStopped()
              ) {
                event.currentTarget = matched.elem;

                j = 0;
                while (
                  (handleObj = matched.handlers[j++]) &&
                  !event.isImmediatePropagationStopped()
                ) {
                  // If the event is namespaced, then each handler is only invoked if it is
                  // specially universal or its namespaces are a superset of the event's.
                  if (
                    !event.rnamespace ||
                    handleObj.namespace === false ||
                    event.rnamespace.test(handleObj.namespace)
                  ) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = (
                      (jQuery.event.special[handleObj.origType] || {}).handle ||
                      handleObj.handler
                    ).apply(matched.elem, args);

                    if (ret !== undefined) {
                      if ((event.result = ret) === false) {
                        event.preventDefault();
                        event.stopPropagation();
                      }
                    }
                  }
                }
              }

              // Call the postDispatch hook for the mapped type
              if (special.postDispatch) {
                special.postDispatch.call(this, event);
              }

              return event.result;
            },

            handlers: function(event, handlers) {
              var i,
                handleObj,
                sel,
                matchedHandlers,
                matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

              // Find delegate handlers
              if (
                delegateCount &&
                // Support: IE <=9
                // Black-hole SVG <use> instance trees (trac-13180)
                cur.nodeType &&
                // Support: Firefox <=42
                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                // Support: IE 11 only
                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                !(event.type === "click" && event.button >= 1)
              ) {
                for (; cur !== this; cur = cur.parentNode || this) {
                  // Don't check non-elements (#13208)
                  // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                  if (
                    cur.nodeType === 1 &&
                    !(event.type === "click" && cur.disabled === true)
                  ) {
                    matchedHandlers = [];
                    matchedSelectors = {};
                    for (i = 0; i < delegateCount; i++) {
                      handleObj = handlers[i];

                      // Don't conflict with Object.prototype properties (#13203)
                      sel = handleObj.selector + " ";

                      if (matchedSelectors[sel] === undefined) {
                        matchedSelectors[sel] = handleObj.needsContext
                          ? jQuery(sel, this).index(cur) > -1
                          : jQuery.find(sel, this, null, [cur]).length;
                      }
                      if (matchedSelectors[sel]) {
                        matchedHandlers.push(handleObj);
                      }
                    }
                    if (matchedHandlers.length) {
                      handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers,
                      });
                    }
                  }
                }
              }

              // Add the remaining (directly-bound) handlers
              cur = this;
              if (delegateCount < handlers.length) {
                handlerQueue.push({
                  elem: cur,
                  handlers: handlers.slice(delegateCount),
                });
              }

              return handlerQueue;
            },

            addProp: function(name, hook) {
              Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: isFunction(hook)
                  ? function() {
                      if (this.originalEvent) {
                        return hook(this.originalEvent);
                      }
                    }
                  : function() {
                      if (this.originalEvent) {
                        return this.originalEvent[name];
                      }
                    },

                set: function(value) {
                  Object.defineProperty(this, name, {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: value,
                  });
                },
              });
            },

            fix: function(originalEvent) {
              return originalEvent[jQuery.expando]
                ? originalEvent
                : new jQuery.Event(originalEvent);
            },

            special: {
              load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true,
              },
              click: {
                // Utilize native event to ensure correct state for checkable inputs
                setup: function(data) {
                  // For mutual compressibility with _default, replace `this` access with a local var.
                  // `|| data` is dead code meant only to preserve the variable through minification.
                  var el = this || data;

                  // Claim the first handler
                  if (
                    rcheckableType.test(el.type) &&
                    el.click &&
                    nodeName(el, "input")
                  ) {
                    // dataPriv.set( el, "click", ... )
                    leverageNative(el, "click", returnTrue);
                  }

                  // Return false to allow normal processing in the caller
                  return false;
                },
                trigger: function(data) {
                  // For mutual compressibility with _default, replace `this` access with a local var.
                  // `|| data` is dead code meant only to preserve the variable through minification.
                  var el = this || data;

                  // Force setup before triggering a click
                  if (
                    rcheckableType.test(el.type) &&
                    el.click &&
                    nodeName(el, "input")
                  ) {
                    leverageNative(el, "click");
                  }

                  // Return non-false to allow normal event-path propagation
                  return true;
                },

                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function(event) {
                  var target = event.target;
                  return (
                    (rcheckableType.test(target.type) &&
                      target.click &&
                      nodeName(target, "input") &&
                      dataPriv.get(target, "click")) ||
                    nodeName(target, "a")
                  );
                },
              },

              beforeunload: {
                postDispatch: function(event) {
                  // Support: Firefox 20+
                  // Firefox doesn't alert if the returnValue field is not set.
                  if (event.result !== undefined && event.originalEvent) {
                    event.originalEvent.returnValue = event.result;
                  }
                },
              },
            },
          };

          // Ensure the presence of an event listener that handles manually-triggered
          // synthetic events by interrupting progress until reinvoked in response to
          // *native* events that it fires directly, ensuring that state changes have
          // already occurred before other listeners are invoked.
          function leverageNative(el, type, expectSync) {
            // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
            if (!expectSync) {
              if (dataPriv.get(el, type) === undefined) {
                jQuery.event.add(el, type, returnTrue);
              }
              return;
            }

            // Register the controller as a special universal handler for all event namespaces
            dataPriv.set(el, type, false);
            jQuery.event.add(el, type, {
              namespace: false,
              handler: function(event) {
                var notAsync,
                  result,
                  saved = dataPriv.get(this, type);

                if (event.isTrigger & 1 && this[type]) {
                  // Interrupt processing of the outer synthetic .trigger()ed event
                  // Saved data should be false in such cases, but might be a leftover capture object
                  // from an async native handler (gh-4350)
                  if (!saved.length) {
                    // Store arguments for use when handling the inner native event
                    // There will always be at least one argument (an event object), so this array
                    // will not be confused with a leftover capture object.
                    saved = slice.call(arguments);
                    dataPriv.set(this, type, saved);

                    // Trigger the native event and capture its result
                    // Support: IE <=9 - 11+
                    // focus() and blur() are asynchronous
                    notAsync = expectSync(this, type);
                    this[type]();
                    result = dataPriv.get(this, type);
                    if (saved !== result || notAsync) {
                      dataPriv.set(this, type, false);
                    } else {
                      result = {};
                    }
                    if (saved !== result) {
                      // Cancel the outer synthetic event
                      event.stopImmediatePropagation();
                      event.preventDefault();
                      return result.value;
                    }

                    // If this is an inner synthetic event for an event with a bubbling surrogate
                    // (focus or blur), assume that the surrogate already propagated from triggering the
                    // native event and prevent that from happening again here.
                    // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                    // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                    // less bad than duplication.
                  } else if ((jQuery.event.special[type] || {}).delegateType) {
                    event.stopPropagation();
                  }

                  // If this is a native event triggered above, everything is now in order
                  // Fire an inner synthetic event with the original arguments
                } else if (saved.length) {
                  // ...and capture the result
                  dataPriv.set(this, type, {
                    value: jQuery.event.trigger(
                      // Support: IE <=9 - 11+
                      // Extend with the prototype to reset the above stopImmediatePropagation()
                      jQuery.extend(saved[0], jQuery.Event.prototype),
                      saved.slice(1),
                      this
                    ),
                  });

                  // Abort handling of the native event
                  event.stopImmediatePropagation();
                }
              },
            });
          }

          jQuery.removeEvent = function(elem, type, handle) {
            // This "if" is needed for plain objects
            if (elem.removeEventListener) {
              elem.removeEventListener(type, handle);
            }
          };

          jQuery.Event = function(src, props) {
            // Allow instantiation without the 'new' keyword
            if (!(this instanceof jQuery.Event)) {
              return new jQuery.Event(src, props);
            }

            // Event object
            if (src && src.type) {
              this.originalEvent = src;
              this.type = src.type;

              // Events bubbling up the document may have been marked as prevented
              // by a handler lower down the tree; reflect the correct value.
              this.isDefaultPrevented =
                src.defaultPrevented ||
                (src.defaultPrevented === undefined &&
                  // Support: Android <=2.3 only
                  src.returnValue === false)
                  ? returnTrue
                  : returnFalse;

              // Create target properties
              // Support: Safari <=6 - 7 only
              // Target should not be a text node (#504, #13143)
              this.target =
                src.target && src.target.nodeType === 3
                  ? src.target.parentNode
                  : src.target;

              this.currentTarget = src.currentTarget;
              this.relatedTarget = src.relatedTarget;

              // Event type
            } else {
              this.type = src;
            }

            // Put explicitly provided properties onto the event object
            if (props) {
              jQuery.extend(this, props);
            }

            // Create a timestamp if incoming event doesn't have one
            this.timeStamp = (src && src.timeStamp) || Date.now();

            // Mark it as fixed
            this[jQuery.expando] = true;
          };

          // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
          // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
          jQuery.Event.prototype = {
            constructor: jQuery.Event,
            isDefaultPrevented: returnFalse,
            isPropagationStopped: returnFalse,
            isImmediatePropagationStopped: returnFalse,
            isSimulated: false,

            preventDefault: function() {
              var e = this.originalEvent;

              this.isDefaultPrevented = returnTrue;

              if (e && !this.isSimulated) {
                e.preventDefault();
              }
            },
            stopPropagation: function() {
              var e = this.originalEvent;

              this.isPropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopPropagation();
              }
            },
            stopImmediatePropagation: function() {
              var e = this.originalEvent;

              this.isImmediatePropagationStopped = returnTrue;

              if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
              }

              this.stopPropagation();
            },
          };

          // Includes all common event props including KeyEvent and MouseEvent specific props
          jQuery.each(
            {
              altKey: true,
              bubbles: true,
              cancelable: true,
              changedTouches: true,
              ctrlKey: true,
              detail: true,
              eventPhase: true,
              metaKey: true,
              pageX: true,
              pageY: true,
              shiftKey: true,
              view: true,
              char: true,
              code: true,
              charCode: true,
              key: true,
              keyCode: true,
              button: true,
              buttons: true,
              clientX: true,
              clientY: true,
              offsetX: true,
              offsetY: true,
              pointerId: true,
              pointerType: true,
              screenX: true,
              screenY: true,
              targetTouches: true,
              toElement: true,
              touches: true,

              which: function(event) {
                var button = event.button;

                // Add which for key events
                if (event.which == null && rkeyEvent.test(event.type)) {
                  return event.charCode != null
                    ? event.charCode
                    : event.keyCode;
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                if (
                  !event.which &&
                  button !== undefined &&
                  rmouseEvent.test(event.type)
                ) {
                  if (button & 1) {
                    return 1;
                  }

                  if (button & 2) {
                    return 3;
                  }

                  if (button & 4) {
                    return 2;
                  }

                  return 0;
                }

                return event.which;
              },
            },
            jQuery.event.addProp
          );

          jQuery.each({ focus: "focusin", blur: "focusout" }, function(
            type,
            delegateType
          ) {
            jQuery.event.special[type] = {
              // Utilize native event if possible so blur/focus sequence is correct
              setup: function() {
                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative(this, type, expectSync);

                // Return false to allow normal processing in the caller
                return false;
              },
              trigger: function() {
                // Force setup before trigger
                leverageNative(this, type);

                // Return non-false to allow normal event-path propagation
                return true;
              },

              delegateType: delegateType,
            };
          });

          // Create mouseenter/leave events using mouseover/out and event-time checks
          // so that event delegation works in jQuery.
          // Do the same for pointerenter/pointerleave and pointerover/pointerout
          //
          // Support: Safari 7 only
          // Safari sends mouseenter too often; see:
          // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
          // for the description of the bug (it existed in older Chrome versions as well).
          jQuery.each(
            {
              mouseenter: "mouseover",
              mouseleave: "mouseout",
              pointerenter: "pointerover",
              pointerleave: "pointerout",
            },
            function(orig, fix) {
              jQuery.event.special[orig] = {
                delegateType: fix,
                bindType: fix,

                handle: function(event) {
                  var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                  // For mouseenter/leave call the handler if related is outside the target.
                  // NB: No relatedTarget if the mouse left/entered the browser window
                  if (
                    !related ||
                    (related !== target && !jQuery.contains(target, related))
                  ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                  }
                  return ret;
                },
              };
            }
          );

          jQuery.fn.extend({
            on: function(types, selector, data, fn) {
              return on(this, types, selector, data, fn);
            },
            one: function(types, selector, data, fn) {
              return on(this, types, selector, data, fn, 1);
            },
            off: function(types, selector, fn) {
              var handleObj, type;
              if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                  handleObj.namespace
                    ? handleObj.origType + "." + handleObj.namespace
                    : handleObj.origType,
                  handleObj.selector,
                  handleObj.handler
                );
                return this;
              }
              if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                  this.off(type, selector, types[type]);
                }
                return this;
              }
              if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
              }
              if (fn === false) {
                fn = returnFalse;
              }
              return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
              });
            },
          });

          var // Support: IE <=10 - 11, Edge 12 - 13 only
            // In IE/Edge using regex groups here causes severe slowdowns.
            // See https://connect.microsoft.com/IE/feedback/details/1736512/
            rnoInnerhtml = /<script|<style|<link/i,
            // checked="checked" or checked
            rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
            rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

          // Prefer a tbody over its parent table for containing new rows
          function manipulationTarget(elem, content) {
            if (
              nodeName(elem, "table") &&
              nodeName(
                content.nodeType !== 11 ? content : content.firstChild,
                "tr"
              )
            ) {
              return jQuery(elem).children("tbody")[0] || elem;
            }

            return elem;
          }

          // Replace/restore the type attribute of script elements for safe DOM manipulation
          function disableScript(elem) {
            elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
            return elem;
          }
          function restoreScript(elem) {
            if ((elem.type || "").slice(0, 5) === "true/") {
              elem.type = elem.type.slice(5);
            } else {
              elem.removeAttribute("type");
            }

            return elem;
          }

          function cloneCopyEvent(src, dest) {
            var i, l, type, pdataOld, udataOld, udataCur, events;

            if (dest.nodeType !== 1) {
              return;
            }

            // 1. Copy private data: events, handlers, etc.
            if (dataPriv.hasData(src)) {
              pdataOld = dataPriv.get(src);
              events = pdataOld.events;

              if (events) {
                dataPriv.remove(dest, "handle events");

                for (type in events) {
                  for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                  }
                }
              }
            }

            // 2. Copy user data
            if (dataUser.hasData(src)) {
              udataOld = dataUser.access(src);
              udataCur = jQuery.extend({}, udataOld);

              dataUser.set(dest, udataCur);
            }
          }

          // Fix IE bugs, see support tests
          function fixInput(src, dest) {
            var nodeName = dest.nodeName.toLowerCase();

            // Fails to persist the checked state of a cloned checkbox or radio button.
            if (nodeName === "input" && rcheckableType.test(src.type)) {
              dest.checked = src.checked;

              // Fails to return the selected option to the default selected state when cloning options
            } else if (nodeName === "input" || nodeName === "textarea") {
              dest.defaultValue = src.defaultValue;
            }
          }

          function domManip(collection, args, callback, ignored) {
            // Flatten any nested arrays
            args = flat(args);

            var fragment,
              first,
              scripts,
              hasScripts,
              node,
              doc,
              i = 0,
              l = collection.length,
              iNoClone = l - 1,
              value = args[0],
              valueIsFunction = isFunction(value);

            // We can't cloneNode fragments that contain checked, in WebKit
            if (
              valueIsFunction ||
              (l > 1 &&
                typeof value === "string" &&
                !support.checkClone &&
                rchecked.test(value))
            ) {
              return collection.each(function(index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                  args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
              });
            }

            if (l) {
              fragment = buildFragment(
                args,
                collection[0].ownerDocument,
                false,
                collection,
                ignored
              );
              first = fragment.firstChild;

              if (fragment.childNodes.length === 1) {
                fragment = first;
              }

              // Require either new content or an interest in ignored elements to invoke the callback
              if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for (; i < l; i++) {
                  node = fragment;

                  if (i !== iNoClone) {
                    node = jQuery.clone(node, true, true);

                    // Keep references to cloned scripts for later restoration
                    if (hasScripts) {
                      // Support: Android <=4.0 only, PhantomJS 1 only
                      // push.apply(_, arraylike) throws on ancient WebKit
                      jQuery.merge(scripts, getAll(node, "script"));
                    }
                  }

                  callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                  doc = scripts[scripts.length - 1].ownerDocument;

                  // Reenable scripts
                  jQuery.map(scripts, restoreScript);

                  // Evaluate executable scripts on first document insertion
                  for (i = 0; i < hasScripts; i++) {
                    node = scripts[i];
                    if (
                      rscriptType.test(node.type || "") &&
                      !dataPriv.access(node, "globalEval") &&
                      jQuery.contains(doc, node)
                    ) {
                      if (
                        node.src &&
                        (node.type || "").toLowerCase() !== "module"
                      ) {
                        // Optional AJAX dependency, but won't run scripts if not present
                        if (jQuery._evalUrl && !node.noModule) {
                          jQuery._evalUrl(
                            node.src,
                            {
                              nonce: node.nonce || node.getAttribute("nonce"),
                            },
                            doc
                          );
                        }
                      } else {
                        DOMEval(
                          node.textContent.replace(rcleanScript, ""),
                          node,
                          doc
                        );
                      }
                    }
                  }
                }
              }
            }

            return collection;
          }

          function remove(elem, selector, keepData) {
            var node,
              nodes = selector ? jQuery.filter(selector, elem) : elem,
              i = 0;

            for (; (node = nodes[i]) != null; i++) {
              if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
              }

              if (node.parentNode) {
                if (keepData && isAttached(node)) {
                  setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
              }
            }

            return elem;
          }

          jQuery.extend({
            htmlPrefilter: function(html) {
              return html;
            },

            clone: function(elem, dataAndEvents, deepDataAndEvents) {
              var i,
                l,
                srcElements,
                destElements,
                clone = elem.cloneNode(true),
                inPage = isAttached(elem);

              // Fix IE cloning issues
              if (
                !support.noCloneChecked &&
                (elem.nodeType === 1 || elem.nodeType === 11) &&
                !jQuery.isXMLDoc(elem)
              ) {
                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                  fixInput(srcElements[i], destElements[i]);
                }
              }

              // Copy the events from the original to the clone
              if (dataAndEvents) {
                if (deepDataAndEvents) {
                  srcElements = srcElements || getAll(elem);
                  destElements = destElements || getAll(clone);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    cloneCopyEvent(srcElements[i], destElements[i]);
                  }
                } else {
                  cloneCopyEvent(elem, clone);
                }
              }

              // Preserve script evaluation history
              destElements = getAll(clone, "script");
              if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
              }

              // Return the cloned set
              return clone;
            },

            cleanData: function(elems) {
              var data,
                elem,
                type,
                special = jQuery.event.special,
                i = 0;

              for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                  if ((data = elem[dataPriv.expando])) {
                    if (data.events) {
                      for (type in data.events) {
                        if (special[type]) {
                          jQuery.event.remove(elem, type);

                          // This is a shortcut to avoid jQuery.event.remove's overhead
                        } else {
                          jQuery.removeEvent(elem, type, data.handle);
                        }
                      }
                    }

                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataPriv.expando] = undefined;
                  }
                  if (elem[dataUser.expando]) {
                    // Support: Chrome <=35 - 45+
                    // Assign undefined instead of using delete, see Data#remove
                    elem[dataUser.expando] = undefined;
                  }
                }
              }
            },
          });

          jQuery.fn.extend({
            detach: function(selector) {
              return remove(this, selector, true);
            },

            remove: function(selector) {
              return remove(this, selector);
            },

            text: function(value) {
              return access(
                this,
                function(value) {
                  return value === undefined
                    ? jQuery.text(this)
                    : this.empty().each(function() {
                        if (
                          this.nodeType === 1 ||
                          this.nodeType === 11 ||
                          this.nodeType === 9
                        ) {
                          this.textContent = value;
                        }
                      });
                },
                null,
                value,
                arguments.length
              );
            },

            append: function() {
              return domManip(this, arguments, function(elem) {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  var target = manipulationTarget(this, elem);
                  target.appendChild(elem);
                }
              });
            },

            prepend: function() {
              return domManip(this, arguments, function(elem) {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  var target = manipulationTarget(this, elem);
                  target.insertBefore(elem, target.firstChild);
                }
              });
            },

            before: function() {
              return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this);
                }
              });
            },

            after: function() {
              return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                  this.parentNode.insertBefore(elem, this.nextSibling);
                }
              });
            },

            empty: function() {
              var elem,
                i = 0;

              for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                  // Prevent memory leaks
                  jQuery.cleanData(getAll(elem, false));

                  // Remove any remaining nodes
                  elem.textContent = "";
                }
              }

              return this;
            },

            clone: function(dataAndEvents, deepDataAndEvents) {
              dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
              deepDataAndEvents =
                deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

              return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
              });
            },

            html: function(value) {
              return access(
                this,
                function(value) {
                  var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                  if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                  }

                  // See if we can take a shortcut and just use innerHTML
                  if (
                    typeof value === "string" &&
                    !rnoInnerhtml.test(value) &&
                    !wrapMap[
                      (rtagName.exec(value) || ["", ""])[1].toLowerCase()
                    ]
                  ) {
                    value = jQuery.htmlPrefilter(value);

                    try {
                      for (; i < l; i++) {
                        elem = this[i] || {};

                        // Remove element nodes and prevent memory leaks
                        if (elem.nodeType === 1) {
                          jQuery.cleanData(getAll(elem, false));
                          elem.innerHTML = value;
                        }
                      }

                      elem = 0;

                      // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                  }

                  if (elem) {
                    this.empty().append(value);
                  }
                },
                null,
                value,
                arguments.length
              );
            },

            replaceWith: function() {
              var ignored = [];

              // Make the changes, replacing each non-ignored context element with the new content
              return domManip(
                this,
                arguments,
                function(elem) {
                  var parent = this.parentNode;

                  if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                      parent.replaceChild(elem, this);
                    }
                  }

                  // Force callback invocation
                },
                ignored
              );
            },
          });

          jQuery.each(
            {
              appendTo: "append",
              prependTo: "prepend",
              insertBefore: "before",
              insertAfter: "after",
              replaceAll: "replaceWith",
            },
            function(name, original) {
              jQuery.fn[name] = function(selector) {
                var elems,
                  ret = [],
                  insert = jQuery(selector),
                  last = insert.length - 1,
                  i = 0;

                for (; i <= last; i++) {
                  elems = i === last ? this : this.clone(true);
                  jQuery(insert[i])[original](elems);

                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // .get() because push.apply(_, arraylike) throws on ancient WebKit
                  push.apply(ret, elems.get());
                }

                return this.pushStack(ret);
              };
            }
          );
          var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

          var getStyles = function(elem) {
            // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
            // IE throws on elements created in popups
            // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
            var view = elem.ownerDocument.defaultView;

            if (!view || !view.opener) {
              view = window;
            }

            return view.getComputedStyle(elem);
          };

          var swap = function(elem, options, callback) {
            var ret,
              name,
              old = {};

            // Remember the old values, and insert the new ones
            for (name in options) {
              old[name] = elem.style[name];
              elem.style[name] = options[name];
            }

            ret = callback.call(elem);

            // Revert the old values
            for (name in options) {
              elem.style[name] = old[name];
            }

            return ret;
          };

          var rboxStyle = new RegExp(cssExpand.join("|"), "i");

          (function() {
            // Executing both pixelPosition & boxSizingReliable tests require only one layout
            // so they're executed at the same time to save the second computation.
            function computeStyleTests() {
              // This is a singleton, we need to execute it only once
              if (!div) {
                return;
              }

              container.style.cssText =
                "position:absolute;left:-11111px;width:60px;" +
                "margin-top:1px;padding:0;border:0";
              div.style.cssText =
                "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                "margin:auto;border:1px;padding:1px;" +
                "width:60%;top:1%";
              documentElement.appendChild(container).appendChild(div);

              var divStyle = window.getComputedStyle(div);
              pixelPositionVal = divStyle.top !== "1%";

              // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
              reliableMarginLeftVal =
                roundPixelMeasures(divStyle.marginLeft) === 12;

              // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
              // Some styles come back with percentage values, even though they shouldn't
              div.style.right = "60%";
              pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

              // Support: IE 9 - 11 only
              // Detect misreporting of content dimensions for box-sizing:border-box elements
              boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

              // Support: IE 9 only
              // Detect overflow:scroll screwiness (gh-3699)
              // Support: Chrome <=64
              // Don't get tricked when zoom affects offsetWidth (gh-4029)
              div.style.position = "absolute";
              scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

              documentElement.removeChild(container);

              // Nullify the div so it wouldn't be stored in the memory and
              // it will also be a sign that checks already performed
              div = null;
            }

            function roundPixelMeasures(measure) {
              return Math.round(parseFloat(measure));
            }

            var pixelPositionVal,
              boxSizingReliableVal,
              scrollboxSizeVal,
              pixelBoxStylesVal,
              reliableTrDimensionsVal,
              reliableMarginLeftVal,
              container = document.createElement("div"),
              div = document.createElement("div");

            // Finish early in limited (non-browser) environments
            if (!div.style) {
              return;
            }

            // Support: IE <=9 - 11 only
            // Style of cloned element affects source element cloned (#8908)
            div.style.backgroundClip = "content-box";
            div.cloneNode(true).style.backgroundClip = "";
            support.clearCloneStyle =
              div.style.backgroundClip === "content-box";

            jQuery.extend(support, {
              boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
              },
              pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
              },
              pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
              },
              reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
              },
              scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
              },

              // Support: IE 9 - 11+, Edge 15 - 18+
              // IE/Edge misreport `getComputedStyle` of table rows with width/height
              // set in CSS while `offset*` properties report correct values.
              // Behavior in IE 9 is more subtle than in newer versions & it passes
              // some versions of this test; make sure not to make it pass there!
              reliableTrDimensions: function() {
                var table, tr, trChild, trStyle;
                if (reliableTrDimensionsVal == null) {
                  table = document.createElement("table");
                  tr = document.createElement("tr");
                  trChild = document.createElement("div");

                  table.style.cssText = "position:absolute;left:-11111px";
                  tr.style.height = "1px";
                  trChild.style.height = "9px";

                  documentElement
                    .appendChild(table)
                    .appendChild(tr)
                    .appendChild(trChild);

                  trStyle = window.getComputedStyle(tr);
                  reliableTrDimensionsVal = parseInt(trStyle.height) > 3;

                  documentElement.removeChild(table);
                }
                return reliableTrDimensionsVal;
              },
            });
          })();

          function curCSS(elem, name, computed) {
            var width,
              minWidth,
              maxWidth,
              ret,
              // Support: Firefox 51+
              // Retrieving style before computed somehow
              // fixes an issue with getting wrong values
              // on detached elements
              style = elem.style;

            computed = computed || getStyles(elem);

            // getPropertyValue is needed for:
            //   .css('filter') (IE 9 only, #12537)
            //   .css('--customProperty) (#3144)
            if (computed) {
              ret = computed.getPropertyValue(name) || computed[name];

              if (ret === "" && !isAttached(elem)) {
                ret = jQuery.style(elem, name);
              }

              // A tribute to the "awesome hack by Dean Edwards"
              // Android Browser returns percentage for some values,
              // but width seems to be reliably pixels.
              // This is against the CSSOM draft spec:
              // https://drafts.csswg.org/cssom/#resolved-values
              if (
                !support.pixelBoxStyles() &&
                rnumnonpx.test(ret) &&
                rboxStyle.test(name)
              ) {
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
              }
            }

            return ret !== undefined
              ? // Support: IE <=9 - 11 only
                // IE returns zIndex value as an integer.
                ret + ""
              : ret;
          }

          function addGetHookIf(conditionFn, hookFn) {
            // Define the hook, we'll check on the first run if it's really needed.
            return {
              get: function() {
                if (conditionFn()) {
                  // Hook not needed (or it's not possible to use it due
                  // to missing dependency), remove it.
                  delete this.get;
                  return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
              },
            };
          }

          var cssPrefixes = ["Webkit", "Moz", "ms"],
            emptyStyle = document.createElement("div").style,
            vendorProps = {};

          // Return a vendor-prefixed property or undefined
          function vendorPropName(name) {
            // Check for vendor prefixed names
            var capName = name[0].toUpperCase() + name.slice(1),
              i = cssPrefixes.length;

            while (i--) {
              name = cssPrefixes[i] + capName;
              if (name in emptyStyle) {
                return name;
              }
            }
          }

          // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
          function finalPropName(name) {
            var final = jQuery.cssProps[name] || vendorProps[name];

            if (final) {
              return final;
            }
            if (name in emptyStyle) {
              return name;
            }
            return (vendorProps[name] = vendorPropName(name) || name);
          }

          var // Swappable if display is none or starts with table
            // except "table", "table-cell", or "table-caption"
            // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
            rdisplayswap = /^(none|table(?!-c[ea]).+)/,
            rcustomProp = /^--/,
            cssShow = {
              position: "absolute",
              visibility: "hidden",
              display: "block",
            },
            cssNormalTransform = {
              letterSpacing: "0",
              fontWeight: "400",
            };

          function setPositiveNumber(_elem, value, subtract) {
            // Any relative (+/-) values have already been
            // normalized at this point
            var matches = rcssNum.exec(value);
            return matches
              ? // Guard against undefined "subtract", e.g., when used as in cssHooks
                Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
              : value;
          }

          function boxModelAdjustment(
            elem,
            dimension,
            box,
            isBorderBox,
            styles,
            computedVal
          ) {
            var i = dimension === "width" ? 1 : 0,
              extra = 0,
              delta = 0;

            // Adjustment may not be necessary
            if (box === (isBorderBox ? "border" : "content")) {
              return 0;
            }

            for (; i < 4; i += 2) {
              // Both box models exclude margin
              if (box === "margin") {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
              }

              // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
              if (!isBorderBox) {
                // Add padding
                delta += jQuery.css(
                  elem,
                  "padding" + cssExpand[i],
                  true,
                  styles
                );

                // For "border" or "margin", add border
                if (box !== "padding") {
                  delta += jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );

                  // But still keep track of it otherwise
                } else {
                  extra += jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );
                }

                // If we get here with a border-box (content + padding + border), we're seeking "content" or
                // "padding" or "margin"
              } else {
                // For "content", subtract padding
                if (box === "content") {
                  delta -= jQuery.css(
                    elem,
                    "padding" + cssExpand[i],
                    true,
                    styles
                  );
                }

                // For "content" or "padding", subtract border
                if (box !== "margin") {
                  delta -= jQuery.css(
                    elem,
                    "border" + cssExpand[i] + "Width",
                    true,
                    styles
                  );
                }
              }
            }

            // Account for positive content-box scroll gutter when requested by providing computedVal
            if (!isBorderBox && computedVal >= 0) {
              // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
              // Assuming integer scroll gutter, subtract the rest and round down
              delta +=
                Math.max(
                  0,
                  Math.ceil(
                    elem[
                      "offset" + dimension[0].toUpperCase() + dimension.slice(1)
                    ] -
                      computedVal -
                      delta -
                      extra -
                      0.5

                    // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                    // Use an explicit zero to avoid NaN (gh-3964)
                  )
                ) || 0;
            }

            return delta;
          }

          function getWidthOrHeight(elem, dimension, extra) {
            // Start with computed style
            var styles = getStyles(elem),
              // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
              // Fake content-box until we know it's needed to know the true value.
              boxSizingNeeded = !support.boxSizingReliable() || extra,
              isBorderBox =
                boxSizingNeeded &&
                jQuery.css(elem, "boxSizing", false, styles) === "border-box",
              valueIsBorderBox = isBorderBox,
              val = curCSS(elem, dimension, styles),
              offsetProp =
                "offset" + dimension[0].toUpperCase() + dimension.slice(1);

            // Support: Firefox <=54
            // Return a confounding non-pixel value or feign ignorance, as appropriate.
            if (rnumnonpx.test(val)) {
              if (!extra) {
                return val;
              }
              val = "auto";
            }

            // Support: IE 9 - 11 only
            // Use offsetWidth/offsetHeight for when box sizing is unreliable.
            // In those cases, the computed value can be trusted to be border-box.
            if (
              ((!support.boxSizingReliable() && isBorderBox) ||
                // Support: IE 10 - 11+, Edge 15 - 18+
                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                // set in CSS while `offset*` properties report correct values.
                // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
                // Fall back to offsetWidth/offsetHeight when value is "auto"
                // This happens for inline elements with no explicit setting (gh-3571)
                val === "auto" ||
                // Support: Android <=4.1 - 4.3 only
                // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                (!parseFloat(val) &&
                  jQuery.css(elem, "display", false, styles) === "inline")) &&
              // Make sure the element is visible & connected
              elem.getClientRects().length
            ) {
              isBorderBox =
                jQuery.css(elem, "boxSizing", false, styles) === "border-box";

              // Where available, offsetWidth/offsetHeight approximate border box dimensions.
              // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
              // retrieved value as a content box dimension.
              valueIsBorderBox = offsetProp in elem;
              if (valueIsBorderBox) {
                val = elem[offsetProp];
              }
            }

            // Normalize "" and auto
            val = parseFloat(val) || 0;

            // Adjust for the element's box model
            return (
              val +
              boxModelAdjustment(
                elem,
                dimension,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles,

                // Provide the current computed size to request scroll gutter calculation (gh-3589)
                val
              ) +
              "px"
            );
          }

          jQuery.extend({
            // Add in style property hooks for overriding the default
            // behavior of getting and setting a style property
            cssHooks: {
              opacity: {
                get: function(elem, computed) {
                  if (computed) {
                    // We should always get a number back from opacity
                    var ret = curCSS(elem, "opacity");
                    return ret === "" ? "1" : ret;
                  }
                },
              },
            },

            // Don't automatically add "px" to these possibly-unitless properties
            cssNumber: {
              animationIterationCount: true,
              columnCount: true,
              fillOpacity: true,
              flexGrow: true,
              flexShrink: true,
              fontWeight: true,
              gridArea: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnStart: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowStart: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              widows: true,
              zIndex: true,
              zoom: true,
            },

            // Add in properties whose names you wish to fix before
            // setting or getting the value
            cssProps: {},

            // Get and set the style property on a DOM Node
            style: function(elem, name, value, extra) {
              // Don't set styles on text and comment nodes
              if (
                !elem ||
                elem.nodeType === 3 ||
                elem.nodeType === 8 ||
                !elem.style
              ) {
                return;
              }

              // Make sure that we're working with the right name
              var ret,
                type,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name),
                style = elem.style;

              // Make sure that we're working with the right name. We don't
              // want to query the value if it is a CSS custom property
              // since they are user-defined.
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              // Gets hook for the prefixed version, then unprefixed version
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              // Check if we're setting a value
              if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (
                  type === "string" &&
                  (ret = rcssNum.exec(value)) &&
                  ret[1]
                ) {
                  value = adjustCSS(elem, name, ret);

                  // Fixes bug #9237
                  type = "number";
                }

                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) {
                  return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if (type === "number" && !isCustomProp) {
                  value +=
                    (ret && ret[3]) || (jQuery.cssNumber[origName] ? "" : "px");
                }

                // background-* props affect original clone's values
                if (
                  !support.clearCloneStyle &&
                  value === "" &&
                  name.indexOf("background") === 0
                ) {
                  style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (
                  !hooks ||
                  !("set" in hooks) ||
                  (value = hooks.set(elem, value, extra)) !== undefined
                ) {
                  if (isCustomProp) {
                    style.setProperty(name, value);
                  } else {
                    style[name] = value;
                  }
                }
              } else {
                // If a hook was provided get the non-computed value from there
                if (
                  hooks &&
                  "get" in hooks &&
                  (ret = hooks.get(elem, false, extra)) !== undefined
                ) {
                  return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
              }
            },

            css: function(elem, name, extra, styles) {
              var val,
                num,
                hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name);

              // Make sure that we're working with the right name. We don't
              // want to modify the value if it is a CSS custom property
              // since they are user-defined.
              if (!isCustomProp) {
                name = finalPropName(origName);
              }

              // Try prefixed name followed by the unprefixed name
              hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

              // If a hook was provided get the computed value from there
              if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
              }

              // Otherwise, if a way to get the computed value exists, use that
              if (val === undefined) {
                val = curCSS(elem, name, styles);
              }

              // Convert "normal" to computed value
              if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
              }

              // Make numeric if forced or a qualifier was provided and val looks numeric
              if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
              }

              return val;
            },
          });

          jQuery.each(["height", "width"], function(_i, dimension) {
            jQuery.cssHooks[dimension] = {
              get: function(elem, computed, extra) {
                if (computed) {
                  // Certain elements can have dimension info if we invisibly show them
                  // but it must have a current display style that would benefit
                  return rdisplayswap.test(jQuery.css(elem, "display")) &&
                    // Support: Safari 8+
                    // Table columns in Safari have non-zero offsetWidth & zero
                    // getBoundingClientRect().width unless display is changed.
                    // Support: IE <=11 only
                    // Running getBoundingClientRect on a disconnected node
                    // in IE throws an error.
                    (!elem.getClientRects().length ||
                      !elem.getBoundingClientRect().width)
                    ? swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, dimension, extra);
                      })
                    : getWidthOrHeight(elem, dimension, extra);
                }
              },

              set: function(elem, value, extra) {
                var matches,
                  styles = getStyles(elem),
                  // Only read styles.position if the test has a chance to fail
                  // to avoid forcing a reflow.
                  scrollboxSizeBuggy =
                    !support.scrollboxSize() && styles.position === "absolute",
                  // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                  boxSizingNeeded = scrollboxSizeBuggy || extra,
                  isBorderBox =
                    boxSizingNeeded &&
                    jQuery.css(elem, "boxSizing", false, styles) ===
                      "border-box",
                  subtract = extra
                    ? boxModelAdjustment(
                        elem,
                        dimension,
                        extra,
                        isBorderBox,
                        styles
                      )
                    : 0;

                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if (isBorderBox && scrollboxSizeBuggy) {
                  subtract -= Math.ceil(
                    elem[
                      "offset" + dimension[0].toUpperCase() + dimension.slice(1)
                    ] -
                      parseFloat(styles[dimension]) -
                      boxModelAdjustment(
                        elem,
                        dimension,
                        "border",
                        false,
                        styles
                      ) -
                      0.5
                  );
                }

                // Convert to pixels if value adjustment is needed
                if (
                  subtract &&
                  (matches = rcssNum.exec(value)) &&
                  (matches[3] || "px") !== "px"
                ) {
                  elem.style[dimension] = value;
                  value = jQuery.css(elem, dimension);
                }

                return setPositiveNumber(elem, value, subtract);
              },
            };
          });

          jQuery.cssHooks.marginLeft = addGetHookIf(
            support.reliableMarginLeft,
            function(elem, computed) {
              if (computed) {
                return (
                  (parseFloat(curCSS(elem, "marginLeft")) ||
                    elem.getBoundingClientRect().left -
                      swap(elem, { marginLeft: 0 }, function() {
                        return elem.getBoundingClientRect().left;
                      })) + "px"
                );
              }
            }
          );

          // These hooks are used by animate to expand properties
          jQuery.each(
            {
              margin: "",
              padding: "",
              border: "Width",
            },
            function(prefix, suffix) {
              jQuery.cssHooks[prefix + suffix] = {
                expand: function(value) {
                  var i = 0,
                    expanded = {},
                    // Assumes a single number if not a string
                    parts =
                      typeof value === "string" ? value.split(" ") : [value];

                  for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                      parts[i] || parts[i - 2] || parts[0];
                  }

                  return expanded;
                },
              };

              if (prefix !== "margin") {
                jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
              }
            }
          );

          jQuery.fn.extend({
            css: function(name, value) {
              return access(
                this,
                function(elem, name, value) {
                  var styles,
                    len,
                    map = {},
                    i = 0;

                  if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                      map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                  }

                  return value !== undefined
                    ? jQuery.style(elem, name, value)
                    : jQuery.css(elem, name);
                },
                name,
                value,
                arguments.length > 1
              );
            },
          });

          function Tween(elem, options, prop, end, easing) {
            return new Tween.prototype.init(elem, options, prop, end, easing);
          }
          jQuery.Tween = Tween;

          Tween.prototype = {
            constructor: Tween,
            init: function(elem, options, prop, end, easing, unit) {
              this.elem = elem;
              this.prop = prop;
              this.easing = easing || jQuery.easing._default;
              this.options = options;
              this.start = this.now = this.cur();
              this.end = end;
              this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
            },
            cur: function() {
              var hooks = Tween.propHooks[this.prop];

              return hooks && hooks.get
                ? hooks.get(this)
                : Tween.propHooks._default.get(this);
            },
            run: function(percent) {
              var eased,
                hooks = Tween.propHooks[this.prop];

              if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                  percent,
                  this.options.duration * percent,
                  0,
                  1,
                  this.options.duration
                );
              } else {
                this.pos = eased = percent;
              }
              this.now = (this.end - this.start) * eased + this.start;

              if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
              }

              if (hooks && hooks.set) {
                hooks.set(this);
              } else {
                Tween.propHooks._default.set(this);
              }
              return this;
            },
          };

          Tween.prototype.init.prototype = Tween.prototype;

          Tween.propHooks = {
            _default: {
              get: function(tween) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (
                  tween.elem.nodeType !== 1 ||
                  (tween.elem[tween.prop] != null &&
                    tween.elem.style[tween.prop] == null)
                ) {
                  return tween.elem[tween.prop];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
              },
              set: function(tween) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) {
                  jQuery.fx.step[tween.prop](tween);
                } else if (
                  tween.elem.nodeType === 1 &&
                  (jQuery.cssHooks[tween.prop] ||
                    tween.elem.style[finalPropName(tween.prop)] != null)
                ) {
                  jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                  tween.elem[tween.prop] = tween.now;
                }
              },
            },
          };

          // Support: IE <=9 only
          // Panic based approach to setting things on disconnected nodes
          Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
            set: function(tween) {
              if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
              }
            },
          };

          jQuery.easing = {
            linear: function(p) {
              return p;
            },
            swing: function(p) {
              return 0.5 - Math.cos(p * Math.PI) / 2;
            },
            _default: "swing",
          };

          jQuery.fx = Tween.prototype.init;

          // Back compat <1.8 extension point
          jQuery.fx.step = {};

          var fxNow,
            inProgress,
            rfxtypes = /^(?:toggle|show|hide)$/,
            rrun = /queueHooks$/;

          function schedule() {
            if (inProgress) {
              if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
              } else {
                window.setTimeout(schedule, jQuery.fx.interval);
              }

              jQuery.fx.tick();
            }
          }

          // Animations created synchronously will run synchronously
          function createFxNow() {
            window.setTimeout(function() {
              fxNow = undefined;
            });
            return (fxNow = Date.now());
          }

          // Generate parameters to create a standard animation
          function genFx(type, includeWidth) {
            var which,
              i = 0,
              attrs = { height: type };

            // If we include width, step value is 1 to do all cssExpand values,
            // otherwise step value is 2 to skip over Left and Right
            includeWidth = includeWidth ? 1 : 0;
            for (; i < 4; i += 2 - includeWidth) {
              which = cssExpand[i];
              attrs["margin" + which] = attrs["padding" + which] = type;
            }

            if (includeWidth) {
              attrs.opacity = attrs.width = type;
            }

            return attrs;
          }

          function createTween(value, prop, animation) {
            var tween,
              collection = (Animation.tweeners[prop] || []).concat(
                Animation.tweeners["*"]
              ),
              index = 0,
              length = collection.length;
            for (; index < length; index++) {
              if ((tween = collection[index].call(animation, prop, value))) {
                // We're done with this property
                return tween;
              }
            }
          }

          function defaultPrefilter(elem, props, opts) {
            var prop,
              value,
              toggle,
              hooks,
              oldfire,
              propTween,
              restoreDisplay,
              display,
              isBox = "width" in props || "height" in props,
              anim = this,
              orig = {},
              style = elem.style,
              hidden = elem.nodeType && isHiddenWithinTree(elem),
              dataShow = dataPriv.get(elem, "fxshow");

            // Queue-skipping animations hijack the fx hooks
            if (!opts.queue) {
              hooks = jQuery._queueHooks(elem, "fx");
              if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                  if (!hooks.unqueued) {
                    oldfire();
                  }
                };
              }
              hooks.unqueued++;

              anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                  hooks.unqueued--;
                  if (!jQuery.queue(elem, "fx").length) {
                    hooks.empty.fire();
                  }
                });
              });
            }

            // Detect show/hide animations
            for (prop in props) {
              value = props[prop];
              if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                  // Pretend to be hidden if this is a "show" and
                  // there is still data from a stopped show/hide
                  if (
                    value === "show" &&
                    dataShow &&
                    dataShow[prop] !== undefined
                  ) {
                    hidden = true;

                    // Ignore all other no-op show/hide data
                  } else {
                    continue;
                  }
                }
                orig[prop] =
                  (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
              }
            }

            // Bail out if this is a no-op like .hide().hide()
            propTween = !jQuery.isEmptyObject(props);
            if (!propTween && jQuery.isEmptyObject(orig)) {
              return;
            }

            // Restrict "overflow" and "display" styles during box animations
            if (isBox && elem.nodeType === 1) {
              // Support: IE <=9 - 11, Edge 12 - 15
              // Record all 3 overflow attributes because IE does not infer the shorthand
              // from identically-valued overflowX and overflowY and Edge just mirrors
              // the overflowX value there.
              opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY,
              ];

              // Identify a display type, preferring old show/hide data over the CSS cascade
              restoreDisplay = dataShow && dataShow.display;
              if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
              }
              display = jQuery.css(elem, "display");
              if (display === "none") {
                if (restoreDisplay) {
                  display = restoreDisplay;
                } else {
                  // Get nonempty value(s) by temporarily forcing visibility
                  showHide([elem], true);
                  restoreDisplay = elem.style.display || restoreDisplay;
                  display = jQuery.css(elem, "display");
                  showHide([elem]);
                }
              }

              // Animate inline elements as inline-block
              if (
                display === "inline" ||
                (display === "inline-block" && restoreDisplay != null)
              ) {
                if (jQuery.css(elem, "float") === "none") {
                  // Restore the original display value at the end of pure show/hide animations
                  if (!propTween) {
                    anim.done(function() {
                      style.display = restoreDisplay;
                    });
                    if (restoreDisplay == null) {
                      display = style.display;
                      restoreDisplay = display === "none" ? "" : display;
                    }
                  }
                  style.display = "inline-block";
                }
              }
            }

            if (opts.overflow) {
              style.overflow = "hidden";
              anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
              });
            }

            // Implement show/hide animations
            propTween = false;
            for (prop in orig) {
              // General show/hide setup for this element animation
              if (!propTween) {
                if (dataShow) {
                  if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                  }
                } else {
                  dataShow = dataPriv.access(elem, "fxshow", {
                    display: restoreDisplay,
                  });
                }

                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) {
                  dataShow.hidden = !hidden;
                }

                // Show elements before animating them
                if (hidden) {
                  showHide([elem], true);
                }

                /* eslint-disable no-loop-func */

                anim.done(function() {
                  /* eslint-enable no-loop-func */

                  // The final step of a "hide" animation is actually hiding the element
                  if (!hidden) {
                    showHide([elem]);
                  }
                  dataPriv.remove(elem, "fxshow");
                  for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                  }
                });
              }

              // Per-property setup
              propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
              if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                  propTween.end = propTween.start;
                  propTween.start = 0;
                }
              }
            }
          }

          function propFilter(props, specialEasing) {
            var index, name, easing, value, hooks;

            // camelCase, specialEasing and expand cssHook pass
            for (index in props) {
              name = camelCase(index);
              easing = specialEasing[name];
              value = props[index];
              if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
              }

              if (index !== name) {
                props[name] = value;
                delete props[index];
              }

              hooks = jQuery.cssHooks[name];
              if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for (index in value) {
                  if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                  }
                }
              } else {
                specialEasing[name] = easing;
              }
            }
          }

          function Animation(elem, properties, options) {
            var result,
              stopped,
              index = 0,
              length = Animation.prefilters.length,
              deferred = jQuery.Deferred().always(function() {
                // Don't match elem in the :animated selector
                delete tick.elem;
              }),
              tick = function() {
                if (stopped) {
                  return false;
                }
                var currentTime = fxNow || createFxNow(),
                  remaining = Math.max(
                    0,
                    animation.startTime + animation.duration - currentTime
                  ),
                  // Support: Android 2.3 only
                  // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                  temp = remaining / animation.duration || 0,
                  percent = 1 - temp,
                  index = 0,
                  length = animation.tweens.length;

                for (; index < length; index++) {
                  animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                // If there's more to do, yield
                if (percent < 1 && length) {
                  return remaining;
                }

                // If this was an empty animation, synthesize a final progress notification
                if (!length) {
                  deferred.notifyWith(elem, [animation, 1, 0]);
                }

                // Resolve the animation and report its conclusion
                deferred.resolveWith(elem, [animation]);
                return false;
              },
              animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(
                  true,
                  {
                    specialEasing: {},
                    easing: jQuery.easing._default,
                  },
                  options
                ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                  var tween = jQuery.Tween(
                    elem,
                    animation.opts,
                    prop,
                    end,
                    animation.opts.specialEasing[prop] || animation.opts.easing
                  );
                  animation.tweens.push(tween);
                  return tween;
                },
                stop: function(gotoEnd) {
                  var index = 0,
                    // If we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                    length = gotoEnd ? animation.tweens.length : 0;
                  if (stopped) {
                    return this;
                  }
                  stopped = true;
                  for (; index < length; index++) {
                    animation.tweens[index].run(1);
                  }

                  // Resolve when we played the last frame; otherwise, reject
                  if (gotoEnd) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                    deferred.resolveWith(elem, [animation, gotoEnd]);
                  } else {
                    deferred.rejectWith(elem, [animation, gotoEnd]);
                  }
                  return this;
                },
              }),
              props = animation.props;

            propFilter(props, animation.opts.specialEasing);

            for (; index < length; index++) {
              result = Animation.prefilters[index].call(
                animation,
                elem,
                props,
                animation.opts
              );
              if (result) {
                if (isFunction(result.stop)) {
                  jQuery._queueHooks(
                    animation.elem,
                    animation.opts.queue
                  ).stop = result.stop.bind(result);
                }
                return result;
              }
            }

            jQuery.map(props, createTween, animation);

            if (isFunction(animation.opts.start)) {
              animation.opts.start.call(elem, animation);
            }

            // Attach callbacks from options
            animation
              .progress(animation.opts.progress)
              .done(animation.opts.done, animation.opts.complete)
              .fail(animation.opts.fail)
              .always(animation.opts.always);

            jQuery.fx.timer(
              jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue,
              })
            );

            return animation;
          }

          jQuery.Animation = jQuery.extend(Animation, {
            tweeners: {
              "*": [
                function(prop, value) {
                  var tween = this.createTween(prop, value);
                  adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                  return tween;
                },
              ],
            },

            tweener: function(props, callback) {
              if (isFunction(props)) {
                callback = props;
                props = ["*"];
              } else {
                props = props.match(rnothtmlwhite);
              }

              var prop,
                index = 0,
                length = props.length;

              for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
              }
            },

            prefilters: [defaultPrefilter],

            prefilter: function(callback, prepend) {
              if (prepend) {
                Animation.prefilters.unshift(callback);
              } else {
                Animation.prefilters.push(callback);
              }
            },
          });

          jQuery.speed = function(speed, easing, fn) {
            var opt =
              speed && typeof speed === "object"
                ? jQuery.extend({}, speed)
                : {
                    complete:
                      fn || (!fn && easing) || (isFunction(speed) && speed),
                    duration: speed,
                    easing:
                      (fn && easing) ||
                      (easing && !isFunction(easing) && easing),
                  };

            // Go to the end state if fx are off
            if (jQuery.fx.off) {
              opt.duration = 0;
            } else {
              if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                  opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                  opt.duration = jQuery.fx.speeds._default;
                }
              }
            }

            // Normalize opt.queue - true/undefined/null -> "fx"
            if (opt.queue == null || opt.queue === true) {
              opt.queue = "fx";
            }

            // Queueing
            opt.old = opt.complete;

            opt.complete = function() {
              if (isFunction(opt.old)) {
                opt.old.call(this);
              }

              if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
              }
            };

            return opt;
          };

          jQuery.fn.extend({
            fadeTo: function(speed, to, easing, callback) {
              // Show any hidden elements after setting opacity to 0
              return (
                this.filter(isHiddenWithinTree)
                  .css("opacity", 0)
                  .show()

                  // Animate to the value specified
                  .end()
                  .animate({ opacity: to }, speed, easing, callback)
              );
            },
            animate: function(prop, speed, easing, callback) {
              var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function() {
                  // Operate on a copy of prop so per-property easing won't be lost
                  var anim = Animation(this, jQuery.extend({}, prop), optall);

                  // Empty animations, or finishing resolves immediately
                  if (empty || dataPriv.get(this, "finish")) {
                    anim.stop(true);
                  }
                };
              doAnimation.finish = doAnimation;

              return empty || optall.queue === false
                ? this.each(doAnimation)
                : this.queue(optall.queue, doAnimation);
            },
            stop: function(type, clearQueue, gotoEnd) {
              var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
              };

              if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
              }
              if (clearQueue) {
                this.queue(type || "fx", []);
              }

              return this.each(function() {
                var dequeue = true,
                  index = type != null && type + "queueHooks",
                  timers = jQuery.timers,
                  data = dataPriv.get(this);

                if (index) {
                  if (data[index] && data[index].stop) {
                    stopQueue(data[index]);
                  }
                } else {
                  for (index in data) {
                    if (data[index] && data[index].stop && rrun.test(index)) {
                      stopQueue(data[index]);
                    }
                  }
                }

                for (index = timers.length; index--; ) {
                  if (
                    timers[index].elem === this &&
                    (type == null || timers[index].queue === type)
                  ) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                  }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) {
                  jQuery.dequeue(this, type);
                }
              });
            },
            finish: function(type) {
              if (type !== false) {
                type = type || "fx";
              }
              return this.each(function() {
                var index,
                  data = dataPriv.get(this),
                  queue = data[type + "queue"],
                  hooks = data[type + "queueHooks"],
                  timers = jQuery.timers,
                  length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                  hooks.stop.call(this, true);
                }

                // Look for any active animations, and finish them
                for (index = timers.length; index--; ) {
                  if (
                    timers[index].elem === this &&
                    timers[index].queue === type
                  ) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                  }
                }

                // Look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                  if (queue[index] && queue[index].finish) {
                    queue[index].finish.call(this);
                  }
                }

                // Turn off finishing flag
                delete data.finish;
              });
            },
          });

          jQuery.each(["toggle", "show", "hide"], function(_i, name) {
            var cssFn = jQuery.fn[name];
            jQuery.fn[name] = function(speed, easing, callback) {
              return speed == null || typeof speed === "boolean"
                ? cssFn.apply(this, arguments)
                : this.animate(genFx(name, true), speed, easing, callback);
            };
          });

          // Generate shortcuts for custom animations
          jQuery.each(
            {
              slideDown: genFx("show"),
              slideUp: genFx("hide"),
              slideToggle: genFx("toggle"),
              fadeIn: { opacity: "show" },
              fadeOut: { opacity: "hide" },
              fadeToggle: { opacity: "toggle" },
            },
            function(name, props) {
              jQuery.fn[name] = function(speed, easing, callback) {
                return this.animate(props, speed, easing, callback);
              };
            }
          );

          jQuery.timers = [];
          jQuery.fx.tick = function() {
            var timer,
              i = 0,
              timers = jQuery.timers;

            fxNow = Date.now();

            for (; i < timers.length; i++) {
              timer = timers[i];

              // Run the timer and safely remove it when done (allowing for external removal)
              if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
              }
            }

            if (!timers.length) {
              jQuery.fx.stop();
            }
            fxNow = undefined;
          };

          jQuery.fx.timer = function(timer) {
            jQuery.timers.push(timer);
            jQuery.fx.start();
          };

          jQuery.fx.interval = 13;
          jQuery.fx.start = function() {
            if (inProgress) {
              return;
            }

            inProgress = true;
            schedule();
          };

          jQuery.fx.stop = function() {
            inProgress = null;
          };

          jQuery.fx.speeds = {
            slow: 600,
            fast: 200,

            // Default speed
            _default: 400,
          };

          // Based off of the plugin by Clint Helfers, with permission.
          // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
          jQuery.fn.delay = function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";

            return this.queue(type, function(next, hooks) {
              var timeout = window.setTimeout(next, time);
              hooks.stop = function() {
                window.clearTimeout(timeout);
              };
            });
          };

          (function() {
            var input = document.createElement("input"),
              select = document.createElement("select"),
              opt = select.appendChild(document.createElement("option"));

            input.type = "checkbox";

            // Support: Android <=4.3 only
            // Default value for a checkbox should be "on"
            support.checkOn = input.value !== "";

            // Support: IE <=11 only
            // Must access selectedIndex to make default options select
            support.optSelected = opt.selected;

            // Support: IE <=11 only
            // An input loses its value after becoming a radio
            input = document.createElement("input");
            input.value = "t";
            input.type = "radio";
            support.radioValue = input.value === "t";
          })();

          var boolHook,
            attrHandle = jQuery.expr.attrHandle;

          jQuery.fn.extend({
            attr: function(name, value) {
              return access(
                this,
                jQuery.attr,
                name,
                value,
                arguments.length > 1
              );
            },

            removeAttr: function(name) {
              return this.each(function() {
                jQuery.removeAttr(this, name);
              });
            },
          });

          jQuery.extend({
            attr: function(elem, name, value) {
              var ret,
                hooks,
                nType = elem.nodeType;

              // Don't get/set attributes on text, comment and attribute nodes
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              // Fallback to prop when attributes are not supported
              if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
              }

              // Attribute hooks are determined by the lowercase version
              // Grab necessary hook if one is defined
              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks =
                  jQuery.attrHooks[name.toLowerCase()] ||
                  (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
              }

              if (value !== undefined) {
                if (value === null) {
                  jQuery.removeAttr(elem, name);
                  return;
                }

                if (
                  hooks &&
                  "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined
                ) {
                  return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
              }

              if (
                hooks &&
                "get" in hooks &&
                (ret = hooks.get(elem, name)) !== null
              ) {
                return ret;
              }

              ret = jQuery.find.attr(elem, name);

              // Non-existent attributes return null, we normalize to undefined
              return ret == null ? undefined : ret;
            },

            attrHooks: {
              type: {
                set: function(elem, value) {
                  if (
                    !support.radioValue &&
                    value === "radio" &&
                    nodeName(elem, "input")
                  ) {
                    var val = elem.value;
                    elem.setAttribute("type", value);
                    if (val) {
                      elem.value = val;
                    }
                    return value;
                  }
                },
              },
            },

            removeAttr: function(elem, value) {
              var name,
                i = 0,
                // Attribute names can contain non-HTML whitespace characters
                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                attrNames = value && value.match(rnothtmlwhite);

              if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                  elem.removeAttribute(name);
                }
              }
            },
          });

          // Hooks for boolean attributes
          boolHook = {
            set: function(elem, value, name) {
              if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
              } else {
                elem.setAttribute(name, name);
              }
              return name;
            },
          };

          jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(
            _i,
            name
          ) {
            var getter = attrHandle[name] || jQuery.find.attr;

            attrHandle[name] = function(elem, name, isXML) {
              var ret,
                handle,
                lowercaseName = name.toLowerCase();

              if (!isXML) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
              }
              return ret;
            };
          });

          var rfocusable = /^(?:input|select|textarea|button)$/i,
            rclickable = /^(?:a|area)$/i;

          jQuery.fn.extend({
            prop: function(name, value) {
              return access(
                this,
                jQuery.prop,
                name,
                value,
                arguments.length > 1
              );
            },

            removeProp: function(name) {
              return this.each(function() {
                delete this[jQuery.propFix[name] || name];
              });
            },
          });

          jQuery.extend({
            prop: function(elem, name, value) {
              var ret,
                hooks,
                nType = elem.nodeType;

              // Don't get/set properties on text, comment and attribute nodes
              if (nType === 3 || nType === 8 || nType === 2) {
                return;
              }

              if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
              }

              if (value !== undefined) {
                if (
                  hooks &&
                  "set" in hooks &&
                  (ret = hooks.set(elem, value, name)) !== undefined
                ) {
                  return ret;
                }

                return (elem[name] = value);
              }

              if (
                hooks &&
                "get" in hooks &&
                (ret = hooks.get(elem, name)) !== null
              ) {
                return ret;
              }

              return elem[name];
            },

            propHooks: {
              tabIndex: {
                get: function(elem) {
                  // Support: IE <=9 - 11 only
                  // elem.tabIndex doesn't always return the
                  // correct value when it hasn't been explicitly set
                  // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                  // Use proper attribute retrieval(#12072)
                  var tabindex = jQuery.find.attr(elem, "tabindex");

                  if (tabindex) {
                    return parseInt(tabindex, 10);
                  }

                  if (
                    rfocusable.test(elem.nodeName) ||
                    (rclickable.test(elem.nodeName) && elem.href)
                  ) {
                    return 0;
                  }

                  return -1;
                },
              },
            },

            propFix: {
              for: "htmlFor",
              class: "className",
            },
          });

          // Support: IE <=11 only
          // Accessing the selectedIndex property
          // forces the browser to respect setting selected
          // on the option
          // The getter ensures a default option is selected
          // when in an optgroup
          // eslint rule "no-unused-expressions" is disabled for this code
          // since it considers such accessions noop
          if (!support.optSelected) {
            jQuery.propHooks.selected = {
              get: function(elem) {
                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
                return null;
              },
              set: function(elem) {
                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent) {
                  parent.selectedIndex;

                  if (parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                }
              },
            };
          }

          jQuery.each(
            [
              "tabIndex",
              "readOnly",
              "maxLength",
              "cellSpacing",
              "cellPadding",
              "rowSpan",
              "colSpan",
              "useMap",
              "frameBorder",
              "contentEditable",
            ],
            function() {
              jQuery.propFix[this.toLowerCase()] = this;
            }
          );

          // Strip and collapse whitespace according to HTML spec
          // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
          function stripAndCollapse(value) {
            var tokens = value.match(rnothtmlwhite) || [];
            return tokens.join(" ");
          }

          function getClass(elem) {
            return (elem.getAttribute && elem.getAttribute("class")) || "";
          }

          function classesToArray(value) {
            if (Array.isArray(value)) {
              return value;
            }
            if (typeof value === "string") {
              return value.match(rnothtmlwhite) || [];
            }
            return [];
          }

          jQuery.fn.extend({
            addClass: function(value) {
              var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

              if (isFunction(value)) {
                return this.each(function(j) {
                  jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
              }

              classes = classesToArray(value);

              if (classes.length) {
                while ((elem = this[i++])) {
                  curValue = getClass(elem);
                  cur =
                    elem.nodeType === 1 &&
                    " " + stripAndCollapse(curValue) + " ";

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {
                      if (cur.indexOf(" " + clazz + " ") < 0) {
                        cur += clazz + " ";
                      }
                    }

                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            removeClass: function(value) {
              var classes,
                elem,
                cur,
                curValue,
                clazz,
                j,
                finalValue,
                i = 0;

              if (isFunction(value)) {
                return this.each(function(j) {
                  jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
              }

              if (!arguments.length) {
                return this.attr("class", "");
              }

              classes = classesToArray(value);

              if (classes.length) {
                while ((elem = this[i++])) {
                  curValue = getClass(elem);

                  // This expression is here for better compressibility (see addClass)
                  cur =
                    elem.nodeType === 1 &&
                    " " + stripAndCollapse(curValue) + " ";

                  if (cur) {
                    j = 0;
                    while ((clazz = classes[j++])) {
                      // Remove *all* instances
                      while (cur.indexOf(" " + clazz + " ") > -1) {
                        cur = cur.replace(" " + clazz + " ", " ");
                      }
                    }

                    // Only assign if different to avoid unneeded rendering.
                    finalValue = stripAndCollapse(cur);
                    if (curValue !== finalValue) {
                      elem.setAttribute("class", finalValue);
                    }
                  }
                }
              }

              return this;
            },

            toggleClass: function(value, stateVal) {
              var type = typeof value,
                isValidValue = type === "string" || Array.isArray(value);

              if (typeof stateVal === "boolean" && isValidValue) {
                return stateVal
                  ? this.addClass(value)
                  : this.removeClass(value);
              }

              if (isFunction(value)) {
                return this.each(function(i) {
                  jQuery(this).toggleClass(
                    value.call(this, i, getClass(this), stateVal),
                    stateVal
                  );
                });
              }

              return this.each(function() {
                var className, i, self, classNames;

                if (isValidValue) {
                  // Toggle individual class names
                  i = 0;
                  self = jQuery(this);
                  classNames = classesToArray(value);

                  while ((className = classNames[i++])) {
                    // Check each className given, space separated list
                    if (self.hasClass(className)) {
                      self.removeClass(className);
                    } else {
                      self.addClass(className);
                    }
                  }

                  // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                  className = getClass(this);
                  if (className) {
                    // Store className if set
                    dataPriv.set(this, "__className__", className);
                  }

                  // If the element has a class name or if we're passed `false`,
                  // then remove the whole classname (if there was one, the above saved it).
                  // Otherwise bring back whatever was previously saved (if anything),
                  // falling back to the empty string if nothing was stored.
                  if (this.setAttribute) {
                    this.setAttribute(
                      "class",
                      className || value === false
                        ? ""
                        : dataPriv.get(this, "__className__") || ""
                    );
                  }
                }
              });
            },

            hasClass: function(selector) {
              var className,
                elem,
                i = 0;

              className = " " + selector + " ";
              while ((elem = this[i++])) {
                if (
                  elem.nodeType === 1 &&
                  (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(
                    className
                  ) > -1
                ) {
                  return true;
                }
              }

              return false;
            },
          });

          var rreturn = /\r/g;

          jQuery.fn.extend({
            val: function(value) {
              var hooks,
                ret,
                valueIsFunction,
                elem = this[0];

              if (!arguments.length) {
                if (elem) {
                  hooks =
                    jQuery.valHooks[elem.type] ||
                    jQuery.valHooks[elem.nodeName.toLowerCase()];

                  if (
                    hooks &&
                    "get" in hooks &&
                    (ret = hooks.get(elem, "value")) !== undefined
                  ) {
                    return ret;
                  }

                  ret = elem.value;

                  // Handle most common string cases
                  if (typeof ret === "string") {
                    return ret.replace(rreturn, "");
                  }

                  // Handle cases where value is null/undef or number
                  return ret == null ? "" : ret;
                }

                return;
              }

              valueIsFunction = isFunction(value);

              return this.each(function(i) {
                var val;

                if (this.nodeType !== 1) {
                  return;
                }

                if (valueIsFunction) {
                  val = value.call(this, i, jQuery(this).val());
                } else {
                  val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                  val = "";
                } else if (typeof val === "number") {
                  val += "";
                } else if (Array.isArray(val)) {
                  val = jQuery.map(val, function(value) {
                    return value == null ? "" : value + "";
                  });
                }

                hooks =
                  jQuery.valHooks[this.type] ||
                  jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (
                  !hooks ||
                  !("set" in hooks) ||
                  hooks.set(this, val, "value") === undefined
                ) {
                  this.value = val;
                }
              });
            },
          });

          jQuery.extend({
            valHooks: {
              option: {
                get: function(elem) {
                  var val = jQuery.find.attr(elem, "value");
                  return val != null
                    ? val
                    : // Support: IE <=10 - 11 only
                      // option.text throws exceptions (#14686, #14858)
                      // Strip and collapse whitespace
                      // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                      stripAndCollapse(jQuery.text(elem));
                },
              },
              select: {
                get: function(elem) {
                  var value,
                    option,
                    i,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one",
                    values = one ? null : [],
                    max = one ? index + 1 : options.length;

                  if (index < 0) {
                    i = max;
                  } else {
                    i = one ? index : 0;
                  }

                  // Loop through all the selected options
                  for (; i < max; i++) {
                    option = options[i];

                    // Support: IE <=9 only
                    // IE8-9 doesn't update selected after form reset (#2551)
                    if (
                      (option.selected || i === index) &&
                      // Don't return options that are disabled or in a disabled optgroup
                      !option.disabled &&
                      (!option.parentNode.disabled ||
                        !nodeName(option.parentNode, "optgroup"))
                    ) {
                      // Get the specific value for the option
                      value = jQuery(option).val();

                      // We don't need an array for one selects
                      if (one) {
                        return value;
                      }

                      // Multi-Selects return an array
                      values.push(value);
                    }
                  }

                  return values;
                },

                set: function(elem, value) {
                  var optionSet,
                    option,
                    options = elem.options,
                    values = jQuery.makeArray(value),
                    i = options.length;

                  while (i--) {
                    option = options[i];

                    /* eslint-disable no-cond-assign */

                    if (
                      (option.selected =
                        jQuery.inArray(
                          jQuery.valHooks.option.get(option),
                          values
                        ) > -1)
                    ) {
                      optionSet = true;
                    }

                    /* eslint-enable no-cond-assign */
                  }

                  // Force browsers to behave consistently when non-matching value is set
                  if (!optionSet) {
                    elem.selectedIndex = -1;
                  }
                  return values;
                },
              },
            },
          });

          // Radios and checkboxes getter/setter
          jQuery.each(["radio", "checkbox"], function() {
            jQuery.valHooks[this] = {
              set: function(elem, value) {
                if (Array.isArray(value)) {
                  return (elem.checked =
                    jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
              },
            };
            if (!support.checkOn) {
              jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
              };
            }
          });

          // Return jQuery for attributes-only inclusion

          support.focusin = "onfocusin" in window;

          var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
            stopPropagationCallback = function(e) {
              e.stopPropagation();
            };

          jQuery.extend(jQuery.event, {
            trigger: function(event, data, elem, onlyHandlers) {
              var i,
                cur,
                tmp,
                bubbleType,
                ontype,
                handle,
                special,
                lastElement,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace")
                  ? event.namespace.split(".")
                  : [];

              cur = lastElement = tmp = elem = elem || document;

              // Don't do events on text and comment nodes
              if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
              }

              // focus/blur morphs to focusin/out; ensure we're not firing them right now
              if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
              }

              if (type.indexOf(".") > -1) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
              }
              ontype = type.indexOf(":") < 0 && "on" + type;

              // Caller can pass in a jQuery.Event object, Object, or just an event type string
              event = event[jQuery.expando]
                ? event
                : new jQuery.Event(type, typeof event === "object" && event);

              // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
              event.isTrigger = onlyHandlers ? 2 : 3;
              event.namespace = namespaces.join(".");
              event.rnamespace = event.namespace
                ? new RegExp(
                    "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"
                  )
                : null;

              // Clean up the event in case it is being reused
              event.result = undefined;
              if (!event.target) {
                event.target = elem;
              }

              // Clone any incoming data and prepend the event, creating the handler arg list
              data = data == null ? [event] : jQuery.makeArray(data, [event]);

              // Allow special events to draw outside the lines
              special = jQuery.event.special[type] || {};
              if (
                !onlyHandlers &&
                special.trigger &&
                special.trigger.apply(elem, data) === false
              ) {
                return;
              }

              // Determine event propagation path in advance, per W3C events spec (#9951)
              // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
              if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                  cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                  eventPath.push(cur);
                  tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                  eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
              }

              // Fire handlers on the event path
              i = 0;
              while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;

                // jQuery handler
                handle =
                  (dataPriv.get(cur, "events") || Object.create(null))[
                    event.type
                  ] && dataPriv.get(cur, "handle");
                if (handle) {
                  handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                  event.result = handle.apply(cur, data);
                  if (event.result === false) {
                    event.preventDefault();
                  }
                }
              }
              event.type = type;

              // If nobody prevented the default action, do it now
              if (!onlyHandlers && !event.isDefaultPrevented()) {
                if (
                  (!special._default ||
                    special._default.apply(eventPath.pop(), data) === false) &&
                  acceptData(elem)
                ) {
                  // Call a native DOM method on the target with the same name as the event.
                  // Don't do default actions on window, that's where global variables be (#6170)
                  if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                    // Don't re-trigger an onFOO event when we call its FOO() method
                    tmp = elem[ontype];

                    if (tmp) {
                      elem[ontype] = null;
                    }

                    // Prevent re-triggering of the same event, since we already bubbled it above
                    jQuery.event.triggered = type;

                    if (event.isPropagationStopped()) {
                      lastElement.addEventListener(
                        type,
                        stopPropagationCallback
                      );
                    }

                    elem[type]();

                    if (event.isPropagationStopped()) {
                      lastElement.removeEventListener(
                        type,
                        stopPropagationCallback
                      );
                    }

                    jQuery.event.triggered = undefined;

                    if (tmp) {
                      elem[ontype] = tmp;
                    }
                  }
                }
              }

              return event.result;
            },

            // Piggyback on a donor event to simulate a different one
            // Used only for `focus(in | out)` events
            simulate: function(type, elem, event) {
              var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
              });

              jQuery.event.trigger(e, null, elem);
            },
          });

          jQuery.fn.extend({
            trigger: function(type, data) {
              return this.each(function() {
                jQuery.event.trigger(type, data, this);
              });
            },
            triggerHandler: function(type, data) {
              var elem = this[0];
              if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
              }
            },
          });

          // Support: Firefox <=44
          // Firefox doesn't have focus(in | out) events
          // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
          //
          // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
          // focus(in | out) events fire after focus & blur events,
          // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
          // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
          if (!support.focusin) {
            jQuery.each({ focus: "focusin", blur: "focusout" }, function(
              orig,
              fix
            ) {
              // Attach a single capturing handler on the document while someone wants focusin/focusout
              var handler = function(event) {
                jQuery.event.simulate(
                  fix,
                  event.target,
                  jQuery.event.fix(event)
                );
              };

              jQuery.event.special[fix] = {
                setup: function() {
                  // Handle: regular nodes (via `this.ownerDocument`), window
                  // (via `this.document`) & document (via `this`).
                  var doc = this.ownerDocument || this.document || this,
                    attaches = dataPriv.access(doc, fix);

                  if (!attaches) {
                    doc.addEventListener(orig, handler, true);
                  }
                  dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                  var doc = this.ownerDocument || this.document || this,
                    attaches = dataPriv.access(doc, fix) - 1;

                  if (!attaches) {
                    doc.removeEventListener(orig, handler, true);
                    dataPriv.remove(doc, fix);
                  } else {
                    dataPriv.access(doc, fix, attaches);
                  }
                },
              };
            });
          }
          var location = window.location;

          var nonce = { guid: Date.now() };

          var rquery = /\?/;

          // Cross-browser xml parsing
          jQuery.parseXML = function(data) {
            var xml;
            if (!data || typeof data !== "string") {
              return null;
            }

            // Support: IE 9 - 11 only
            // IE throws on parseFromString with invalid input.
            try {
              xml = new window.DOMParser().parseFromString(data, "text/xml");
            } catch (e) {
              xml = undefined;
            }

            if (!xml || xml.getElementsByTagName("parsererror").length) {
              jQuery.error("Invalid XML: " + data);
            }
            return xml;
          };

          var rbracket = /\[\]$/,
            rCRLF = /\r?\n/g,
            rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
            rsubmittable = /^(?:input|select|textarea|keygen)/i;

          function buildParams(prefix, obj, traditional, add) {
            var name;

            if (Array.isArray(obj)) {
              // Serialize array item.
              jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                  // Treat each array item as a scalar.
                  add(prefix, v);
                } else {
                  // Item is non-scalar (array or object), encode its numeric index.
                  buildParams(
                    prefix +
                      "[" +
                      (typeof v === "object" && v != null ? i : "") +
                      "]",
                    v,
                    traditional,
                    add
                  );
                }
              });
            } else if (!traditional && toType(obj) === "object") {
              // Serialize object item.
              for (name in obj) {
                buildParams(
                  prefix + "[" + name + "]",
                  obj[name],
                  traditional,
                  add
                );
              }
            } else {
              // Serialize scalar item.
              add(prefix, obj);
            }
          }

          // Serialize an array of form elements or a set of
          // key/values into a query string
          jQuery.param = function(a, traditional) {
            var prefix,
              s = [],
              add = function(key, valueOrFunction) {
                // If value is a function, invoke it and use its return value
                var value = isFunction(valueOrFunction)
                  ? valueOrFunction()
                  : valueOrFunction;

                s[s.length] =
                  encodeURIComponent(key) +
                  "=" +
                  encodeURIComponent(value == null ? "" : value);
              };

            if (a == null) {
              return "";
            }

            // If an array was passed in, assume that it is an array of form elements.
            if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
              // Serialize the form elements
              jQuery.each(a, function() {
                add(this.name, this.value);
              });
            } else {
              // If traditional, encode the "old" way (the way 1.3.2 or older
              // did it), otherwise encode params recursively.
              for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
              }
            }

            // Return the resulting serialization
            return s.join("&");
          };

          jQuery.fn.extend({
            serialize: function() {
              return jQuery.param(this.serializeArray());
            },
            serializeArray: function() {
              return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
              })
                .filter(function() {
                  var type = this.type;

                  // Use .is( ":disabled" ) so that fieldset[disabled] works
                  return (
                    this.name &&
                    !jQuery(this).is(":disabled") &&
                    rsubmittable.test(this.nodeName) &&
                    !rsubmitterTypes.test(type) &&
                    (this.checked || !rcheckableType.test(type))
                  );
                })
                .map(function(_i, elem) {
                  var val = jQuery(this).val();

                  if (val == null) {
                    return null;
                  }

                  if (Array.isArray(val)) {
                    return jQuery.map(val, function(val) {
                      return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n"),
                      };
                    });
                  }

                  return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                })
                .get();
            },
          });

          var r20 = /%20/g,
            rhash = /#.*$/,
            rantiCache = /([?&])_=[^&]*/,
            rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
            // #7653, #8125, #8152: local protocol detection
            rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
            rnoContent = /^(?:GET|HEAD)$/,
            rprotocol = /^\/\//,
            /* Prefilters
             * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
             * 2) These are called:
             *    - BEFORE asking for a transport
             *    - AFTER param serialization (s.data is a string if s.processData is true)
             * 3) key is the dataType
             * 4) the catchall symbol "*" can be used
             * 5) execution will start with transport dataType and THEN continue down to "*" if needed
             */
            prefilters = {},
            /* Transports bindings
             * 1) key is the dataType
             * 2) the catchall symbol "*" can be used
             * 3) selection will start with transport dataType and THEN go to "*" if needed
             */
            transports = {},
            // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
            allTypes = "*/".concat("*"),
            // Anchor tag for parsing the document origin
            originAnchor = document.createElement("a");
          originAnchor.href = location.href;

          // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
          function addToPrefiltersOrTransports(structure) {
            // dataTypeExpression is optional and defaults to "*"
            return function(dataTypeExpression, func) {
              if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
              }

              var dataType,
                i = 0,
                dataTypes =
                  dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

              if (isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {
                  // Prepend if requested
                  if (dataType[0] === "+") {
                    dataType = dataType.slice(1) || "*";
                    (structure[dataType] = structure[dataType] || []).unshift(
                      func
                    );

                    // Otherwise append
                  } else {
                    (structure[dataType] = structure[dataType] || []).push(
                      func
                    );
                  }
                }
              }
            };
          }

          // Base inspection function for prefilters and transports
          function inspectPrefiltersOrTransports(
            structure,
            options,
            originalOptions,
            jqXHR
          ) {
            var inspected = {},
              seekingTransport = structure === transports;

            function inspect(dataType) {
              var selected;
              inspected[dataType] = true;
              jQuery.each(structure[dataType] || [], function(
                _,
                prefilterOrFactory
              ) {
                var dataTypeOrTransport = prefilterOrFactory(
                  options,
                  originalOptions,
                  jqXHR
                );
                if (
                  typeof dataTypeOrTransport === "string" &&
                  !seekingTransport &&
                  !inspected[dataTypeOrTransport]
                ) {
                  options.dataTypes.unshift(dataTypeOrTransport);
                  inspect(dataTypeOrTransport);
                  return false;
                } else if (seekingTransport) {
                  return !(selected = dataTypeOrTransport);
                }
              });
              return selected;
            }

            return (
              inspect(options.dataTypes[0]) || (!inspected["*"] && inspect("*"))
            );
          }

          // A special extend for ajax options
          // that takes "flat" options (not to be deep extended)
          // Fixes #9887
          function ajaxExtend(target, src) {
            var key,
              deep,
              flatOptions = jQuery.ajaxSettings.flatOptions || {};

            for (key in src) {
              if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] =
                  src[key];
              }
            }
            if (deep) {
              jQuery.extend(true, target, deep);
            }

            return target;
          }

          /* Handles responses to an ajax request:
           * - finds the right dataType (mediates between content-type and expected dataType)
           * - returns the corresponding response
           */
          function ajaxHandleResponses(s, jqXHR, responses) {
            var ct,
              type,
              finalDataType,
              firstDataType,
              contents = s.contents,
              dataTypes = s.dataTypes;

            // Remove auto dataType and get content-type in the process
            while (dataTypes[0] === "*") {
              dataTypes.shift();
              if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
              }
            }

            // Check if we're dealing with a known content-type
            if (ct) {
              for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                  dataTypes.unshift(type);
                  break;
                }
              }
            }

            // Check to see if we have a response for the expected dataType
            if (dataTypes[0] in responses) {
              finalDataType = dataTypes[0];
            } else {
              // Try convertible dataTypes
              for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                  finalDataType = type;
                  break;
                }
                if (!firstDataType) {
                  firstDataType = type;
                }
              }

              // Or just use first one
              finalDataType = finalDataType || firstDataType;
            }

            // If we found a dataType
            // We add the dataType to the list if needed
            // and return the corresponding response
            if (finalDataType) {
              if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
              }
              return responses[finalDataType];
            }
          }

          /* Chain conversions given the request and the original response
           * Also sets the responseXXX fields on the jqXHR instance
           */
          function ajaxConvert(s, response, jqXHR, isSuccess) {
            var conv2,
              current,
              conv,
              tmp,
              prev,
              converters = {},
              // Work with a copy of dataTypes in case we need to modify it for conversion
              dataTypes = s.dataTypes.slice();

            // Create converters map with lowercased keys
            if (dataTypes[1]) {
              for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
              }
            }

            current = dataTypes.shift();

            // Convert to each sequential dataType
            while (current) {
              if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
              }

              // Apply the dataFilter if provided
              if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
              }

              prev = current;
              current = dataTypes.shift();

              if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") {
                  current = prev;

                  // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {
                  // Seek a direct converter
                  conv =
                    converters[prev + " " + current] ||
                    converters["* " + current];

                  // If none found, seek a pair
                  if (!conv) {
                    for (conv2 in converters) {
                      // If conv2 outputs current
                      tmp = conv2.split(" ");
                      if (tmp[1] === current) {
                        // If prev can be converted to accepted input
                        conv =
                          converters[prev + " " + tmp[0]] ||
                          converters["* " + tmp[0]];
                        if (conv) {
                          // Condense equivalence converters
                          if (conv === true) {
                            conv = converters[conv2];

                            // Otherwise, insert the intermediate dataType
                          } else if (converters[conv2] !== true) {
                            current = tmp[0];
                            dataTypes.unshift(tmp[1]);
                          }
                          break;
                        }
                      }
                    }
                  }

                  // Apply converter (if not an equivalence)
                  if (conv !== true) {
                    // Unless errors are allowed to bubble, catch and return them
                    if (conv && s.throws) {
                      response = conv(response);
                    } else {
                      try {
                        response = conv(response);
                      } catch (e) {
                        return {
                          state: "parsererror",
                          error: conv
                            ? e
                            : "No conversion from " + prev + " to " + current,
                        };
                      }
                    }
                  }
                }
              }
            }

            return { state: "success", data: response };
          }

          jQuery.extend({
            // Counter for holding the number of active queries
            active: 0,

            // Last-Modified header cache for next request
            lastModified: {},
            etag: {},

            ajaxSettings: {
              url: location.href,
              type: "GET",
              isLocal: rlocalProtocol.test(location.protocol),
              global: true,
              processData: true,
              async: true,
              contentType: "application/x-www-form-urlencoded; charset=UTF-8",

              /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

              accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript",
              },

              contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/,
              },

              responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON",
              },

              // Data converters
              // Keys separate source (or catchall "*") and destination types with a single space
              converters: {
                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": JSON.parse,

                // Parse text as xml
                "text xml": jQuery.parseXML,
              },

              // For options that shouldn't be deep extended:
              // you can add your own custom options here if
              // and when you create one that shouldn't be
              // deep extended (see ajaxExtend)
              flatOptions: {
                url: true,
                context: true,
              },
            },

            // Creates a full fledged settings object into target
            // with both ajaxSettings and settings fields.
            // If target is omitted, writes into ajaxSettings.
            ajaxSetup: function(target, settings) {
              return settings
                ? // Building a settings object
                  ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
                : // Extending ajaxSettings
                  ajaxExtend(jQuery.ajaxSettings, target);
            },

            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
            ajaxTransport: addToPrefiltersOrTransports(transports),

            // Main method
            ajax: function(url, options) {
              // If url is an object, simulate pre-1.5 signature
              if (typeof url === "object") {
                options = url;
                url = undefined;
              }

              // Force options to be an object
              options = options || {};

              var transport,
                // URL without anti-cache param
                cacheURL,
                // Response headers
                responseHeadersString,
                responseHeaders,
                // timeout handle
                timeoutTimer,
                // Url cleanup var
                urlAnchor,
                // Request state (becomes false upon send and true upon completion)
                completed,
                // To know if global events are to be dispatched
                fireGlobals,
                // Loop variable
                i,
                // uncached part of the url
                uncached,
                // Create the final options object
                s = jQuery.ajaxSetup({}, options),
                // Callbacks context
                callbackContext = s.context || s,
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext =
                  s.context &&
                  (callbackContext.nodeType || callbackContext.jquery)
                    ? jQuery(callbackContext)
                    : jQuery.event,
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // Default abort message
                strAbort = "canceled",
                // Fake xhr
                jqXHR = {
                  readyState: 0,

                  // Builds headers hashtable if needed
                  getResponseHeader: function(key) {
                    var match;
                    if (completed) {
                      if (!responseHeaders) {
                        responseHeaders = {};
                        while ((match = rheaders.exec(responseHeadersString))) {
                          responseHeaders[match[1].toLowerCase() + " "] = (
                            responseHeaders[match[1].toLowerCase() + " "] || []
                          ).concat(match[2]);
                        }
                      }
                      match = responseHeaders[key.toLowerCase() + " "];
                    }
                    return match == null ? null : match.join(", ");
                  },

                  // Raw string
                  getAllResponseHeaders: function() {
                    return completed ? responseHeadersString : null;
                  },

                  // Caches the header
                  setRequestHeader: function(name, value) {
                    if (completed == null) {
                      name = requestHeadersNames[name.toLowerCase()] =
                        requestHeadersNames[name.toLowerCase()] || name;
                      requestHeaders[name] = value;
                    }
                    return this;
                  },

                  // Overrides response content-type header
                  overrideMimeType: function(type) {
                    if (completed == null) {
                      s.mimeType = type;
                    }
                    return this;
                  },

                  // Status-dependent callbacks
                  statusCode: function(map) {
                    var code;
                    if (map) {
                      if (completed) {
                        // Execute the appropriate callbacks
                        jqXHR.always(map[jqXHR.status]);
                      } else {
                        // Lazy-add the new callbacks in a way that preserves old ones
                        for (code in map) {
                          statusCode[code] = [statusCode[code], map[code]];
                        }
                      }
                    }
                    return this;
                  },

                  // Cancel the request
                  abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                      transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                  },
                };

              // Attach deferreds
              deferred.promise(jqXHR);

              // Add protocol if not provided (prefilters might expect it)
              // Handle falsy url in the settings object (#10093: consistency with old signature)
              // We also use the url parameter if available
              s.url = ((url || s.url || location.href) + "").replace(
                rprotocol,
                location.protocol + "//"
              );

              // Alias method option to type as per ticket #12004
              s.type = options.method || options.type || s.method || s.type;

              // Extract dataTypes list
              s.dataTypes = (s.dataType || "*")
                .toLowerCase()
                .match(rnothtmlwhite) || [""];

              // A cross-domain request is in order when the origin doesn't match the current origin.
              if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                  urlAnchor.href = s.url;

                  // Support: IE <=8 - 11 only
                  // Anchor's host property isn't correctly set when s.url is relative
                  urlAnchor.href = urlAnchor.href;
                  s.crossDomain =
                    originAnchor.protocol + "//" + originAnchor.host !==
                    urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                  // If there is an error parsing the URL, assume it is crossDomain,
                  // it can be rejected by the transport if it is invalid
                  s.crossDomain = true;
                }
              }

              // Convert data if not already a string
              if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
              }

              // Apply prefilters
              inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

              // If request was aborted inside a prefilter, stop there
              if (completed) {
                return jqXHR;
              }

              // We can fire global events as of now if asked to
              // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
              fireGlobals = jQuery.event && s.global;

              // Watch for a new set of requests
              if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
              }

              // Uppercase the type
              s.type = s.type.toUpperCase();

              // Determine if request has content
              s.hasContent = !rnoContent.test(s.type);

              // Save the URL in case we're toying with the If-Modified-Since
              // and/or If-None-Match header later on
              // Remove hash to simplify url manipulation
              cacheURL = s.url.replace(rhash, "");

              // More options handling for requests with no content
              if (!s.hasContent) {
                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);

                // If data is available and should be processed, append data to url
                if (s.data && (s.processData || typeof s.data === "string")) {
                  cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                  // #9682: remove data so that it's not used in an eventual retry
                  delete s.data;
                }

                // Add or update anti-cache param if needed
                if (s.cache === false) {
                  cacheURL = cacheURL.replace(rantiCache, "$1");
                  uncached =
                    (rquery.test(cacheURL) ? "&" : "?") +
                    "_=" +
                    nonce.guid++ +
                    uncached;
                }

                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;

                // Change '%20' to '+' if this is encoded form body content (gh-2658)
              } else if (
                s.data &&
                s.processData &&
                (s.contentType || "").indexOf(
                  "application/x-www-form-urlencoded"
                ) === 0
              ) {
                s.data = s.data.replace(r20, "+");
              }

              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                  jqXHR.setRequestHeader(
                    "If-Modified-Since",
                    jQuery.lastModified[cacheURL]
                  );
                }
                if (jQuery.etag[cacheURL]) {
                  jqXHR.setRequestHeader(
                    "If-None-Match",
                    jQuery.etag[cacheURL]
                  );
                }
              }

              // Set the correct header, if data is being sent
              if (
                (s.data && s.hasContent && s.contentType !== false) ||
                options.contentType
              ) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
              }

              // Set the Accepts header for the server, depending on the dataType
              jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                  ? s.accepts[s.dataTypes[0]] +
                      (s.dataTypes[0] !== "*"
                        ? ", " + allTypes + "; q=0.01"
                        : "")
                  : s.accepts["*"]
              );

              // Check for headers option
              for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
              }

              // Allow custom headers/mimetypes and early abort
              if (
                s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                  completed)
              ) {
                // Abort if not done already and return
                return jqXHR.abort();
              }

              // Aborting is no longer a cancellation
              strAbort = "abort";

              // Install callbacks on deferreds
              completeDeferred.add(s.complete);
              jqXHR.done(s.success);
              jqXHR.fail(s.error);

              // Get transport
              transport = inspectPrefiltersOrTransports(
                transports,
                s,
                options,
                jqXHR
              );

              // If no transport, we auto-abort
              if (!transport) {
                done(-1, "No Transport");
              } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                  globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                // If request was aborted inside ajaxSend, stop there
                if (completed) {
                  return jqXHR;
                }

                // Timeout
                if (s.async && s.timeout > 0) {
                  timeoutTimer = window.setTimeout(function() {
                    jqXHR.abort("timeout");
                  }, s.timeout);
                }

                try {
                  completed = false;
                  transport.send(requestHeaders, done);
                } catch (e) {
                  // Rethrow post-completion exceptions
                  if (completed) {
                    throw e;
                  }

                  // Propagate others as results
                  done(-1, e);
                }
              }

              // Callback for when everything is done
              function done(status, nativeStatusText, responses, headers) {
                var isSuccess,
                  success,
                  error,
                  response,
                  modified,
                  statusText = nativeStatusText;

                // Ignore repeat invocations
                if (completed) {
                  return;
                }

                completed = true;

                // Clear timeout if it exists
                if (timeoutTimer) {
                  window.clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = (status >= 200 && status < 300) || status === 304;

                // Get response data
                if (responses) {
                  response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Use a noop converter for missing script
                if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1) {
                  s.converters["text script"] = function() {};
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {
                  // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                  if (s.ifModified) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if (modified) {
                      jQuery.lastModified[cacheURL] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if (modified) {
                      jQuery.etag[cacheURL] = modified;
                    }
                  }

                  // if no content
                  if (status === 204 || s.type === "HEAD") {
                    statusText = "nocontent";

                    // if not modified
                  } else if (status === 304) {
                    statusText = "notmodified";

                    // If we have data, let's convert it
                  } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                  }
                } else {
                  // Extract error from statusText and normalize for non-aborts
                  error = statusText;
                  if (status || !statusText) {
                    statusText = "error";
                    if (status < 0) {
                      status = 0;
                    }
                  }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                  deferred.resolveWith(callbackContext, [
                    success,
                    statusText,
                    jqXHR,
                  ]);
                } else {
                  deferred.rejectWith(callbackContext, [
                    jqXHR,
                    statusText,
                    error,
                  ]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                  globalEventContext.trigger(
                    isSuccess ? "ajaxSuccess" : "ajaxError",
                    [jqXHR, s, isSuccess ? success : error]
                  );
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                  globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                  // Handle the global AJAX counter
                  if (!--jQuery.active) {
                    jQuery.event.trigger("ajaxStop");
                  }
                }
              }

              return jqXHR;
            },

            getJSON: function(url, data, callback) {
              return jQuery.get(url, data, callback, "json");
            },

            getScript: function(url, callback) {
              return jQuery.get(url, undefined, callback, "script");
            },
          });

          jQuery.each(["get", "post"], function(_i, method) {
            jQuery[method] = function(url, data, callback, type) {
              // Shift arguments if data argument was omitted
              if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
              }

              // The url can be an options object (which then must have .url)
              return jQuery.ajax(
                jQuery.extend(
                  {
                    url: url,
                    type: method,
                    dataType: type,
                    data: data,
                    success: callback,
                  },
                  jQuery.isPlainObject(url) && url
                )
              );
            };
          });

          jQuery.ajaxPrefilter(function(s) {
            var i;
            for (i in s.headers) {
              if (i.toLowerCase() === "content-type") {
                s.contentType = s.headers[i] || "";
              }
            }
          });

          jQuery._evalUrl = function(url, options, doc) {
            return jQuery.ajax({
              url: url,

              // Make this explicit, since user can override this through ajaxSetup (#11264)
              type: "GET",
              dataType: "script",
              cache: true,
              async: false,
              global: false,

              // Only evaluate the response if it is successful (gh-4126)
              // dataFilter is not invoked for failure responses, so using it instead
              // of the default converter is kludgy but it works.
              converters: {
                "text script": function() {},
              },
              dataFilter: function(response) {
                jQuery.globalEval(response, options, doc);
              },
            });
          };

          jQuery.fn.extend({
            wrapAll: function(html) {
              var wrap;

              if (this[0]) {
                if (isFunction(html)) {
                  html = html.call(this[0]);
                }

                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument)
                  .eq(0)
                  .clone(true);

                if (this[0].parentNode) {
                  wrap.insertBefore(this[0]);
                }

                wrap
                  .map(function() {
                    var elem = this;

                    while (elem.firstElementChild) {
                      elem = elem.firstElementChild;
                    }

                    return elem;
                  })
                  .append(this);
              }

              return this;
            },

            wrapInner: function(html) {
              if (isFunction(html)) {
                return this.each(function(i) {
                  jQuery(this).wrapInner(html.call(this, i));
                });
              }

              return this.each(function() {
                var self = jQuery(this),
                  contents = self.contents();

                if (contents.length) {
                  contents.wrapAll(html);
                } else {
                  self.append(html);
                }
              });
            },

            wrap: function(html) {
              var htmlIsFunction = isFunction(html);

              return this.each(function(i) {
                jQuery(this).wrapAll(
                  htmlIsFunction ? html.call(this, i) : html
                );
              });
            },

            unwrap: function(selector) {
              this.parent(selector)
                .not("body")
                .each(function() {
                  jQuery(this).replaceWith(this.childNodes);
                });
              return this;
            },
          });

          jQuery.expr.pseudos.hidden = function(elem) {
            return !jQuery.expr.pseudos.visible(elem);
          };
          jQuery.expr.pseudos.visible = function(elem) {
            return !!(
              elem.offsetWidth ||
              elem.offsetHeight ||
              elem.getClientRects().length
            );
          };

          jQuery.ajaxSettings.xhr = function() {
            try {
              return new window.XMLHttpRequest();
            } catch (e) {}
          };

          var xhrSuccessStatus = {
              // File protocol always yields status code 0, assume 200
              0: 200,

              // Support: IE <=9 only
              // #1450: sometimes IE returns 1223 when it should be 204
              1223: 204,
            },
            xhrSupported = jQuery.ajaxSettings.xhr();

          support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
          support.ajax = xhrSupported = !!xhrSupported;

          jQuery.ajaxTransport(function(options) {
            var callback, errorCallback;

            // Cross domain only allowed if supported through XMLHttpRequest
            if (support.cors || (xhrSupported && !options.crossDomain)) {
              return {
                send: function(headers, complete) {
                  var i,
                    xhr = options.xhr();

                  xhr.open(
                    options.type,
                    options.url,
                    options.async,
                    options.username,
                    options.password
                  );

                  // Apply custom fields if provided
                  if (options.xhrFields) {
                    for (i in options.xhrFields) {
                      xhr[i] = options.xhrFields[i];
                    }
                  }

                  // Override mime type if needed
                  if (options.mimeType && xhr.overrideMimeType) {
                    xhr.overrideMimeType(options.mimeType);
                  }

                  // X-Requested-With header
                  // For cross-domain requests, seeing as conditions for a preflight are
                  // akin to a jigsaw puzzle, we simply never set it to be sure.
                  // (it can always be set on a per-request basis or even using ajaxSetup)
                  // For same-domain requests, won't change header if already provided.
                  if (!options.crossDomain && !headers["X-Requested-With"]) {
                    headers["X-Requested-With"] = "XMLHttpRequest";
                  }

                  // Set headers
                  for (i in headers) {
                    xhr.setRequestHeader(i, headers[i]);
                  }

                  // Callback
                  callback = function(type) {
                    return function() {
                      if (callback) {
                        callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                        if (type === "abort") {
                          xhr.abort();
                        } else if (type === "error") {
                          // Support: IE <=9 only
                          // On a manual native abort, IE9 throws
                          // errors on any property access that is not readyState
                          if (typeof xhr.status !== "number") {
                            complete(0, "error");
                          } else {
                            complete(
                              // File: protocol always yields status 0; see #8605, #14207
                              xhr.status,
                              xhr.statusText
                            );
                          }
                        } else {
                          complete(
                            xhrSuccessStatus[xhr.status] || xhr.status,
                            xhr.statusText,

                            // Support: IE <=9 only
                            // IE9 has no XHR2 but throws on binary (trac-11426)
                            // For XHR2 non-text, let the caller handle it (gh-2498)
                            (xhr.responseType || "text") !== "text" ||
                              typeof xhr.responseText !== "string"
                              ? { binary: xhr.response }
                              : { text: xhr.responseText },
                            xhr.getAllResponseHeaders()
                          );
                        }
                      }
                    };
                  };

                  // Listen to events
                  xhr.onload = callback();
                  errorCallback = xhr.onerror = xhr.ontimeout = callback(
                    "error"
                  );

                  // Support: IE 9 only
                  // Use onreadystatechange to replace onabort
                  // to handle uncaught aborts
                  if (xhr.onabort !== undefined) {
                    xhr.onabort = errorCallback;
                  } else {
                    xhr.onreadystatechange = function() {
                      // Check readyState before timeout as it changes
                      if (xhr.readyState === 4) {
                        // Allow onerror to be called first,
                        // but that will not handle a native abort
                        // Also, save errorCallback to a variable
                        // as xhr.onerror cannot be accessed
                        window.setTimeout(function() {
                          if (callback) {
                            errorCallback();
                          }
                        });
                      }
                    };
                  }

                  // Create the abort callback
                  callback = callback("abort");

                  try {
                    // Do send the request (this may raise an exception)
                    xhr.send((options.hasContent && options.data) || null);
                  } catch (e) {
                    // #14683: Only rethrow if this hasn't been notified as an error yet
                    if (callback) {
                      throw e;
                    }
                  }
                },

                abort: function() {
                  if (callback) {
                    callback();
                  }
                },
              };
            }
          });

          // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
          jQuery.ajaxPrefilter(function(s) {
            if (s.crossDomain) {
              s.contents.script = false;
            }
          });

          // Install script dataType
          jQuery.ajaxSetup({
            accepts: {
              script:
                "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript",
            },
            contents: {
              script: /\b(?:java|ecma)script\b/,
            },
            converters: {
              "text script": function(text) {
                jQuery.globalEval(text);
                return text;
              },
            },
          });

          // Handle cache's special case and crossDomain
          jQuery.ajaxPrefilter("script", function(s) {
            if (s.cache === undefined) {
              s.cache = false;
            }
            if (s.crossDomain) {
              s.type = "GET";
            }
          });

          // Bind script tag hack transport
          jQuery.ajaxTransport("script", function(s) {
            // This transport only deals with cross domain or forced-by-attrs requests
            if (s.crossDomain || s.scriptAttrs) {
              var script, callback;
              return {
                send: function(_, complete) {
                  script = jQuery("<script>")
                    .attr(s.scriptAttrs || {})
                    .prop({ charset: s.scriptCharset, src: s.url })
                    .on(
                      "load error",
                      (callback = function(evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                          complete(evt.type === "error" ? 404 : 200, evt.type);
                        }
                      })
                    );

                  // Use native DOM manipulation to avoid our domManip AJAX trickery
                  document.head.appendChild(script[0]);
                },
                abort: function() {
                  if (callback) {
                    callback();
                  }
                },
              };
            }
          });

          var oldCallbacks = [],
            rjsonp = /(=)\?(?=&|$)|\?\?/;

          // Default jsonp settings
          jQuery.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function() {
              var callback =
                oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
              this[callback] = true;
              return callback;
            },
          });

          // Detect, normalize options and install callbacks for jsonp requests
          jQuery.ajaxPrefilter("json jsonp", function(
            s,
            originalSettings,
            jqXHR
          ) {
            var callbackName,
              overwritten,
              responseContainer,
              jsonProp =
                s.jsonp !== false &&
                (rjsonp.test(s.url)
                  ? "url"
                  : typeof s.data === "string" &&
                    (s.contentType || "").indexOf(
                      "application/x-www-form-urlencoded"
                    ) === 0 &&
                    rjsonp.test(s.data) &&
                    "data");

            // Handle iff the expected data type is "jsonp" or we have a parameter to set
            if (jsonProp || s.dataTypes[0] === "jsonp") {
              // Get callback name, remembering preexisting value associated with it
              callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                ? s.jsonpCallback()
                : s.jsonpCallback;

              // Insert callback into url or form data
              if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
              } else if (s.jsonp !== false) {
                s.url +=
                  (rquery.test(s.url) ? "&" : "?") +
                  s.jsonp +
                  "=" +
                  callbackName;
              }

              // Use data converter to retrieve json after script execution
              s.converters["script json"] = function() {
                if (!responseContainer) {
                  jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
              };

              // Force json dataType
              s.dataTypes[0] = "json";

              // Install callback
              overwritten = window[callbackName];
              window[callbackName] = function() {
                responseContainer = arguments;
              };

              // Clean-up function (fires after converters)
              jqXHR.always(function() {
                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                  jQuery(window).removeProp(callbackName);

                  // Otherwise restore preexisting value
                } else {
                  window[callbackName] = overwritten;
                }

                // Save back as free
                if (s[callbackName]) {
                  // Make sure that re-using the options doesn't screw things around
                  s.jsonpCallback = originalSettings.jsonpCallback;

                  // Save the callback name for future use
                  oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && isFunction(overwritten)) {
                  overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
              });

              // Delegate to script
              return "script";
            }
          });

          // Support: Safari 8 only
          // In Safari 8 documents created via document.implementation.createHTMLDocument
          // collapse sibling forms: the second one becomes a child of the first one.
          // Because of that, this security measure has to be disabled in Safari 8.
          // https://bugs.webkit.org/show_bug.cgi?id=137337
          support.createHTMLDocument = (function() {
            var body = document.implementation.createHTMLDocument("").body;
            body.innerHTML = "<form></form><form></form>";
            return body.childNodes.length === 2;
          })();

          // Argument "data" should be string of html
          // context (optional): If specified, the fragment will be created in this context,
          // defaults to document
          // keepScripts (optional): If true, will include scripts passed in the html string
          jQuery.parseHTML = function(data, context, keepScripts) {
            if (typeof data !== "string") {
              return [];
            }
            if (typeof context === "boolean") {
              keepScripts = context;
              context = false;
            }

            var base, parsed, scripts;

            if (!context) {
              // Stop scripts or inline event handlers from being executed immediately
              // by using document.implementation
              if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");

                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
              } else {
                context = document;
              }
            }

            parsed = rsingleTag.exec(data);
            scripts = !keepScripts && [];

            // Single tag
            if (parsed) {
              return [context.createElement(parsed[1])];
            }

            parsed = buildFragment([data], context, scripts);

            if (scripts && scripts.length) {
              jQuery(scripts).remove();
            }

            return jQuery.merge([], parsed.childNodes);
          };

          /**
           * Load a url into a page
           */
          jQuery.fn.load = function(url, params, callback) {
            var selector,
              type,
              response,
              self = this,
              off = url.indexOf(" ");

            if (off > -1) {
              selector = stripAndCollapse(url.slice(off));
              url = url.slice(0, off);
            }

            // If it's a function
            if (isFunction(params)) {
              // We assume that it's the callback
              callback = params;
              params = undefined;

              // Otherwise, build a param string
            } else if (params && typeof params === "object") {
              type = "POST";
            }

            // If we have elements to modify, make the request
            if (self.length > 0) {
              jQuery
                .ajax({
                  url: url,

                  // If "type" variable is undefined, then "GET" method will be used.
                  // Make value of this field explicit since
                  // user can override it through ajaxSetup method
                  type: type || "GET",
                  dataType: "html",
                  data: params,
                })
                .done(function(responseText) {
                  // Save response for use in complete callback
                  response = arguments;

                  self.html(
                    selector
                      ? // If a selector was specified, locate the right elements in a dummy div
                        // Exclude scripts to avoid IE 'Permission Denied' errors
                        jQuery("<div>")
                          .append(jQuery.parseHTML(responseText))
                          .find(selector)
                      : // Otherwise use the full result
                        responseText
                  );

                  // If the request succeeds, this function gets "data", "status", "jqXHR"
                  // but they are ignored because response was set above.
                  // If it fails, this function gets "jqXHR", "status", "error"
                })
                .always(
                  callback &&
                    function(jqXHR, status) {
                      self.each(function() {
                        callback.apply(
                          this,
                          response || [jqXHR.responseText, status, jqXHR]
                        );
                      });
                    }
                );
            }

            return this;
          };

          jQuery.expr.pseudos.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
              return elem === fn.elem;
            }).length;
          };

          jQuery.offset = {
            setOffset: function(elem, options, i) {
              var curPosition,
                curLeft,
                curCSSTop,
                curTop,
                curOffset,
                curCSSLeft,
                calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

              // Set position first, in-case top/left are set even on static elem
              if (position === "static") {
                elem.style.position = "relative";
              }

              curOffset = curElem.offset();
              curCSSTop = jQuery.css(elem, "top");
              curCSSLeft = jQuery.css(elem, "left");
              calculatePosition =
                (position === "absolute" || position === "fixed") &&
                (curCSSTop + curCSSLeft).indexOf("auto") > -1;

              // Need to be able to calculate position if either
              // top or left is auto and position is either absolute or fixed
              if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
              } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
              }

              if (isFunction(options)) {
                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call(elem, i, jQuery.extend({}, curOffset));
              }

              if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
              }
              if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
              }

              if ("using" in options) {
                options.using.call(elem, props);
              } else {
                if (typeof props.top === "number") {
                  props.top += "px";
                }
                if (typeof props.left === "number") {
                  props.left += "px";
                }
                curElem.css(props);
              }
            },
          };

          jQuery.fn.extend({
            // offset() relates an element's border box to the document origin
            offset: function(options) {
              // Preserve chaining for setter
              if (arguments.length) {
                return options === undefined
                  ? this
                  : this.each(function(i) {
                      jQuery.offset.setOffset(this, options, i);
                    });
              }

              var rect,
                win,
                elem = this[0];

              if (!elem) {
                return;
              }

              // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
              // Support: IE <=11 only
              // Running getBoundingClientRect on a
              // disconnected node in IE throws an error
              if (!elem.getClientRects().length) {
                return { top: 0, left: 0 };
              }

              // Get document-relative position by adding viewport scroll to viewport-relative gBCR
              rect = elem.getBoundingClientRect();
              win = elem.ownerDocument.defaultView;
              return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset,
              };
            },

            // position() relates an element's margin box to its offset parent's padding box
            // This corresponds to the behavior of CSS absolute positioning
            position: function() {
              if (!this[0]) {
                return;
              }

              var offsetParent,
                offset,
                doc,
                elem = this[0],
                parentOffset = { top: 0, left: 0 };

              // position:fixed elements are offset from the viewport, which itself always has zero offset
              if (jQuery.css(elem, "position") === "fixed") {
                // Assume position:fixed implies availability of getBoundingClientRect
                offset = elem.getBoundingClientRect();
              } else {
                offset = this.offset();

                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (
                  offsetParent &&
                  (offsetParent === doc.body ||
                    offsetParent === doc.documentElement) &&
                  jQuery.css(offsetParent, "position") === "static"
                ) {
                  offsetParent = offsetParent.parentNode;
                }
                if (
                  offsetParent &&
                  offsetParent !== elem &&
                  offsetParent.nodeType === 1
                ) {
                  // Incorporate borders into its offset, since they are outside its content origin
                  parentOffset = jQuery(offsetParent).offset();
                  parentOffset.top += jQuery.css(
                    offsetParent,
                    "borderTopWidth",
                    true
                  );
                  parentOffset.left += jQuery.css(
                    offsetParent,
                    "borderLeftWidth",
                    true
                  );
                }
              }

              // Subtract parent offsets and element margins
              return {
                top:
                  offset.top -
                  parentOffset.top -
                  jQuery.css(elem, "marginTop", true),
                left:
                  offset.left -
                  parentOffset.left -
                  jQuery.css(elem, "marginLeft", true),
              };
            },

            // This method will return documentElement in the following cases:
            // 1) For the element inside the iframe without offsetParent, this method will return
            //    documentElement of the parent window
            // 2) For the hidden or detached element
            // 3) For body or html element, i.e. in case of the html node - it will return itself
            //
            // but those exceptions were never presented as a real life use-cases
            // and might be considered as more preferable results.
            //
            // This logic, however, is not guaranteed and can change at any point in the future
            offsetParent: function() {
              return this.map(function() {
                var offsetParent = this.offsetParent;

                while (
                  offsetParent &&
                  jQuery.css(offsetParent, "position") === "static"
                ) {
                  offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
              });
            },
          });

          // Create scrollLeft and scrollTop methods
          jQuery.each(
            { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
            function(method, prop) {
              var top = "pageYOffset" === prop;

              jQuery.fn[method] = function(val) {
                return access(
                  this,
                  function(elem, method, val) {
                    // Coalesce documents and windows
                    var win;
                    if (isWindow(elem)) {
                      win = elem;
                    } else if (elem.nodeType === 9) {
                      win = elem.defaultView;
                    }

                    if (val === undefined) {
                      return win ? win[prop] : elem[method];
                    }

                    if (win) {
                      win.scrollTo(
                        !top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                      );
                    } else {
                      elem[method] = val;
                    }
                  },
                  method,
                  val,
                  arguments.length
                );
              };
            }
          );

          // Support: Safari <=7 - 9.1, Chrome <=37 - 49
          // Add the top/left cssHooks using jQuery.fn.position
          // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
          // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
          // getComputedStyle returns percent when specified for top/left/bottom/right;
          // rather than make the css module depend on the offset module, just check for it here
          jQuery.each(["top", "left"], function(_i, prop) {
            jQuery.cssHooks[prop] = addGetHookIf(
              support.pixelPosition,
              function(elem, computed) {
                if (computed) {
                  computed = curCSS(elem, prop);

                  // If curCSS returns percentage, fallback to offset
                  return rnumnonpx.test(computed)
                    ? jQuery(elem).position()[prop] + "px"
                    : computed;
                }
              }
            );
          });

          // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
          jQuery.each({ Height: "height", Width: "width" }, function(
            name,
            type
          ) {
            jQuery.each(
              { padding: "inner" + name, content: type, "": "outer" + name },
              function(defaultExtra, funcName) {
                // Margin is only for outerHeight, outerWidth
                jQuery.fn[funcName] = function(margin, value) {
                  var chainable =
                      arguments.length &&
                      (defaultExtra || typeof margin !== "boolean"),
                    extra =
                      defaultExtra ||
                      (margin === true || value === true ? "margin" : "border");

                  return access(
                    this,
                    function(elem, type, value) {
                      var doc;

                      if (isWindow(elem)) {
                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                        return funcName.indexOf("outer") === 0
                          ? elem["inner" + name]
                          : elem.document.documentElement["client" + name];
                      }

                      // Get document width or height
                      if (elem.nodeType === 9) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(
                          elem.body["scroll" + name],
                          doc["scroll" + name],
                          elem.body["offset" + name],
                          doc["offset" + name],
                          doc["client" + name]
                        );
                      }

                      return value === undefined
                        ? // Get width or height on the element, requesting but not forcing parseFloat
                          jQuery.css(elem, type, extra)
                        : // Set width or height on the element
                          jQuery.style(elem, type, value, extra);
                    },
                    type,
                    chainable ? margin : undefined,
                    chainable
                  );
                };
              }
            );
          });

          jQuery.each(
            [
              "ajaxStart",
              "ajaxStop",
              "ajaxComplete",
              "ajaxError",
              "ajaxSuccess",
              "ajaxSend",
            ],
            function(_i, type) {
              jQuery.fn[type] = function(fn) {
                return this.on(type, fn);
              };
            }
          );

          jQuery.fn.extend({
            bind: function(types, data, fn) {
              return this.on(types, null, data, fn);
            },
            unbind: function(types, fn) {
              return this.off(types, null, fn);
            },

            delegate: function(selector, types, data, fn) {
              return this.on(types, selector, data, fn);
            },
            undelegate: function(selector, types, fn) {
              // ( namespace ) or ( selector, types [, fn] )
              return arguments.length === 1
                ? this.off(selector, "**")
                : this.off(types, selector || "**", fn);
            },

            hover: function(fnOver, fnOut) {
              return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
            },
          });

          jQuery.each(
            (
              "blur focus focusin focusout resize scroll click dblclick " +
              "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
              "change select submit keydown keypress keyup contextmenu"
            ).split(" "),
            function(_i, name) {
              // Handle event binding
              jQuery.fn[name] = function(data, fn) {
                return arguments.length > 0
                  ? this.on(name, null, data, fn)
                  : this.trigger(name);
              };
            }
          );

          // Support: Android <=4.0 only
          // Make sure we trim BOM and NBSP
          var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

          // Bind a function to a context, optionally partially applying any
          // arguments.
          // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
          // However, it is not slated for removal any time soon
          jQuery.proxy = function(fn, context) {
            var tmp, args, proxy;

            if (typeof context === "string") {
              tmp = fn[context];
              context = fn;
              fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!isFunction(fn)) {
              return undefined;
            }

            // Simulated bind
            args = slice.call(arguments, 2);
            proxy = function() {
              return fn.apply(
                context || this,
                args.concat(slice.call(arguments))
              );
            };

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
          };

          jQuery.holdReady = function(hold) {
            if (hold) {
              jQuery.readyWait++;
            } else {
              jQuery.ready(true);
            }
          };
          jQuery.isArray = Array.isArray;
          jQuery.parseJSON = JSON.parse;
          jQuery.nodeName = nodeName;
          jQuery.isFunction = isFunction;
          jQuery.isWindow = isWindow;
          jQuery.camelCase = camelCase;
          jQuery.type = toType;

          jQuery.now = Date.now;

          jQuery.isNumeric = function(obj) {
            // As of jQuery 3.0, isNumeric is limited to
            // strings and numbers (primitives or objects)
            // that can be coerced to finite numbers (gh-2662)
            var type = jQuery.type(obj);
            return (
              (type === "number" || type === "string") &&
              // parseFloat NaNs numeric-cast false positives ("")
              // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
              // subtraction forces infinities to NaN
              !isNaN(obj - parseFloat(obj))
            );
          };

          jQuery.trim = function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
          };

          // Register as a named AMD module, since jQuery can be concatenated with other
          // files that may use define, but not via a proper concatenation script that
          // understands anonymous AMD modules. A named AMD is safest and most robust
          // way to register. Lowercase jquery is used because AMD module names are
          // derived from file names, and jQuery is normally delivered in a lowercase
          // file name. Do this after creating the global so that if an AMD module wants
          // to call noConflict to hide this version of jQuery, it will work.

          // Note that for maximum portability, libraries that are not jQuery should
          // declare themselves as anonymous modules, and avoid setting a global if an
          // AMD loader is present. jQuery is a special case. For more information, see
          // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

          if (true) {
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
            (__WEBPACK_AMD_DEFINE_RESULT__ = function() {
              return jQuery;
            }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }

          var // Map over jQuery in case of overwrite
            _jQuery = window.jQuery,
            // Map over the $ in case of overwrite
            _$ = window.$;

          jQuery.noConflict = function(deep) {
            if (window.$ === jQuery) {
              window.$ = _$;
            }

            if (deep && window.jQuery === jQuery) {
              window.jQuery = _jQuery;
            }

            return jQuery;
          };

          // Expose jQuery and $ identifiers, even in AMD
          // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
          // and CommonJS for browser emulators (#13566)
          if (typeof noGlobal === "undefined") {
            window.jQuery = window.$ = jQuery;
          }

          return jQuery;
        });

        /***/
      },

    /***/ "./node_modules/lodash.debounce/index.js":
      /*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**
           * lodash (Custom Build) <https://lodash.com/>
           * Build: `lodash modularize exports="npm" -o ./`
           * Copyright jQuery Foundation and other contributors <https://jquery.org/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */

          /** Used as the `TypeError` message for "Functions" methods. */
          var FUNC_ERROR_TEXT = "Expected a function";

          /** Used as references for various `Number` constants. */
          var NAN = 0 / 0;

          /** `Object#toString` result references. */
          var symbolTag = "[object Symbol]";

          /** Used to match leading and trailing whitespace. */
          var reTrim = /^\s+|\s+$/g;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Built-in method references without a dependency on `root`. */
          var freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var objectToString = objectProto.toString;

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeMax = Math.max,
            nativeMin = Math.min;

          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */
          var now = function() {
            return root.Date.now();
          };

          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */
          function debounce(func, wait, options) {
            var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing
                ? nativeMax(toNumber(options.maxWait) || 0, wait)
                : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
              var args = lastArgs,
                thisArg = lastThis;

              lastArgs = lastThis = undefined;
              lastInvokeTime = time;
              result = func.apply(thisArg, args);
              return result;
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time;
              // Start the timer for the trailing edge.
              timerId = setTimeout(timerExpired, wait);
              // Invoke the leading edge.
              return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                result = wait - timeSinceLastCall;

              return maxing
                ? nativeMin(result, maxWait - timeSinceLastInvoke)
                : result;
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;

              // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.
              return (
                lastCallTime === undefined ||
                timeSinceLastCall >= wait ||
                timeSinceLastCall < 0 ||
                (maxing && timeSinceLastInvoke >= maxWait)
              );
            }

            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              // Restart the timer.
              timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
              timerId = undefined;

              // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined;
              return result;
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
              var time = now(),
                isInvoking = shouldInvoke(time);

              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  // Handle invocations in a tight loop.
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait);
              }
              return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value;
            return !!value && (type == "object" || type == "function");
          }

          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return !!value && typeof value == "object";
          }

          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */
          function isSymbol(value) {
            return (
              typeof value == "symbol" ||
              (isObjectLike(value) && objectToString.call(value) == symbolTag)
            );
          }

          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other =
                typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, "");
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value)
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : reIsBadHex.test(value)
              ? NAN
              : +value;
          }

          module.exports = debounce;

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/lodash.memoize/index.js":
      /*!**********************************************!*\
  !*** ./node_modules/lodash.memoize/index.js ***!
  \**********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**
           * lodash (Custom Build) <https://lodash.com/>
           * Build: `lodash modularize exports="npm" -o ./`
           * Copyright jQuery Foundation and other contributors <https://jquery.org/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */

          /** Used as the `TypeError` message for "Functions" methods. */
          var FUNC_ERROR_TEXT = "Expected a function";

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** `Object#toString` result references. */
          var funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]";

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `value` is a host object in IE < 9.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
           */
          function isHostObject(value) {
            // Many host objects are `Object` objects that can coerce to strings
            // despite having improperly defined `toString` methods.
            var result = false;
            if (value != null && typeof value.toString != "function") {
              try {
                result = !!(value + "");
              } catch (e) {}
            }
            return result;
          }

          /** Used for built-in method references. */
          var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;

          /** Used to detect overreaching core-js shims. */
          var coreJsData = root["__core-js_shared__"];

          /** Used to detect methods masquerading as native. */
          var maskSrcKey = (function() {
            var uid = /[^.]+$/.exec(
              (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
            );
            return uid ? "Symbol(src)_1." + uid : "";
          })();

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var objectToString = objectProto.toString;

          /** Used to detect if a method is native. */
          var reIsNative = RegExp(
            "^" +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
          );

          /** Built-in value references. */
          var splice = arrayProto.splice;

          /* Built-in method references that are verified to be native. */
          var Map = getNative(root, "Map"),
            nativeCreate = getNative(Object, "create");

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Hash(entries) {
            var index = -1,
              length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
          }

          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function hashDelete(key) {
            return this.has(key) && delete this.__data__[key];
          }

          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result = data[key];
              return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
          }

          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate
              ? data[key] !== undefined
              : hasOwnProperty.call(data, key);
          }

          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */
          function hashSet(key, value) {
            var data = this.__data__;
            data[key] =
              nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
          }

          // Add methods to `Hash`.
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function ListCache(entries) {
            var index = -1,
              length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */
          function listCacheClear() {
            this.__data__ = [];
          }

          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            return true;
          }

          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
          }

          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }

          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */
          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }

          // Add methods to `ListCache`.
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function MapCache(entries) {
            var index = -1,
              length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */
          function mapCacheClear() {
            this.__data__ = {
              hash: new Hash(),
              map: new (Map || ListCache)(),
              string: new Hash(),
            };
          }

          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function mapCacheDelete(key) {
            return getMapData(this, key)["delete"](key);
          }

          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }

          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }

          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */
          function mapCacheSet(key, value) {
            getMapData(this, key).set(key, value);
            return this;
          }

          // Add methods to `MapCache`.
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;

          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern =
              isFunction(value) || isHostObject(value)
                ? reIsNative
                : reIsHostCtor;
            return pattern.test(toSource(value));
          }

          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */
          function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key)
              ? data[typeof key == "string" ? "string" : "hash"]
              : data.map;
          }

          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
          }

          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" ||
              type == "number" ||
              type == "symbol" ||
              type == "boolean"
              ? value !== "__proto__"
              : value === null;
          }

          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }

          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to process.
           * @returns {string} Returns the source code.
           */
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {}
              try {
                return func + "";
              } catch (e) {}
            }
            return "";
          }

          /**
           * Creates a function that memoizes the result of `func`. If `resolver` is
           * provided, it determines the cache key for storing the result based on the
           * arguments provided to the memoized function. By default, the first argument
           * provided to the memoized function is used as the map cache key. The `func`
           * is invoked with the `this` binding of the memoized function.
           *
           * **Note:** The cache is exposed as the `cache` property on the memoized
           * function. Its creation may be customized by replacing the `_.memoize.Cache`
           * constructor with one whose instances implement the
           * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
           * method interface of `delete`, `get`, `has`, and `set`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to have its output memoized.
           * @param {Function} [resolver] The function to resolve the cache key.
           * @returns {Function} Returns the new memoized function.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           * var other = { 'c': 3, 'd': 4 };
           *
           * var values = _.memoize(_.values);
           * values(object);
           * // => [1, 2]
           *
           * values(other);
           * // => [3, 4]
           *
           * object.a = 2;
           * values(object);
           * // => [1, 2]
           *
           * // Modify the result cache.
           * values.cache.set(object, ['a', 'b']);
           * values(object);
           * // => ['a', 'b']
           *
           * // Replace `_.memoize.Cache`.
           * _.memoize.Cache = WeakMap;
           */
          function memoize(func, resolver) {
            if (
              typeof func != "function" ||
              (resolver && typeof resolver != "function")
            ) {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

              if (cache.has(key)) {
                return cache.get(key);
              }
              var result = func.apply(this, args);
              memoized.cache = cache.set(key, result);
              return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }

          // Assign cache to `_.memoize`.
          memoize.Cache = MapCache;

          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */
          function eq(value, other) {
            return value === other || (value !== value && other !== other);
          }

          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */
          function isFunction(value) {
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 8-9 which returns 'object' for typed array and other constructors.
            var tag = isObject(value) ? objectToString.call(value) : "";
            return tag == funcTag || tag == genTag;
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value;
            return !!value && (type == "object" || type == "function");
          }

          module.exports = memoize;

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/lodash.throttle/index.js":
      /*!***********************************************!*\
  !*** ./node_modules/lodash.throttle/index.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**
           * lodash (Custom Build) <https://lodash.com/>
           * Build: `lodash modularize exports="npm" -o ./`
           * Copyright jQuery Foundation and other contributors <https://jquery.org/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */

          /** Used as the `TypeError` message for "Functions" methods. */
          var FUNC_ERROR_TEXT = "Expected a function";

          /** Used as references for various `Number` constants. */
          var NAN = 0 / 0;

          /** `Object#toString` result references. */
          var symbolTag = "[object Symbol]";

          /** Used to match leading and trailing whitespace. */
          var reTrim = /^\s+|\s+$/g;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Built-in method references without a dependency on `root`. */
          var freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var objectToString = objectProto.toString;

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeMax = Math.max,
            nativeMin = Math.min;

          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */
          var now = function() {
            return root.Date.now();
          };

          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */
          function debounce(func, wait, options) {
            var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing
                ? nativeMax(toNumber(options.maxWait) || 0, wait)
                : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
              var args = lastArgs,
                thisArg = lastThis;

              lastArgs = lastThis = undefined;
              lastInvokeTime = time;
              result = func.apply(thisArg, args);
              return result;
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time;
              // Start the timer for the trailing edge.
              timerId = setTimeout(timerExpired, wait);
              // Invoke the leading edge.
              return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                result = wait - timeSinceLastCall;

              return maxing
                ? nativeMin(result, maxWait - timeSinceLastInvoke)
                : result;
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;

              // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.
              return (
                lastCallTime === undefined ||
                timeSinceLastCall >= wait ||
                timeSinceLastCall < 0 ||
                (maxing && timeSinceLastInvoke >= maxWait)
              );
            }

            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              // Restart the timer.
              timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
              timerId = undefined;

              // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined;
              return result;
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
              var time = now(),
                isInvoking = shouldInvoke(time);

              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  // Handle invocations in a tight loop.
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait);
              }
              return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }

          /**
           * Creates a throttled function that only invokes `func` at most once per
           * every `wait` milliseconds. The throttled function comes with a `cancel`
           * method to cancel delayed `func` invocations and a `flush` method to
           * immediately invoke them. Provide `options` to indicate whether `func`
           * should be invoked on the leading and/or trailing edge of the `wait`
           * timeout. The `func` is invoked with the last arguments provided to the
           * throttled function. Subsequent calls to the throttled function return the
           * result of the last `func` invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the throttled function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.throttle` and `_.debounce`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to throttle.
           * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=true]
           *  Specify invoking on the leading edge of the timeout.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new throttled function.
           * @example
           *
           * // Avoid excessively updating the position while scrolling.
           * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
           *
           * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
           * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
           * jQuery(element).on('click', throttled);
           *
           * // Cancel the trailing throttled invocation.
           * jQuery(window).on('popstate', throttled.cancel);
           */
          function throttle(func, wait, options) {
            var leading = true,
              trailing = true;

            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
              leading: leading,
              maxWait: wait,
              trailing: trailing,
            });
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value;
            return !!value && (type == "object" || type == "function");
          }

          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return !!value && typeof value == "object";
          }

          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */
          function isSymbol(value) {
            return (
              typeof value == "symbol" ||
              (isObjectLike(value) && objectToString.call(value) == symbolTag)
            );
          }

          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other =
                typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, "");
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value)
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : reIsBadHex.test(value)
              ? NAN
              : +value;
          }

          module.exports = throttle;

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
      /*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var map = {
          "./af": "./node_modules/moment/locale/af.js",
          "./af.js": "./node_modules/moment/locale/af.js",
          "./ar": "./node_modules/moment/locale/ar.js",
          "./ar-dz": "./node_modules/moment/locale/ar-dz.js",
          "./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
          "./ar-kw": "./node_modules/moment/locale/ar-kw.js",
          "./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
          "./ar-ly": "./node_modules/moment/locale/ar-ly.js",
          "./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
          "./ar-ma": "./node_modules/moment/locale/ar-ma.js",
          "./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
          "./ar-sa": "./node_modules/moment/locale/ar-sa.js",
          "./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
          "./ar-tn": "./node_modules/moment/locale/ar-tn.js",
          "./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
          "./ar.js": "./node_modules/moment/locale/ar.js",
          "./az": "./node_modules/moment/locale/az.js",
          "./az.js": "./node_modules/moment/locale/az.js",
          "./be": "./node_modules/moment/locale/be.js",
          "./be.js": "./node_modules/moment/locale/be.js",
          "./bg": "./node_modules/moment/locale/bg.js",
          "./bg.js": "./node_modules/moment/locale/bg.js",
          "./bm": "./node_modules/moment/locale/bm.js",
          "./bm.js": "./node_modules/moment/locale/bm.js",
          "./bn": "./node_modules/moment/locale/bn.js",
          "./bn.js": "./node_modules/moment/locale/bn.js",
          "./bo": "./node_modules/moment/locale/bo.js",
          "./bo.js": "./node_modules/moment/locale/bo.js",
          "./br": "./node_modules/moment/locale/br.js",
          "./br.js": "./node_modules/moment/locale/br.js",
          "./bs": "./node_modules/moment/locale/bs.js",
          "./bs.js": "./node_modules/moment/locale/bs.js",
          "./ca": "./node_modules/moment/locale/ca.js",
          "./ca.js": "./node_modules/moment/locale/ca.js",
          "./cs": "./node_modules/moment/locale/cs.js",
          "./cs.js": "./node_modules/moment/locale/cs.js",
          "./cv": "./node_modules/moment/locale/cv.js",
          "./cv.js": "./node_modules/moment/locale/cv.js",
          "./cy": "./node_modules/moment/locale/cy.js",
          "./cy.js": "./node_modules/moment/locale/cy.js",
          "./da": "./node_modules/moment/locale/da.js",
          "./da.js": "./node_modules/moment/locale/da.js",
          "./de": "./node_modules/moment/locale/de.js",
          "./de-at": "./node_modules/moment/locale/de-at.js",
          "./de-at.js": "./node_modules/moment/locale/de-at.js",
          "./de-ch": "./node_modules/moment/locale/de-ch.js",
          "./de-ch.js": "./node_modules/moment/locale/de-ch.js",
          "./de.js": "./node_modules/moment/locale/de.js",
          "./dv": "./node_modules/moment/locale/dv.js",
          "./dv.js": "./node_modules/moment/locale/dv.js",
          "./el": "./node_modules/moment/locale/el.js",
          "./el.js": "./node_modules/moment/locale/el.js",
          "./en-au": "./node_modules/moment/locale/en-au.js",
          "./en-au.js": "./node_modules/moment/locale/en-au.js",
          "./en-ca": "./node_modules/moment/locale/en-ca.js",
          "./en-ca.js": "./node_modules/moment/locale/en-ca.js",
          "./en-gb": "./node_modules/moment/locale/en-gb.js",
          "./en-gb.js": "./node_modules/moment/locale/en-gb.js",
          "./en-ie": "./node_modules/moment/locale/en-ie.js",
          "./en-ie.js": "./node_modules/moment/locale/en-ie.js",
          "./en-il": "./node_modules/moment/locale/en-il.js",
          "./en-il.js": "./node_modules/moment/locale/en-il.js",
          "./en-in": "./node_modules/moment/locale/en-in.js",
          "./en-in.js": "./node_modules/moment/locale/en-in.js",
          "./en-nz": "./node_modules/moment/locale/en-nz.js",
          "./en-nz.js": "./node_modules/moment/locale/en-nz.js",
          "./en-sg": "./node_modules/moment/locale/en-sg.js",
          "./en-sg.js": "./node_modules/moment/locale/en-sg.js",
          "./eo": "./node_modules/moment/locale/eo.js",
          "./eo.js": "./node_modules/moment/locale/eo.js",
          "./es": "./node_modules/moment/locale/es.js",
          "./es-do": "./node_modules/moment/locale/es-do.js",
          "./es-do.js": "./node_modules/moment/locale/es-do.js",
          "./es-us": "./node_modules/moment/locale/es-us.js",
          "./es-us.js": "./node_modules/moment/locale/es-us.js",
          "./es.js": "./node_modules/moment/locale/es.js",
          "./et": "./node_modules/moment/locale/et.js",
          "./et.js": "./node_modules/moment/locale/et.js",
          "./eu": "./node_modules/moment/locale/eu.js",
          "./eu.js": "./node_modules/moment/locale/eu.js",
          "./fa": "./node_modules/moment/locale/fa.js",
          "./fa.js": "./node_modules/moment/locale/fa.js",
          "./fi": "./node_modules/moment/locale/fi.js",
          "./fi.js": "./node_modules/moment/locale/fi.js",
          "./fil": "./node_modules/moment/locale/fil.js",
          "./fil.js": "./node_modules/moment/locale/fil.js",
          "./fo": "./node_modules/moment/locale/fo.js",
          "./fo.js": "./node_modules/moment/locale/fo.js",
          "./fr": "./node_modules/moment/locale/fr.js",
          "./fr-ca": "./node_modules/moment/locale/fr-ca.js",
          "./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
          "./fr-ch": "./node_modules/moment/locale/fr-ch.js",
          "./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
          "./fr.js": "./node_modules/moment/locale/fr.js",
          "./fy": "./node_modules/moment/locale/fy.js",
          "./fy.js": "./node_modules/moment/locale/fy.js",
          "./ga": "./node_modules/moment/locale/ga.js",
          "./ga.js": "./node_modules/moment/locale/ga.js",
          "./gd": "./node_modules/moment/locale/gd.js",
          "./gd.js": "./node_modules/moment/locale/gd.js",
          "./gl": "./node_modules/moment/locale/gl.js",
          "./gl.js": "./node_modules/moment/locale/gl.js",
          "./gom-deva": "./node_modules/moment/locale/gom-deva.js",
          "./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
          "./gom-latn": "./node_modules/moment/locale/gom-latn.js",
          "./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
          "./gu": "./node_modules/moment/locale/gu.js",
          "./gu.js": "./node_modules/moment/locale/gu.js",
          "./he": "./node_modules/moment/locale/he.js",
          "./he.js": "./node_modules/moment/locale/he.js",
          "./hi": "./node_modules/moment/locale/hi.js",
          "./hi.js": "./node_modules/moment/locale/hi.js",
          "./hr": "./node_modules/moment/locale/hr.js",
          "./hr.js": "./node_modules/moment/locale/hr.js",
          "./hu": "./node_modules/moment/locale/hu.js",
          "./hu.js": "./node_modules/moment/locale/hu.js",
          "./hy-am": "./node_modules/moment/locale/hy-am.js",
          "./hy-am.js": "./node_modules/moment/locale/hy-am.js",
          "./id": "./node_modules/moment/locale/id.js",
          "./id.js": "./node_modules/moment/locale/id.js",
          "./is": "./node_modules/moment/locale/is.js",
          "./is.js": "./node_modules/moment/locale/is.js",
          "./it": "./node_modules/moment/locale/it.js",
          "./it-ch": "./node_modules/moment/locale/it-ch.js",
          "./it-ch.js": "./node_modules/moment/locale/it-ch.js",
          "./it.js": "./node_modules/moment/locale/it.js",
          "./ja": "./node_modules/moment/locale/ja.js",
          "./ja.js": "./node_modules/moment/locale/ja.js",
          "./jv": "./node_modules/moment/locale/jv.js",
          "./jv.js": "./node_modules/moment/locale/jv.js",
          "./ka": "./node_modules/moment/locale/ka.js",
          "./ka.js": "./node_modules/moment/locale/ka.js",
          "./kk": "./node_modules/moment/locale/kk.js",
          "./kk.js": "./node_modules/moment/locale/kk.js",
          "./km": "./node_modules/moment/locale/km.js",
          "./km.js": "./node_modules/moment/locale/km.js",
          "./kn": "./node_modules/moment/locale/kn.js",
          "./kn.js": "./node_modules/moment/locale/kn.js",
          "./ko": "./node_modules/moment/locale/ko.js",
          "./ko.js": "./node_modules/moment/locale/ko.js",
          "./ku": "./node_modules/moment/locale/ku.js",
          "./ku.js": "./node_modules/moment/locale/ku.js",
          "./ky": "./node_modules/moment/locale/ky.js",
          "./ky.js": "./node_modules/moment/locale/ky.js",
          "./lb": "./node_modules/moment/locale/lb.js",
          "./lb.js": "./node_modules/moment/locale/lb.js",
          "./lo": "./node_modules/moment/locale/lo.js",
          "./lo.js": "./node_modules/moment/locale/lo.js",
          "./lt": "./node_modules/moment/locale/lt.js",
          "./lt.js": "./node_modules/moment/locale/lt.js",
          "./lv": "./node_modules/moment/locale/lv.js",
          "./lv.js": "./node_modules/moment/locale/lv.js",
          "./me": "./node_modules/moment/locale/me.js",
          "./me.js": "./node_modules/moment/locale/me.js",
          "./mi": "./node_modules/moment/locale/mi.js",
          "./mi.js": "./node_modules/moment/locale/mi.js",
          "./mk": "./node_modules/moment/locale/mk.js",
          "./mk.js": "./node_modules/moment/locale/mk.js",
          "./ml": "./node_modules/moment/locale/ml.js",
          "./ml.js": "./node_modules/moment/locale/ml.js",
          "./mn": "./node_modules/moment/locale/mn.js",
          "./mn.js": "./node_modules/moment/locale/mn.js",
          "./mr": "./node_modules/moment/locale/mr.js",
          "./mr.js": "./node_modules/moment/locale/mr.js",
          "./ms": "./node_modules/moment/locale/ms.js",
          "./ms-my": "./node_modules/moment/locale/ms-my.js",
          "./ms-my.js": "./node_modules/moment/locale/ms-my.js",
          "./ms.js": "./node_modules/moment/locale/ms.js",
          "./mt": "./node_modules/moment/locale/mt.js",
          "./mt.js": "./node_modules/moment/locale/mt.js",
          "./my": "./node_modules/moment/locale/my.js",
          "./my.js": "./node_modules/moment/locale/my.js",
          "./nb": "./node_modules/moment/locale/nb.js",
          "./nb.js": "./node_modules/moment/locale/nb.js",
          "./ne": "./node_modules/moment/locale/ne.js",
          "./ne.js": "./node_modules/moment/locale/ne.js",
          "./nl": "./node_modules/moment/locale/nl.js",
          "./nl-be": "./node_modules/moment/locale/nl-be.js",
          "./nl-be.js": "./node_modules/moment/locale/nl-be.js",
          "./nl.js": "./node_modules/moment/locale/nl.js",
          "./nn": "./node_modules/moment/locale/nn.js",
          "./nn.js": "./node_modules/moment/locale/nn.js",
          "./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
          "./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
          "./pa-in": "./node_modules/moment/locale/pa-in.js",
          "./pa-in.js": "./node_modules/moment/locale/pa-in.js",
          "./pl": "./node_modules/moment/locale/pl.js",
          "./pl.js": "./node_modules/moment/locale/pl.js",
          "./pt": "./node_modules/moment/locale/pt.js",
          "./pt-br": "./node_modules/moment/locale/pt-br.js",
          "./pt-br.js": "./node_modules/moment/locale/pt-br.js",
          "./pt.js": "./node_modules/moment/locale/pt.js",
          "./ro": "./node_modules/moment/locale/ro.js",
          "./ro.js": "./node_modules/moment/locale/ro.js",
          "./ru": "./node_modules/moment/locale/ru.js",
          "./ru.js": "./node_modules/moment/locale/ru.js",
          "./sd": "./node_modules/moment/locale/sd.js",
          "./sd.js": "./node_modules/moment/locale/sd.js",
          "./se": "./node_modules/moment/locale/se.js",
          "./se.js": "./node_modules/moment/locale/se.js",
          "./si": "./node_modules/moment/locale/si.js",
          "./si.js": "./node_modules/moment/locale/si.js",
          "./sk": "./node_modules/moment/locale/sk.js",
          "./sk.js": "./node_modules/moment/locale/sk.js",
          "./sl": "./node_modules/moment/locale/sl.js",
          "./sl.js": "./node_modules/moment/locale/sl.js",
          "./sq": "./node_modules/moment/locale/sq.js",
          "./sq.js": "./node_modules/moment/locale/sq.js",
          "./sr": "./node_modules/moment/locale/sr.js",
          "./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
          "./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
          "./sr.js": "./node_modules/moment/locale/sr.js",
          "./ss": "./node_modules/moment/locale/ss.js",
          "./ss.js": "./node_modules/moment/locale/ss.js",
          "./sv": "./node_modules/moment/locale/sv.js",
          "./sv.js": "./node_modules/moment/locale/sv.js",
          "./sw": "./node_modules/moment/locale/sw.js",
          "./sw.js": "./node_modules/moment/locale/sw.js",
          "./ta": "./node_modules/moment/locale/ta.js",
          "./ta.js": "./node_modules/moment/locale/ta.js",
          "./te": "./node_modules/moment/locale/te.js",
          "./te.js": "./node_modules/moment/locale/te.js",
          "./tet": "./node_modules/moment/locale/tet.js",
          "./tet.js": "./node_modules/moment/locale/tet.js",
          "./tg": "./node_modules/moment/locale/tg.js",
          "./tg.js": "./node_modules/moment/locale/tg.js",
          "./th": "./node_modules/moment/locale/th.js",
          "./th.js": "./node_modules/moment/locale/th.js",
          "./tl-ph": "./node_modules/moment/locale/tl-ph.js",
          "./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
          "./tlh": "./node_modules/moment/locale/tlh.js",
          "./tlh.js": "./node_modules/moment/locale/tlh.js",
          "./tr": "./node_modules/moment/locale/tr.js",
          "./tr.js": "./node_modules/moment/locale/tr.js",
          "./tzl": "./node_modules/moment/locale/tzl.js",
          "./tzl.js": "./node_modules/moment/locale/tzl.js",
          "./tzm": "./node_modules/moment/locale/tzm.js",
          "./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
          "./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
          "./tzm.js": "./node_modules/moment/locale/tzm.js",
          "./ug-cn": "./node_modules/moment/locale/ug-cn.js",
          "./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
          "./uk": "./node_modules/moment/locale/uk.js",
          "./uk.js": "./node_modules/moment/locale/uk.js",
          "./ur": "./node_modules/moment/locale/ur.js",
          "./ur.js": "./node_modules/moment/locale/ur.js",
          "./uz": "./node_modules/moment/locale/uz.js",
          "./uz-latn": "./node_modules/moment/locale/uz-latn.js",
          "./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
          "./uz.js": "./node_modules/moment/locale/uz.js",
          "./vi": "./node_modules/moment/locale/vi.js",
          "./vi.js": "./node_modules/moment/locale/vi.js",
          "./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
          "./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
          "./yo": "./node_modules/moment/locale/yo.js",
          "./yo.js": "./node_modules/moment/locale/yo.js",
          "./zh-cn": "./node_modules/moment/locale/zh-cn.js",
          "./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
          "./zh-hk": "./node_modules/moment/locale/zh-hk.js",
          "./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
          "./zh-mo": "./node_modules/moment/locale/zh-mo.js",
          "./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
          "./zh-tw": "./node_modules/moment/locale/zh-tw.js",
          "./zh-tw.js": "./node_modules/moment/locale/zh-tw.js",
        };

        function webpackContext(req) {
          var id = webpackContextResolve(req);
          return __webpack_require__(id);
        }
        function webpackContextResolve(req) {
          if (!__webpack_require__.o(map, req)) {
            var e = new Error("Cannot find module '" + req + "'");
            e.code = "MODULE_NOT_FOUND";
            throw e;
          }
          return map[req];
        }
        webpackContext.keys = function webpackContextKeys() {
          return Object.keys(map);
        };
        webpackContext.resolve = webpackContextResolve;
        module.exports = webpackContext;
        webpackContext.id =
          "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

        /***/
      },

    /***/ "./node_modules/moment/locale/af.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Afrikaans [af]
        //! author : Werner Mollentze : https://github.com/wernerm

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var af = moment.defineLocale("af", {
            months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split(
              "_"
            ),
            weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split(
              "_"
            ),
            weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
            weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
            meridiemParse: /vm|nm/i,
            isPM: function(input) {
              return /^nm$/i.test(input);
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 12) {
                return isLower ? "vm" : "VM";
              } else {
                return isLower ? "nm" : "NM";
              }
            },
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Vandag om] LT",
              nextDay: "[Môre om] LT",
              nextWeek: "dddd [om] LT",
              lastDay: "[Gister om] LT",
              lastWeek: "[Laas] dddd [om] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "oor %s",
              past: "%s gelede",
              s: "'n paar sekondes",
              ss: "%d sekondes",
              m: "'n minuut",
              mm: "%d minute",
              h: "'n uur",
              hh: "%d ure",
              d: "'n dag",
              dd: "%d dae",
              M: "'n maand",
              MM: "%d maande",
              y: "'n jaar",
              yy: "%d jaar",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(number) {
              return (
                number +
                (number === 1 || number === 8 || number >= 20 ? "ste" : "de")
              ); // Thanks to Joris Röling : https://github.com/jjupiter
            },
            week: {
              dow: 1, // Maandag is die eerste dag van die week.
              doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
            },
          });

          return af;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-dz.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic (Algeria) [ar-dz]
        //! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var arDz = moment.defineLocale("ar-dz", {
            months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[اليوم على الساعة] LT",
              nextDay: "[غدا على الساعة] LT",
              nextWeek: "dddd [على الساعة] LT",
              lastDay: "[أمس على الساعة] LT",
              lastWeek: "dddd [على الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "في %s",
              past: "منذ %s",
              s: "ثوان",
              ss: "%d ثانية",
              m: "دقيقة",
              mm: "%d دقائق",
              h: "ساعة",
              hh: "%d ساعات",
              d: "يوم",
              dd: "%d أيام",
              M: "شهر",
              MM: "%d أشهر",
              y: "سنة",
              yy: "%d سنوات",
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return arDz;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-kw.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic (Kuwait) [ar-kw]
        //! author : Nusret Parlak: https://github.com/nusretparlak

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var arKw = moment.defineLocale("ar-kw", {
            months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split(
              "_"
            ),
            monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split(
              "_"
            ),
            weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[اليوم على الساعة] LT",
              nextDay: "[غدا على الساعة] LT",
              nextWeek: "dddd [على الساعة] LT",
              lastDay: "[أمس على الساعة] LT",
              lastWeek: "dddd [على الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "في %s",
              past: "منذ %s",
              s: "ثوان",
              ss: "%d ثانية",
              m: "دقيقة",
              mm: "%d دقائق",
              h: "ساعة",
              hh: "%d ساعات",
              d: "يوم",
              dd: "%d أيام",
              M: "شهر",
              MM: "%d أشهر",
              y: "سنة",
              yy: "%d سنوات",
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return arKw;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-ly.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic (Lybia) [ar-ly]
        //! author : Ali Hmer: https://github.com/kikoanis

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "1",
              "2": "2",
              "3": "3",
              "4": "4",
              "5": "5",
              "6": "6",
              "7": "7",
              "8": "8",
              "9": "9",
              "0": "0",
            },
            pluralForm = function(n) {
              return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
            },
            plurals = {
              s: [
                "أقل من ثانية",
                "ثانية واحدة",
                ["ثانيتان", "ثانيتين"],
                "%d ثوان",
                "%d ثانية",
                "%d ثانية",
              ],
              m: [
                "أقل من دقيقة",
                "دقيقة واحدة",
                ["دقيقتان", "دقيقتين"],
                "%d دقائق",
                "%d دقيقة",
                "%d دقيقة",
              ],
              h: [
                "أقل من ساعة",
                "ساعة واحدة",
                ["ساعتان", "ساعتين"],
                "%d ساعات",
                "%d ساعة",
                "%d ساعة",
              ],
              d: [
                "أقل من يوم",
                "يوم واحد",
                ["يومان", "يومين"],
                "%d أيام",
                "%d يومًا",
                "%d يوم",
              ],
              M: [
                "أقل من شهر",
                "شهر واحد",
                ["شهران", "شهرين"],
                "%d أشهر",
                "%d شهرا",
                "%d شهر",
              ],
              y: [
                "أقل من عام",
                "عام واحد",
                ["عامان", "عامين"],
                "%d أعوام",
                "%d عامًا",
                "%d عام",
              ],
            },
            pluralize = function(u) {
              return function(number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                  str = plurals[u][pluralForm(number)];
                if (f === 2) {
                  str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
              };
            },
            months = [
              "يناير",
              "فبراير",
              "مارس",
              "أبريل",
              "مايو",
              "يونيو",
              "يوليو",
              "أغسطس",
              "سبتمبر",
              "أكتوبر",
              "نوفمبر",
              "ديسمبر",
            ];

          var arLy = moment.defineLocale("ar-ly", {
            months: months,
            monthsShort: months,
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "D/\u200FM/\u200FYYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            meridiemParse: /ص|م/,
            isPM: function(input) {
              return "م" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ص";
              } else {
                return "م";
              }
            },
            calendar: {
              sameDay: "[اليوم عند الساعة] LT",
              nextDay: "[غدًا عند الساعة] LT",
              nextWeek: "dddd [عند الساعة] LT",
              lastDay: "[أمس عند الساعة] LT",
              lastWeek: "dddd [عند الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "بعد %s",
              past: "منذ %s",
              s: pluralize("s"),
              ss: pluralize("s"),
              m: pluralize("m"),
              mm: pluralize("m"),
              h: pluralize("h"),
              hh: pluralize("h"),
              d: pluralize("d"),
              dd: pluralize("d"),
              M: pluralize("M"),
              MM: pluralize("M"),
              y: pluralize("y"),
              yy: pluralize("y"),
            },
            preparse: function(string) {
              return string.replace(/،/g, ",");
            },
            postformat: function(string) {
              return string
                .replace(/\d/g, function(match) {
                  return symbolMap[match];
                })
                .replace(/,/g, "،");
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return arLy;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-ma.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic (Morocco) [ar-ma]
        //! author : ElFadili Yassine : https://github.com/ElFadiliY
        //! author : Abdel Said : https://github.com/abdelsaid

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var arMa = moment.defineLocale("ar-ma", {
            months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split(
              "_"
            ),
            monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split(
              "_"
            ),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[اليوم على الساعة] LT",
              nextDay: "[غدا على الساعة] LT",
              nextWeek: "dddd [على الساعة] LT",
              lastDay: "[أمس على الساعة] LT",
              lastWeek: "dddd [على الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "في %s",
              past: "منذ %s",
              s: "ثوان",
              ss: "%d ثانية",
              m: "دقيقة",
              mm: "%d دقائق",
              h: "ساعة",
              hh: "%d ساعات",
              d: "يوم",
              dd: "%d أيام",
              M: "شهر",
              MM: "%d أشهر",
              y: "سنة",
              yy: "%d سنوات",
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return arMa;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-sa.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic (Saudi Arabia) [ar-sa]
        //! author : Suhail Alkowaileet : https://github.com/xsoh

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "١",
              "2": "٢",
              "3": "٣",
              "4": "٤",
              "5": "٥",
              "6": "٦",
              "7": "٧",
              "8": "٨",
              "9": "٩",
              "0": "٠",
            },
            numberMap = {
              "١": "1",
              "٢": "2",
              "٣": "3",
              "٤": "4",
              "٥": "5",
              "٦": "6",
              "٧": "7",
              "٨": "8",
              "٩": "9",
              "٠": "0",
            };

          var arSa = moment.defineLocale("ar-sa", {
            months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            meridiemParse: /ص|م/,
            isPM: function(input) {
              return "م" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ص";
              } else {
                return "م";
              }
            },
            calendar: {
              sameDay: "[اليوم على الساعة] LT",
              nextDay: "[غدا على الساعة] LT",
              nextWeek: "dddd [على الساعة] LT",
              lastDay: "[أمس على الساعة] LT",
              lastWeek: "dddd [على الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "في %s",
              past: "منذ %s",
              s: "ثوان",
              ss: "%d ثانية",
              m: "دقيقة",
              mm: "%d دقائق",
              h: "ساعة",
              hh: "%d ساعات",
              d: "يوم",
              dd: "%d أيام",
              M: "شهر",
              MM: "%d أشهر",
              y: "سنة",
              yy: "%d سنوات",
            },
            preparse: function(string) {
              return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {
                  return numberMap[match];
                })
                .replace(/،/g, ",");
            },
            postformat: function(string) {
              return string
                .replace(/\d/g, function(match) {
                  return symbolMap[match];
                })
                .replace(/,/g, "،");
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return arSa;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar-tn.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale  :  Arabic (Tunisia) [ar-tn]
        //! author : Nader Toukabri : https://github.com/naderio

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var arTn = moment.defineLocale("ar-tn", {
            months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split(
              "_"
            ),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[اليوم على الساعة] LT",
              nextDay: "[غدا على الساعة] LT",
              nextWeek: "dddd [على الساعة] LT",
              lastDay: "[أمس على الساعة] LT",
              lastWeek: "dddd [على الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "في %s",
              past: "منذ %s",
              s: "ثوان",
              ss: "%d ثانية",
              m: "دقيقة",
              mm: "%d دقائق",
              h: "ساعة",
              hh: "%d ساعات",
              d: "يوم",
              dd: "%d أيام",
              M: "شهر",
              MM: "%d أشهر",
              y: "سنة",
              yy: "%d سنوات",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return arTn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ar.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Arabic [ar]
        //! author : Abdel Said: https://github.com/abdelsaid
        //! author : Ahmed Elkhatib
        //! author : forabi https://github.com/forabi

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "١",
              "2": "٢",
              "3": "٣",
              "4": "٤",
              "5": "٥",
              "6": "٦",
              "7": "٧",
              "8": "٨",
              "9": "٩",
              "0": "٠",
            },
            numberMap = {
              "١": "1",
              "٢": "2",
              "٣": "3",
              "٤": "4",
              "٥": "5",
              "٦": "6",
              "٧": "7",
              "٨": "8",
              "٩": "9",
              "٠": "0",
            },
            pluralForm = function(n) {
              return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
            },
            plurals = {
              s: [
                "أقل من ثانية",
                "ثانية واحدة",
                ["ثانيتان", "ثانيتين"],
                "%d ثوان",
                "%d ثانية",
                "%d ثانية",
              ],
              m: [
                "أقل من دقيقة",
                "دقيقة واحدة",
                ["دقيقتان", "دقيقتين"],
                "%d دقائق",
                "%d دقيقة",
                "%d دقيقة",
              ],
              h: [
                "أقل من ساعة",
                "ساعة واحدة",
                ["ساعتان", "ساعتين"],
                "%d ساعات",
                "%d ساعة",
                "%d ساعة",
              ],
              d: [
                "أقل من يوم",
                "يوم واحد",
                ["يومان", "يومين"],
                "%d أيام",
                "%d يومًا",
                "%d يوم",
              ],
              M: [
                "أقل من شهر",
                "شهر واحد",
                ["شهران", "شهرين"],
                "%d أشهر",
                "%d شهرا",
                "%d شهر",
              ],
              y: [
                "أقل من عام",
                "عام واحد",
                ["عامان", "عامين"],
                "%d أعوام",
                "%d عامًا",
                "%d عام",
              ],
            },
            pluralize = function(u) {
              return function(number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                  str = plurals[u][pluralForm(number)];
                if (f === 2) {
                  str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
              };
            },
            months = [
              "يناير",
              "فبراير",
              "مارس",
              "أبريل",
              "مايو",
              "يونيو",
              "يوليو",
              "أغسطس",
              "سبتمبر",
              "أكتوبر",
              "نوفمبر",
              "ديسمبر",
            ];

          var ar = moment.defineLocale("ar", {
            months: months,
            monthsShort: months,
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split(
              "_"
            ),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "D/\u200FM/\u200FYYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            meridiemParse: /ص|م/,
            isPM: function(input) {
              return "م" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ص";
              } else {
                return "م";
              }
            },
            calendar: {
              sameDay: "[اليوم عند الساعة] LT",
              nextDay: "[غدًا عند الساعة] LT",
              nextWeek: "dddd [عند الساعة] LT",
              lastDay: "[أمس عند الساعة] LT",
              lastWeek: "dddd [عند الساعة] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "بعد %s",
              past: "منذ %s",
              s: pluralize("s"),
              ss: pluralize("s"),
              m: pluralize("m"),
              mm: pluralize("m"),
              h: pluralize("h"),
              hh: pluralize("h"),
              d: pluralize("d"),
              dd: pluralize("d"),
              M: pluralize("M"),
              MM: pluralize("M"),
              y: pluralize("y"),
              yy: pluralize("y"),
            },
            preparse: function(string) {
              return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {
                  return numberMap[match];
                })
                .replace(/،/g, ",");
            },
            postformat: function(string) {
              return string
                .replace(/\d/g, function(match) {
                  return symbolMap[match];
                })
                .replace(/,/g, "،");
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return ar;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/az.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Azerbaijani [az]
        //! author : topchiyev : https://github.com/topchiyev

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var suffixes = {
            1: "-inci",
            5: "-inci",
            8: "-inci",
            70: "-inci",
            80: "-inci",
            2: "-nci",
            7: "-nci",
            20: "-nci",
            50: "-nci",
            3: "-üncü",
            4: "-üncü",
            100: "-üncü",
            6: "-ncı",
            9: "-uncu",
            10: "-uncu",
            30: "-uncu",
            60: "-ıncı",
            90: "-ıncı",
          };

          var az = moment.defineLocale("az", {
            months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split(
              "_"
            ),
            monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split(
              "_"
            ),
            weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split(
              "_"
            ),
            weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
            weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[bugün saat] LT",
              nextDay: "[sabah saat] LT",
              nextWeek: "[gələn həftə] dddd [saat] LT",
              lastDay: "[dünən] LT",
              lastWeek: "[keçən həftə] dddd [saat] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s sonra",
              past: "%s əvvəl",
              s: "birneçə saniyə",
              ss: "%d saniyə",
              m: "bir dəqiqə",
              mm: "%d dəqiqə",
              h: "bir saat",
              hh: "%d saat",
              d: "bir gün",
              dd: "%d gün",
              M: "bir ay",
              MM: "%d ay",
              y: "bir il",
              yy: "%d il",
            },
            meridiemParse: /gecə|səhər|gündüz|axşam/,
            isPM: function(input) {
              return /^(gündüz|axşam)$/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "gecə";
              } else if (hour < 12) {
                return "səhər";
              } else if (hour < 17) {
                return "gündüz";
              } else {
                return "axşam";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
            ordinal: function(number) {
              if (number === 0) {
                // special case for zero
                return number + "-ıncı";
              }
              var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
              return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return az;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/be.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Belarusian [be]
        //! author : Dmitry Demidov : https://github.com/demidov91
        //! author: Praleska: http://praleska.pro/
        //! Author : Menelion Elensúle : https://github.com/Oire

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function plural(word, num) {
            var forms = word.split("_");
            return num % 10 === 1 && num % 100 !== 11
              ? forms[0]
              : num % 10 >= 2 &&
                num % 10 <= 4 &&
                (num % 100 < 10 || num % 100 >= 20)
              ? forms[1]
              : forms[2];
          }
          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              ss: withoutSuffix
                ? "секунда_секунды_секунд"
                : "секунду_секунды_секунд",
              mm: withoutSuffix
                ? "хвіліна_хвіліны_хвілін"
                : "хвіліну_хвіліны_хвілін",
              hh: withoutSuffix
                ? "гадзіна_гадзіны_гадзін"
                : "гадзіну_гадзіны_гадзін",
              dd: "дзень_дні_дзён",
              MM: "месяц_месяцы_месяцаў",
              yy: "год_гады_гадоў",
            };
            if (key === "m") {
              return withoutSuffix ? "хвіліна" : "хвіліну";
            } else if (key === "h") {
              return withoutSuffix ? "гадзіна" : "гадзіну";
            } else {
              return number + " " + plural(format[key], +number);
            }
          }

          var be = moment.defineLocale("be", {
            months: {
              format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split(
                "_"
              ),
              standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split(
                "_"
              ),
            },
            monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split(
              "_"
            ),
            weekdays: {
              format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split(
                "_"
              ),
              standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split(
                "_"
              ),
              isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
            },
            weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
            weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY г.",
              LLL: "D MMMM YYYY г., HH:mm",
              LLLL: "dddd, D MMMM YYYY г., HH:mm",
            },
            calendar: {
              sameDay: "[Сёння ў] LT",
              nextDay: "[Заўтра ў] LT",
              lastDay: "[Учора ў] LT",
              nextWeek: function() {
                return "[У] dddd [ў] LT";
              },
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                  case 3:
                  case 5:
                  case 6:
                    return "[У мінулую] dddd [ў] LT";
                  case 1:
                  case 2:
                  case 4:
                    return "[У мінулы] dddd [ў] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "праз %s",
              past: "%s таму",
              s: "некалькі секунд",
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: relativeTimeWithPlural,
              hh: relativeTimeWithPlural,
              d: "дзень",
              dd: relativeTimeWithPlural,
              M: "месяц",
              MM: relativeTimeWithPlural,
              y: "год",
              yy: relativeTimeWithPlural,
            },
            meridiemParse: /ночы|раніцы|дня|вечара/,
            isPM: function(input) {
              return /^(дня|вечара)$/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "ночы";
              } else if (hour < 12) {
                return "раніцы";
              } else if (hour < 17) {
                return "дня";
              } else {
                return "вечара";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
            ordinal: function(number, period) {
              switch (period) {
                case "M":
                case "d":
                case "DDD":
                case "w":
                case "W":
                  return (number % 10 === 2 || number % 10 === 3) &&
                    number % 100 !== 12 &&
                    number % 100 !== 13
                    ? number + "-і"
                    : number + "-ы";
                case "D":
                  return number + "-га";
                default:
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return be;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/bg.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Bulgarian [bg]
        //! author : Krasen Borisov : https://github.com/kraz

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var bg = moment.defineLocale("bg", {
            months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split(
              "_"
            ),
            monthsShort: "яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split(
              "_"
            ),
            weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split(
              "_"
            ),
            weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
            weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "D.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY H:mm",
              LLLL: "dddd, D MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[Днес в] LT",
              nextDay: "[Утре в] LT",
              nextWeek: "dddd [в] LT",
              lastDay: "[Вчера в] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                  case 3:
                  case 6:
                    return "[Миналата] dddd [в] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[Миналия] dddd [в] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "след %s",
              past: "преди %s",
              s: "няколко секунди",
              ss: "%d секунди",
              m: "минута",
              mm: "%d минути",
              h: "час",
              hh: "%d часа",
              d: "ден",
              dd: "%d дена",
              M: "месец",
              MM: "%d месеца",
              y: "година",
              yy: "%d години",
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function(number) {
              var lastDigit = number % 10,
                last2Digits = number % 100;
              if (number === 0) {
                return number + "-ев";
              } else if (last2Digits === 0) {
                return number + "-ен";
              } else if (last2Digits > 10 && last2Digits < 20) {
                return number + "-ти";
              } else if (lastDigit === 1) {
                return number + "-ви";
              } else if (lastDigit === 2) {
                return number + "-ри";
              } else if (lastDigit === 7 || lastDigit === 8) {
                return number + "-ми";
              } else {
                return number + "-ти";
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return bg;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/bm.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Bambara [bm]
        //! author : Estelle Comment : https://github.com/estellecomment

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var bm = moment.defineLocale("bm", {
            months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split(
              "_"
            ),
            monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split(
              "_"
            ),
            weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),
            weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),
            weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "MMMM [tile] D [san] YYYY",
              LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",
              LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",
            },
            calendar: {
              sameDay: "[Bi lɛrɛ] LT",
              nextDay: "[Sini lɛrɛ] LT",
              nextWeek: "dddd [don lɛrɛ] LT",
              lastDay: "[Kunu lɛrɛ] LT",
              lastWeek: "dddd [tɛmɛnen lɛrɛ] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s kɔnɔ",
              past: "a bɛ %s bɔ",
              s: "sanga dama dama",
              ss: "sekondi %d",
              m: "miniti kelen",
              mm: "miniti %d",
              h: "lɛrɛ kelen",
              hh: "lɛrɛ %d",
              d: "tile kelen",
              dd: "tile %d",
              M: "kalo kelen",
              MM: "kalo %d",
              y: "san kelen",
              yy: "san %d",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return bm;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/bn.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Bengali [bn]
        //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "১",
              "2": "২",
              "3": "৩",
              "4": "৪",
              "5": "৫",
              "6": "৬",
              "7": "৭",
              "8": "৮",
              "9": "৯",
              "0": "০",
            },
            numberMap = {
              "১": "1",
              "২": "2",
              "৩": "3",
              "৪": "4",
              "৫": "5",
              "৬": "6",
              "৭": "7",
              "৮": "8",
              "৯": "9",
              "০": "0",
            };

          var bn = moment.defineLocale("bn", {
            months: "জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split(
              "_"
            ),
            monthsShort: "জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split(
              "_"
            ),
            weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split(
              "_"
            ),
            weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
            weekdaysMin: "রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),
            longDateFormat: {
              LT: "A h:mm সময়",
              LTS: "A h:mm:ss সময়",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm সময়",
              LLLL: "dddd, D MMMM YYYY, A h:mm সময়",
            },
            calendar: {
              sameDay: "[আজ] LT",
              nextDay: "[আগামীকাল] LT",
              nextWeek: "dddd, LT",
              lastDay: "[গতকাল] LT",
              lastWeek: "[গত] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s পরে",
              past: "%s আগে",
              s: "কয়েক সেকেন্ড",
              ss: "%d সেকেন্ড",
              m: "এক মিনিট",
              mm: "%d মিনিট",
              h: "এক ঘন্টা",
              hh: "%d ঘন্টা",
              d: "এক দিন",
              dd: "%d দিন",
              M: "এক মাস",
              MM: "%d মাস",
              y: "এক বছর",
              yy: "%d বছর",
            },
            preparse: function(string) {
              return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                (meridiem === "রাত" && hour >= 4) ||
                (meridiem === "দুপুর" && hour < 5) ||
                meridiem === "বিকাল"
              ) {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "রাত";
              } else if (hour < 10) {
                return "সকাল";
              } else if (hour < 17) {
                return "দুপুর";
              } else if (hour < 20) {
                return "বিকাল";
              } else {
                return "রাত";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return bn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/bo.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Tibetan [bo]
        //! author : Thupten N. Chakrishar : https://github.com/vajradog

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "༡",
              "2": "༢",
              "3": "༣",
              "4": "༤",
              "5": "༥",
              "6": "༦",
              "7": "༧",
              "8": "༨",
              "9": "༩",
              "0": "༠",
            },
            numberMap = {
              "༡": "1",
              "༢": "2",
              "༣": "3",
              "༤": "4",
              "༥": "5",
              "༦": "6",
              "༧": "7",
              "༨": "8",
              "༩": "9",
              "༠": "0",
            };

          var bo = moment.defineLocale("bo", {
            months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split(
              "_"
            ),
            monthsShort: "ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split(
              "_"
            ),
            monthsShortRegex: /^(ཟླ་\d{1,2})/,
            monthsParseExact: true,
            weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split(
              "_"
            ),
            weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split(
              "_"
            ),
            weekdaysMin: "ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),
            longDateFormat: {
              LT: "A h:mm",
              LTS: "A h:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm",
              LLLL: "dddd, D MMMM YYYY, A h:mm",
            },
            calendar: {
              sameDay: "[དི་རིང] LT",
              nextDay: "[སང་ཉིན] LT",
              nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
              lastDay: "[ཁ་སང] LT",
              lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s ལ་",
              past: "%s སྔན་ལ",
              s: "ལམ་སང",
              ss: "%d སྐར་ཆ།",
              m: "སྐར་མ་གཅིག",
              mm: "%d སྐར་མ",
              h: "ཆུ་ཚོད་གཅིག",
              hh: "%d ཆུ་ཚོད",
              d: "ཉིན་གཅིག",
              dd: "%d ཉིན་",
              M: "ཟླ་བ་གཅིག",
              MM: "%d ཟླ་བ",
              y: "ལོ་གཅིག",
              yy: "%d ལོ",
            },
            preparse: function(string) {
              return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                (meridiem === "མཚན་མོ" && hour >= 4) ||
                (meridiem === "ཉིན་གུང" && hour < 5) ||
                meridiem === "དགོང་དག"
              ) {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "མཚན་མོ";
              } else if (hour < 10) {
                return "ཞོགས་ཀས";
              } else if (hour < 17) {
                return "ཉིན་གུང";
              } else if (hour < 20) {
                return "དགོང་དག";
              } else {
                return "མཚན་མོ";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return bo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/br.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Breton [br]
        //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function relativeTimeWithMutation(number, withoutSuffix, key) {
            var format = {
              mm: "munutenn",
              MM: "miz",
              dd: "devezh",
            };
            return number + " " + mutation(format[key], number);
          }
          function specialMutationForYears(number) {
            switch (lastNumber(number)) {
              case 1:
              case 3:
              case 4:
              case 5:
              case 9:
                return number + " bloaz";
              default:
                return number + " vloaz";
            }
          }
          function lastNumber(number) {
            if (number > 9) {
              return lastNumber(number % 10);
            }
            return number;
          }
          function mutation(text, number) {
            if (number === 2) {
              return softMutation(text);
            }
            return text;
          }
          function softMutation(text) {
            var mutationTable = {
              m: "v",
              b: "v",
              d: "z",
            };
            if (mutationTable[text.charAt(0)] === undefined) {
              return text;
            }
            return mutationTable[text.charAt(0)] + text.substring(1);
          }

          var br = moment.defineLocale("br", {
            months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split(
              "_"
            ),
            monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split(
              "_"
            ),
            weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
            weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
            weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [a viz] MMMM YYYY",
              LLL: "D [a viz] MMMM YYYY HH:mm",
              LLLL: "dddd, D [a viz] MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Hiziv da] LT",
              nextDay: "[Warc'hoazh da] LT",
              nextWeek: "dddd [da] LT",
              lastDay: "[Dec'h da] LT",
              lastWeek: "dddd [paset da] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "a-benn %s",
              past: "%s 'zo",
              s: "un nebeud segondennoù",
              ss: "%d eilenn",
              m: "ur vunutenn",
              mm: relativeTimeWithMutation,
              h: "un eur",
              hh: "%d eur",
              d: "un devezh",
              dd: relativeTimeWithMutation,
              M: "ur miz",
              MM: relativeTimeWithMutation,
              y: "ur bloaz",
              yy: specialMutationForYears,
            },
            dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
            ordinal: function(number) {
              var output = number === 1 ? "añ" : "vet";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return br;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/bs.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Bosnian [bs]
        //! author : Nedim Cholich : https://github.com/frontyard
        //! based on (hr) translation by Bojan Marković

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function translate(number, withoutSuffix, key) {
            var result = number + " ";
            switch (key) {
              case "ss":
                if (number === 1) {
                  result += "sekunda";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "sekunde";
                } else {
                  result += "sekundi";
                }
                return result;
              case "m":
                return withoutSuffix ? "jedna minuta" : "jedne minute";
              case "mm":
                if (number === 1) {
                  result += "minuta";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "minute";
                } else {
                  result += "minuta";
                }
                return result;
              case "h":
                return withoutSuffix ? "jedan sat" : "jednog sata";
              case "hh":
                if (number === 1) {
                  result += "sat";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "sata";
                } else {
                  result += "sati";
                }
                return result;
              case "dd":
                if (number === 1) {
                  result += "dan";
                } else {
                  result += "dana";
                }
                return result;
              case "MM":
                if (number === 1) {
                  result += "mjesec";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "mjeseca";
                } else {
                  result += "mjeseci";
                }
                return result;
              case "yy":
                if (number === 1) {
                  result += "godina";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "godine";
                } else {
                  result += "godina";
                }
                return result;
            }
          }

          var bs = moment.defineLocale("bs", {
            months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split(
              "_"
            ),
            monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split(
              "_"
            ),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[danas u] LT",
              nextDay: "[sutra u] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[u] [nedjelju] [u] LT";
                  case 3:
                    return "[u] [srijedu] [u] LT";
                  case 6:
                    return "[u] [subotu] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[u] dddd [u] LT";
                }
              },
              lastDay: "[jučer u] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                  case 3:
                    return "[prošlu] dddd [u] LT";
                  case 6:
                    return "[prošle] [subote] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[prošli] dddd [u] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "prije %s",
              s: "par sekundi",
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: "dan",
              dd: translate,
              M: "mjesec",
              MM: translate,
              y: "godinu",
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return bs;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ca.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Catalan [ca]
        //! author : Juan G. Hurtado : https://github.com/juanghurtado

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ca = moment.defineLocale("ca", {
            months: {
              standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split(
                "_"
              ),
              format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                "_"
              ),
              isFormat: /D[oD]?(\s)+MMMM/,
            },
            monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split(
              "_"
            ),
            weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
            weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM [de] YYYY",
              ll: "D MMM YYYY",
              LLL: "D MMMM [de] YYYY [a les] H:mm",
              lll: "D MMM YYYY, H:mm",
              LLLL: "dddd D MMMM [de] YYYY [a les] H:mm",
              llll: "ddd D MMM YYYY, H:mm",
            },
            calendar: {
              sameDay: function() {
                return (
                  "[avui a " + (this.hours() !== 1 ? "les" : "la") + "] LT"
                );
              },
              nextDay: function() {
                return (
                  "[demà a " + (this.hours() !== 1 ? "les" : "la") + "] LT"
                );
              },
              nextWeek: function() {
                return (
                  "dddd [a " + (this.hours() !== 1 ? "les" : "la") + "] LT"
                );
              },
              lastDay: function() {
                return (
                  "[ahir a " + (this.hours() !== 1 ? "les" : "la") + "] LT"
                );
              },
              lastWeek: function() {
                return (
                  "[el] dddd [passat a " +
                  (this.hours() !== 1 ? "les" : "la") +
                  "] LT"
                );
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "d'aquí %s",
              past: "fa %s",
              s: "uns segons",
              ss: "%d segons",
              m: "un minut",
              mm: "%d minuts",
              h: "una hora",
              hh: "%d hores",
              d: "un dia",
              dd: "%d dies",
              M: "un mes",
              MM: "%d mesos",
              y: "un any",
              yy: "%d anys",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
            ordinal: function(number, period) {
              var output =
                number === 1
                  ? "r"
                  : number === 2
                  ? "n"
                  : number === 3
                  ? "r"
                  : number === 4
                  ? "t"
                  : "è";
              if (period === "w" || period === "W") {
                output = "a";
              }
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return ca;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/cs.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Czech [cs]
        //! author : petrbela : https://github.com/petrbela

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split(
              "_"
            ),
            monthsShort = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split(
              "_"
            ),
            monthsParse = [
              /^led/i,
              /^úno/i,
              /^bře/i,
              /^dub/i,
              /^kvě/i,
              /^(čvn|červen$|června)/i,
              /^(čvc|červenec|července)/i,
              /^srp/i,
              /^zář/i,
              /^říj/i,
              /^lis/i,
              /^pro/i,
            ],
            // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
            // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
            monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

          function plural(n) {
            return n > 1 && n < 5 && ~~(n / 10) !== 1;
          }
          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + " ";
            switch (key) {
              case "s": // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture
                  ? "pár sekund"
                  : "pár sekundami";
              case "ss": // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "sekundy" : "sekund");
                } else {
                  return result + "sekundami";
                }
              case "m": // a minute / in a minute / a minute ago
                return withoutSuffix
                  ? "minuta"
                  : isFuture
                  ? "minutu"
                  : "minutou";
              case "mm": // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "minuty" : "minut");
                } else {
                  return result + "minutami";
                }
              case "h": // an hour / in an hour / an hour ago
                return withoutSuffix
                  ? "hodina"
                  : isFuture
                  ? "hodinu"
                  : "hodinou";
              case "hh": // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "hodiny" : "hodin");
                } else {
                  return result + "hodinami";
                }
              case "d": // a day / in a day / a day ago
                return withoutSuffix || isFuture ? "den" : "dnem";
              case "dd": // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "dny" : "dní");
                } else {
                  return result + "dny";
                }
              case "M": // a month / in a month / a month ago
                return withoutSuffix || isFuture ? "měsíc" : "měsícem";
              case "MM": // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "měsíce" : "měsíců");
                } else {
                  return result + "měsíci";
                }
              case "y": // a year / in a year / a year ago
                return withoutSuffix || isFuture ? "rok" : "rokem";
              case "yy": // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "roky" : "let");
                } else {
                  return result + "lety";
                }
            }
          }

          var cs = moment.defineLocale("cs", {
            months: months,
            monthsShort: monthsShort,
            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
            // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
            monthsStrictRegex: /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
            monthsShortStrictRegex: /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,
            weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split(
              "_"
            ),
            weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
            weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd D. MMMM YYYY H:mm",
              l: "D. M. YYYY",
            },
            calendar: {
              sameDay: "[dnes v] LT",
              nextDay: "[zítra v] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[v neděli v] LT";
                  case 1:
                  case 2:
                    return "[v] dddd [v] LT";
                  case 3:
                    return "[ve středu v] LT";
                  case 4:
                    return "[ve čtvrtek v] LT";
                  case 5:
                    return "[v pátek v] LT";
                  case 6:
                    return "[v sobotu v] LT";
                }
              },
              lastDay: "[včera v] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[minulou neděli v] LT";
                  case 1:
                  case 2:
                    return "[minulé] dddd [v] LT";
                  case 3:
                    return "[minulou středu v] LT";
                  case 4:
                  case 5:
                    return "[minulý] dddd [v] LT";
                  case 6:
                    return "[minulou sobotu v] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "před %s",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return cs;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/cv.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Chuvash [cv]
        //! author : Anatoly Mironov : https://github.com/mirontoli

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var cv = moment.defineLocale("cv", {
            months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split(
              "_"
            ),
            monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split(
              "_"
            ),
            weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split(
              "_"
            ),
            weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
            weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD-MM-YYYY",
              LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
              LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
              LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
            },
            calendar: {
              sameDay: "[Паян] LT [сехетре]",
              nextDay: "[Ыран] LT [сехетре]",
              lastDay: "[Ӗнер] LT [сехетре]",
              nextWeek: "[Ҫитес] dddd LT [сехетре]",
              lastWeek: "[Иртнӗ] dddd LT [сехетре]",
              sameElse: "L",
            },
            relativeTime: {
              future: function(output) {
                var affix = /сехет$/i.exec(output)
                  ? "рен"
                  : /ҫул$/i.exec(output)
                  ? "тан"
                  : "ран";
                return output + affix;
              },
              past: "%s каялла",
              s: "пӗр-ик ҫеккунт",
              ss: "%d ҫеккунт",
              m: "пӗр минут",
              mm: "%d минут",
              h: "пӗр сехет",
              hh: "%d сехет",
              d: "пӗр кун",
              dd: "%d кун",
              M: "пӗр уйӑх",
              MM: "%d уйӑх",
              y: "пӗр ҫул",
              yy: "%d ҫул",
            },
            dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
            ordinal: "%d-мӗш",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return cv;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/cy.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Welsh [cy]
        //! author : Robert Allen : https://github.com/robgallen
        //! author : https://github.com/ryangreaves

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var cy = moment.defineLocale("cy", {
            months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split(
              "_"
            ),
            monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split(
              "_"
            ),
            weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split(
              "_"
            ),
            weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
            weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
            weekdaysParseExact: true,
            // time formats are the same as en-gb
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Heddiw am] LT",
              nextDay: "[Yfory am] LT",
              nextWeek: "dddd [am] LT",
              lastDay: "[Ddoe am] LT",
              lastWeek: "dddd [diwethaf am] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "mewn %s",
              past: "%s yn ôl",
              s: "ychydig eiliadau",
              ss: "%d eiliad",
              m: "munud",
              mm: "%d munud",
              h: "awr",
              hh: "%d awr",
              d: "diwrnod",
              dd: "%d diwrnod",
              M: "mis",
              MM: "%d mis",
              y: "blwyddyn",
              yy: "%d flynedd",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
            // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
            ordinal: function(number) {
              var b = number,
                output = "",
                lookup = [
                  "",
                  "af",
                  "il",
                  "ydd",
                  "ydd",
                  "ed",
                  "ed",
                  "ed",
                  "fed",
                  "fed",
                  "fed", // 1af to 10fed
                  "eg",
                  "fed",
                  "eg",
                  "eg",
                  "fed",
                  "eg",
                  "eg",
                  "fed",
                  "eg",
                  "fed", // 11eg to 20fed
                ];
              if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                  output = "fed"; // not 30ain, 70ain or 90ain
                } else {
                  output = "ain";
                }
              } else if (b > 0) {
                output = lookup[b];
              }
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return cy;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/da.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Danish [da]
        //! author : Ulrik Nielsen : https://github.com/mrbase

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var da = moment.defineLocale("da", {
            months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split(
              "_"
            ),
            monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split(
              "_"
            ),
            weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split(
              "_"
            ),
            weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
            weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY HH:mm",
              LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm",
            },
            calendar: {
              sameDay: "[i dag kl.] LT",
              nextDay: "[i morgen kl.] LT",
              nextWeek: "på dddd [kl.] LT",
              lastDay: "[i går kl.] LT",
              lastWeek: "[i] dddd[s kl.] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "om %s",
              past: "%s siden",
              s: "få sekunder",
              ss: "%d sekunder",
              m: "et minut",
              mm: "%d minutter",
              h: "en time",
              hh: "%d timer",
              d: "en dag",
              dd: "%d dage",
              M: "en måned",
              MM: "%d måneder",
              y: "et år",
              yy: "%d år",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return da;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/de-at.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : German (Austria) [de-at]
        //! author : lluchs : https://github.com/lluchs
        //! author: Menelion Elensúle: https://github.com/Oire
        //! author : Martin Groller : https://github.com/MadMG
        //! author : Mikolaj Dadela : https://github.com/mik01aj

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              m: ["eine Minute", "einer Minute"],
              h: ["eine Stunde", "einer Stunde"],
              d: ["ein Tag", "einem Tag"],
              dd: [number + " Tage", number + " Tagen"],
              M: ["ein Monat", "einem Monat"],
              MM: [number + " Monate", number + " Monaten"],
              y: ["ein Jahr", "einem Jahr"],
              yy: [number + " Jahre", number + " Jahren"],
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var deAt = moment.defineLocale("de-at", {
            months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split(
              "_"
            ),
            monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split(
              "_"
            ),
            weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY HH:mm",
              LLLL: "dddd, D. MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[heute um] LT [Uhr]",
              sameElse: "L",
              nextDay: "[morgen um] LT [Uhr]",
              nextWeek: "dddd [um] LT [Uhr]",
              lastDay: "[gestern um] LT [Uhr]",
              lastWeek: "[letzten] dddd [um] LT [Uhr]",
            },
            relativeTime: {
              future: "in %s",
              past: "vor %s",
              s: "ein paar Sekunden",
              ss: "%d Sekunden",
              m: processRelativeTime,
              mm: "%d Minuten",
              h: processRelativeTime,
              hh: "%d Stunden",
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return deAt;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/de-ch.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : German (Switzerland) [de-ch]
        //! author : sschueller : https://github.com/sschueller

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              m: ["eine Minute", "einer Minute"],
              h: ["eine Stunde", "einer Stunde"],
              d: ["ein Tag", "einem Tag"],
              dd: [number + " Tage", number + " Tagen"],
              M: ["ein Monat", "einem Monat"],
              MM: [number + " Monate", number + " Monaten"],
              y: ["ein Jahr", "einem Jahr"],
              yy: [number + " Jahre", number + " Jahren"],
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var deCh = moment.defineLocale("de-ch", {
            months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split(
              "_"
            ),
            monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split(
              "_"
            ),
            weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY HH:mm",
              LLLL: "dddd, D. MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[heute um] LT [Uhr]",
              sameElse: "L",
              nextDay: "[morgen um] LT [Uhr]",
              nextWeek: "dddd [um] LT [Uhr]",
              lastDay: "[gestern um] LT [Uhr]",
              lastWeek: "[letzten] dddd [um] LT [Uhr]",
            },
            relativeTime: {
              future: "in %s",
              past: "vor %s",
              s: "ein paar Sekunden",
              ss: "%d Sekunden",
              m: processRelativeTime,
              mm: "%d Minuten",
              h: processRelativeTime,
              hh: "%d Stunden",
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return deCh;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/de.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : German [de]
        //! author : lluchs : https://github.com/lluchs
        //! author: Menelion Elensúle: https://github.com/Oire
        //! author : Mikolaj Dadela : https://github.com/mik01aj

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              m: ["eine Minute", "einer Minute"],
              h: ["eine Stunde", "einer Stunde"],
              d: ["ein Tag", "einem Tag"],
              dd: [number + " Tage", number + " Tagen"],
              M: ["ein Monat", "einem Monat"],
              MM: [number + " Monate", number + " Monaten"],
              y: ["ein Jahr", "einem Jahr"],
              yy: [number + " Jahre", number + " Jahren"],
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }

          var de = moment.defineLocale("de", {
            months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split(
              "_"
            ),
            monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split(
              "_"
            ),
            weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY HH:mm",
              LLLL: "dddd, D. MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[heute um] LT [Uhr]",
              sameElse: "L",
              nextDay: "[morgen um] LT [Uhr]",
              nextWeek: "dddd [um] LT [Uhr]",
              lastDay: "[gestern um] LT [Uhr]",
              lastWeek: "[letzten] dddd [um] LT [Uhr]",
            },
            relativeTime: {
              future: "in %s",
              past: "vor %s",
              s: "ein paar Sekunden",
              ss: "%d Sekunden",
              m: processRelativeTime,
              mm: "%d Minuten",
              h: processRelativeTime,
              hh: "%d Stunden",
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return de;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/dv.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Maldivian [dv]
        //! author : Jawish Hameed : https://github.com/jawish

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = [
              "ޖެނުއަރީ",
              "ފެބްރުއަރީ",
              "މާރިޗު",
              "އޭޕްރީލު",
              "މޭ",
              "ޖޫން",
              "ޖުލައި",
              "އޯގަސްޓު",
              "ސެޕްޓެމްބަރު",
              "އޮކްޓޯބަރު",
              "ނޮވެމްބަރު",
              "ޑިސެމްބަރު",
            ],
            weekdays = [
              "އާދިއްތަ",
              "ހޯމަ",
              "އަންގާރަ",
              "ބުދަ",
              "ބުރާސްފަތި",
              "ހުކުރު",
              "ހޮނިހިރު",
            ];

          var dv = moment.defineLocale("dv", {
            months: months,
            monthsShort: months,
            weekdays: weekdays,
            weekdaysShort: weekdays,
            weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "D/M/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            meridiemParse: /މކ|މފ/,
            isPM: function(input) {
              return "މފ" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "މކ";
              } else {
                return "މފ";
              }
            },
            calendar: {
              sameDay: "[މިއަދު] LT",
              nextDay: "[މާދަމާ] LT",
              nextWeek: "dddd LT",
              lastDay: "[އިއްޔެ] LT",
              lastWeek: "[ފާއިތުވި] dddd LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "ތެރޭގައި %s",
              past: "ކުރިން %s",
              s: "ސިކުންތުކޮޅެއް",
              ss: "d% ސިކުންތު",
              m: "މިނިޓެއް",
              mm: "މިނިޓު %d",
              h: "ގަޑިއިރެއް",
              hh: "ގަޑިއިރު %d",
              d: "ދުވަހެއް",
              dd: "ދުވަސް %d",
              M: "މަހެއް",
              MM: "މަސް %d",
              y: "އަހަރެއް",
              yy: "އަހަރު %d",
            },
            preparse: function(string) {
              return string.replace(/،/g, ",");
            },
            postformat: function(string) {
              return string.replace(/,/g, "،");
            },
            week: {
              dow: 7, // Sunday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return dv;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/el.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Greek [el]
        //! author : Aggelos Karalias : https://github.com/mehiel

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function isFunction(input) {
            return (
              (typeof Function !== "undefined" && input instanceof Function) ||
              Object.prototype.toString.call(input) === "[object Function]"
            );
          }

          var el = moment.defineLocale("el", {
            monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split(
              "_"
            ),
            monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split(
              "_"
            ),
            months: function(momentToFormat, format) {
              if (!momentToFormat) {
                return this._monthsNominativeEl;
              } else if (
                typeof format === "string" &&
                /D/.test(format.substring(0, format.indexOf("MMMM")))
              ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
              } else {
                return this._monthsNominativeEl[momentToFormat.month()];
              }
            },
            monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split(
              "_"
            ),
            weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split(
              "_"
            ),
            weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
            weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
            meridiem: function(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? "μμ" : "ΜΜ";
              } else {
                return isLower ? "πμ" : "ΠΜ";
              }
            },
            isPM: function(input) {
              return (input + "").toLowerCase()[0] === "μ";
            },
            meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendarEl: {
              sameDay: "[Σήμερα {}] LT",
              nextDay: "[Αύριο {}] LT",
              nextWeek: "dddd [{}] LT",
              lastDay: "[Χθες {}] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 6:
                    return "[το προηγούμενο] dddd [{}] LT";
                  default:
                    return "[την προηγούμενη] dddd [{}] LT";
                }
              },
              sameElse: "L",
            },
            calendar: function(key, mom) {
              var output = this._calendarEl[key],
                hours = mom && mom.hours();
              if (isFunction(output)) {
                output = output.apply(mom);
              }
              return output.replace("{}", hours % 12 === 1 ? "στη" : "στις");
            },
            relativeTime: {
              future: "σε %s",
              past: "%s πριν",
              s: "λίγα δευτερόλεπτα",
              ss: "%d δευτερόλεπτα",
              m: "ένα λεπτό",
              mm: "%d λεπτά",
              h: "μία ώρα",
              hh: "%d ώρες",
              d: "μία μέρα",
              dd: "%d μέρες",
              M: "ένας μήνας",
              MM: "%d μήνες",
              y: "ένας χρόνος",
              yy: "%d χρόνια",
            },
            dayOfMonthOrdinalParse: /\d{1,2}η/,
            ordinal: "%dη",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4st is the first week of the year.
            },
          });

          return el;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-au.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (Australia) [en-au]
        //! author : Jared Morse : https://github.com/jarcoal

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enAu = moment.defineLocale("en-au", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enAu;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-ca.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (Canada) [en-ca]
        //! author : Jonathan Abourbih : https://github.com/jonbca

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enCa = moment.defineLocale("en-ca", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "YYYY-MM-DD",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY h:mm A",
              LLLL: "dddd, MMMM D, YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
          });

          return enCa;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-gb.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (United Kingdom) [en-gb]
        //! author : Chris Gedrim : https://github.com/chrisgedrim

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enGb = moment.defineLocale("en-gb", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enGb;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-ie.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (Ireland) [en-ie]
        //! author : Chris Cartlidge : https://github.com/chriscartlidge

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enIe = moment.defineLocale("en-ie", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enIe;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-il.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (Israel) [en-il]
        //! author : Chris Gedrim : https://github.com/chrisgedrim

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enIl = moment.defineLocale("en-il", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
          });

          return enIl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-in.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-in.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (India) [en-in]
        //! author : Jatin Agrawal : https://github.com/jatinag22

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enIn = moment.defineLocale("en-in", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enIn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-nz.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (New Zealand) [en-nz]
        //! author : Luke McGregor : https://github.com/lukemcgregor

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enNz = moment.defineLocale("en-nz", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enNz;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/en-sg.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-sg.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : English (Singapore) [en-sg]
        //! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var enSg = moment.defineLocale("en-sg", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return enSg;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/eo.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Esperanto [eo]
        //! author : Colin Dean : https://github.com/colindean
        //! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
        //! comment : miestasmia corrected the translation by colindean
        //! comment : Vivakvo corrected the translation by colindean and miestasmia

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var eo = moment.defineLocale("eo", {
            months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split(
              "_"
            ),
            monthsShort: "jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split(
              "_"
            ),
            weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split(
              "_"
            ),
            weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),
            weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "[la] D[-an de] MMMM, YYYY",
              LLL: "[la] D[-an de] MMMM, YYYY HH:mm",
              LLLL: "dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",
              llll: "ddd, [la] D[-an de] MMM, YYYY HH:mm",
            },
            meridiemParse: /[ap]\.t\.m/i,
            isPM: function(input) {
              return input.charAt(0).toLowerCase() === "p";
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? "p.t.m." : "P.T.M.";
              } else {
                return isLower ? "a.t.m." : "A.T.M.";
              }
            },
            calendar: {
              sameDay: "[Hodiaŭ je] LT",
              nextDay: "[Morgaŭ je] LT",
              nextWeek: "dddd[n je] LT",
              lastDay: "[Hieraŭ je] LT",
              lastWeek: "[pasintan] dddd[n je] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "post %s",
              past: "antaŭ %s",
              s: "kelkaj sekundoj",
              ss: "%d sekundoj",
              m: "unu minuto",
              mm: "%d minutoj",
              h: "unu horo",
              hh: "%d horoj",
              d: "unu tago", //ne 'diurno', ĉar estas uzita por proksimumo
              dd: "%d tagoj",
              M: "unu monato",
              MM: "%d monatoj",
              y: "unu jaro",
              yy: "%d jaroj",
            },
            dayOfMonthOrdinalParse: /\d{1,2}a/,
            ordinal: "%da",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return eo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/es-do.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Spanish (Dominican Republic) [es-do]

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split(
              "_"
            ),
            monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split(
              "_"
            ),
            monthsParse = [
              /^ene/i,
              /^feb/i,
              /^mar/i,
              /^abr/i,
              /^may/i,
              /^jun/i,
              /^jul/i,
              /^ago/i,
              /^sep/i,
              /^oct/i,
              /^nov/i,
              /^dic/i,
            ],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

          var esDo = moment.defineLocale("es-do", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortDot;
              } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
              } else {
                return monthsShortDot[m.month()];
              }
            },
            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
            monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split(
              "_"
            ),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY h:mm A",
              LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A",
            },
            calendar: {
              sameDay: function() {
                return "[hoy a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              nextDay: function() {
                return (
                  "[mañana a la" + (this.hours() !== 1 ? "s" : "") + "] LT"
                );
              },
              nextWeek: function() {
                return "dddd [a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastDay: function() {
                return "[ayer a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastWeek: function() {
                return (
                  "[el] dddd [pasado a la" +
                  (this.hours() !== 1 ? "s" : "") +
                  "] LT"
                );
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "en %s",
              past: "hace %s",
              s: "unos segundos",
              ss: "%d segundos",
              m: "un minuto",
              mm: "%d minutos",
              h: "una hora",
              hh: "%d horas",
              d: "un día",
              dd: "%d días",
              M: "un mes",
              MM: "%d meses",
              y: "un año",
              yy: "%d años",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return esDo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/es-us.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Spanish (United States) [es-us]
        //! author : bustta : https://github.com/bustta
        //! author : chrisrodz : https://github.com/chrisrodz

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split(
              "_"
            ),
            monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split(
              "_"
            ),
            monthsParse = [
              /^ene/i,
              /^feb/i,
              /^mar/i,
              /^abr/i,
              /^may/i,
              /^jun/i,
              /^jul/i,
              /^ago/i,
              /^sep/i,
              /^oct/i,
              /^nov/i,
              /^dic/i,
            ],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

          var esUs = moment.defineLocale("es-us", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortDot;
              } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
              } else {
                return monthsShortDot[m.month()];
              }
            },
            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
            monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split(
              "_"
            ),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "MM/DD/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY h:mm A",
              LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A",
            },
            calendar: {
              sameDay: function() {
                return "[hoy a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              nextDay: function() {
                return (
                  "[mañana a la" + (this.hours() !== 1 ? "s" : "") + "] LT"
                );
              },
              nextWeek: function() {
                return "dddd [a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastDay: function() {
                return "[ayer a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastWeek: function() {
                return (
                  "[el] dddd [pasado a la" +
                  (this.hours() !== 1 ? "s" : "") +
                  "] LT"
                );
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "en %s",
              past: "hace %s",
              s: "unos segundos",
              ss: "%d segundos",
              m: "un minuto",
              mm: "%d minutos",
              h: "una hora",
              hh: "%d horas",
              d: "un día",
              dd: "%d días",
              M: "un mes",
              MM: "%d meses",
              y: "un año",
              yy: "%d años",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return esUs;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/es.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Spanish [es]
        //! author : Julio Napurí : https://github.com/julionc

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split(
              "_"
            ),
            monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split(
              "_"
            ),
            monthsParse = [
              /^ene/i,
              /^feb/i,
              /^mar/i,
              /^abr/i,
              /^may/i,
              /^jun/i,
              /^jul/i,
              /^ago/i,
              /^sep/i,
              /^oct/i,
              /^nov/i,
              /^dic/i,
            ],
            monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

          var es = moment.defineLocale("es", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortDot;
              } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
              } else {
                return monthsShortDot[m.month()];
              }
            },
            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
            monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split(
              "_"
            ),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY H:mm",
              LLLL: "dddd, D [de] MMMM [de] YYYY H:mm",
            },
            calendar: {
              sameDay: function() {
                return "[hoy a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              nextDay: function() {
                return (
                  "[mañana a la" + (this.hours() !== 1 ? "s" : "") + "] LT"
                );
              },
              nextWeek: function() {
                return "dddd [a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastDay: function() {
                return "[ayer a la" + (this.hours() !== 1 ? "s" : "") + "] LT";
              },
              lastWeek: function() {
                return (
                  "[el] dddd [pasado a la" +
                  (this.hours() !== 1 ? "s" : "") +
                  "] LT"
                );
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "en %s",
              past: "hace %s",
              s: "unos segundos",
              ss: "%d segundos",
              m: "un minuto",
              mm: "%d minutos",
              h: "una hora",
              hh: "%d horas",
              d: "un día",
              dd: "%d días",
              M: "un mes",
              MM: "%d meses",
              y: "un año",
              yy: "%d años",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
            invalidDate: "Fecha invalida",
          });

          return es;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/et.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Estonian [et]
        //! author : Henry Kehlmann : https://github.com/madhenry
        //! improvements : Illimar Tambek : https://github.com/ragulka

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              s: ["mõne sekundi", "mõni sekund", "paar sekundit"],
              ss: [number + "sekundi", number + "sekundit"],
              m: ["ühe minuti", "üks minut"],
              mm: [number + " minuti", number + " minutit"],
              h: ["ühe tunni", "tund aega", "üks tund"],
              hh: [number + " tunni", number + " tundi"],
              d: ["ühe päeva", "üks päev"],
              M: ["kuu aja", "kuu aega", "üks kuu"],
              MM: [number + " kuu", number + " kuud"],
              y: ["ühe aasta", "aasta", "üks aasta"],
              yy: [number + " aasta", number + " aastat"],
            };
            if (withoutSuffix) {
              return format[key][2] ? format[key][2] : format[key][1];
            }
            return isFuture ? format[key][0] : format[key][1];
          }

          var et = moment.defineLocale("et", {
            months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split(
              "_"
            ),
            monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split(
              "_"
            ),
            weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split(
              "_"
            ),
            weekdaysShort: "P_E_T_K_N_R_L".split("_"),
            weekdaysMin: "P_E_T_K_N_R_L".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[Täna,] LT",
              nextDay: "[Homme,] LT",
              nextWeek: "[Järgmine] dddd LT",
              lastDay: "[Eile,] LT",
              lastWeek: "[Eelmine] dddd LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s pärast",
              past: "%s tagasi",
              s: processRelativeTime,
              ss: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: "%d päeva",
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return et;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/eu.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Basque [eu]
        //! author : Eneko Illarramendi : https://github.com/eillarra

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var eu = moment.defineLocale("eu", {
            months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split(
              "_"
            ),
            monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split(
              "_"
            ),
            weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
            weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "YYYY[ko] MMMM[ren] D[a]",
              LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
              LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
              l: "YYYY-M-D",
              ll: "YYYY[ko] MMM D[a]",
              lll: "YYYY[ko] MMM D[a] HH:mm",
              llll: "ddd, YYYY[ko] MMM D[a] HH:mm",
            },
            calendar: {
              sameDay: "[gaur] LT[etan]",
              nextDay: "[bihar] LT[etan]",
              nextWeek: "dddd LT[etan]",
              lastDay: "[atzo] LT[etan]",
              lastWeek: "[aurreko] dddd LT[etan]",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s barru",
              past: "duela %s",
              s: "segundo batzuk",
              ss: "%d segundo",
              m: "minutu bat",
              mm: "%d minutu",
              h: "ordu bat",
              hh: "%d ordu",
              d: "egun bat",
              dd: "%d egun",
              M: "hilabete bat",
              MM: "%d hilabete",
              y: "urte bat",
              yy: "%d urte",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return eu;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fa.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Persian [fa]
        //! author : Ebrahim Byagowi : https://github.com/ebraminio

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "۱",
              "2": "۲",
              "3": "۳",
              "4": "۴",
              "5": "۵",
              "6": "۶",
              "7": "۷",
              "8": "۸",
              "9": "۹",
              "0": "۰",
            },
            numberMap = {
              "۱": "1",
              "۲": "2",
              "۳": "3",
              "۴": "4",
              "۵": "5",
              "۶": "6",
              "۷": "7",
              "۸": "8",
              "۹": "9",
              "۰": "0",
            };

          var fa = moment.defineLocale("fa", {
            months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split(
              "_"
            ),
            monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split(
              "_"
            ),
            weekdays: "یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه".split(
              "_"
            ),
            weekdaysShort: "یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه".split(
              "_"
            ),
            weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            meridiemParse: /قبل از ظهر|بعد از ظهر/,
            isPM: function(input) {
              return /بعد از ظهر/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "قبل از ظهر";
              } else {
                return "بعد از ظهر";
              }
            },
            calendar: {
              sameDay: "[امروز ساعت] LT",
              nextDay: "[فردا ساعت] LT",
              nextWeek: "dddd [ساعت] LT",
              lastDay: "[دیروز ساعت] LT",
              lastWeek: "dddd [پیش] [ساعت] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "در %s",
              past: "%s پیش",
              s: "چند ثانیه",
              ss: "%d ثانیه",
              m: "یک دقیقه",
              mm: "%d دقیقه",
              h: "یک ساعت",
              hh: "%d ساعت",
              d: "یک روز",
              dd: "%d روز",
              M: "یک ماه",
              MM: "%d ماه",
              y: "یک سال",
              yy: "%d سال",
            },
            preparse: function(string) {
              return string
                .replace(/[۰-۹]/g, function(match) {
                  return numberMap[match];
                })
                .replace(/،/g, ",");
            },
            postformat: function(string) {
              return string
                .replace(/\d/g, function(match) {
                  return symbolMap[match];
                })
                .replace(/,/g, "،");
            },
            dayOfMonthOrdinalParse: /\d{1,2}م/,
            ordinal: "%dم",
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return fa;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fi.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Finnish [fi]
        //! author : Tarmo Aidantausta : https://github.com/bleadof

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var numbersPast = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(
              " "
            ),
            numbersFuture = [
              "nolla",
              "yhden",
              "kahden",
              "kolmen",
              "neljän",
              "viiden",
              "kuuden",
              numbersPast[7],
              numbersPast[8],
              numbersPast[9],
            ];
          function translate(number, withoutSuffix, key, isFuture) {
            var result = "";
            switch (key) {
              case "s":
                return isFuture ? "muutaman sekunnin" : "muutama sekunti";
              case "ss":
                return isFuture ? "sekunnin" : "sekuntia";
              case "m":
                return isFuture ? "minuutin" : "minuutti";
              case "mm":
                result = isFuture ? "minuutin" : "minuuttia";
                break;
              case "h":
                return isFuture ? "tunnin" : "tunti";
              case "hh":
                result = isFuture ? "tunnin" : "tuntia";
                break;
              case "d":
                return isFuture ? "päivän" : "päivä";
              case "dd":
                result = isFuture ? "päivän" : "päivää";
                break;
              case "M":
                return isFuture ? "kuukauden" : "kuukausi";
              case "MM":
                result = isFuture ? "kuukauden" : "kuukautta";
                break;
              case "y":
                return isFuture ? "vuoden" : "vuosi";
              case "yy":
                result = isFuture ? "vuoden" : "vuotta";
                break;
            }
            result = verbalNumber(number, isFuture) + " " + result;
            return result;
          }
          function verbalNumber(number, isFuture) {
            return number < 10
              ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
              : number;
          }

          var fi = moment.defineLocale("fi", {
            months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split(
              "_"
            ),
            monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split(
              "_"
            ),
            weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split(
              "_"
            ),
            weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
            weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD.MM.YYYY",
              LL: "Do MMMM[ta] YYYY",
              LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
              LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
              l: "D.M.YYYY",
              ll: "Do MMM YYYY",
              lll: "Do MMM YYYY, [klo] HH.mm",
              llll: "ddd, Do MMM YYYY, [klo] HH.mm",
            },
            calendar: {
              sameDay: "[tänään] [klo] LT",
              nextDay: "[huomenna] [klo] LT",
              nextWeek: "dddd [klo] LT",
              lastDay: "[eilen] [klo] LT",
              lastWeek: "[viime] dddd[na] [klo] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s päästä",
              past: "%s sitten",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return fi;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fil.js":
      /*!*******************************************!*\
  !*** ./node_modules/moment/locale/fil.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Filipino [fil]
        //! author : Dan Hagman : https://github.com/hagmandan
        //! author : Matthew Co : https://github.com/matthewdeeco

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var fil = moment.defineLocale("fil", {
            months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split(
              "_"
            ),
            monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split(
              "_"
            ),
            weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split(
              "_"
            ),
            weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
            weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "MM/D/YYYY",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY HH:mm",
              LLLL: "dddd, MMMM DD, YYYY HH:mm",
            },
            calendar: {
              sameDay: "LT [ngayong araw]",
              nextDay: "[Bukas ng] LT",
              nextWeek: "LT [sa susunod na] dddd",
              lastDay: "LT [kahapon]",
              lastWeek: "LT [noong nakaraang] dddd",
              sameElse: "L",
            },
            relativeTime: {
              future: "sa loob ng %s",
              past: "%s ang nakalipas",
              s: "ilang segundo",
              ss: "%d segundo",
              m: "isang minuto",
              mm: "%d minuto",
              h: "isang oras",
              hh: "%d oras",
              d: "isang araw",
              dd: "%d araw",
              M: "isang buwan",
              MM: "%d buwan",
              y: "isang taon",
              yy: "%d taon",
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function(number) {
              return number;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return fil;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fo.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Faroese [fo]
        //! author : Ragnar Johannesen : https://github.com/ragnar123
        //! author : Kristian Sakarisson : https://github.com/sakarisson

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var fo = moment.defineLocale("fo", {
            months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split(
              "_"
            ),
            monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split(
              "_"
            ),
            weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split(
              "_"
            ),
            weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
            weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D. MMMM, YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Í dag kl.] LT",
              nextDay: "[Í morgin kl.] LT",
              nextWeek: "dddd [kl.] LT",
              lastDay: "[Í gjár kl.] LT",
              lastWeek: "[síðstu] dddd [kl] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "um %s",
              past: "%s síðani",
              s: "fá sekund",
              ss: "%d sekundir",
              m: "ein minuttur",
              mm: "%d minuttir",
              h: "ein tími",
              hh: "%d tímar",
              d: "ein dagur",
              dd: "%d dagar",
              M: "ein mánaður",
              MM: "%d mánaðir",
              y: "eitt ár",
              yy: "%d ár",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return fo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fr-ca.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : French (Canada) [fr-ca]
        //! author : Jonathan Abourbih : https://github.com/jonbca

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var frCa = moment.defineLocale("fr-ca", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split(
              "_"
            ),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split(
              "_"
            ),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Aujourd’hui à] LT",
              nextDay: "[Demain à] LT",
              nextWeek: "dddd [à] LT",
              lastDay: "[Hier à] LT",
              lastWeek: "dddd [dernier à] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dans %s",
              past: "il y a %s",
              s: "quelques secondes",
              ss: "%d secondes",
              m: "une minute",
              mm: "%d minutes",
              h: "une heure",
              hh: "%d heures",
              d: "un jour",
              dd: "%d jours",
              M: "un mois",
              MM: "%d mois",
              y: "un an",
              yy: "%d ans",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function(number, period) {
              switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case "M":
                case "Q":
                case "D":
                case "DDD":
                case "d":
                  return number + (number === 1 ? "er" : "e");

                // Words with feminine grammatical gender: semaine
                case "w":
                case "W":
                  return number + (number === 1 ? "re" : "e");
              }
            },
          });

          return frCa;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fr-ch.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : French (Switzerland) [fr-ch]
        //! author : Gaspard Bucher : https://github.com/gaspard

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var frCh = moment.defineLocale("fr-ch", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split(
              "_"
            ),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split(
              "_"
            ),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Aujourd’hui à] LT",
              nextDay: "[Demain à] LT",
              nextWeek: "dddd [à] LT",
              lastDay: "[Hier à] LT",
              lastWeek: "dddd [dernier à] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dans %s",
              past: "il y a %s",
              s: "quelques secondes",
              ss: "%d secondes",
              m: "une minute",
              mm: "%d minutes",
              h: "une heure",
              hh: "%d heures",
              d: "un jour",
              dd: "%d jours",
              M: "un mois",
              MM: "%d mois",
              y: "un an",
              yy: "%d ans",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function(number, period) {
              switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case "M":
                case "Q":
                case "D":
                case "DDD":
                case "d":
                  return number + (number === 1 ? "er" : "e");

                // Words with feminine grammatical gender: semaine
                case "w":
                case "W":
                  return number + (number === 1 ? "re" : "e");
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return frCh;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fr.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : French [fr]
        //! author : John Fischer : https://github.com/jfroffice

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var fr = moment.defineLocale("fr", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split(
              "_"
            ),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split(
              "_"
            ),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Aujourd’hui à] LT",
              nextDay: "[Demain à] LT",
              nextWeek: "dddd [à] LT",
              lastDay: "[Hier à] LT",
              lastWeek: "dddd [dernier à] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dans %s",
              past: "il y a %s",
              s: "quelques secondes",
              ss: "%d secondes",
              m: "une minute",
              mm: "%d minutes",
              h: "une heure",
              hh: "%d heures",
              d: "un jour",
              dd: "%d jours",
              M: "un mois",
              MM: "%d mois",
              y: "un an",
              yy: "%d ans",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
            ordinal: function(number, period) {
              switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case "D":
                  return number + (number === 1 ? "er" : "");

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case "M":
                case "Q":
                case "DDD":
                case "d":
                  return number + (number === 1 ? "er" : "e");

                // Words with feminine grammatical gender: semaine
                case "w":
                case "W":
                  return number + (number === 1 ? "re" : "e");
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return fr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/fy.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Frisian [fy]
        //! author : Robin van der Vliet : https://github.com/robin0van0der0v

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortWithDots = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split(
              "_"
            ),
            monthsShortWithoutDots = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split(
              "_"
            );

          var fy = moment.defineLocale("fy", {
            months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },
            monthsParseExact: true,
            weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split(
              "_"
            ),
            weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
            weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD-MM-YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[hjoed om] LT",
              nextDay: "[moarn om] LT",
              nextWeek: "dddd [om] LT",
              lastDay: "[juster om] LT",
              lastWeek: "[ôfrûne] dddd [om] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "oer %s",
              past: "%s lyn",
              s: "in pear sekonden",
              ss: "%d sekonden",
              m: "ien minút",
              mm: "%d minuten",
              h: "ien oere",
              hh: "%d oeren",
              d: "ien dei",
              dd: "%d dagen",
              M: "ien moanne",
              MM: "%d moannen",
              y: "ien jier",
              yy: "%d jierren",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(number) {
              return (
                number +
                (number === 1 || number === 8 || number >= 20 ? "ste" : "de")
              );
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return fy;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ga.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ga.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Irish or Irish Gaelic [ga]
        //! author : André Silva : https://github.com/askpt

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = [
              "Eanáir",
              "Feabhra",
              "Márta",
              "Aibreán",
              "Bealtaine",
              "Meitheamh",
              "Iúil",
              "Lúnasa",
              "Meán Fómhair",
              "Deireadh Fómhair",
              "Samhain",
              "Nollaig",
            ],
            monthsShort = [
              "Ean",
              "Feabh",
              "Márt",
              "Aib",
              "Beal",
              "Meith",
              "Iúil",
              "Lún",
              "M.F.",
              "D.F.",
              "Samh",
              "Noll",
            ],
            weekdays = [
              "Dé Domhnaigh",
              "Dé Luain",
              "Dé Máirt",
              "Dé Céadaoin",
              "Déardaoin",
              "Dé hAoine",
              "Dé Sathairn",
            ],
            weekdaysShort = [
              "Domh",
              "Luan",
              "Máirt",
              "Céad",
              "Déar",
              "Aoine",
              "Sath",
            ],
            weekdaysMin = ["Do", "Lu", "Má", "Cé", "Dé", "A", "Sa"];

          var ga = moment.defineLocale("ga", {
            months: months,
            monthsShort: monthsShort,
            monthsParseExact: true,
            weekdays: weekdays,
            weekdaysShort: weekdaysShort,
            weekdaysMin: weekdaysMin,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Inniu ag] LT",
              nextDay: "[Amárach ag] LT",
              nextWeek: "dddd [ag] LT",
              lastDay: "[Inné ag] LT",
              lastWeek: "dddd [seo caite] [ag] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "i %s",
              past: "%s ó shin",
              s: "cúpla soicind",
              ss: "%d soicind",
              m: "nóiméad",
              mm: "%d nóiméad",
              h: "uair an chloig",
              hh: "%d uair an chloig",
              d: "lá",
              dd: "%d lá",
              M: "mí",
              MM: "%d míonna",
              y: "bliain",
              yy: "%d bliain",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
            ordinal: function(number) {
              var output = number === 1 ? "d" : number % 10 === 2 ? "na" : "mh";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return ga;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/gd.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Scottish Gaelic [gd]
        //! author : Jon Ashdown : https://github.com/jonashdown

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = [
              "Am Faoilleach",
              "An Gearran",
              "Am Màrt",
              "An Giblean",
              "An Cèitean",
              "An t-Ògmhios",
              "An t-Iuchar",
              "An Lùnastal",
              "An t-Sultain",
              "An Dàmhair",
              "An t-Samhain",
              "An Dùbhlachd",
            ],
            monthsShort = [
              "Faoi",
              "Gear",
              "Màrt",
              "Gibl",
              "Cèit",
              "Ògmh",
              "Iuch",
              "Lùn",
              "Sult",
              "Dàmh",
              "Samh",
              "Dùbh",
            ],
            weekdays = [
              "Didòmhnaich",
              "Diluain",
              "Dimàirt",
              "Diciadain",
              "Diardaoin",
              "Dihaoine",
              "Disathairne",
            ],
            weekdaysShort = ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
            weekdaysMin = ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"];

          var gd = moment.defineLocale("gd", {
            months: months,
            monthsShort: monthsShort,
            monthsParseExact: true,
            weekdays: weekdays,
            weekdaysShort: weekdaysShort,
            weekdaysMin: weekdaysMin,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[An-diugh aig] LT",
              nextDay: "[A-màireach aig] LT",
              nextWeek: "dddd [aig] LT",
              lastDay: "[An-dè aig] LT",
              lastWeek: "dddd [seo chaidh] [aig] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "ann an %s",
              past: "bho chionn %s",
              s: "beagan diogan",
              ss: "%d diogan",
              m: "mionaid",
              mm: "%d mionaidean",
              h: "uair",
              hh: "%d uairean",
              d: "latha",
              dd: "%d latha",
              M: "mìos",
              MM: "%d mìosan",
              y: "bliadhna",
              yy: "%d bliadhna",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
            ordinal: function(number) {
              var output = number === 1 ? "d" : number % 10 === 2 ? "na" : "mh";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return gd;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/gl.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Galician [gl]
        //! author : Juan G. Hurtado : https://github.com/juanghurtado

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var gl = moment.defineLocale("gl", {
            months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split(
              "_"
            ),
            monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split(
              "_"
            ),
            weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY H:mm",
              LLLL: "dddd, D [de] MMMM [de] YYYY H:mm",
            },
            calendar: {
              sameDay: function() {
                return "[hoxe " + (this.hours() !== 1 ? "ás" : "á") + "] LT";
              },
              nextDay: function() {
                return "[mañá " + (this.hours() !== 1 ? "ás" : "á") + "] LT";
              },
              nextWeek: function() {
                return "dddd [" + (this.hours() !== 1 ? "ás" : "a") + "] LT";
              },
              lastDay: function() {
                return "[onte " + (this.hours() !== 1 ? "á" : "a") + "] LT";
              },
              lastWeek: function() {
                return (
                  "[o] dddd [pasado " +
                  (this.hours() !== 1 ? "ás" : "a") +
                  "] LT"
                );
              },
              sameElse: "L",
            },
            relativeTime: {
              future: function(str) {
                if (str.indexOf("un") === 0) {
                  return "n" + str;
                }
                return "en " + str;
              },
              past: "hai %s",
              s: "uns segundos",
              ss: "%d segundos",
              m: "un minuto",
              mm: "%d minutos",
              h: "unha hora",
              hh: "%d horas",
              d: "un día",
              dd: "%d días",
              M: "un mes",
              MM: "%d meses",
              y: "un ano",
              yy: "%d anos",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return gl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/gom-deva.js":
      /*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-deva.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Konkani Devanagari script [gom-deva]
        //! author : The Discoverer : https://github.com/WikiDiscoverer

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              s: ["थोडया सॅकंडांनी", "थोडे सॅकंड"],
              ss: [number + " सॅकंडांनी", number + " सॅकंड"],
              m: ["एका मिणटान", "एक मिनूट"],
              mm: [number + " मिणटांनी", number + " मिणटां"],
              h: ["एका वरान", "एक वर"],
              hh: [number + " वरांनी", number + " वरां"],
              d: ["एका दिसान", "एक दीस"],
              dd: [number + " दिसांनी", number + " दीस"],
              M: ["एका म्हयन्यान", "एक म्हयनो"],
              MM: [number + " म्हयन्यानी", number + " म्हयने"],
              y: ["एका वर्सान", "एक वर्स"],
              yy: [number + " वर्सांनी", number + " वर्सां"],
            };
            return isFuture ? format[key][0] : format[key][1];
          }

          var gomDeva = moment.defineLocale("gom-deva", {
            months: {
              standalone: "जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split(
                "_"
              ),
              format: "जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split(
                "_"
              ),
              isFormat: /MMMM(\s)+D[oD]?/,
            },
            monthsShort: "जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split(
              "_"
            ),
            weekdaysShort: "आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split(
              "_"
            ),
            weekdaysMin: "आ_सो_मं_बु_ब्रे_सु_शे".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "A h:mm [वाजतां]",
              LTS: "A h:mm:ss [वाजतां]",
              L: "DD-MM-YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY A h:mm [वाजतां]",
              LLLL: "dddd, MMMM Do, YYYY, A h:mm [वाजतां]",
              llll: "ddd, D MMM YYYY, A h:mm [वाजतां]",
            },
            calendar: {
              sameDay: "[आयज] LT",
              nextDay: "[फाल्यां] LT",
              nextWeek: "[फुडलो] dddd[,] LT",
              lastDay: "[काल] LT",
              lastWeek: "[फाटलो] dddd[,] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s",
              past: "%s आदीं",
              s: processRelativeTime,
              ss: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
            ordinal: function(number, period) {
              switch (period) {
                // the ordinal 'वेर' only applies to day of the month
                case "D":
                  return number + "वेर";
                default:
                case "M":
                case "Q":
                case "DDD":
                case "d":
                case "w":
                case "W":
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
            meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "राती") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "सकाळीं") {
                return hour;
              } else if (meridiem === "दनपारां") {
                return hour > 12 ? hour : hour + 12;
              } else if (meridiem === "सांजे") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "राती";
              } else if (hour < 12) {
                return "सकाळीं";
              } else if (hour < 16) {
                return "दनपारां";
              } else if (hour < 20) {
                return "सांजे";
              } else {
                return "राती";
              }
            },
          });

          return gomDeva;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/gom-latn.js":
      /*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Konkani Latin script [gom-latn]
        //! author : The Discoverer : https://github.com/WikiDiscoverer

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              s: ["thoddea sekondamni", "thodde sekond"],
              ss: [number + " sekondamni", number + " sekond"],
              m: ["eka mintan", "ek minut"],
              mm: [number + " mintamni", number + " mintam"],
              h: ["eka voran", "ek vor"],
              hh: [number + " voramni", number + " voram"],
              d: ["eka disan", "ek dis"],
              dd: [number + " disamni", number + " dis"],
              M: ["eka mhoinean", "ek mhoino"],
              MM: [number + " mhoineamni", number + " mhoine"],
              y: ["eka vorsan", "ek voros"],
              yy: [number + " vorsamni", number + " vorsam"],
            };
            return isFuture ? format[key][0] : format[key][1];
          }

          var gomLatn = moment.defineLocale("gom-latn", {
            months: {
              standalone: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split(
                "_"
              ),
              format: "Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split(
                "_"
              ),
              isFormat: /MMMM(\s)+D[oD]?/,
            },
            monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split(
              "_"
            ),
            weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),
            weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "A h:mm [vazta]",
              LTS: "A h:mm:ss [vazta]",
              L: "DD-MM-YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY A h:mm [vazta]",
              LLLL: "dddd, MMMM Do, YYYY, A h:mm [vazta]",
              llll: "ddd, D MMM YYYY, A h:mm [vazta]",
            },
            calendar: {
              sameDay: "[Aiz] LT",
              nextDay: "[Faleam] LT",
              nextWeek: "[Fuddlo] dddd[,] LT",
              lastDay: "[Kal] LT",
              lastWeek: "[Fattlo] dddd[,] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s",
              past: "%s adim",
              s: processRelativeTime,
              ss: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er)/,
            ordinal: function(number, period) {
              switch (period) {
                // the ordinal 'er' only applies to day of the month
                case "D":
                  return number + "er";
                default:
                case "M":
                case "Q":
                case "DDD":
                case "d":
                case "w":
                case "W":
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
            meridiemParse: /rati|sokallim|donparam|sanje/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "rati") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "sokallim") {
                return hour;
              } else if (meridiem === "donparam") {
                return hour > 12 ? hour : hour + 12;
              } else if (meridiem === "sanje") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "rati";
              } else if (hour < 12) {
                return "sokallim";
              } else if (hour < 16) {
                return "donparam";
              } else if (hour < 20) {
                return "sanje";
              } else {
                return "rati";
              }
            },
          });

          return gomLatn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/gu.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Gujarati [gu]
        //! author : Kaushik Thanki : https://github.com/Kaushik1987

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "૧",
              "2": "૨",
              "3": "૩",
              "4": "૪",
              "5": "૫",
              "6": "૬",
              "7": "૭",
              "8": "૮",
              "9": "૯",
              "0": "૦",
            },
            numberMap = {
              "૧": "1",
              "૨": "2",
              "૩": "3",
              "૪": "4",
              "૫": "5",
              "૬": "6",
              "૭": "7",
              "૮": "8",
              "૯": "9",
              "૦": "0",
            };

          var gu = moment.defineLocale("gu", {
            months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split(
              "_"
            ),
            monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split(
              "_"
            ),
            weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),
            weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),
            longDateFormat: {
              LT: "A h:mm વાગ્યે",
              LTS: "A h:mm:ss વાગ્યે",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm વાગ્યે",
              LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે",
            },
            calendar: {
              sameDay: "[આજ] LT",
              nextDay: "[કાલે] LT",
              nextWeek: "dddd, LT",
              lastDay: "[ગઇકાલે] LT",
              lastWeek: "[પાછલા] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s મા",
              past: "%s પેહલા",
              s: "અમુક પળો",
              ss: "%d સેકંડ",
              m: "એક મિનિટ",
              mm: "%d મિનિટ",
              h: "એક કલાક",
              hh: "%d કલાક",
              d: "એક દિવસ",
              dd: "%d દિવસ",
              M: "એક મહિનો",
              MM: "%d મહિનો",
              y: "એક વર્ષ",
              yy: "%d વર્ષ",
            },
            preparse: function(string) {
              return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
            // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
            meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "રાત") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "સવાર") {
                return hour;
              } else if (meridiem === "બપોર") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "સાંજ") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "રાત";
              } else if (hour < 10) {
                return "સવાર";
              } else if (hour < 17) {
                return "બપોર";
              } else if (hour < 20) {
                return "સાંજ";
              } else {
                return "રાત";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return gu;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/he.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Hebrew [he]
        //! author : Tomer Cohen : https://github.com/tomer
        //! author : Moshe Simantov : https://github.com/DevelopmentIL
        //! author : Tal Ater : https://github.com/TalAter

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var he = moment.defineLocale("he", {
            months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split(
              "_"
            ),
            monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split(
              "_"
            ),
            weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
            weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
            weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [ב]MMMM YYYY",
              LLL: "D [ב]MMMM YYYY HH:mm",
              LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
              l: "D/M/YYYY",
              ll: "D MMM YYYY",
              lll: "D MMM YYYY HH:mm",
              llll: "ddd, D MMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[היום ב־]LT",
              nextDay: "[מחר ב־]LT",
              nextWeek: "dddd [בשעה] LT",
              lastDay: "[אתמול ב־]LT",
              lastWeek: "[ביום] dddd [האחרון בשעה] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "בעוד %s",
              past: "לפני %s",
              s: "מספר שניות",
              ss: "%d שניות",
              m: "דקה",
              mm: "%d דקות",
              h: "שעה",
              hh: function(number) {
                if (number === 2) {
                  return "שעתיים";
                }
                return number + " שעות";
              },
              d: "יום",
              dd: function(number) {
                if (number === 2) {
                  return "יומיים";
                }
                return number + " ימים";
              },
              M: "חודש",
              MM: function(number) {
                if (number === 2) {
                  return "חודשיים";
                }
                return number + " חודשים";
              },
              y: "שנה",
              yy: function(number) {
                if (number === 2) {
                  return "שנתיים";
                } else if (number % 10 === 0 && number !== 10) {
                  return number + " שנה";
                }
                return number + " שנים";
              },
            },
            meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
            isPM: function(input) {
              return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 5) {
                return "לפנות בוקר";
              } else if (hour < 10) {
                return "בבוקר";
              } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : "לפני הצהריים";
              } else if (hour < 18) {
                return isLower ? 'אחה"צ' : "אחרי הצהריים";
              } else {
                return "בערב";
              }
            },
          });

          return he;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/hi.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Hindi [hi]
        //! author : Mayank Singhal : https://github.com/mayanksinghal

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "१",
              "2": "२",
              "3": "३",
              "4": "४",
              "5": "५",
              "6": "६",
              "7": "७",
              "8": "८",
              "9": "९",
              "0": "०",
            },
            numberMap = {
              "१": "1",
              "२": "2",
              "३": "3",
              "४": "4",
              "५": "5",
              "६": "6",
              "७": "7",
              "८": "8",
              "९": "9",
              "०": "0",
            };

          var hi = moment.defineLocale("hi", {
            months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split(
              "_"
            ),
            monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split(
              "_"
            ),
            weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
            weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
            longDateFormat: {
              LT: "A h:mm बजे",
              LTS: "A h:mm:ss बजे",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm बजे",
              LLLL: "dddd, D MMMM YYYY, A h:mm बजे",
            },
            calendar: {
              sameDay: "[आज] LT",
              nextDay: "[कल] LT",
              nextWeek: "dddd, LT",
              lastDay: "[कल] LT",
              lastWeek: "[पिछले] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s में",
              past: "%s पहले",
              s: "कुछ ही क्षण",
              ss: "%d सेकंड",
              m: "एक मिनट",
              mm: "%d मिनट",
              h: "एक घंटा",
              hh: "%d घंटे",
              d: "एक दिन",
              dd: "%d दिन",
              M: "एक महीने",
              MM: "%d महीने",
              y: "एक वर्ष",
              yy: "%d वर्ष",
            },
            preparse: function(string) {
              return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            // Hindi notation for meridiems are quite fuzzy in practice. While there exists
            // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
            meridiemParse: /रात|सुबह|दोपहर|शाम/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "रात") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "सुबह") {
                return hour;
              } else if (meridiem === "दोपहर") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "शाम") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "रात";
              } else if (hour < 10) {
                return "सुबह";
              } else if (hour < 17) {
                return "दोपहर";
              } else if (hour < 20) {
                return "शाम";
              } else {
                return "रात";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return hi;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/hr.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Croatian [hr]
        //! author : Bojan Marković : https://github.com/bmarkovic

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function translate(number, withoutSuffix, key) {
            var result = number + " ";
            switch (key) {
              case "ss":
                if (number === 1) {
                  result += "sekunda";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "sekunde";
                } else {
                  result += "sekundi";
                }
                return result;
              case "m":
                return withoutSuffix ? "jedna minuta" : "jedne minute";
              case "mm":
                if (number === 1) {
                  result += "minuta";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "minute";
                } else {
                  result += "minuta";
                }
                return result;
              case "h":
                return withoutSuffix ? "jedan sat" : "jednog sata";
              case "hh":
                if (number === 1) {
                  result += "sat";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "sata";
                } else {
                  result += "sati";
                }
                return result;
              case "dd":
                if (number === 1) {
                  result += "dan";
                } else {
                  result += "dana";
                }
                return result;
              case "MM":
                if (number === 1) {
                  result += "mjesec";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "mjeseca";
                } else {
                  result += "mjeseci";
                }
                return result;
              case "yy":
                if (number === 1) {
                  result += "godina";
                } else if (number === 2 || number === 3 || number === 4) {
                  result += "godine";
                } else {
                  result += "godina";
                }
                return result;
            }
          }

          var hr = moment.defineLocale("hr", {
            months: {
              format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split(
                "_"
              ),
              standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split(
                "_"
              ),
            },
            monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split(
              "_"
            ),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "Do MMMM YYYY",
              LLL: "Do MMMM YYYY H:mm",
              LLLL: "dddd, Do MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[danas u] LT",
              nextDay: "[sutra u] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[u] [nedjelju] [u] LT";
                  case 3:
                    return "[u] [srijedu] [u] LT";
                  case 6:
                    return "[u] [subotu] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[u] dddd [u] LT";
                }
              },
              lastDay: "[jučer u] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[prošlu] [nedjelju] [u] LT";
                  case 3:
                    return "[prošlu] [srijedu] [u] LT";
                  case 6:
                    return "[prošle] [subote] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[prošli] dddd [u] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "prije %s",
              s: "par sekundi",
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: "dan",
              dd: translate,
              M: "mjesec",
              MM: translate,
              y: "godinu",
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return hr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/hu.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Hungarian [hu]
        //! author : Adam Brunner : https://github.com/adambrunner

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var weekEndings = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(
            " "
          );
          function translate(number, withoutSuffix, key, isFuture) {
            var num = number;
            switch (key) {
              case "s":
                return isFuture || withoutSuffix
                  ? "néhány másodperc"
                  : "néhány másodperce";
              case "ss":
                return num + (isFuture || withoutSuffix)
                  ? " másodperc"
                  : " másodperce";
              case "m":
                return "egy" + (isFuture || withoutSuffix ? " perc" : " perce");
              case "mm":
                return num + (isFuture || withoutSuffix ? " perc" : " perce");
              case "h":
                return "egy" + (isFuture || withoutSuffix ? " óra" : " órája");
              case "hh":
                return num + (isFuture || withoutSuffix ? " óra" : " órája");
              case "d":
                return "egy" + (isFuture || withoutSuffix ? " nap" : " napja");
              case "dd":
                return num + (isFuture || withoutSuffix ? " nap" : " napja");
              case "M":
                return (
                  "egy" + (isFuture || withoutSuffix ? " hónap" : " hónapja")
                );
              case "MM":
                return (
                  num + (isFuture || withoutSuffix ? " hónap" : " hónapja")
                );
              case "y":
                return "egy" + (isFuture || withoutSuffix ? " év" : " éve");
              case "yy":
                return num + (isFuture || withoutSuffix ? " év" : " éve");
            }
            return "";
          }
          function week(isFuture) {
            return (
              (isFuture ? "" : "[múlt] ") +
              "[" +
              weekEndings[this.day()] +
              "] LT[-kor]"
            );
          }

          var hu = moment.defineLocale("hu", {
            months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split(
              "_"
            ),
            monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split(
              "_"
            ),
            weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split(
              "_"
            ),
            weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
            weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "YYYY.MM.DD.",
              LL: "YYYY. MMMM D.",
              LLL: "YYYY. MMMM D. H:mm",
              LLLL: "YYYY. MMMM D., dddd H:mm",
            },
            meridiemParse: /de|du/i,
            isPM: function(input) {
              return input.charAt(1).toLowerCase() === "u";
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 12) {
                return isLower === true ? "de" : "DE";
              } else {
                return isLower === true ? "du" : "DU";
              }
            },
            calendar: {
              sameDay: "[ma] LT[-kor]",
              nextDay: "[holnap] LT[-kor]",
              nextWeek: function() {
                return week.call(this, true);
              },
              lastDay: "[tegnap] LT[-kor]",
              lastWeek: function() {
                return week.call(this, false);
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "%s múlva",
              past: "%s",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return hu;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/hy-am.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Armenian [hy-am]
        //! author : Armendarabyan : https://github.com/armendarabyan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var hyAm = moment.defineLocale("hy-am", {
            months: {
              format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split(
                "_"
              ),
              standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split(
                "_"
              ),
            },
            monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split(
              "_"
            ),
            weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split(
              "_"
            ),
            weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
            weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY թ.",
              LLL: "D MMMM YYYY թ., HH:mm",
              LLLL: "dddd, D MMMM YYYY թ., HH:mm",
            },
            calendar: {
              sameDay: "[այսօր] LT",
              nextDay: "[վաղը] LT",
              lastDay: "[երեկ] LT",
              nextWeek: function() {
                return "dddd [օրը ժամը] LT";
              },
              lastWeek: function() {
                return "[անցած] dddd [օրը ժամը] LT";
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "%s հետո",
              past: "%s առաջ",
              s: "մի քանի վայրկյան",
              ss: "%d վայրկյան",
              m: "րոպե",
              mm: "%d րոպե",
              h: "ժամ",
              hh: "%d ժամ",
              d: "օր",
              dd: "%d օր",
              M: "ամիս",
              MM: "%d ամիս",
              y: "տարի",
              yy: "%d տարի",
            },
            meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
            isPM: function(input) {
              return /^(ցերեկվա|երեկոյան)$/.test(input);
            },
            meridiem: function(hour) {
              if (hour < 4) {
                return "գիշերվա";
              } else if (hour < 12) {
                return "առավոտվա";
              } else if (hour < 17) {
                return "ցերեկվա";
              } else {
                return "երեկոյան";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
            ordinal: function(number, period) {
              switch (period) {
                case "DDD":
                case "w":
                case "W":
                case "DDDo":
                  if (number === 1) {
                    return number + "-ին";
                  }
                  return number + "-րդ";
                default:
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return hyAm;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/id.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Indonesian [id]
        //! author : Mohammad Satrio Utomo : https://github.com/tyok
        //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var id = moment.defineLocale("id", {
            months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split(
              "_"
            ),
            weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
            weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
            weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [pukul] HH.mm",
              LLLL: "dddd, D MMMM YYYY [pukul] HH.mm",
            },
            meridiemParse: /pagi|siang|sore|malam/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "pagi") {
                return hour;
              } else if (meridiem === "siang") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "sore" || meridiem === "malam") {
                return hour + 12;
              }
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 11) {
                return "pagi";
              } else if (hours < 15) {
                return "siang";
              } else if (hours < 19) {
                return "sore";
              } else {
                return "malam";
              }
            },
            calendar: {
              sameDay: "[Hari ini pukul] LT",
              nextDay: "[Besok pukul] LT",
              nextWeek: "dddd [pukul] LT",
              lastDay: "[Kemarin pukul] LT",
              lastWeek: "dddd [lalu pukul] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dalam %s",
              past: "%s yang lalu",
              s: "beberapa detik",
              ss: "%d detik",
              m: "semenit",
              mm: "%d menit",
              h: "sejam",
              hh: "%d jam",
              d: "sehari",
              dd: "%d hari",
              M: "sebulan",
              MM: "%d bulan",
              y: "setahun",
              yy: "%d tahun",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return id;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/is.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Icelandic [is]
        //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function plural(n) {
            if (n % 100 === 11) {
              return true;
            } else if (n % 10 === 1) {
              return false;
            }
            return true;
          }
          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + " ";
            switch (key) {
              case "s":
                return withoutSuffix || isFuture
                  ? "nokkrar sekúndur"
                  : "nokkrum sekúndum";
              case "ss":
                if (plural(number)) {
                  return (
                    result +
                    (withoutSuffix || isFuture ? "sekúndur" : "sekúndum")
                  );
                }
                return result + "sekúnda";
              case "m":
                return withoutSuffix ? "mínúta" : "mínútu";
              case "mm":
                if (plural(number)) {
                  return (
                    result + (withoutSuffix || isFuture ? "mínútur" : "mínútum")
                  );
                } else if (withoutSuffix) {
                  return result + "mínúta";
                }
                return result + "mínútu";
              case "hh":
                if (plural(number)) {
                  return (
                    result +
                    (withoutSuffix || isFuture
                      ? "klukkustundir"
                      : "klukkustundum")
                  );
                }
                return result + "klukkustund";
              case "d":
                if (withoutSuffix) {
                  return "dagur";
                }
                return isFuture ? "dag" : "degi";
              case "dd":
                if (plural(number)) {
                  if (withoutSuffix) {
                    return result + "dagar";
                  }
                  return result + (isFuture ? "daga" : "dögum");
                } else if (withoutSuffix) {
                  return result + "dagur";
                }
                return result + (isFuture ? "dag" : "degi");
              case "M":
                if (withoutSuffix) {
                  return "mánuður";
                }
                return isFuture ? "mánuð" : "mánuði";
              case "MM":
                if (plural(number)) {
                  if (withoutSuffix) {
                    return result + "mánuðir";
                  }
                  return result + (isFuture ? "mánuði" : "mánuðum");
                } else if (withoutSuffix) {
                  return result + "mánuður";
                }
                return result + (isFuture ? "mánuð" : "mánuði");
              case "y":
                return withoutSuffix || isFuture ? "ár" : "ári";
              case "yy":
                if (plural(number)) {
                  return result + (withoutSuffix || isFuture ? "ár" : "árum");
                }
                return result + (withoutSuffix || isFuture ? "ár" : "ári");
            }
          }

          var is = moment.defineLocale("is", {
            months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split(
              "_"
            ),
            monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split(
              "_"
            ),
            weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split(
              "_"
            ),
            weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
            weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY [kl.] H:mm",
              LLLL: "dddd, D. MMMM YYYY [kl.] H:mm",
            },
            calendar: {
              sameDay: "[í dag kl.] LT",
              nextDay: "[á morgun kl.] LT",
              nextWeek: "dddd [kl.] LT",
              lastDay: "[í gær kl.] LT",
              lastWeek: "[síðasta] dddd [kl.] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "eftir %s",
              past: "fyrir %s síðan",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: "klukkustund",
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return is;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/it-ch.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/it-ch.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Italian (Switzerland) [it-ch]
        //! author : xfh : https://github.com/xfh

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var itCh = moment.defineLocale("it-ch", {
            months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split(
              "_"
            ),
            monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split(
              "_"
            ),
            weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split(
              "_"
            ),
            weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
            weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Oggi alle] LT",
              nextDay: "[Domani alle] LT",
              nextWeek: "dddd [alle] LT",
              lastDay: "[Ieri alle] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[la scorsa] dddd [alle] LT";
                  default:
                    return "[lo scorso] dddd [alle] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: function(s) {
                return (/^[0-9].+$/.test(s) ? "tra" : "in") + " " + s;
              },
              past: "%s fa",
              s: "alcuni secondi",
              ss: "%d secondi",
              m: "un minuto",
              mm: "%d minuti",
              h: "un'ora",
              hh: "%d ore",
              d: "un giorno",
              dd: "%d giorni",
              M: "un mese",
              MM: "%d mesi",
              y: "un anno",
              yy: "%d anni",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return itCh;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/it.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Italian [it]
        //! author : Lorenzo : https://github.com/aliem
        //! author: Mattia Larentis: https://github.com/nostalgiaz
        //! author: Marco : https://github.com/Manfre98

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var it = moment.defineLocale("it", {
            months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split(
              "_"
            ),
            monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split(
              "_"
            ),
            weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split(
              "_"
            ),
            weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
            weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: function() {
                return (
                  "[Oggi a" +
                  (this.hours() > 1
                    ? "lle "
                    : this.hours() === 0
                    ? " "
                    : "ll'") +
                  "]LT"
                );
              },
              nextDay: function() {
                return (
                  "[Domani a" +
                  (this.hours() > 1
                    ? "lle "
                    : this.hours() === 0
                    ? " "
                    : "ll'") +
                  "]LT"
                );
              },
              nextWeek: function() {
                return (
                  "dddd [a" +
                  (this.hours() > 1
                    ? "lle "
                    : this.hours() === 0
                    ? " "
                    : "ll'") +
                  "]LT"
                );
              },
              lastDay: function() {
                return (
                  "[Ieri a" +
                  (this.hours() > 1
                    ? "lle "
                    : this.hours() === 0
                    ? " "
                    : "ll'") +
                  "]LT"
                );
              },
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return (
                      "[La scorsa] dddd [a" +
                      (this.hours() > 1
                        ? "lle "
                        : this.hours() === 0
                        ? " "
                        : "ll'") +
                      "]LT"
                    );
                  default:
                    return (
                      "[Lo scorso] dddd [a" +
                      (this.hours() > 1
                        ? "lle "
                        : this.hours() === 0
                        ? " "
                        : "ll'") +
                      "]LT"
                    );
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: function(s) {
                return (/^[0-9].+$/.test(s) ? "tra" : "in") + " " + s;
              },
              past: "%s fa",
              s: "alcuni secondi",
              ss: "%d secondi",
              m: "un minuto",
              mm: "%d minuti",
              h: "un'ora",
              hh: "%d ore",
              d: "un giorno",
              dd: "%d giorni",
              M: "un mese",
              MM: "%d mesi",
              y: "un anno",
              yy: "%d anni",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return it;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ja.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Japanese [ja]
        //! author : LI Long : https://github.com/baryon

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ja = moment.defineLocale("ja", {
            eras: [
              {
                since: "2019-05-01",
                offset: 1,
                name: "令和",
                narrow: "㋿",
                abbr: "R",
              },
              {
                since: "1989-01-08",
                until: "2019-04-30",
                offset: 1,
                name: "平成",
                narrow: "㍻",
                abbr: "H",
              },
              {
                since: "1926-12-25",
                until: "1989-01-07",
                offset: 1,
                name: "昭和",
                narrow: "㍼",
                abbr: "S",
              },
              {
                since: "1912-07-30",
                until: "1926-12-24",
                offset: 1,
                name: "大正",
                narrow: "㍽",
                abbr: "T",
              },
              {
                since: "1873-01-01",
                until: "1912-07-29",
                offset: 6,
                name: "明治",
                narrow: "㍾",
                abbr: "M",
              },
              {
                since: "0001-01-01",
                until: "1873-12-31",
                offset: 1,
                name: "西暦",
                narrow: "AD",
                abbr: "AD",
              },
              {
                since: "0000-12-31",
                until: -Infinity,
                offset: 1,
                name: "紀元前",
                narrow: "BC",
                abbr: "BC",
              },
            ],
            eraYearOrdinalRegex: /(元|\d+)年/,
            eraYearOrdinalParse: function(input, match) {
              return match[1] === "元" ? 1 : parseInt(match[1] || input, 10);
            },
            months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split(
              "_"
            ),
            weekdaysShort: "日_月_火_水_木_金_土".split("_"),
            weekdaysMin: "日_月_火_水_木_金_土".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY/MM/DD",
              LL: "YYYY年M月D日",
              LLL: "YYYY年M月D日 HH:mm",
              LLLL: "YYYY年M月D日 dddd HH:mm",
              l: "YYYY/MM/DD",
              ll: "YYYY年M月D日",
              lll: "YYYY年M月D日 HH:mm",
              llll: "YYYY年M月D日(ddd) HH:mm",
            },
            meridiemParse: /午前|午後/i,
            isPM: function(input) {
              return input === "午後";
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "午前";
              } else {
                return "午後";
              }
            },
            calendar: {
              sameDay: "[今日] LT",
              nextDay: "[明日] LT",
              nextWeek: function(now) {
                if (now.week() !== this.week()) {
                  return "[来週]dddd LT";
                } else {
                  return "dddd LT";
                }
              },
              lastDay: "[昨日] LT",
              lastWeek: function(now) {
                if (this.week() !== now.week()) {
                  return "[先週]dddd LT";
                } else {
                  return "dddd LT";
                }
              },
              sameElse: "L",
            },
            dayOfMonthOrdinalParse: /\d{1,2}日/,
            ordinal: function(number, period) {
              switch (period) {
                case "y":
                  return number === 1 ? "元年" : number + "年";
                case "d":
                case "D":
                case "DDD":
                  return number + "日";
                default:
                  return number;
              }
            },
            relativeTime: {
              future: "%s後",
              past: "%s前",
              s: "数秒",
              ss: "%d秒",
              m: "1分",
              mm: "%d分",
              h: "1時間",
              hh: "%d時間",
              d: "1日",
              dd: "%d日",
              M: "1ヶ月",
              MM: "%dヶ月",
              y: "1年",
              yy: "%d年",
            },
          });

          return ja;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/jv.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Javanese [jv]
        //! author : Rony Lantip : https://github.com/lantip
        //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var jv = moment.defineLocale("jv", {
            months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split(
              "_"
            ),
            weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
            weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
            weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [pukul] HH.mm",
              LLLL: "dddd, D MMMM YYYY [pukul] HH.mm",
            },
            meridiemParse: /enjing|siyang|sonten|ndalu/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "enjing") {
                return hour;
              } else if (meridiem === "siyang") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "sonten" || meridiem === "ndalu") {
                return hour + 12;
              }
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 11) {
                return "enjing";
              } else if (hours < 15) {
                return "siyang";
              } else if (hours < 19) {
                return "sonten";
              } else {
                return "ndalu";
              }
            },
            calendar: {
              sameDay: "[Dinten puniko pukul] LT",
              nextDay: "[Mbenjang pukul] LT",
              nextWeek: "dddd [pukul] LT",
              lastDay: "[Kala wingi pukul] LT",
              lastWeek: "dddd [kepengker pukul] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "wonten ing %s",
              past: "%s ingkang kepengker",
              s: "sawetawis detik",
              ss: "%d detik",
              m: "setunggal menit",
              mm: "%d menit",
              h: "setunggal jam",
              hh: "%d jam",
              d: "sedinten",
              dd: "%d dinten",
              M: "sewulan",
              MM: "%d wulan",
              y: "setaun",
              yy: "%d taun",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return jv;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ka.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Georgian [ka]
        //! author : Irakli Janiashvili : https://github.com/IrakliJani

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ka = moment.defineLocale("ka", {
            months: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split(
              "_"
            ),
            monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split(
              "_"
            ),
            weekdays: {
              standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split(
                "_"
              ),
              format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split(
                "_"
              ),
              isFormat: /(წინა|შემდეგ)/,
            },
            weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
            weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[დღეს] LT[-ზე]",
              nextDay: "[ხვალ] LT[-ზე]",
              lastDay: "[გუშინ] LT[-ზე]",
              nextWeek: "[შემდეგ] dddd LT[-ზე]",
              lastWeek: "[წინა] dddd LT-ზე",
              sameElse: "L",
            },
            relativeTime: {
              future: function(s) {
                return s.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/, function(
                  $0,
                  $1,
                  $2
                ) {
                  return $2 === "ი" ? $1 + "ში" : $1 + $2 + "ში";
                });
              },
              past: function(s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                  return s.replace(/(ი|ე)$/, "ის წინ");
                }
                if (/წელი/.test(s)) {
                  return s.replace(/წელი$/, "წლის წინ");
                }
                return s;
              },
              s: "რამდენიმე წამი",
              ss: "%d წამი",
              m: "წუთი",
              mm: "%d წუთი",
              h: "საათი",
              hh: "%d საათი",
              d: "დღე",
              dd: "%d დღე",
              M: "თვე",
              MM: "%d თვე",
              y: "წელი",
              yy: "%d წელი",
            },
            dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
            ordinal: function(number) {
              if (number === 0) {
                return number;
              }
              if (number === 1) {
                return number + "-ლი";
              }
              if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
              ) {
                return "მე-" + number;
              }
              return number + "-ე";
            },
            week: {
              dow: 1,
              doy: 7,
            },
          });

          return ka;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/kk.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Kazakh [kk]
        //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var suffixes = {
            0: "-ші",
            1: "-ші",
            2: "-ші",
            3: "-ші",
            4: "-ші",
            5: "-ші",
            6: "-шы",
            7: "-ші",
            8: "-ші",
            9: "-шы",
            10: "-шы",
            20: "-шы",
            30: "-шы",
            40: "-шы",
            50: "-ші",
            60: "-шы",
            70: "-ші",
            80: "-ші",
            90: "-шы",
            100: "-ші",
          };

          var kk = moment.defineLocale("kk", {
            months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split(
              "_"
            ),
            monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split(
              "_"
            ),
            weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split(
              "_"
            ),
            weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
            weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Бүгін сағат] LT",
              nextDay: "[Ертең сағат] LT",
              nextWeek: "dddd [сағат] LT",
              lastDay: "[Кеше сағат] LT",
              lastWeek: "[Өткен аптаның] dddd [сағат] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s ішінде",
              past: "%s бұрын",
              s: "бірнеше секунд",
              ss: "%d секунд",
              m: "бір минут",
              mm: "%d минут",
              h: "бір сағат",
              hh: "%d сағат",
              d: "бір күн",
              dd: "%d күн",
              M: "бір ай",
              MM: "%d ай",
              y: "бір жыл",
              yy: "%d жыл",
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
            ordinal: function(number) {
              var a = number % 10,
                b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return kk;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/km.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Cambodian [km]
        //! author : Kruy Vanna : https://github.com/kruyvanna

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "១",
              "2": "២",
              "3": "៣",
              "4": "៤",
              "5": "៥",
              "6": "៦",
              "7": "៧",
              "8": "៨",
              "9": "៩",
              "0": "០",
            },
            numberMap = {
              "១": "1",
              "២": "2",
              "៣": "3",
              "៤": "4",
              "៥": "5",
              "៦": "6",
              "៧": "7",
              "៨": "8",
              "៩": "9",
              "០": "0",
            };

          var km = moment.defineLocale("km", {
            months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split(
              "_"
            ),
            monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split(
              "_"
            ),
            weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split(
              "_"
            ),
            weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
            weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            meridiemParse: /ព្រឹក|ល្ងាច/,
            isPM: function(input) {
              return input === "ល្ងាច";
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ព្រឹក";
              } else {
                return "ល្ងាច";
              }
            },
            calendar: {
              sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
              nextDay: "[ស្អែក ម៉ោង] LT",
              nextWeek: "dddd [ម៉ោង] LT",
              lastDay: "[ម្សិលមិញ ម៉ោង] LT",
              lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%sទៀត",
              past: "%sមុន",
              s: "ប៉ុន្មានវិនាទី",
              ss: "%d វិនាទី",
              m: "មួយនាទី",
              mm: "%d នាទី",
              h: "មួយម៉ោង",
              hh: "%d ម៉ោង",
              d: "មួយថ្ងៃ",
              dd: "%d ថ្ងៃ",
              M: "មួយខែ",
              MM: "%d ខែ",
              y: "មួយឆ្នាំ",
              yy: "%d ឆ្នាំ",
            },
            dayOfMonthOrdinalParse: /ទី\d{1,2}/,
            ordinal: "ទី%d",
            preparse: function(string) {
              return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return km;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/kn.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Kannada [kn]
        //! author : Rajeev Naik : https://github.com/rajeevnaikte

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "೧",
              "2": "೨",
              "3": "೩",
              "4": "೪",
              "5": "೫",
              "6": "೬",
              "7": "೭",
              "8": "೮",
              "9": "೯",
              "0": "೦",
            },
            numberMap = {
              "೧": "1",
              "೨": "2",
              "೩": "3",
              "೪": "4",
              "೫": "5",
              "೬": "6",
              "೭": "7",
              "೮": "8",
              "೯": "9",
              "೦": "0",
            };

          var kn = moment.defineLocale("kn", {
            months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split(
              "_"
            ),
            monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split(
              "_"
            ),
            weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),
            weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),
            longDateFormat: {
              LT: "A h:mm",
              LTS: "A h:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm",
              LLLL: "dddd, D MMMM YYYY, A h:mm",
            },
            calendar: {
              sameDay: "[ಇಂದು] LT",
              nextDay: "[ನಾಳೆ] LT",
              nextWeek: "dddd, LT",
              lastDay: "[ನಿನ್ನೆ] LT",
              lastWeek: "[ಕೊನೆಯ] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s ನಂತರ",
              past: "%s ಹಿಂದೆ",
              s: "ಕೆಲವು ಕ್ಷಣಗಳು",
              ss: "%d ಸೆಕೆಂಡುಗಳು",
              m: "ಒಂದು ನಿಮಿಷ",
              mm: "%d ನಿಮಿಷ",
              h: "ಒಂದು ಗಂಟೆ",
              hh: "%d ಗಂಟೆ",
              d: "ಒಂದು ದಿನ",
              dd: "%d ದಿನ",
              M: "ಒಂದು ತಿಂಗಳು",
              MM: "%d ತಿಂಗಳು",
              y: "ಒಂದು ವರ್ಷ",
              yy: "%d ವರ್ಷ",
            },
            preparse: function(string) {
              return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "ರಾತ್ರಿ") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "ಬೆಳಿಗ್ಗೆ") {
                return hour;
              } else if (meridiem === "ಮಧ್ಯಾಹ್ನ") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "ಸಂಜೆ") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "ರಾತ್ರಿ";
              } else if (hour < 10) {
                return "ಬೆಳಿಗ್ಗೆ";
              } else if (hour < 17) {
                return "ಮಧ್ಯಾಹ್ನ";
              } else if (hour < 20) {
                return "ಸಂಜೆ";
              } else {
                return "ರಾತ್ರಿ";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
            ordinal: function(number) {
              return number + "ನೇ";
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return kn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ko.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Korean [ko]
        //! author : Kyungwook, Park : https://github.com/kyungw00k
        //! author : Jeeeyul Lee <jeeeyul@gmail.com>

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ko = moment.defineLocale("ko", {
            months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split(
              "_"
            ),
            monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split(
              "_"
            ),
            weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split(
              "_"
            ),
            weekdaysShort: "일_월_화_수_목_금_토".split("_"),
            weekdaysMin: "일_월_화_수_목_금_토".split("_"),
            longDateFormat: {
              LT: "A h:mm",
              LTS: "A h:mm:ss",
              L: "YYYY.MM.DD.",
              LL: "YYYY년 MMMM D일",
              LLL: "YYYY년 MMMM D일 A h:mm",
              LLLL: "YYYY년 MMMM D일 dddd A h:mm",
              l: "YYYY.MM.DD.",
              ll: "YYYY년 MMMM D일",
              lll: "YYYY년 MMMM D일 A h:mm",
              llll: "YYYY년 MMMM D일 dddd A h:mm",
            },
            calendar: {
              sameDay: "오늘 LT",
              nextDay: "내일 LT",
              nextWeek: "dddd LT",
              lastDay: "어제 LT",
              lastWeek: "지난주 dddd LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s 후",
              past: "%s 전",
              s: "몇 초",
              ss: "%d초",
              m: "1분",
              mm: "%d분",
              h: "한 시간",
              hh: "%d시간",
              d: "하루",
              dd: "%d일",
              M: "한 달",
              MM: "%d달",
              y: "일 년",
              yy: "%d년",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "일";
                case "M":
                  return number + "월";
                case "w":
                case "W":
                  return number + "주";
                default:
                  return number;
              }
            },
            meridiemParse: /오전|오후/,
            isPM: function(token) {
              return token === "오후";
            },
            meridiem: function(hour, minute, isUpper) {
              return hour < 12 ? "오전" : "오후";
            },
          });

          return ko;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ku.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ku.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Kurdish [ku]
        //! author : Shahram Mebashar : https://github.com/ShahramMebashar

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "١",
              "2": "٢",
              "3": "٣",
              "4": "٤",
              "5": "٥",
              "6": "٦",
              "7": "٧",
              "8": "٨",
              "9": "٩",
              "0": "٠",
            },
            numberMap = {
              "١": "1",
              "٢": "2",
              "٣": "3",
              "٤": "4",
              "٥": "5",
              "٦": "6",
              "٧": "7",
              "٨": "8",
              "٩": "9",
              "٠": "0",
            },
            months = [
              "کانونی دووەم",
              "شوبات",
              "ئازار",
              "نیسان",
              "ئایار",
              "حوزەیران",
              "تەمموز",
              "ئاب",
              "ئەیلوول",
              "تشرینی یەكەم",
              "تشرینی دووەم",
              "كانونی یەکەم",
            ];

          var ku = moment.defineLocale("ku", {
            months: months,
            monthsShort: months,
            weekdays: "یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split(
              "_"
            ),
            weekdaysShort: "یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split(
              "_"
            ),
            weekdaysMin: "ی_د_س_چ_پ_ه_ش".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            meridiemParse: /ئێواره‌|به‌یانی/,
            isPM: function(input) {
              return /ئێواره‌/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "به‌یانی";
              } else {
                return "ئێواره‌";
              }
            },
            calendar: {
              sameDay: "[ئه‌مرۆ كاتژمێر] LT",
              nextDay: "[به‌یانی كاتژمێر] LT",
              nextWeek: "dddd [كاتژمێر] LT",
              lastDay: "[دوێنێ كاتژمێر] LT",
              lastWeek: "dddd [كاتژمێر] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "له‌ %s",
              past: "%s",
              s: "چه‌ند چركه‌یه‌ك",
              ss: "چركه‌ %d",
              m: "یه‌ك خوله‌ك",
              mm: "%d خوله‌ك",
              h: "یه‌ك كاتژمێر",
              hh: "%d كاتژمێر",
              d: "یه‌ك ڕۆژ",
              dd: "%d ڕۆژ",
              M: "یه‌ك مانگ",
              MM: "%d مانگ",
              y: "یه‌ك ساڵ",
              yy: "%d ساڵ",
            },
            preparse: function(string) {
              return string
                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {
                  return numberMap[match];
                })
                .replace(/،/g, ",");
            },
            postformat: function(string) {
              return string
                .replace(/\d/g, function(match) {
                  return symbolMap[match];
                })
                .replace(/,/g, "،");
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return ku;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ky.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Kyrgyz [ky]
        //! author : Chyngyz Arystan uulu : https://github.com/chyngyz

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var suffixes = {
            0: "-чү",
            1: "-чи",
            2: "-чи",
            3: "-чү",
            4: "-чү",
            5: "-чи",
            6: "-чы",
            7: "-чи",
            8: "-чи",
            9: "-чу",
            10: "-чу",
            20: "-чы",
            30: "-чу",
            40: "-чы",
            50: "-чү",
            60: "-чы",
            70: "-чи",
            80: "-чи",
            90: "-чу",
            100: "-чү",
          };

          var ky = moment.defineLocale("ky", {
            months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split(
              "_"
            ),
            monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split(
              "_"
            ),
            weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split(
              "_"
            ),
            weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
            weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Бүгүн саат] LT",
              nextDay: "[Эртең саат] LT",
              nextWeek: "dddd [саат] LT",
              lastDay: "[Кечээ саат] LT",
              lastWeek: "[Өткөн аптанын] dddd [күнү] [саат] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s ичинде",
              past: "%s мурун",
              s: "бирнече секунд",
              ss: "%d секунд",
              m: "бир мүнөт",
              mm: "%d мүнөт",
              h: "бир саат",
              hh: "%d саат",
              d: "бир күн",
              dd: "%d күн",
              M: "бир ай",
              MM: "%d ай",
              y: "бир жыл",
              yy: "%d жыл",
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
            ordinal: function(number) {
              var a = number % 10,
                b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return ky;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/lb.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Luxembourgish [lb]
        //! author : mweimerskirch : https://github.com/mweimerskirch
        //! author : David Raison : https://github.com/kwisatz

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              m: ["eng Minutt", "enger Minutt"],
              h: ["eng Stonn", "enger Stonn"],
              d: ["een Dag", "engem Dag"],
              M: ["ee Mount", "engem Mount"],
              y: ["ee Joer", "engem Joer"],
            };
            return withoutSuffix ? format[key][0] : format[key][1];
          }
          function processFutureTime(string) {
            var number = string.substr(0, string.indexOf(" "));
            if (eifelerRegelAppliesToNumber(number)) {
              return "a " + string;
            }
            return "an " + string;
          }
          function processPastTime(string) {
            var number = string.substr(0, string.indexOf(" "));
            if (eifelerRegelAppliesToNumber(number)) {
              return "viru " + string;
            }
            return "virun " + string;
          }
          /**
           * Returns true if the word before the given number loses the '-n' ending.
           * e.g. 'an 10 Deeg' but 'a 5 Deeg'
           *
           * @param number {integer}
           * @returns {boolean}
           */
          function eifelerRegelAppliesToNumber(number) {
            number = parseInt(number, 10);
            if (isNaN(number)) {
              return false;
            }
            if (number < 0) {
              // Negative Number --> always true
              return true;
            } else if (number < 10) {
              // Only 1 digit
              if (4 <= number && number <= 7) {
                return true;
              }
              return false;
            } else if (number < 100) {
              // 2 digits
              var lastDigit = number % 10,
                firstDigit = number / 10;
              if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
              }
              return eifelerRegelAppliesToNumber(lastDigit);
            } else if (number < 10000) {
              // 3 or 4 digits --> recursively check first digit
              while (number >= 10) {
                number = number / 10;
              }
              return eifelerRegelAppliesToNumber(number);
            } else {
              // Anything larger than 4 digits: recursively check first n-3 digits
              number = number / 1000;
              return eifelerRegelAppliesToNumber(number);
            }
          }

          var lb = moment.defineLocale("lb", {
            months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split(
              "_"
            ),
            monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split(
              "_"
            ),
            weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm [Auer]",
              LTS: "H:mm:ss [Auer]",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm [Auer]",
              LLLL: "dddd, D. MMMM YYYY H:mm [Auer]",
            },
            calendar: {
              sameDay: "[Haut um] LT",
              sameElse: "L",
              nextDay: "[Muer um] LT",
              nextWeek: "dddd [um] LT",
              lastDay: "[Gëschter um] LT",
              lastWeek: function() {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                  case 2:
                  case 4:
                    return "[Leschten] dddd [um] LT";
                  default:
                    return "[Leschte] dddd [um] LT";
                }
              },
            },
            relativeTime: {
              future: processFutureTime,
              past: processPastTime,
              s: "e puer Sekonnen",
              ss: "%d Sekonnen",
              m: processRelativeTime,
              mm: "%d Minutten",
              h: processRelativeTime,
              hh: "%d Stonnen",
              d: processRelativeTime,
              dd: "%d Deeg",
              M: processRelativeTime,
              MM: "%d Méint",
              y: processRelativeTime,
              yy: "%d Joer",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return lb;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/lo.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Lao [lo]
        //! author : Ryan Hart : https://github.com/ryanhart2

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var lo = moment.defineLocale("lo", {
            months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split(
              "_"
            ),
            monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split(
              "_"
            ),
            weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
            weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
            weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "ວັນdddd D MMMM YYYY HH:mm",
            },
            meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
            isPM: function(input) {
              return input === "ຕອນແລງ";
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ຕອນເຊົ້າ";
              } else {
                return "ຕອນແລງ";
              }
            },
            calendar: {
              sameDay: "[ມື້ນີ້ເວລາ] LT",
              nextDay: "[ມື້ອື່ນເວລາ] LT",
              nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
              lastDay: "[ມື້ວານນີ້ເວລາ] LT",
              lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "ອີກ %s",
              past: "%sຜ່ານມາ",
              s: "ບໍ່ເທົ່າໃດວິນາທີ",
              ss: "%d ວິນາທີ",
              m: "1 ນາທີ",
              mm: "%d ນາທີ",
              h: "1 ຊົ່ວໂມງ",
              hh: "%d ຊົ່ວໂມງ",
              d: "1 ມື້",
              dd: "%d ມື້",
              M: "1 ເດືອນ",
              MM: "%d ເດືອນ",
              y: "1 ປີ",
              yy: "%d ປີ",
            },
            dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
            ordinal: function(number) {
              return "ທີ່" + number;
            },
          });

          return lo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/lt.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Lithuanian [lt]
        //! author : Mindaugas Mozūras : https://github.com/mmozuras

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var units = {
            ss: "sekundė_sekundžių_sekundes",
            m: "minutė_minutės_minutę",
            mm: "minutės_minučių_minutes",
            h: "valanda_valandos_valandą",
            hh: "valandos_valandų_valandas",
            d: "diena_dienos_dieną",
            dd: "dienos_dienų_dienas",
            M: "mėnuo_mėnesio_mėnesį",
            MM: "mėnesiai_mėnesių_mėnesius",
            y: "metai_metų_metus",
            yy: "metai_metų_metus",
          };
          function translateSeconds(number, withoutSuffix, key, isFuture) {
            if (withoutSuffix) {
              return "kelios sekundės";
            } else {
              return isFuture ? "kelių sekundžių" : "kelias sekundes";
            }
          }
          function translateSingular(number, withoutSuffix, key, isFuture) {
            return withoutSuffix
              ? forms(key)[0]
              : isFuture
              ? forms(key)[1]
              : forms(key)[2];
          }
          function special(number) {
            return number % 10 === 0 || (number > 10 && number < 20);
          }
          function forms(key) {
            return units[key].split("_");
          }
          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + " ";
            if (number === 1) {
              return (
                result +
                translateSingular(number, withoutSuffix, key[0], isFuture)
              );
            } else if (withoutSuffix) {
              return result + (special(number) ? forms(key)[1] : forms(key)[0]);
            } else {
              if (isFuture) {
                return result + forms(key)[1];
              } else {
                return (
                  result + (special(number) ? forms(key)[1] : forms(key)[2])
                );
              }
            }
          }
          var lt = moment.defineLocale("lt", {
            months: {
              format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split(
                "_"
              ),
              standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split(
                "_"
              ),
              isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
            },
            monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split(
              "_"
            ),
            weekdays: {
              format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split(
                "_"
              ),
              standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split(
                "_"
              ),
              isFormat: /dddd HH:mm/,
            },
            weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
            weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "YYYY [m.] MMMM D [d.]",
              LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
              LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
              l: "YYYY-MM-DD",
              ll: "YYYY [m.] MMMM D [d.]",
              lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
              llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]",
            },
            calendar: {
              sameDay: "[Šiandien] LT",
              nextDay: "[Rytoj] LT",
              nextWeek: "dddd LT",
              lastDay: "[Vakar] LT",
              lastWeek: "[Praėjusį] dddd LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "po %s",
              past: "prieš %s",
              s: translateSeconds,
              ss: translate,
              m: translateSingular,
              mm: translate,
              h: translateSingular,
              hh: translate,
              d: translateSingular,
              dd: translate,
              M: translateSingular,
              MM: translate,
              y: translateSingular,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}-oji/,
            ordinal: function(number) {
              return number + "-oji";
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return lt;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/lv.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Latvian [lv]
        //! author : Kristaps Karlsons : https://github.com/skakri
        //! author : Jānis Elmeris : https://github.com/JanisE

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var units = {
            ss: "sekundes_sekundēm_sekunde_sekundes".split("_"),
            m: "minūtes_minūtēm_minūte_minūtes".split("_"),
            mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
            h: "stundas_stundām_stunda_stundas".split("_"),
            hh: "stundas_stundām_stunda_stundas".split("_"),
            d: "dienas_dienām_diena_dienas".split("_"),
            dd: "dienas_dienām_diena_dienas".split("_"),
            M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
            MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
            y: "gada_gadiem_gads_gadi".split("_"),
            yy: "gada_gadiem_gads_gadi".split("_"),
          };
          /**
           * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
           */
          function format(forms, number, withoutSuffix) {
            if (withoutSuffix) {
              // E.g. "21 minūte", "3 minūtes".
              return number % 10 === 1 && number % 100 !== 11
                ? forms[2]
                : forms[3];
            } else {
              // E.g. "21 minūtes" as in "pēc 21 minūtes".
              // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
              return number % 10 === 1 && number % 100 !== 11
                ? forms[0]
                : forms[1];
            }
          }
          function relativeTimeWithPlural(number, withoutSuffix, key) {
            return number + " " + format(units[key], number, withoutSuffix);
          }
          function relativeTimeWithSingular(number, withoutSuffix, key) {
            return format(units[key], number, withoutSuffix);
          }
          function relativeSeconds(number, withoutSuffix) {
            return withoutSuffix ? "dažas sekundes" : "dažām sekundēm";
          }

          var lv = moment.defineLocale("lv", {
            months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split(
              "_"
            ),
            monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split(
              "_"
            ),
            weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split(
              "_"
            ),
            weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
            weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY.",
              LL: "YYYY. [gada] D. MMMM",
              LLL: "YYYY. [gada] D. MMMM, HH:mm",
              LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm",
            },
            calendar: {
              sameDay: "[Šodien pulksten] LT",
              nextDay: "[Rīt pulksten] LT",
              nextWeek: "dddd [pulksten] LT",
              lastDay: "[Vakar pulksten] LT",
              lastWeek: "[Pagājušā] dddd [pulksten] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "pēc %s",
              past: "pirms %s",
              s: relativeSeconds,
              ss: relativeTimeWithPlural,
              m: relativeTimeWithSingular,
              mm: relativeTimeWithPlural,
              h: relativeTimeWithSingular,
              hh: relativeTimeWithPlural,
              d: relativeTimeWithSingular,
              dd: relativeTimeWithPlural,
              M: relativeTimeWithSingular,
              MM: relativeTimeWithPlural,
              y: relativeTimeWithSingular,
              yy: relativeTimeWithPlural,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return lv;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/me.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Montenegrin [me]
        //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var translator = {
            words: {
              //Different grammatical cases
              ss: ["sekund", "sekunda", "sekundi"],
              m: ["jedan minut", "jednog minuta"],
              mm: ["minut", "minuta", "minuta"],
              h: ["jedan sat", "jednog sata"],
              hh: ["sat", "sata", "sati"],
              dd: ["dan", "dana", "dana"],
              MM: ["mjesec", "mjeseca", "mjeseci"],
              yy: ["godina", "godine", "godina"],
            },
            correctGrammaticalCase: function(number, wordKey) {
              return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
            },
            translate: function(number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return (
                  number +
                  " " +
                  translator.correctGrammaticalCase(number, wordKey)
                );
              }
            },
          };

          var me = moment.defineLocale("me", {
            months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split(
              "_"
            ),
            monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split(
              "_"
            ),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[danas u] LT",
              nextDay: "[sjutra u] LT",

              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[u] [nedjelju] [u] LT";
                  case 3:
                    return "[u] [srijedu] [u] LT";
                  case 6:
                    return "[u] [subotu] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[u] dddd [u] LT";
                }
              },
              lastDay: "[juče u] LT",
              lastWeek: function() {
                var lastWeekDays = [
                  "[prošle] [nedjelje] [u] LT",
                  "[prošlog] [ponedjeljka] [u] LT",
                  "[prošlog] [utorka] [u] LT",
                  "[prošle] [srijede] [u] LT",
                  "[prošlog] [četvrtka] [u] LT",
                  "[prošlog] [petka] [u] LT",
                  "[prošle] [subote] [u] LT",
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "prije %s",
              s: "nekoliko sekundi",
              ss: translator.translate,
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: "dan",
              dd: translator.translate,
              M: "mjesec",
              MM: translator.translate,
              y: "godinu",
              yy: translator.translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return me;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/mi.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Maori [mi]
        //! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var mi = moment.defineLocale("mi", {
            months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split(
              "_"
            ),
            monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split(
              "_"
            ),
            monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
            weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split(
              "_"
            ),
            weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
            weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [i] HH:mm",
              LLLL: "dddd, D MMMM YYYY [i] HH:mm",
            },
            calendar: {
              sameDay: "[i teie mahana, i] LT",
              nextDay: "[apopo i] LT",
              nextWeek: "dddd [i] LT",
              lastDay: "[inanahi i] LT",
              lastWeek: "dddd [whakamutunga i] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "i roto i %s",
              past: "%s i mua",
              s: "te hēkona ruarua",
              ss: "%d hēkona",
              m: "he meneti",
              mm: "%d meneti",
              h: "te haora",
              hh: "%d haora",
              d: "he ra",
              dd: "%d ra",
              M: "he marama",
              MM: "%d marama",
              y: "he tau",
              yy: "%d tau",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return mi;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/mk.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Macedonian [mk]
        //! author : Borislav Mickov : https://github.com/B0k0
        //! author : Sashko Todorov : https://github.com/bkyceh

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var mk = moment.defineLocale("mk", {
            months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split(
              "_"
            ),
            monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split(
              "_"
            ),
            weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split(
              "_"
            ),
            weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
            weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "D.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY H:mm",
              LLLL: "dddd, D MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[Денес во] LT",
              nextDay: "[Утре во] LT",
              nextWeek: "[Во] dddd [во] LT",
              lastDay: "[Вчера во] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                  case 3:
                  case 6:
                    return "[Изминатата] dddd [во] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[Изминатиот] dddd [во] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "за %s",
              past: "пред %s",
              s: "неколку секунди",
              ss: "%d секунди",
              m: "една минута",
              mm: "%d минути",
              h: "еден час",
              hh: "%d часа",
              d: "еден ден",
              dd: "%d дена",
              M: "еден месец",
              MM: "%d месеци",
              y: "една година",
              yy: "%d години",
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function(number) {
              var lastDigit = number % 10,
                last2Digits = number % 100;
              if (number === 0) {
                return number + "-ев";
              } else if (last2Digits === 0) {
                return number + "-ен";
              } else if (last2Digits > 10 && last2Digits < 20) {
                return number + "-ти";
              } else if (lastDigit === 1) {
                return number + "-ви";
              } else if (lastDigit === 2) {
                return number + "-ри";
              } else if (lastDigit === 7 || lastDigit === 8) {
                return number + "-ми";
              } else {
                return number + "-ти";
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return mk;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ml.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Malayalam [ml]
        //! author : Floyd Pink : https://github.com/floydpink

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ml = moment.defineLocale("ml", {
            months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split(
              "_"
            ),
            monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split(
              "_"
            ),
            weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split(
              "_"
            ),
            weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
            longDateFormat: {
              LT: "A h:mm -നു",
              LTS: "A h:mm:ss -നു",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm -നു",
              LLLL: "dddd, D MMMM YYYY, A h:mm -നു",
            },
            calendar: {
              sameDay: "[ഇന്ന്] LT",
              nextDay: "[നാളെ] LT",
              nextWeek: "dddd, LT",
              lastDay: "[ഇന്നലെ] LT",
              lastWeek: "[കഴിഞ്ഞ] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s കഴിഞ്ഞ്",
              past: "%s മുൻപ്",
              s: "അൽപ നിമിഷങ്ങൾ",
              ss: "%d സെക്കൻഡ്",
              m: "ഒരു മിനിറ്റ്",
              mm: "%d മിനിറ്റ്",
              h: "ഒരു മണിക്കൂർ",
              hh: "%d മണിക്കൂർ",
              d: "ഒരു ദിവസം",
              dd: "%d ദിവസം",
              M: "ഒരു മാസം",
              MM: "%d മാസം",
              y: "ഒരു വർഷം",
              yy: "%d വർഷം",
            },
            meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                (meridiem === "രാത്രി" && hour >= 4) ||
                meridiem === "ഉച്ച കഴിഞ്ഞ്" ||
                meridiem === "വൈകുന്നേരം"
              ) {
                return hour + 12;
              } else {
                return hour;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "രാത്രി";
              } else if (hour < 12) {
                return "രാവിലെ";
              } else if (hour < 17) {
                return "ഉച്ച കഴിഞ്ഞ്";
              } else if (hour < 20) {
                return "വൈകുന്നേരം";
              } else {
                return "രാത്രി";
              }
            },
          });

          return ml;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/mn.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Mongolian [mn]
        //! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function translate(number, withoutSuffix, key, isFuture) {
            switch (key) {
              case "s":
                return withoutSuffix ? "хэдхэн секунд" : "хэдхэн секундын";
              case "ss":
                return number + (withoutSuffix ? " секунд" : " секундын");
              case "m":
              case "mm":
                return number + (withoutSuffix ? " минут" : " минутын");
              case "h":
              case "hh":
                return number + (withoutSuffix ? " цаг" : " цагийн");
              case "d":
              case "dd":
                return number + (withoutSuffix ? " өдөр" : " өдрийн");
              case "M":
              case "MM":
                return number + (withoutSuffix ? " сар" : " сарын");
              case "y":
              case "yy":
                return number + (withoutSuffix ? " жил" : " жилийн");
              default:
                return number;
            }
          }

          var mn = moment.defineLocale("mn", {
            months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split(
              "_"
            ),
            monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),
            weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),
            weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "YYYY оны MMMMын D",
              LLL: "YYYY оны MMMMын D HH:mm",
              LLLL: "dddd, YYYY оны MMMMын D HH:mm",
            },
            meridiemParse: /ҮӨ|ҮХ/i,
            isPM: function(input) {
              return input === "ҮХ";
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ҮӨ";
              } else {
                return "ҮХ";
              }
            },
            calendar: {
              sameDay: "[Өнөөдөр] LT",
              nextDay: "[Маргааш] LT",
              nextWeek: "[Ирэх] dddd LT",
              lastDay: "[Өчигдөр] LT",
              lastWeek: "[Өнгөрсөн] dddd LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s дараа",
              past: "%s өмнө",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + " өдөр";
                default:
                  return number;
              }
            },
          });

          return mn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/mr.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Marathi [mr]
        //! author : Harshad Kale : https://github.com/kalehv
        //! author : Vivek Athalye : https://github.com/vnathalye

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "१",
              "2": "२",
              "3": "३",
              "4": "४",
              "5": "५",
              "6": "६",
              "7": "७",
              "8": "८",
              "9": "९",
              "0": "०",
            },
            numberMap = {
              "१": "1",
              "२": "2",
              "३": "3",
              "४": "4",
              "५": "5",
              "६": "6",
              "७": "7",
              "८": "8",
              "९": "9",
              "०": "0",
            };

          function relativeTimeMr(number, withoutSuffix, string, isFuture) {
            var output = "";
            if (withoutSuffix) {
              switch (string) {
                case "s":
                  output = "काही सेकंद";
                  break;
                case "ss":
                  output = "%d सेकंद";
                  break;
                case "m":
                  output = "एक मिनिट";
                  break;
                case "mm":
                  output = "%d मिनिटे";
                  break;
                case "h":
                  output = "एक तास";
                  break;
                case "hh":
                  output = "%d तास";
                  break;
                case "d":
                  output = "एक दिवस";
                  break;
                case "dd":
                  output = "%d दिवस";
                  break;
                case "M":
                  output = "एक महिना";
                  break;
                case "MM":
                  output = "%d महिने";
                  break;
                case "y":
                  output = "एक वर्ष";
                  break;
                case "yy":
                  output = "%d वर्षे";
                  break;
              }
            } else {
              switch (string) {
                case "s":
                  output = "काही सेकंदां";
                  break;
                case "ss":
                  output = "%d सेकंदां";
                  break;
                case "m":
                  output = "एका मिनिटा";
                  break;
                case "mm":
                  output = "%d मिनिटां";
                  break;
                case "h":
                  output = "एका तासा";
                  break;
                case "hh":
                  output = "%d तासां";
                  break;
                case "d":
                  output = "एका दिवसा";
                  break;
                case "dd":
                  output = "%d दिवसां";
                  break;
                case "M":
                  output = "एका महिन्या";
                  break;
                case "MM":
                  output = "%d महिन्यां";
                  break;
                case "y":
                  output = "एका वर्षा";
                  break;
                case "yy":
                  output = "%d वर्षां";
                  break;
              }
            }
            return output.replace(/%d/i, number);
          }

          var mr = moment.defineLocale("mr", {
            months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split(
              "_"
            ),
            monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split(
              "_"
            ),
            weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
            weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
            longDateFormat: {
              LT: "A h:mm वाजता",
              LTS: "A h:mm:ss वाजता",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm वाजता",
              LLLL: "dddd, D MMMM YYYY, A h:mm वाजता",
            },
            calendar: {
              sameDay: "[आज] LT",
              nextDay: "[उद्या] LT",
              nextWeek: "dddd, LT",
              lastDay: "[काल] LT",
              lastWeek: "[मागील] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%sमध्ये",
              past: "%sपूर्वी",
              s: relativeTimeMr,
              ss: relativeTimeMr,
              m: relativeTimeMr,
              mm: relativeTimeMr,
              h: relativeTimeMr,
              hh: relativeTimeMr,
              d: relativeTimeMr,
              dd: relativeTimeMr,
              M: relativeTimeMr,
              MM: relativeTimeMr,
              y: relativeTimeMr,
              yy: relativeTimeMr,
            },
            preparse: function(string) {
              return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "पहाटे" || meridiem === "सकाळी") {
                return hour;
              } else if (
                meridiem === "दुपारी" ||
                meridiem === "सायंकाळी" ||
                meridiem === "रात्री"
              ) {
                return hour >= 12 ? hour : hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour >= 0 && hour < 6) {
                return "पहाटे";
              } else if (hour < 12) {
                return "सकाळी";
              } else if (hour < 17) {
                return "दुपारी";
              } else if (hour < 20) {
                return "सायंकाळी";
              } else {
                return "रात्री";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return mr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ms-my.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Malay [ms-my]
        //! note : DEPRECATED, the correct one is [ms]
        //! author : Weldan Jamili : https://github.com/weldan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var msMy = moment.defineLocale("ms-my", {
            months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split(
              "_"
            ),
            weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
            weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
            weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [pukul] HH.mm",
              LLLL: "dddd, D MMMM YYYY [pukul] HH.mm",
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "pagi") {
                return hour;
              } else if (meridiem === "tengahari") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "petang" || meridiem === "malam") {
                return hour + 12;
              }
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 11) {
                return "pagi";
              } else if (hours < 15) {
                return "tengahari";
              } else if (hours < 19) {
                return "petang";
              } else {
                return "malam";
              }
            },
            calendar: {
              sameDay: "[Hari ini pukul] LT",
              nextDay: "[Esok pukul] LT",
              nextWeek: "dddd [pukul] LT",
              lastDay: "[Kelmarin pukul] LT",
              lastWeek: "dddd [lepas pukul] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dalam %s",
              past: "%s yang lepas",
              s: "beberapa saat",
              ss: "%d saat",
              m: "seminit",
              mm: "%d minit",
              h: "sejam",
              hh: "%d jam",
              d: "sehari",
              dd: "%d hari",
              M: "sebulan",
              MM: "%d bulan",
              y: "setahun",
              yy: "%d tahun",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return msMy;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ms.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Malay [ms]
        //! author : Weldan Jamili : https://github.com/weldan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ms = moment.defineLocale("ms", {
            months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split(
              "_"
            ),
            weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
            weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
            weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [pukul] HH.mm",
              LLLL: "dddd, D MMMM YYYY [pukul] HH.mm",
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "pagi") {
                return hour;
              } else if (meridiem === "tengahari") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "petang" || meridiem === "malam") {
                return hour + 12;
              }
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 11) {
                return "pagi";
              } else if (hours < 15) {
                return "tengahari";
              } else if (hours < 19) {
                return "petang";
              } else {
                return "malam";
              }
            },
            calendar: {
              sameDay: "[Hari ini pukul] LT",
              nextDay: "[Esok pukul] LT",
              nextWeek: "dddd [pukul] LT",
              lastDay: "[Kelmarin pukul] LT",
              lastWeek: "dddd [lepas pukul] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dalam %s",
              past: "%s yang lepas",
              s: "beberapa saat",
              ss: "%d saat",
              m: "seminit",
              mm: "%d minit",
              h: "sejam",
              hh: "%d jam",
              d: "sehari",
              dd: "%d hari",
              M: "sebulan",
              MM: "%d bulan",
              y: "setahun",
              yy: "%d tahun",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return ms;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/mt.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Maltese (Malta) [mt]
        //! author : Alessandro Maruccia : https://github.com/alesma

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var mt = moment.defineLocale("mt", {
            months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split(
              "_"
            ),
            monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split(
              "_"
            ),
            weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split(
              "_"
            ),
            weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),
            weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Illum fil-]LT",
              nextDay: "[Għada fil-]LT",
              nextWeek: "dddd [fil-]LT",
              lastDay: "[Il-bieraħ fil-]LT",
              lastWeek: "dddd [li għadda] [fil-]LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "f’ %s",
              past: "%s ilu",
              s: "ftit sekondi",
              ss: "%d sekondi",
              m: "minuta",
              mm: "%d minuti",
              h: "siegħa",
              hh: "%d siegħat",
              d: "ġurnata",
              dd: "%d ġranet",
              M: "xahar",
              MM: "%d xhur",
              y: "sena",
              yy: "%d sni",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return mt;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/my.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Burmese [my]
        //! author : Squar team, mysquar.com
        //! author : David Rossellat : https://github.com/gholadr
        //! author : Tin Aung Lin : https://github.com/thanyawzinmin

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "၁",
              "2": "၂",
              "3": "၃",
              "4": "၄",
              "5": "၅",
              "6": "၆",
              "7": "၇",
              "8": "၈",
              "9": "၉",
              "0": "၀",
            },
            numberMap = {
              "၁": "1",
              "၂": "2",
              "၃": "3",
              "၄": "4",
              "၅": "5",
              "၆": "6",
              "၇": "7",
              "၈": "8",
              "၉": "9",
              "၀": "0",
            };

          var my = moment.defineLocale("my", {
            months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split(
              "_"
            ),
            monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split(
              "_"
            ),
            weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split(
              "_"
            ),
            weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
            weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),

            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[ယနေ.] LT [မှာ]",
              nextDay: "[မနက်ဖြန်] LT [မှာ]",
              nextWeek: "dddd LT [မှာ]",
              lastDay: "[မနေ.က] LT [မှာ]",
              lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
              sameElse: "L",
            },
            relativeTime: {
              future: "လာမည့် %s မှာ",
              past: "လွန်ခဲ့သော %s က",
              s: "စက္ကန်.အနည်းငယ်",
              ss: "%d စက္ကန့်",
              m: "တစ်မိနစ်",
              mm: "%d မိနစ်",
              h: "တစ်နာရီ",
              hh: "%d နာရီ",
              d: "တစ်ရက်",
              dd: "%d ရက်",
              M: "တစ်လ",
              MM: "%d လ",
              y: "တစ်နှစ်",
              yy: "%d နှစ်",
            },
            preparse: function(string) {
              return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return my;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/nb.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Norwegian Bokmål [nb]
        //! authors : Espen Hovlandsdal : https://github.com/rexxars
        //!           Sigurd Gartmann : https://github.com/sigurdga
        //!           Stephen Ramthun : https://github.com/stephenramthun

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var nb = moment.defineLocale("nb", {
            months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split(
              "_"
            ),
            monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split(
              "_"
            ),
            weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
            weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY [kl.] HH:mm",
              LLLL: "dddd D. MMMM YYYY [kl.] HH:mm",
            },
            calendar: {
              sameDay: "[i dag kl.] LT",
              nextDay: "[i morgen kl.] LT",
              nextWeek: "dddd [kl.] LT",
              lastDay: "[i går kl.] LT",
              lastWeek: "[forrige] dddd [kl.] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "om %s",
              past: "%s siden",
              s: "noen sekunder",
              ss: "%d sekunder",
              m: "ett minutt",
              mm: "%d minutter",
              h: "en time",
              hh: "%d timer",
              d: "en dag",
              dd: "%d dager",
              M: "en måned",
              MM: "%d måneder",
              y: "ett år",
              yy: "%d år",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return nb;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ne.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Nepalese [ne]
        //! author : suvash : https://github.com/suvash

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "१",
              "2": "२",
              "3": "३",
              "4": "४",
              "5": "५",
              "6": "६",
              "7": "७",
              "8": "८",
              "9": "९",
              "0": "०",
            },
            numberMap = {
              "१": "1",
              "२": "2",
              "३": "3",
              "४": "4",
              "५": "5",
              "६": "6",
              "७": "7",
              "८": "8",
              "९": "9",
              "०": "0",
            };

          var ne = moment.defineLocale("ne", {
            months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split(
              "_"
            ),
            monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split(
              "_"
            ),
            weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
            weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "Aको h:mm बजे",
              LTS: "Aको h:mm:ss बजे",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, Aको h:mm बजे",
              LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे",
            },
            preparse: function(string) {
              return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "राति") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "बिहान") {
                return hour;
              } else if (meridiem === "दिउँसो") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "साँझ") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 3) {
                return "राति";
              } else if (hour < 12) {
                return "बिहान";
              } else if (hour < 16) {
                return "दिउँसो";
              } else if (hour < 20) {
                return "साँझ";
              } else {
                return "राति";
              }
            },
            calendar: {
              sameDay: "[आज] LT",
              nextDay: "[भोलि] LT",
              nextWeek: "[आउँदो] dddd[,] LT",
              lastDay: "[हिजो] LT",
              lastWeek: "[गएको] dddd[,] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%sमा",
              past: "%s अगाडि",
              s: "केही क्षण",
              ss: "%d सेकेण्ड",
              m: "एक मिनेट",
              mm: "%d मिनेट",
              h: "एक घण्टा",
              hh: "%d घण्टा",
              d: "एक दिन",
              dd: "%d दिन",
              M: "एक महिना",
              MM: "%d महिना",
              y: "एक बर्ष",
              yy: "%d बर्ष",
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return ne;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/nl-be.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Dutch (Belgium) [nl-be]
        //! author : Joris Röling : https://github.com/jorisroling
        //! author : Jacob Middag : https://github.com/middagj

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split(
              "_"
            ),
            monthsParse = [
              /^jan/i,
              /^feb/i,
              /^maart|mrt.?$/i,
              /^apr/i,
              /^mei$/i,
              /^jun[i.]?$/i,
              /^jul[i.]?$/i,
              /^aug/i,
              /^sep/i,
              /^okt/i,
              /^nov/i,
              /^dec/i,
            ],
            monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

          var nlBe = moment.defineLocale("nl-be", {
            months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },

            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split(
              "_"
            ),
            weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
            weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[vandaag om] LT",
              nextDay: "[morgen om] LT",
              nextWeek: "dddd [om] LT",
              lastDay: "[gisteren om] LT",
              lastWeek: "[afgelopen] dddd [om] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "over %s",
              past: "%s geleden",
              s: "een paar seconden",
              ss: "%d seconden",
              m: "één minuut",
              mm: "%d minuten",
              h: "één uur",
              hh: "%d uur",
              d: "één dag",
              dd: "%d dagen",
              M: "één maand",
              MM: "%d maanden",
              y: "één jaar",
              yy: "%d jaar",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(number) {
              return (
                number +
                (number === 1 || number === 8 || number >= 20 ? "ste" : "de")
              );
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return nlBe;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/nl.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Dutch [nl]
        //! author : Joris Röling : https://github.com/jorisroling
        //! author : Jacob Middag : https://github.com/middagj

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split(
              "_"
            ),
            monthsParse = [
              /^jan/i,
              /^feb/i,
              /^maart|mrt.?$/i,
              /^apr/i,
              /^mei$/i,
              /^jun[i.]?$/i,
              /^jul[i.]?$/i,
              /^aug/i,
              /^sep/i,
              /^okt/i,
              /^nov/i,
              /^dec/i,
            ],
            monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

          var nl = moment.defineLocale("nl", {
            months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split(
              "_"
            ),
            monthsShort: function(m, format) {
              if (!m) {
                return monthsShortWithDots;
              } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
              } else {
                return monthsShortWithDots[m.month()];
              }
            },

            monthsRegex: monthsRegex,
            monthsShortRegex: monthsRegex,
            monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split(
              "_"
            ),
            weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
            weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD-MM-YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[vandaag om] LT",
              nextDay: "[morgen om] LT",
              nextWeek: "dddd [om] LT",
              lastDay: "[gisteren om] LT",
              lastWeek: "[afgelopen] dddd [om] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "over %s",
              past: "%s geleden",
              s: "een paar seconden",
              ss: "%d seconden",
              m: "één minuut",
              mm: "%d minuten",
              h: "één uur",
              hh: "%d uur",
              d: "één dag",
              dd: "%d dagen",
              M: "één maand",
              MM: "%d maanden",
              y: "één jaar",
              yy: "%d jaar",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(number) {
              return (
                number +
                (number === 1 || number === 8 || number >= 20 ? "ste" : "de")
              );
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return nl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/nn.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Nynorsk [nn]
        //! authors : https://github.com/mechuwind
        //!           Stephen Ramthun : https://github.com/stephenramthun

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var nn = moment.defineLocale("nn", {
            months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split(
              "_"
            ),
            monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split(
              "_"
            ),
            weekdaysShort: "su._må._ty._on._to._fr._lau.".split("_"),
            weekdaysMin: "su_må_ty_on_to_fr_la".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY [kl.] H:mm",
              LLLL: "dddd D. MMMM YYYY [kl.] HH:mm",
            },
            calendar: {
              sameDay: "[I dag klokka] LT",
              nextDay: "[I morgon klokka] LT",
              nextWeek: "dddd [klokka] LT",
              lastDay: "[I går klokka] LT",
              lastWeek: "[Føregåande] dddd [klokka] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "om %s",
              past: "%s sidan",
              s: "nokre sekund",
              ss: "%d sekund",
              m: "eit minutt",
              mm: "%d minutt",
              h: "ein time",
              hh: "%d timar",
              d: "ein dag",
              dd: "%d dagar",
              M: "ein månad",
              MM: "%d månader",
              y: "eit år",
              yy: "%d år",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return nn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/oc-lnc.js":
      /*!**********************************************!*\
  !*** ./node_modules/moment/locale/oc-lnc.js ***!
  \**********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Occitan, lengadocian dialecte [oc-lnc]
        //! author : Quentin PAGÈS : https://github.com/Quenty31

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ocLnc = moment.defineLocale("oc-lnc", {
            months: {
              standalone: "genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split(
                "_"
              ),
              format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
                "_"
              ),
              isFormat: /D[oD]?(\s)+MMMM/,
            },
            monthsShort: "gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split(
              "_"
            ),
            weekdaysShort: "dg._dl._dm._dc._dj._dv._ds.".split("_"),
            weekdaysMin: "dg_dl_dm_dc_dj_dv_ds".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM [de] YYYY",
              ll: "D MMM YYYY",
              LLL: "D MMMM [de] YYYY [a] H:mm",
              lll: "D MMM YYYY, H:mm",
              LLLL: "dddd D MMMM [de] YYYY [a] H:mm",
              llll: "ddd D MMM YYYY, H:mm",
            },
            calendar: {
              sameDay: "[uèi a] LT",
              nextDay: "[deman a] LT",
              nextWeek: "dddd [a] LT",
              lastDay: "[ièr a] LT",
              lastWeek: "dddd [passat a] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "d'aquí %s",
              past: "fa %s",
              s: "unas segondas",
              ss: "%d segondas",
              m: "una minuta",
              mm: "%d minutas",
              h: "una ora",
              hh: "%d oras",
              d: "un jorn",
              dd: "%d jorns",
              M: "un mes",
              MM: "%d meses",
              y: "un an",
              yy: "%d ans",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
            ordinal: function(number, period) {
              var output =
                number === 1
                  ? "r"
                  : number === 2
                  ? "n"
                  : number === 3
                  ? "r"
                  : number === 4
                  ? "t"
                  : "è";
              if (period === "w" || period === "W") {
                output = "a";
              }
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4,
            },
          });

          return ocLnc;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/pa-in.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Punjabi (India) [pa-in]
        //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "੧",
              "2": "੨",
              "3": "੩",
              "4": "੪",
              "5": "੫",
              "6": "੬",
              "7": "੭",
              "8": "੮",
              "9": "੯",
              "0": "੦",
            },
            numberMap = {
              "੧": "1",
              "੨": "2",
              "੩": "3",
              "੪": "4",
              "੫": "5",
              "੬": "6",
              "੭": "7",
              "੮": "8",
              "੯": "9",
              "੦": "0",
            };

          var paIn = moment.defineLocale("pa-in", {
            // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
            months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split(
              "_"
            ),
            monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split(
              "_"
            ),
            weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split(
              "_"
            ),
            weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
            weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
            longDateFormat: {
              LT: "A h:mm ਵਜੇ",
              LTS: "A h:mm:ss ਵਜੇ",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
              LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ",
            },
            calendar: {
              sameDay: "[ਅਜ] LT",
              nextDay: "[ਕਲ] LT",
              nextWeek: "[ਅਗਲਾ] dddd, LT",
              lastDay: "[ਕਲ] LT",
              lastWeek: "[ਪਿਛਲੇ] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s ਵਿੱਚ",
              past: "%s ਪਿਛਲੇ",
              s: "ਕੁਝ ਸਕਿੰਟ",
              ss: "%d ਸਕਿੰਟ",
              m: "ਇਕ ਮਿੰਟ",
              mm: "%d ਮਿੰਟ",
              h: "ਇੱਕ ਘੰਟਾ",
              hh: "%d ਘੰਟੇ",
              d: "ਇੱਕ ਦਿਨ",
              dd: "%d ਦਿਨ",
              M: "ਇੱਕ ਮਹੀਨਾ",
              MM: "%d ਮਹੀਨੇ",
              y: "ਇੱਕ ਸਾਲ",
              yy: "%d ਸਾਲ",
            },
            preparse: function(string) {
              return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
            // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
            meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "ਰਾਤ") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "ਸਵੇਰ") {
                return hour;
              } else if (meridiem === "ਦੁਪਹਿਰ") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "ਸ਼ਾਮ") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "ਰਾਤ";
              } else if (hour < 10) {
                return "ਸਵੇਰ";
              } else if (hour < 17) {
                return "ਦੁਪਹਿਰ";
              } else if (hour < 20) {
                return "ਸ਼ਾਮ";
              } else {
                return "ਰਾਤ";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return paIn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/pl.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Polish [pl]
        //! author : Rafal Hirsz : https://github.com/evoL

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var monthsNominative = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split(
              "_"
            ),
            monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split(
              "_"
            );
          function plural(n) {
            return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
          }
          function translate(number, withoutSuffix, key) {
            var result = number + " ";
            switch (key) {
              case "ss":
                return result + (plural(number) ? "sekundy" : "sekund");
              case "m":
                return withoutSuffix ? "minuta" : "minutę";
              case "mm":
                return result + (plural(number) ? "minuty" : "minut");
              case "h":
                return withoutSuffix ? "godzina" : "godzinę";
              case "hh":
                return result + (plural(number) ? "godziny" : "godzin");
              case "MM":
                return result + (plural(number) ? "miesiące" : "miesięcy");
              case "yy":
                return result + (plural(number) ? "lata" : "lat");
            }
          }

          var pl = moment.defineLocale("pl", {
            months: function(momentToFormat, format) {
              if (!momentToFormat) {
                return monthsNominative;
              } else if (format === "") {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return (
                  "(" +
                  monthsSubjective[momentToFormat.month()] +
                  "|" +
                  monthsNominative[momentToFormat.month()] +
                  ")"
                );
              } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
              } else {
                return monthsNominative[momentToFormat.month()];
              }
            },
            monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split(
              "_"
            ),
            weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split(
              "_"
            ),
            weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
            weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Dziś o] LT",
              nextDay: "[Jutro o] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[W niedzielę o] LT";

                  case 2:
                    return "[We wtorek o] LT";

                  case 3:
                    return "[W środę o] LT";

                  case 6:
                    return "[W sobotę o] LT";

                  default:
                    return "[W] dddd [o] LT";
                }
              },
              lastDay: "[Wczoraj o] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[W zeszłą niedzielę o] LT";
                  case 3:
                    return "[W zeszłą środę o] LT";
                  case 6:
                    return "[W zeszłą sobotę o] LT";
                  default:
                    return "[W zeszły] dddd [o] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "%s temu",
              s: "kilka sekund",
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: "1 dzień",
              dd: "%d dni",
              M: "miesiąc",
              MM: translate,
              y: "rok",
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return pl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/pt-br.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Portuguese (Brazil) [pt-br]
        //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ptBr = moment.defineLocale("pt-br", {
            months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split(
              "_"
            ),
            monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split(
              "_"
            ),
            weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split(
              "_"
            ),
            weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"),
            weekdaysMin: "do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
              LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm",
            },
            calendar: {
              sameDay: "[Hoje às] LT",
              nextDay: "[Amanhã às] LT",
              nextWeek: "dddd [às] LT",
              lastDay: "[Ontem às] LT",
              lastWeek: function() {
                return this.day() === 0 || this.day() === 6
                  ? "[Último] dddd [às] LT" // Saturday + Sunday
                  : "[Última] dddd [às] LT"; // Monday - Friday
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "em %s",
              past: "há %s",
              s: "poucos segundos",
              ss: "%d segundos",
              m: "um minuto",
              mm: "%d minutos",
              h: "uma hora",
              hh: "%d horas",
              d: "um dia",
              dd: "%d dias",
              M: "um mês",
              MM: "%d meses",
              y: "um ano",
              yy: "%d anos",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
          });

          return ptBr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/pt.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Portuguese [pt]
        //! author : Jefferson : https://github.com/jalex79

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var pt = moment.defineLocale("pt", {
            months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split(
              "_"
            ),
            monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split(
              "_"
            ),
            weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split(
              "_"
            ),
            weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
            weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D [de] MMMM [de] YYYY",
              LLL: "D [de] MMMM [de] YYYY HH:mm",
              LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Hoje às] LT",
              nextDay: "[Amanhã às] LT",
              nextWeek: "dddd [às] LT",
              lastDay: "[Ontem às] LT",
              lastWeek: function() {
                return this.day() === 0 || this.day() === 6
                  ? "[Último] dddd [às] LT" // Saturday + Sunday
                  : "[Última] dddd [às] LT"; // Monday - Friday
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "em %s",
              past: "há %s",
              s: "segundos",
              ss: "%d segundos",
              m: "um minuto",
              mm: "%d minutos",
              h: "uma hora",
              hh: "%d horas",
              d: "um dia",
              dd: "%d dias",
              M: "um mês",
              MM: "%d meses",
              y: "um ano",
              yy: "%d anos",
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return pt;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ro.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Romanian [ro]
        //! author : Vlad Gurdiga : https://github.com/gurdiga
        //! author : Valentin Agachi : https://github.com/avaly
        //! author : Emanuel Cepoi : https://github.com/cepem

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
                ss: "secunde",
                mm: "minute",
                hh: "ore",
                dd: "zile",
                MM: "luni",
                yy: "ani",
              },
              separator = " ";
            if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
              separator = " de ";
            }
            return number + separator + format[key];
          }

          var ro = moment.defineLocale("ro", {
            months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split(
              "_"
            ),
            monthsShort: "ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split(
              "_"
            ),
            weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
            weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY H:mm",
              LLLL: "dddd, D MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[azi la] LT",
              nextDay: "[mâine la] LT",
              nextWeek: "dddd [la] LT",
              lastDay: "[ieri la] LT",
              lastWeek: "[fosta] dddd [la] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "peste %s",
              past: "%s în urmă",
              s: "câteva secunde",
              ss: relativeTimeWithPlural,
              m: "un minut",
              mm: relativeTimeWithPlural,
              h: "o oră",
              hh: relativeTimeWithPlural,
              d: "o zi",
              dd: relativeTimeWithPlural,
              M: "o lună",
              MM: relativeTimeWithPlural,
              y: "un an",
              yy: relativeTimeWithPlural,
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return ro;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ru.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Russian [ru]
        //! author : Viktorminator : https://github.com/Viktorminator
        //! Author : Menelion Elensúle : https://github.com/Oire
        //! author : Коренберг Марк : https://github.com/socketpair

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function plural(word, num) {
            var forms = word.split("_");
            return num % 10 === 1 && num % 100 !== 11
              ? forms[0]
              : num % 10 >= 2 &&
                num % 10 <= 4 &&
                (num % 100 < 10 || num % 100 >= 20)
              ? forms[1]
              : forms[2];
          }
          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              ss: withoutSuffix
                ? "секунда_секунды_секунд"
                : "секунду_секунды_секунд",
              mm: withoutSuffix ? "минута_минуты_минут" : "минуту_минуты_минут",
              hh: "час_часа_часов",
              dd: "день_дня_дней",
              MM: "месяц_месяца_месяцев",
              yy: "год_года_лет",
            };
            if (key === "m") {
              return withoutSuffix ? "минута" : "минуту";
            } else {
              return number + " " + plural(format[key], +number);
            }
          }
          var monthsParse = [
            /^янв/i,
            /^фев/i,
            /^мар/i,
            /^апр/i,
            /^ма[йя]/i,
            /^июн/i,
            /^июл/i,
            /^авг/i,
            /^сен/i,
            /^окт/i,
            /^ноя/i,
            /^дек/i,
          ];

          // http://new.gramota.ru/spravka/rules/139-prop : § 103
          // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
          // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
          var ru = moment.defineLocale("ru", {
            months: {
              format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split(
                "_"
              ),
              standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split(
                "_"
              ),
            },
            monthsShort: {
              // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
              format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split(
                "_"
              ),
              standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split(
                "_"
              ),
            },
            weekdays: {
              standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split(
                "_"
              ),
              format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split(
                "_"
              ),
              isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/,
            },
            weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
            weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
            monthsParse: monthsParse,
            longMonthsParse: monthsParse,
            shortMonthsParse: monthsParse,

            // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
            monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

            // копия предыдущего
            monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

            // полные названия с падежами
            monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

            // Выражение, которое соотвествует только сокращённым формам
            monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY г.",
              LLL: "D MMMM YYYY г., H:mm",
              LLLL: "dddd, D MMMM YYYY г., H:mm",
            },
            calendar: {
              sameDay: "[Сегодня, в] LT",
              nextDay: "[Завтра, в] LT",
              lastDay: "[Вчера, в] LT",
              nextWeek: function(now) {
                if (now.week() !== this.week()) {
                  switch (this.day()) {
                    case 0:
                      return "[В следующее] dddd, [в] LT";
                    case 1:
                    case 2:
                    case 4:
                      return "[В следующий] dddd, [в] LT";
                    case 3:
                    case 5:
                    case 6:
                      return "[В следующую] dddd, [в] LT";
                  }
                } else {
                  if (this.day() === 2) {
                    return "[Во] dddd, [в] LT";
                  } else {
                    return "[В] dddd, [в] LT";
                  }
                }
              },
              lastWeek: function(now) {
                if (now.week() !== this.week()) {
                  switch (this.day()) {
                    case 0:
                      return "[В прошлое] dddd, [в] LT";
                    case 1:
                    case 2:
                    case 4:
                      return "[В прошлый] dddd, [в] LT";
                    case 3:
                    case 5:
                    case 6:
                      return "[В прошлую] dddd, [в] LT";
                  }
                } else {
                  if (this.day() === 2) {
                    return "[Во] dddd, [в] LT";
                  } else {
                    return "[В] dddd, [в] LT";
                  }
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "через %s",
              past: "%s назад",
              s: "несколько секунд",
              ss: relativeTimeWithPlural,
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: "час",
              hh: relativeTimeWithPlural,
              d: "день",
              dd: relativeTimeWithPlural,
              M: "месяц",
              MM: relativeTimeWithPlural,
              y: "год",
              yy: relativeTimeWithPlural,
            },
            meridiemParse: /ночи|утра|дня|вечера/i,
            isPM: function(input) {
              return /^(дня|вечера)$/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "ночи";
              } else if (hour < 12) {
                return "утра";
              } else if (hour < 17) {
                return "дня";
              } else {
                return "вечера";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
            ordinal: function(number, period) {
              switch (period) {
                case "M":
                case "d":
                case "DDD":
                  return number + "-й";
                case "D":
                  return number + "-го";
                case "w":
                case "W":
                  return number + "-я";
                default:
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return ru;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sd.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Sindhi [sd]
        //! author : Narain Sagar : https://github.com/narainsagar

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = [
              "جنوري",
              "فيبروري",
              "مارچ",
              "اپريل",
              "مئي",
              "جون",
              "جولاءِ",
              "آگسٽ",
              "سيپٽمبر",
              "آڪٽوبر",
              "نومبر",
              "ڊسمبر",
            ],
            days = ["آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر"];

          var sd = moment.defineLocale("sd", {
            months: months,
            monthsShort: months,
            weekdays: days,
            weekdaysShort: days,
            weekdaysMin: days,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd، D MMMM YYYY HH:mm",
            },
            meridiemParse: /صبح|شام/,
            isPM: function(input) {
              return "شام" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "صبح";
              }
              return "شام";
            },
            calendar: {
              sameDay: "[اڄ] LT",
              nextDay: "[سڀاڻي] LT",
              nextWeek: "dddd [اڳين هفتي تي] LT",
              lastDay: "[ڪالهه] LT",
              lastWeek: "[گزريل هفتي] dddd [تي] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s پوء",
              past: "%s اڳ",
              s: "چند سيڪنڊ",
              ss: "%d سيڪنڊ",
              m: "هڪ منٽ",
              mm: "%d منٽ",
              h: "هڪ ڪلاڪ",
              hh: "%d ڪلاڪ",
              d: "هڪ ڏينهن",
              dd: "%d ڏينهن",
              M: "هڪ مهينو",
              MM: "%d مهينا",
              y: "هڪ سال",
              yy: "%d سال",
            },
            preparse: function(string) {
              return string.replace(/،/g, ",");
            },
            postformat: function(string) {
              return string.replace(/,/g, "،");
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return sd;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/se.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Northern Sami [se]
        //! authors : Bård Rolstad Henriksen : https://github.com/karamell

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var se = moment.defineLocale("se", {
            months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split(
              "_"
            ),
            monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split(
              "_"
            ),
            weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split(
              "_"
            ),
            weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
            weekdaysMin: "s_v_m_g_d_b_L".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "MMMM D. [b.] YYYY",
              LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
              LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm",
            },
            calendar: {
              sameDay: "[otne ti] LT",
              nextDay: "[ihttin ti] LT",
              nextWeek: "dddd [ti] LT",
              lastDay: "[ikte ti] LT",
              lastWeek: "[ovddit] dddd [ti] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s geažes",
              past: "maŋit %s",
              s: "moadde sekunddat",
              ss: "%d sekunddat",
              m: "okta minuhta",
              mm: "%d minuhtat",
              h: "okta diimmu",
              hh: "%d diimmut",
              d: "okta beaivi",
              dd: "%d beaivvit",
              M: "okta mánnu",
              MM: "%d mánut",
              y: "okta jahki",
              yy: "%d jagit",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return se;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/si.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Sinhalese [si]
        //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          /*jshint -W100*/
          var si = moment.defineLocale("si", {
            months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split(
              "_"
            ),
            monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split(
              "_"
            ),
            weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split(
              "_"
            ),
            weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),
            weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "a h:mm",
              LTS: "a h:mm:ss",
              L: "YYYY/MM/DD",
              LL: "YYYY MMMM D",
              LLL: "YYYY MMMM D, a h:mm",
              LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss",
            },
            calendar: {
              sameDay: "[අද] LT[ට]",
              nextDay: "[හෙට] LT[ට]",
              nextWeek: "dddd LT[ට]",
              lastDay: "[ඊයේ] LT[ට]",
              lastWeek: "[පසුගිය] dddd LT[ට]",
              sameElse: "L",
            },
            relativeTime: {
              future: "%sකින්",
              past: "%sකට පෙර",
              s: "තත්පර කිහිපය",
              ss: "තත්පර %d",
              m: "මිනිත්තුව",
              mm: "මිනිත්තු %d",
              h: "පැය",
              hh: "පැය %d",
              d: "දිනය",
              dd: "දින %d",
              M: "මාසය",
              MM: "මාස %d",
              y: "වසර",
              yy: "වසර %d",
            },
            dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
            ordinal: function(number) {
              return number + " වැනි";
            },
            meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
            isPM: function(input) {
              return input === "ප.ව." || input === "පස් වරු";
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? "ප.ව." : "පස් වරු";
              } else {
                return isLower ? "පෙ.ව." : "පෙර වරු";
              }
            },
          });

          return si;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sk.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Slovak [sk]
        //! author : Martin Minka : https://github.com/k2s
        //! based on work of petrbela : https://github.com/petrbela

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split(
              "_"
            ),
            monthsShort = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split(
              "_"
            );
          function plural(n) {
            return n > 1 && n < 5;
          }
          function translate(number, withoutSuffix, key, isFuture) {
            var result = number + " ";
            switch (key) {
              case "s": // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture
                  ? "pár sekúnd"
                  : "pár sekundami";
              case "ss": // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "sekundy" : "sekúnd");
                } else {
                  return result + "sekundami";
                }
              case "m": // a minute / in a minute / a minute ago
                return withoutSuffix
                  ? "minúta"
                  : isFuture
                  ? "minútu"
                  : "minútou";
              case "mm": // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "minúty" : "minút");
                } else {
                  return result + "minútami";
                }
              case "h": // an hour / in an hour / an hour ago
                return withoutSuffix
                  ? "hodina"
                  : isFuture
                  ? "hodinu"
                  : "hodinou";
              case "hh": // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "hodiny" : "hodín");
                } else {
                  return result + "hodinami";
                }
              case "d": // a day / in a day / a day ago
                return withoutSuffix || isFuture ? "deň" : "dňom";
              case "dd": // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "dni" : "dní");
                } else {
                  return result + "dňami";
                }
              case "M": // a month / in a month / a month ago
                return withoutSuffix || isFuture ? "mesiac" : "mesiacom";
              case "MM": // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "mesiace" : "mesiacov");
                } else {
                  return result + "mesiacmi";
                }
              case "y": // a year / in a year / a year ago
                return withoutSuffix || isFuture ? "rok" : "rokom";
              case "yy": // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? "roky" : "rokov");
                } else {
                  return result + "rokmi";
                }
            }
          }

          var sk = moment.defineLocale("sk", {
            months: months,
            monthsShort: monthsShort,
            weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split(
              "_"
            ),
            weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
            weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[dnes o] LT",
              nextDay: "[zajtra o] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[v nedeľu o] LT";
                  case 1:
                  case 2:
                    return "[v] dddd [o] LT";
                  case 3:
                    return "[v stredu o] LT";
                  case 4:
                    return "[vo štvrtok o] LT";
                  case 5:
                    return "[v piatok o] LT";
                  case 6:
                    return "[v sobotu o] LT";
                }
              },
              lastDay: "[včera o] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[minulú nedeľu o] LT";
                  case 1:
                  case 2:
                    return "[minulý] dddd [o] LT";
                  case 3:
                    return "[minulú stredu o] LT";
                  case 4:
                  case 5:
                    return "[minulý] dddd [o] LT";
                  case 6:
                    return "[minulú sobotu o] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "pred %s",
              s: translate,
              ss: translate,
              m: translate,
              mm: translate,
              h: translate,
              hh: translate,
              d: translate,
              dd: translate,
              M: translate,
              MM: translate,
              y: translate,
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return sk;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sl.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Slovenian [sl]
        //! author : Robert Sedovšek : https://github.com/sedovsek

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var result = number + " ";
            switch (key) {
              case "s":
                return withoutSuffix || isFuture
                  ? "nekaj sekund"
                  : "nekaj sekundami";
              case "ss":
                if (number === 1) {
                  result += withoutSuffix ? "sekundo" : "sekundi";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "sekundi" : "sekundah";
                } else if (number < 5) {
                  result += withoutSuffix || isFuture ? "sekunde" : "sekundah";
                } else {
                  result += "sekund";
                }
                return result;
              case "m":
                return withoutSuffix ? "ena minuta" : "eno minuto";
              case "mm":
                if (number === 1) {
                  result += withoutSuffix ? "minuta" : "minuto";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "minuti" : "minutama";
                } else if (number < 5) {
                  result += withoutSuffix || isFuture ? "minute" : "minutami";
                } else {
                  result += withoutSuffix || isFuture ? "minut" : "minutami";
                }
                return result;
              case "h":
                return withoutSuffix ? "ena ura" : "eno uro";
              case "hh":
                if (number === 1) {
                  result += withoutSuffix ? "ura" : "uro";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "uri" : "urama";
                } else if (number < 5) {
                  result += withoutSuffix || isFuture ? "ure" : "urami";
                } else {
                  result += withoutSuffix || isFuture ? "ur" : "urami";
                }
                return result;
              case "d":
                return withoutSuffix || isFuture ? "en dan" : "enim dnem";
              case "dd":
                if (number === 1) {
                  result += withoutSuffix || isFuture ? "dan" : "dnem";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "dni" : "dnevoma";
                } else {
                  result += withoutSuffix || isFuture ? "dni" : "dnevi";
                }
                return result;
              case "M":
                return withoutSuffix || isFuture ? "en mesec" : "enim mesecem";
              case "MM":
                if (number === 1) {
                  result += withoutSuffix || isFuture ? "mesec" : "mesecem";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "meseca" : "mesecema";
                } else if (number < 5) {
                  result += withoutSuffix || isFuture ? "mesece" : "meseci";
                } else {
                  result += withoutSuffix || isFuture ? "mesecev" : "meseci";
                }
                return result;
              case "y":
                return withoutSuffix || isFuture ? "eno leto" : "enim letom";
              case "yy":
                if (number === 1) {
                  result += withoutSuffix || isFuture ? "leto" : "letom";
                } else if (number === 2) {
                  result += withoutSuffix || isFuture ? "leti" : "letoma";
                } else if (number < 5) {
                  result += withoutSuffix || isFuture ? "leta" : "leti";
                } else {
                  result += withoutSuffix || isFuture ? "let" : "leti";
                }
                return result;
            }
          }

          var sl = moment.defineLocale("sl", {
            months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split(
              "_"
            ),
            monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split(
              "_"
            ),
            weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
            weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD. MM. YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[danes ob] LT",
              nextDay: "[jutri ob] LT",

              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[v] [nedeljo] [ob] LT";
                  case 3:
                    return "[v] [sredo] [ob] LT";
                  case 6:
                    return "[v] [soboto] [ob] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[v] dddd [ob] LT";
                }
              },
              lastDay: "[včeraj ob] LT",
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[prejšnjo] [nedeljo] [ob] LT";
                  case 3:
                    return "[prejšnjo] [sredo] [ob] LT";
                  case 6:
                    return "[prejšnjo] [soboto] [ob] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[prejšnji] dddd [ob] LT";
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "čez %s",
              past: "pred %s",
              s: processRelativeTime,
              ss: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return sl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sq.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Albanian [sq]
        //! author : Flakërim Ismani : https://github.com/flakerimi
        //! author : Menelion Elensúle : https://github.com/Oire
        //! author : Oerd Cukalla : https://github.com/oerd

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var sq = moment.defineLocale("sq", {
            months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split(
              "_"
            ),
            monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split(
              "_"
            ),
            weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split(
              "_"
            ),
            weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
            weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
            weekdaysParseExact: true,
            meridiemParse: /PD|MD/,
            isPM: function(input) {
              return input.charAt(0) === "M";
            },
            meridiem: function(hours, minutes, isLower) {
              return hours < 12 ? "PD" : "MD";
            },
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Sot në] LT",
              nextDay: "[Nesër në] LT",
              nextWeek: "dddd [në] LT",
              lastDay: "[Dje në] LT",
              lastWeek: "dddd [e kaluar në] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "në %s",
              past: "%s më parë",
              s: "disa sekonda",
              ss: "%d sekonda",
              m: "një minutë",
              mm: "%d minuta",
              h: "një orë",
              hh: "%d orë",
              d: "një ditë",
              dd: "%d ditë",
              M: "një muaj",
              MM: "%d muaj",
              y: "një vit",
              yy: "%d vite",
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return sq;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sr-cyrl.js":
      /*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Serbian Cyrillic [sr-cyrl]
        //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var translator = {
            words: {
              //Different grammatical cases
              ss: ["секунда", "секунде", "секунди"],
              m: ["један минут", "једне минуте"],
              mm: ["минут", "минуте", "минута"],
              h: ["један сат", "једног сата"],
              hh: ["сат", "сата", "сати"],
              dd: ["дан", "дана", "дана"],
              MM: ["месец", "месеца", "месеци"],
              yy: ["година", "године", "година"],
            },
            correctGrammaticalCase: function(number, wordKey) {
              return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
            },
            translate: function(number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return (
                  number +
                  " " +
                  translator.correctGrammaticalCase(number, wordKey)
                );
              }
            },
          };

          var srCyrl = moment.defineLocale("sr-cyrl", {
            months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split(
              "_"
            ),
            monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split(
              "_"
            ),
            weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
            weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[данас у] LT",
              nextDay: "[сутра у] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[у] [недељу] [у] LT";
                  case 3:
                    return "[у] [среду] [у] LT";
                  case 6:
                    return "[у] [суботу] [у] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[у] dddd [у] LT";
                }
              },
              lastDay: "[јуче у] LT",
              lastWeek: function() {
                var lastWeekDays = [
                  "[прошле] [недеље] [у] LT",
                  "[прошлог] [понедељка] [у] LT",
                  "[прошлог] [уторка] [у] LT",
                  "[прошле] [среде] [у] LT",
                  "[прошлог] [четвртка] [у] LT",
                  "[прошлог] [петка] [у] LT",
                  "[прошле] [суботе] [у] LT",
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "за %s",
              past: "пре %s",
              s: "неколико секунди",
              ss: translator.translate,
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: "дан",
              dd: translator.translate,
              M: "месец",
              MM: translator.translate,
              y: "годину",
              yy: translator.translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return srCyrl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sr.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Serbian [sr]
        //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var translator = {
            words: {
              //Different grammatical cases
              ss: ["sekunda", "sekunde", "sekundi"],
              m: ["jedan minut", "jedne minute"],
              mm: ["minut", "minute", "minuta"],
              h: ["jedan sat", "jednog sata"],
              hh: ["sat", "sata", "sati"],
              dd: ["dan", "dana", "dana"],
              MM: ["mesec", "meseca", "meseci"],
              yy: ["godina", "godine", "godina"],
            },
            correctGrammaticalCase: function(number, wordKey) {
              return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
            },
            translate: function(number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                return (
                  number +
                  " " +
                  translator.correctGrammaticalCase(number, wordKey)
                );
              }
            },
          };

          var sr = moment.defineLocale("sr", {
            months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split(
              "_"
            ),
            monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split(
              "_"
            ),
            weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM YYYY",
              LLL: "D. MMMM YYYY H:mm",
              LLLL: "dddd, D. MMMM YYYY H:mm",
            },
            calendar: {
              sameDay: "[danas u] LT",
              nextDay: "[sutra u] LT",
              nextWeek: function() {
                switch (this.day()) {
                  case 0:
                    return "[u] [nedelju] [u] LT";
                  case 3:
                    return "[u] [sredu] [u] LT";
                  case 6:
                    return "[u] [subotu] [u] LT";
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    return "[u] dddd [u] LT";
                }
              },
              lastDay: "[juče u] LT",
              lastWeek: function() {
                var lastWeekDays = [
                  "[prošle] [nedelje] [u] LT",
                  "[prošlog] [ponedeljka] [u] LT",
                  "[prošlog] [utorka] [u] LT",
                  "[prošle] [srede] [u] LT",
                  "[prošlog] [četvrtka] [u] LT",
                  "[prošlog] [petka] [u] LT",
                  "[prošle] [subote] [u] LT",
                ];
                return lastWeekDays[this.day()];
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "za %s",
              past: "pre %s",
              s: "nekoliko sekundi",
              ss: translator.translate,
              m: translator.translate,
              mm: translator.translate,
              h: translator.translate,
              hh: translator.translate,
              d: "dan",
              dd: translator.translate,
              M: "mesec",
              MM: translator.translate,
              y: "godinu",
              yy: translator.translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return sr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ss.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : siSwati [ss]
        //! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var ss = moment.defineLocale("ss", {
            months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
              "_"
            ),
            monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split(
              "_"
            ),
            weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split(
              "_"
            ),
            weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
            weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Namuhla nga] LT",
              nextDay: "[Kusasa nga] LT",
              nextWeek: "dddd [nga] LT",
              lastDay: "[Itolo nga] LT",
              lastWeek: "dddd [leliphelile] [nga] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "nga %s",
              past: "wenteka nga %s",
              s: "emizuzwana lomcane",
              ss: "%d mzuzwana",
              m: "umzuzu",
              mm: "%d emizuzu",
              h: "lihora",
              hh: "%d emahora",
              d: "lilanga",
              dd: "%d emalanga",
              M: "inyanga",
              MM: "%d tinyanga",
              y: "umnyaka",
              yy: "%d iminyaka",
            },
            meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
            meridiem: function(hours, minutes, isLower) {
              if (hours < 11) {
                return "ekuseni";
              } else if (hours < 15) {
                return "emini";
              } else if (hours < 19) {
                return "entsambama";
              } else {
                return "ebusuku";
              }
            },
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "ekuseni") {
                return hour;
              } else if (meridiem === "emini") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "entsambama" || meridiem === "ebusuku") {
                if (hour === 0) {
                  return 0;
                }
                return hour + 12;
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: "%d",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return ss;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sv.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Swedish [sv]
        //! author : Jens Alm : https://github.com/ulmus

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var sv = moment.defineLocale("sv", {
            months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split(
              "_"
            ),
            monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split(
              "_"
            ),
            weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split(
              "_"
            ),
            weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
            weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY [kl.] HH:mm",
              LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
              lll: "D MMM YYYY HH:mm",
              llll: "ddd D MMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Idag] LT",
              nextDay: "[Imorgon] LT",
              lastDay: "[Igår] LT",
              nextWeek: "[På] dddd LT",
              lastWeek: "[I] dddd[s] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "om %s",
              past: "för %s sedan",
              s: "några sekunder",
              ss: "%d sekunder",
              m: "en minut",
              mm: "%d minuter",
              h: "en timme",
              hh: "%d timmar",
              d: "en dag",
              dd: "%d dagar",
              M: "en månad",
              MM: "%d månader",
              y: "ett år",
              yy: "%d år",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? ":e"
                    : b === 1
                    ? ":a"
                    : b === 2
                    ? ":a"
                    : b === 3
                    ? ":e"
                    : ":e";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return sv;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/sw.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Swahili [sw]
        //! author : Fahad Kassim : https://github.com/fadsel

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var sw = moment.defineLocale("sw", {
            months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split(
              "_"
            ),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split(
              "_"
            ),
            weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split(
              "_"
            ),
            weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
            weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[leo saa] LT",
              nextDay: "[kesho saa] LT",
              nextWeek: "[wiki ijayo] dddd [saat] LT",
              lastDay: "[jana] LT",
              lastWeek: "[wiki iliyopita] dddd [saat] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s baadaye",
              past: "tokea %s",
              s: "hivi punde",
              ss: "sekunde %d",
              m: "dakika moja",
              mm: "dakika %d",
              h: "saa limoja",
              hh: "masaa %d",
              d: "siku moja",
              dd: "masiku %d",
              M: "mwezi mmoja",
              MM: "miezi %d",
              y: "mwaka mmoja",
              yy: "miaka %d",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return sw;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ta.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Tamil [ta]
        //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var symbolMap = {
              "1": "௧",
              "2": "௨",
              "3": "௩",
              "4": "௪",
              "5": "௫",
              "6": "௬",
              "7": "௭",
              "8": "௮",
              "9": "௯",
              "0": "௦",
            },
            numberMap = {
              "௧": "1",
              "௨": "2",
              "௩": "3",
              "௪": "4",
              "௫": "5",
              "௬": "6",
              "௭": "7",
              "௮": "8",
              "௯": "9",
              "௦": "0",
            };

          var ta = moment.defineLocale("ta", {
            months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split(
              "_"
            ),
            monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split(
              "_"
            ),
            weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split(
              "_"
            ),
            weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split(
              "_"
            ),
            weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, HH:mm",
              LLLL: "dddd, D MMMM YYYY, HH:mm",
            },
            calendar: {
              sameDay: "[இன்று] LT",
              nextDay: "[நாளை] LT",
              nextWeek: "dddd, LT",
              lastDay: "[நேற்று] LT",
              lastWeek: "[கடந்த வாரம்] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s இல்",
              past: "%s முன்",
              s: "ஒரு சில விநாடிகள்",
              ss: "%d விநாடிகள்",
              m: "ஒரு நிமிடம்",
              mm: "%d நிமிடங்கள்",
              h: "ஒரு மணி நேரம்",
              hh: "%d மணி நேரம்",
              d: "ஒரு நாள்",
              dd: "%d நாட்கள்",
              M: "ஒரு மாதம்",
              MM: "%d மாதங்கள்",
              y: "ஒரு வருடம்",
              yy: "%d ஆண்டுகள்",
            },
            dayOfMonthOrdinalParse: /\d{1,2}வது/,
            ordinal: function(number) {
              return number + "வது";
            },
            preparse: function(string) {
              return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(match) {
                return numberMap[match];
              });
            },
            postformat: function(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              });
            },
            // refer http://ta.wikipedia.org/s/1er1
            meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
            meridiem: function(hour, minute, isLower) {
              if (hour < 2) {
                return " யாமம்";
              } else if (hour < 6) {
                return " வைகறை"; // வைகறை
              } else if (hour < 10) {
                return " காலை"; // காலை
              } else if (hour < 14) {
                return " நண்பகல்"; // நண்பகல்
              } else if (hour < 18) {
                return " எற்பாடு"; // எற்பாடு
              } else if (hour < 22) {
                return " மாலை"; // மாலை
              } else {
                return " யாமம்";
              }
            },
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "யாமம்") {
                return hour < 2 ? hour : hour + 12;
              } else if (meridiem === "வைகறை" || meridiem === "காலை") {
                return hour;
              } else if (meridiem === "நண்பகல்") {
                return hour >= 10 ? hour : hour + 12;
              } else {
                return hour + 12;
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return ta;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/te.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Telugu [te]
        //! author : Krishna Chaitanya Thota : https://github.com/kcthota

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var te = moment.defineLocale("te", {
            months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split(
              "_"
            ),
            monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split(
              "_"
            ),
            weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
            weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
            longDateFormat: {
              LT: "A h:mm",
              LTS: "A h:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY, A h:mm",
              LLLL: "dddd, D MMMM YYYY, A h:mm",
            },
            calendar: {
              sameDay: "[నేడు] LT",
              nextDay: "[రేపు] LT",
              nextWeek: "dddd, LT",
              lastDay: "[నిన్న] LT",
              lastWeek: "[గత] dddd, LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s లో",
              past: "%s క్రితం",
              s: "కొన్ని క్షణాలు",
              ss: "%d సెకన్లు",
              m: "ఒక నిమిషం",
              mm: "%d నిమిషాలు",
              h: "ఒక గంట",
              hh: "%d గంటలు",
              d: "ఒక రోజు",
              dd: "%d రోజులు",
              M: "ఒక నెల",
              MM: "%d నెలలు",
              y: "ఒక సంవత్సరం",
              yy: "%d సంవత్సరాలు",
            },
            dayOfMonthOrdinalParse: /\d{1,2}వ/,
            ordinal: "%dవ",
            meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "రాత్రి") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "ఉదయం") {
                return hour;
              } else if (meridiem === "మధ్యాహ్నం") {
                return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === "సాయంత్రం") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "రాత్రి";
              } else if (hour < 10) {
                return "ఉదయం";
              } else if (hour < 17) {
                return "మధ్యాహ్నం";
              } else if (hour < 20) {
                return "సాయంత్రం";
              } else {
                return "రాత్రి";
              }
            },
            week: {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            },
          });

          return te;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tet.js":
      /*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Tetun Dili (East Timor) [tet]
        //! author : Joshua Brooks : https://github.com/joshbrooks
        //! author : Onorio De J. Afonso : https://github.com/marobo
        //! author : Sonia Simoes : https://github.com/soniasimoes

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var tet = moment.defineLocale("tet", {
            months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split(
              "_"
            ),
            monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split(
              "_"
            ),
            weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split(
              "_"
            ),
            weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),
            weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Ohin iha] LT",
              nextDay: "[Aban iha] LT",
              nextWeek: "dddd [iha] LT",
              lastDay: "[Horiseik iha] LT",
              lastWeek: "dddd [semana kotuk] [iha] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "iha %s",
              past: "%s liuba",
              s: "segundu balun",
              ss: "segundu %d",
              m: "minutu ida",
              mm: "minutu %d",
              h: "oras ida",
              hh: "oras %d",
              d: "loron ida",
              dd: "loron %d",
              M: "fulan ida",
              MM: "fulan %d",
              y: "tinan ida",
              yy: "tinan %d",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return tet;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tg.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Tajik [tg]
        //! author : Orif N. Jr. : https://github.com/orif-jr

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var suffixes = {
            0: "-ум",
            1: "-ум",
            2: "-юм",
            3: "-юм",
            4: "-ум",
            5: "-ум",
            6: "-ум",
            7: "-ум",
            8: "-ум",
            9: "-ум",
            10: "-ум",
            12: "-ум",
            13: "-ум",
            20: "-ум",
            30: "-юм",
            40: "-ум",
            50: "-ум",
            60: "-ум",
            70: "-ум",
            80: "-ум",
            90: "-ум",
            100: "-ум",
          };

          var tg = moment.defineLocale("tg", {
            months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split(
              "_"
            ),
            monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split(
              "_"
            ),
            weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split(
              "_"
            ),
            weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),
            weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Имрӯз соати] LT",
              nextDay: "[Пагоҳ соати] LT",
              lastDay: "[Дирӯз соати] LT",
              nextWeek: "dddd[и] [ҳафтаи оянда соати] LT",
              lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "баъди %s",
              past: "%s пеш",
              s: "якчанд сония",
              m: "як дақиқа",
              mm: "%d дақиқа",
              h: "як соат",
              hh: "%d соат",
              d: "як рӯз",
              dd: "%d рӯз",
              M: "як моҳ",
              MM: "%d моҳ",
              y: "як сол",
              yy: "%d сол",
            },
            meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (meridiem === "шаб") {
                return hour < 4 ? hour : hour + 12;
              } else if (meridiem === "субҳ") {
                return hour;
              } else if (meridiem === "рӯз") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "бегоҳ") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "шаб";
              } else if (hour < 11) {
                return "субҳ";
              } else if (hour < 16) {
                return "рӯз";
              } else if (hour < 19) {
                return "бегоҳ";
              } else {
                return "шаб";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
            ordinal: function(number) {
              var a = number % 10,
                b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 1th is the first week of the year.
            },
          });

          return tg;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/th.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Thai [th]
        //! author : Kridsada Thanabulpong : https://github.com/sirn

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var th = moment.defineLocale("th", {
            months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split(
              "_"
            ),
            monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split(
              "_"
            ),
            weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split(
              "_"
            ), // yes, three characters difference
            weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "H:mm",
              LTS: "H:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY เวลา H:mm",
              LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm",
            },
            meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
            isPM: function(input) {
              return input === "หลังเที่ยง";
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "ก่อนเที่ยง";
              } else {
                return "หลังเที่ยง";
              }
            },
            calendar: {
              sameDay: "[วันนี้ เวลา] LT",
              nextDay: "[พรุ่งนี้ เวลา] LT",
              nextWeek: "dddd[หน้า เวลา] LT",
              lastDay: "[เมื่อวานนี้ เวลา] LT",
              lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "อีก %s",
              past: "%sที่แล้ว",
              s: "ไม่กี่วินาที",
              ss: "%d วินาที",
              m: "1 นาที",
              mm: "%d นาที",
              h: "1 ชั่วโมง",
              hh: "%d ชั่วโมง",
              d: "1 วัน",
              dd: "%d วัน",
              M: "1 เดือน",
              MM: "%d เดือน",
              y: "1 ปี",
              yy: "%d ปี",
            },
          });

          return th;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tl-ph.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Tagalog (Philippines) [tl-ph]
        //! author : Dan Hagman : https://github.com/hagmandan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var tlPh = moment.defineLocale("tl-ph", {
            months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split(
              "_"
            ),
            monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split(
              "_"
            ),
            weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split(
              "_"
            ),
            weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
            weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "MM/D/YYYY",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY HH:mm",
              LLLL: "dddd, MMMM DD, YYYY HH:mm",
            },
            calendar: {
              sameDay: "LT [ngayong araw]",
              nextDay: "[Bukas ng] LT",
              nextWeek: "LT [sa susunod na] dddd",
              lastDay: "LT [kahapon]",
              lastWeek: "LT [noong nakaraang] dddd",
              sameElse: "L",
            },
            relativeTime: {
              future: "sa loob ng %s",
              past: "%s ang nakalipas",
              s: "ilang segundo",
              ss: "%d segundo",
              m: "isang minuto",
              mm: "%d minuto",
              h: "isang oras",
              hh: "%d oras",
              d: "isang araw",
              dd: "%d araw",
              M: "isang buwan",
              MM: "%d buwan",
              y: "isang taon",
              yy: "%d taon",
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function(number) {
              return number;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return tlPh;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tlh.js":
      /*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Klingon [tlh]
        //! author : Dominika Kruk : https://github.com/amaranthrose

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var numbersNouns = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split(
            "_"
          );

          function translateFuture(output) {
            var time = output;
            time =
              output.indexOf("jaj") !== -1
                ? time.slice(0, -3) + "leS"
                : output.indexOf("jar") !== -1
                ? time.slice(0, -3) + "waQ"
                : output.indexOf("DIS") !== -1
                ? time.slice(0, -3) + "nem"
                : time + " pIq";
            return time;
          }

          function translatePast(output) {
            var time = output;
            time =
              output.indexOf("jaj") !== -1
                ? time.slice(0, -3) + "Hu’"
                : output.indexOf("jar") !== -1
                ? time.slice(0, -3) + "wen"
                : output.indexOf("DIS") !== -1
                ? time.slice(0, -3) + "ben"
                : time + " ret";
            return time;
          }

          function translate(number, withoutSuffix, string, isFuture) {
            var numberNoun = numberAsNoun(number);
            switch (string) {
              case "ss":
                return numberNoun + " lup";
              case "mm":
                return numberNoun + " tup";
              case "hh":
                return numberNoun + " rep";
              case "dd":
                return numberNoun + " jaj";
              case "MM":
                return numberNoun + " jar";
              case "yy":
                return numberNoun + " DIS";
            }
          }

          function numberAsNoun(number) {
            var hundred = Math.floor((number % 1000) / 100),
              ten = Math.floor((number % 100) / 10),
              one = number % 10,
              word = "";
            if (hundred > 0) {
              word += numbersNouns[hundred] + "vatlh";
            }
            if (ten > 0) {
              word += (word !== "" ? " " : "") + numbersNouns[ten] + "maH";
            }
            if (one > 0) {
              word += (word !== "" ? " " : "") + numbersNouns[one];
            }
            return word === "" ? "pagh" : word;
          }

          var tlh = moment.defineLocale("tlh", {
            months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split(
              "_"
            ),
            monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split(
              "_"
            ),
            weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split(
              "_"
            ),
            weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split(
              "_"
            ),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[DaHjaj] LT",
              nextDay: "[wa’leS] LT",
              nextWeek: "LLL",
              lastDay: "[wa’Hu’] LT",
              lastWeek: "LLL",
              sameElse: "L",
            },
            relativeTime: {
              future: translateFuture,
              past: translatePast,
              s: "puS lup",
              ss: translate,
              m: "wa’ tup",
              mm: translate,
              h: "wa’ rep",
              hh: translate,
              d: "wa’ jaj",
              dd: translate,
              M: "wa’ jar",
              MM: translate,
              y: "wa’ DIS",
              yy: translate,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return tlh;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tr.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Turkish [tr]
        //! authors : Erhan Gundogan : https://github.com/erhangundogan,
        //!           Burak Yiğit Kaya: https://github.com/BYK

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var suffixes = {
            1: "'inci",
            5: "'inci",
            8: "'inci",
            70: "'inci",
            80: "'inci",
            2: "'nci",
            7: "'nci",
            20: "'nci",
            50: "'nci",
            3: "'üncü",
            4: "'üncü",
            100: "'üncü",
            6: "'ncı",
            9: "'uncu",
            10: "'uncu",
            30: "'uncu",
            60: "'ıncı",
            90: "'ıncı",
          };

          var tr = moment.defineLocale("tr", {
            months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split(
              "_"
            ),
            monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split(
              "_"
            ),
            weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split(
              "_"
            ),
            weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
            weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[bugün saat] LT",
              nextDay: "[yarın saat] LT",
              nextWeek: "[gelecek] dddd [saat] LT",
              lastDay: "[dün] LT",
              lastWeek: "[geçen] dddd [saat] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s sonra",
              past: "%s önce",
              s: "birkaç saniye",
              ss: "%d saniye",
              m: "bir dakika",
              mm: "%d dakika",
              h: "bir saat",
              hh: "%d saat",
              d: "bir gün",
              dd: "%d gün",
              M: "bir ay",
              MM: "%d ay",
              y: "bir yıl",
              yy: "%d yıl",
            },
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "Do":
                case "DD":
                  return number;
                default:
                  if (number === 0) {
                    // special case for zero
                    return number + "'ıncı";
                  }
                  var a = number % 10,
                    b = (number % 100) - a,
                    c = number >= 100 ? 100 : null;
                  return number + (suffixes[a] || suffixes[b] || suffixes[c]);
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return tr;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tzl.js":
      /*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Talossan [tzl]
        //! author : Robin van der Vliet : https://github.com/robin0van0der0v
        //! author : Iustì Canun

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
          // This is currently too difficult (maybe even impossible) to add.
          var tzl = moment.defineLocale("tzl", {
            months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split(
              "_"
            ),
            monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split(
              "_"
            ),
            weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split(
              "_"
            ),
            weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
            weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
            longDateFormat: {
              LT: "HH.mm",
              LTS: "HH.mm.ss",
              L: "DD.MM.YYYY",
              LL: "D. MMMM [dallas] YYYY",
              LLL: "D. MMMM [dallas] YYYY HH.mm",
              LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm",
            },
            meridiemParse: /d\'o|d\'a/i,
            isPM: function(input) {
              return "d'o" === input.toLowerCase();
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? "d'o" : "D'O";
              } else {
                return isLower ? "d'a" : "D'A";
              }
            },
            calendar: {
              sameDay: "[oxhi à] LT",
              nextDay: "[demà à] LT",
              nextWeek: "dddd [à] LT",
              lastDay: "[ieiri à] LT",
              lastWeek: "[sür el] dddd [lasteu à] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "osprei %s",
              past: "ja%s",
              s: processRelativeTime,
              ss: processRelativeTime,
              m: processRelativeTime,
              mm: processRelativeTime,
              h: processRelativeTime,
              hh: processRelativeTime,
              d: processRelativeTime,
              dd: processRelativeTime,
              M: processRelativeTime,
              MM: processRelativeTime,
              y: processRelativeTime,
              yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
              s: ["viensas secunds", "'iensas secunds"],
              ss: [number + " secunds", "" + number + " secunds"],
              m: ["'n míut", "'iens míut"],
              mm: [number + " míuts", "" + number + " míuts"],
              h: ["'n þora", "'iensa þora"],
              hh: [number + " þoras", "" + number + " þoras"],
              d: ["'n ziua", "'iensa ziua"],
              dd: [number + " ziuas", "" + number + " ziuas"],
              M: ["'n mes", "'iens mes"],
              MM: [number + " mesen", "" + number + " mesen"],
              y: ["'n ar", "'iens ar"],
              yy: [number + " ars", "" + number + " ars"],
            };
            return isFuture
              ? format[key][0]
              : withoutSuffix
              ? format[key][0]
              : format[key][1];
          }

          return tzl;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tzm-latn.js":
      /*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Central Atlas Tamazight Latin [tzm-latn]
        //! author : Abdel Said : https://github.com/abdelsaid

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var tzmLatn = moment.defineLocale("tzm-latn", {
            months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split(
              "_"
            ),
            monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split(
              "_"
            ),
            weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split(
              "_"
            ),
            weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split(
              "_"
            ),
            weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split(
              "_"
            ),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[asdkh g] LT",
              nextDay: "[aska g] LT",
              nextWeek: "dddd [g] LT",
              lastDay: "[assant g] LT",
              lastWeek: "dddd [g] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "dadkh s yan %s",
              past: "yan %s",
              s: "imik",
              ss: "%d imik",
              m: "minuḍ",
              mm: "%d minuḍ",
              h: "saɛa",
              hh: "%d tassaɛin",
              d: "ass",
              dd: "%d ossan",
              M: "ayowr",
              MM: "%d iyyirn",
              y: "asgas",
              yy: "%d isgasn",
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return tzmLatn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/tzm.js":
      /*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Central Atlas Tamazight [tzm]
        //! author : Abdel Said : https://github.com/abdelsaid

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var tzm = moment.defineLocale("tzm", {
            months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split(
              "_"
            ),
            monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split(
              "_"
            ),
            weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split(
              "_"
            ),
            weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split(
              "_"
            ),
            weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split(
              "_"
            ),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
              nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
              nextWeek: "dddd [ⴴ] LT",
              lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
              lastWeek: "dddd [ⴴ] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
              past: "ⵢⴰⵏ %s",
              s: "ⵉⵎⵉⴽ",
              ss: "%d ⵉⵎⵉⴽ",
              m: "ⵎⵉⵏⵓⴺ",
              mm: "%d ⵎⵉⵏⵓⴺ",
              h: "ⵙⴰⵄⴰ",
              hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
              d: "ⴰⵙⵙ",
              dd: "%d oⵙⵙⴰⵏ",
              M: "ⴰⵢoⵓⵔ",
              MM: "%d ⵉⵢⵢⵉⵔⵏ",
              y: "ⴰⵙⴳⴰⵙ",
              yy: "%d ⵉⵙⴳⴰⵙⵏ",
            },
            week: {
              dow: 6, // Saturday is the first day of the week.
              doy: 12, // The week that contains Jan 12th is the first week of the year.
            },
          });

          return tzm;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ug-cn.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js language configuration
        //! locale : Uyghur (China) [ug-cn]
        //! author: boyaq : https://github.com/boyaq

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js language configuration

          var ugCn = moment.defineLocale("ug-cn", {
            months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split(
              "_"
            ),
            monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split(
              "_"
            ),
            weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split(
              "_"
            ),
            weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
            weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY-MM-DD",
              LL: "YYYY-يىلىM-ئاينىڭD-كۈنى",
              LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",
              LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",
            },
            meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                meridiem === "يېرىم كېچە" ||
                meridiem === "سەھەر" ||
                meridiem === "چۈشتىن بۇرۇن"
              ) {
                return hour;
              } else if (meridiem === "چۈشتىن كېيىن" || meridiem === "كەچ") {
                return hour + 12;
              } else {
                return hour >= 11 ? hour : hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return "يېرىم كېچە";
              } else if (hm < 900) {
                return "سەھەر";
              } else if (hm < 1130) {
                return "چۈشتىن بۇرۇن";
              } else if (hm < 1230) {
                return "چۈش";
              } else if (hm < 1800) {
                return "چۈشتىن كېيىن";
              } else {
                return "كەچ";
              }
            },
            calendar: {
              sameDay: "[بۈگۈن سائەت] LT",
              nextDay: "[ئەتە سائەت] LT",
              nextWeek: "[كېلەركى] dddd [سائەت] LT",
              lastDay: "[تۆنۈگۈن] LT",
              lastWeek: "[ئالدىنقى] dddd [سائەت] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s كېيىن",
              past: "%s بۇرۇن",
              s: "نەچچە سېكونت",
              ss: "%d سېكونت",
              m: "بىر مىنۇت",
              mm: "%d مىنۇت",
              h: "بىر سائەت",
              hh: "%d سائەت",
              d: "بىر كۈن",
              dd: "%d كۈن",
              M: "بىر ئاي",
              MM: "%d ئاي",
              y: "بىر يىل",
              yy: "%d يىل",
            },

            dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "-كۈنى";
                case "w":
                case "W":
                  return number + "-ھەپتە";
                default:
                  return number;
              }
            },
            preparse: function(string) {
              return string.replace(/،/g, ",");
            },
            postformat: function(string) {
              return string.replace(/,/g, "،");
            },
            week: {
              // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 1st is the first week of the year.
            },
          });

          return ugCn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/uk.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Ukrainian [uk]
        //! author : zemlanin : https://github.com/zemlanin
        //! Author : Menelion Elensúle : https://github.com/Oire

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          function plural(word, num) {
            var forms = word.split("_");
            return num % 10 === 1 && num % 100 !== 11
              ? forms[0]
              : num % 10 >= 2 &&
                num % 10 <= 4 &&
                (num % 100 < 10 || num % 100 >= 20)
              ? forms[1]
              : forms[2];
          }
          function relativeTimeWithPlural(number, withoutSuffix, key) {
            var format = {
              ss: withoutSuffix
                ? "секунда_секунди_секунд"
                : "секунду_секунди_секунд",
              mm: withoutSuffix
                ? "хвилина_хвилини_хвилин"
                : "хвилину_хвилини_хвилин",
              hh: withoutSuffix ? "година_години_годин" : "годину_години_годин",
              dd: "день_дні_днів",
              MM: "місяць_місяці_місяців",
              yy: "рік_роки_років",
            };
            if (key === "m") {
              return withoutSuffix ? "хвилина" : "хвилину";
            } else if (key === "h") {
              return withoutSuffix ? "година" : "годину";
            } else {
              return number + " " + plural(format[key], +number);
            }
          }
          function weekdaysCaseReplace(m, format) {
            var weekdays = {
                nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split(
                  "_"
                ),
                accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split(
                  "_"
                ),
                genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split(
                  "_"
                ),
              },
              nounCase;

            if (m === true) {
              return weekdays["nominative"]
                .slice(1, 7)
                .concat(weekdays["nominative"].slice(0, 1));
            }
            if (!m) {
              return weekdays["nominative"];
            }

            nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
              ? "accusative"
              : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
              ? "genitive"
              : "nominative";
            return weekdays[nounCase][m.day()];
          }
          function processHoursFunction(str) {
            return function() {
              return str + "о" + (this.hours() === 11 ? "б" : "") + "] LT";
            };
          }

          var uk = moment.defineLocale("uk", {
            months: {
              format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split(
                "_"
              ),
              standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split(
                "_"
              ),
            },
            monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split(
              "_"
            ),
            weekdays: weekdaysCaseReplace,
            weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD.MM.YYYY",
              LL: "D MMMM YYYY р.",
              LLL: "D MMMM YYYY р., HH:mm",
              LLLL: "dddd, D MMMM YYYY р., HH:mm",
            },
            calendar: {
              sameDay: processHoursFunction("[Сьогодні "),
              nextDay: processHoursFunction("[Завтра "),
              lastDay: processHoursFunction("[Вчора "),
              nextWeek: processHoursFunction("[У] dddd ["),
              lastWeek: function() {
                switch (this.day()) {
                  case 0:
                  case 3:
                  case 5:
                  case 6:
                    return processHoursFunction("[Минулої] dddd [").call(this);
                  case 1:
                  case 2:
                  case 4:
                    return processHoursFunction("[Минулого] dddd [").call(this);
                }
              },
              sameElse: "L",
            },
            relativeTime: {
              future: "за %s",
              past: "%s тому",
              s: "декілька секунд",
              ss: relativeTimeWithPlural,
              m: relativeTimeWithPlural,
              mm: relativeTimeWithPlural,
              h: "годину",
              hh: relativeTimeWithPlural,
              d: "день",
              dd: relativeTimeWithPlural,
              M: "місяць",
              MM: relativeTimeWithPlural,
              y: "рік",
              yy: relativeTimeWithPlural,
            },
            // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
            meridiemParse: /ночі|ранку|дня|вечора/,
            isPM: function(input) {
              return /^(дня|вечора)$/.test(input);
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 4) {
                return "ночі";
              } else if (hour < 12) {
                return "ранку";
              } else if (hour < 17) {
                return "дня";
              } else {
                return "вечора";
              }
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
            ordinal: function(number, period) {
              switch (period) {
                case "M":
                case "d":
                case "DDD":
                case "w":
                case "W":
                  return number + "-й";
                case "D":
                  return number + "-го";
                default:
                  return number;
              }
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return uk;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/ur.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Urdu [ur]
        //! author : Sawood Alam : https://github.com/ibnesayeed
        //! author : Zack : https://github.com/ZackVision

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var months = [
              "جنوری",
              "فروری",
              "مارچ",
              "اپریل",
              "مئی",
              "جون",
              "جولائی",
              "اگست",
              "ستمبر",
              "اکتوبر",
              "نومبر",
              "دسمبر",
            ],
            days = ["اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"];

          var ur = moment.defineLocale("ur", {
            months: months,
            monthsShort: months,
            weekdays: days,
            weekdaysShort: days,
            weekdaysMin: days,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd، D MMMM YYYY HH:mm",
            },
            meridiemParse: /صبح|شام/,
            isPM: function(input) {
              return "شام" === input;
            },
            meridiem: function(hour, minute, isLower) {
              if (hour < 12) {
                return "صبح";
              }
              return "شام";
            },
            calendar: {
              sameDay: "[آج بوقت] LT",
              nextDay: "[کل بوقت] LT",
              nextWeek: "dddd [بوقت] LT",
              lastDay: "[گذشتہ روز بوقت] LT",
              lastWeek: "[گذشتہ] dddd [بوقت] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s بعد",
              past: "%s قبل",
              s: "چند سیکنڈ",
              ss: "%d سیکنڈ",
              m: "ایک منٹ",
              mm: "%d منٹ",
              h: "ایک گھنٹہ",
              hh: "%d گھنٹے",
              d: "ایک دن",
              dd: "%d دن",
              M: "ایک ماہ",
              MM: "%d ماہ",
              y: "ایک سال",
              yy: "%d سال",
            },
            preparse: function(string) {
              return string.replace(/،/g, ",");
            },
            postformat: function(string) {
              return string.replace(/,/g, "،");
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return ur;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/uz-latn.js":
      /*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Uzbek Latin [uz-latn]
        //! author : Rasulbek Mirzayev : github.com/Rasulbeeek

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var uzLatn = moment.defineLocale("uz-latn", {
            months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split(
              "_"
            ),
            monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split(
              "_"
            ),
            weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split(
              "_"
            ),
            weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),
            weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "D MMMM YYYY, dddd HH:mm",
            },
            calendar: {
              sameDay: "[Bugun soat] LT [da]",
              nextDay: "[Ertaga] LT [da]",
              nextWeek: "dddd [kuni soat] LT [da]",
              lastDay: "[Kecha soat] LT [da]",
              lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
              sameElse: "L",
            },
            relativeTime: {
              future: "Yaqin %s ichida",
              past: "Bir necha %s oldin",
              s: "soniya",
              ss: "%d soniya",
              m: "bir daqiqa",
              mm: "%d daqiqa",
              h: "bir soat",
              hh: "%d soat",
              d: "bir kun",
              dd: "%d kun",
              M: "bir oy",
              MM: "%d oy",
              y: "bir yil",
              yy: "%d yil",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 7th is the first week of the year.
            },
          });

          return uzLatn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/uz.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Uzbek [uz]
        //! author : Sardor Muminov : https://github.com/muminoff

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var uz = moment.defineLocale("uz", {
            months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split(
              "_"
            ),
            monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split(
              "_"
            ),
            weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split(
              "_"
            ),
            weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
            weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "D MMMM YYYY, dddd HH:mm",
            },
            calendar: {
              sameDay: "[Бугун соат] LT [да]",
              nextDay: "[Эртага] LT [да]",
              nextWeek: "dddd [куни соат] LT [да]",
              lastDay: "[Кеча соат] LT [да]",
              lastWeek: "[Утган] dddd [куни соат] LT [да]",
              sameElse: "L",
            },
            relativeTime: {
              future: "Якин %s ичида",
              past: "Бир неча %s олдин",
              s: "фурсат",
              ss: "%d фурсат",
              m: "бир дакика",
              mm: "%d дакика",
              h: "бир соат",
              hh: "%d соат",
              d: "бир кун",
              dd: "%d кун",
              M: "бир ой",
              MM: "%d ой",
              y: "бир йил",
              yy: "%d йил",
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 7, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return uz;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/vi.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Vietnamese [vi]
        //! author : Bang Nguyen : https://github.com/bangnk
        //! author : Chien Kira : https://github.com/chienkira

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var vi = moment.defineLocale("vi", {
            months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split(
              "_"
            ),
            monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split(
              "_"
            ),
            weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
            weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
            weekdaysParseExact: true,
            meridiemParse: /sa|ch/i,
            isPM: function(input) {
              return /^ch$/i.test(input);
            },
            meridiem: function(hours, minutes, isLower) {
              if (hours < 12) {
                return isLower ? "sa" : "SA";
              } else {
                return isLower ? "ch" : "CH";
              }
            },
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM [năm] YYYY",
              LLL: "D MMMM [năm] YYYY HH:mm",
              LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
              l: "DD/M/YYYY",
              ll: "D MMM YYYY",
              lll: "D MMM YYYY HH:mm",
              llll: "ddd, D MMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[Hôm nay lúc] LT",
              nextDay: "[Ngày mai lúc] LT",
              nextWeek: "dddd [tuần tới lúc] LT",
              lastDay: "[Hôm qua lúc] LT",
              lastWeek: "dddd [tuần trước lúc] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "%s tới",
              past: "%s trước",
              s: "vài giây",
              ss: "%d giây",
              m: "một phút",
              mm: "%d phút",
              h: "một giờ",
              hh: "%d giờ",
              d: "một ngày",
              dd: "%d ngày",
              M: "một tháng",
              MM: "%d tháng",
              y: "một năm",
              yy: "%d năm",
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function(number) {
              return number;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return vi;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/x-pseudo.js":
      /*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Pseudo [x-pseudo]
        //! author : Andrew Hood : https://github.com/andrewhood125

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var xPseudo = moment.defineLocale("x-pseudo", {
            months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split(
              "_"
            ),
            monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split(
              "_"
            ),
            monthsParseExact: true,
            weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split(
              "_"
            ),
            weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
            weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm",
            },
            calendar: {
              sameDay: "[T~ódá~ý át] LT",
              nextDay: "[T~ómó~rró~w át] LT",
              nextWeek: "dddd [át] LT",
              lastDay: "[Ý~ést~érdá~ý át] LT",
              lastWeek: "[L~ást] dddd [át] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "í~ñ %s",
              past: "%s á~gó",
              s: "á ~féw ~sécó~ñds",
              ss: "%d s~écóñ~ds",
              m: "á ~míñ~úté",
              mm: "%d m~íñú~tés",
              h: "á~ñ hó~úr",
              hh: "%d h~óúrs",
              d: "á ~dáý",
              dd: "%d d~áýs",
              M: "á ~móñ~th",
              MM: "%d m~óñt~hs",
              y: "á ~ýéár",
              yy: "%d ý~éárs",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function(number) {
              var b = number % 10,
                output =
                  ~~((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return xPseudo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/yo.js":
      /*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Yoruba Nigeria [yo]
        //! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var yo = moment.defineLocale("yo", {
            months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split(
              "_"
            ),
            monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split(
              "_"
            ),
            weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
            weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
            weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
            longDateFormat: {
              LT: "h:mm A",
              LTS: "h:mm:ss A",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY h:mm A",
              LLLL: "dddd, D MMMM YYYY h:mm A",
            },
            calendar: {
              sameDay: "[Ònì ni] LT",
              nextDay: "[Ọ̀la ni] LT",
              nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
              lastDay: "[Àna ni] LT",
              lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
              sameElse: "L",
            },
            relativeTime: {
              future: "ní %s",
              past: "%s kọjá",
              s: "ìsẹjú aayá die",
              ss: "aayá %d",
              m: "ìsẹjú kan",
              mm: "ìsẹjú %d",
              h: "wákati kan",
              hh: "wákati %d",
              d: "ọjọ́ kan",
              dd: "ọjọ́ %d",
              M: "osù kan",
              MM: "osù %d",
              y: "ọdún kan",
              yy: "ọdún %d",
            },
            dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
            ordinal: "ọjọ́ %d",
            week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return yo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/zh-cn.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Chinese (China) [zh-cn]
        //! author : suupic : https://github.com/suupic
        //! author : Zeno Zeng : https://github.com/zenozeng

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var zhCn = moment.defineLocale("zh-cn", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split(
              "_"
            ),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split(
              "_"
            ),
            weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY/MM/DD",
              LL: "YYYY年M月D日",
              LLL: "YYYY年M月D日Ah点mm分",
              LLLL: "YYYY年M月D日ddddAh点mm分",
              l: "YYYY/M/D",
              ll: "YYYY年M月D日",
              lll: "YYYY年M月D日 HH:mm",
              llll: "YYYY年M月D日dddd HH:mm",
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                meridiem === "凌晨" ||
                meridiem === "早上" ||
                meridiem === "上午"
              ) {
                return hour;
              } else if (meridiem === "下午" || meridiem === "晚上") {
                return hour + 12;
              } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return "凌晨";
              } else if (hm < 900) {
                return "早上";
              } else if (hm < 1130) {
                return "上午";
              } else if (hm < 1230) {
                return "中午";
              } else if (hm < 1800) {
                return "下午";
              } else {
                return "晚上";
              }
            },
            calendar: {
              sameDay: "[今天]LT",
              nextDay: "[明天]LT",
              nextWeek: "[下]ddddLT",
              lastDay: "[昨天]LT",
              lastWeek: "[上]ddddLT",
              sameElse: "L",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "日";
                case "M":
                  return number + "月";
                case "w":
                case "W":
                  return number + "周";
                default:
                  return number;
              }
            },
            relativeTime: {
              future: "%s后",
              past: "%s前",
              s: "几秒",
              ss: "%d 秒",
              m: "1 分钟",
              mm: "%d 分钟",
              h: "1 小时",
              hh: "%d 小时",
              d: "1 天",
              dd: "%d 天",
              M: "1 个月",
              MM: "%d 个月",
              y: "1 年",
              yy: "%d 年",
            },
            week: {
              // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
              dow: 1, // Monday is the first day of the week.
              doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
          });

          return zhCn;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/zh-hk.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Chinese (Hong Kong) [zh-hk]
        //! author : Ben : https://github.com/ben-lin
        //! author : Chris Lam : https://github.com/hehachris
        //! author : Konstantin : https://github.com/skfd
        //! author : Anthony : https://github.com/anthonylau

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var zhHk = moment.defineLocale("zh-hk", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split(
              "_"
            ),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split(
              "_"
            ),
            weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY/MM/DD",
              LL: "YYYY年M月D日",
              LLL: "YYYY年M月D日 HH:mm",
              LLLL: "YYYY年M月D日dddd HH:mm",
              l: "YYYY/M/D",
              ll: "YYYY年M月D日",
              lll: "YYYY年M月D日 HH:mm",
              llll: "YYYY年M月D日dddd HH:mm",
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                meridiem === "凌晨" ||
                meridiem === "早上" ||
                meridiem === "上午"
              ) {
                return hour;
              } else if (meridiem === "中午") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "下午" || meridiem === "晚上") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return "凌晨";
              } else if (hm < 900) {
                return "早上";
              } else if (hm < 1200) {
                return "上午";
              } else if (hm === 1200) {
                return "中午";
              } else if (hm < 1800) {
                return "下午";
              } else {
                return "晚上";
              }
            },
            calendar: {
              sameDay: "[今天]LT",
              nextDay: "[明天]LT",
              nextWeek: "[下]ddddLT",
              lastDay: "[昨天]LT",
              lastWeek: "[上]ddddLT",
              sameElse: "L",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "日";
                case "M":
                  return number + "月";
                case "w":
                case "W":
                  return number + "週";
                default:
                  return number;
              }
            },
            relativeTime: {
              future: "%s後",
              past: "%s前",
              s: "幾秒",
              ss: "%d 秒",
              m: "1 分鐘",
              mm: "%d 分鐘",
              h: "1 小時",
              hh: "%d 小時",
              d: "1 天",
              dd: "%d 天",
              M: "1 個月",
              MM: "%d 個月",
              y: "1 年",
              yy: "%d 年",
            },
          });

          return zhHk;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/zh-mo.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-mo.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Chinese (Macau) [zh-mo]
        //! author : Ben : https://github.com/ben-lin
        //! author : Chris Lam : https://github.com/hehachris
        //! author : Tan Yuanhong : https://github.com/le0tan

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var zhMo = moment.defineLocale("zh-mo", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split(
              "_"
            ),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split(
              "_"
            ),
            weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "YYYY年M月D日",
              LLL: "YYYY年M月D日 HH:mm",
              LLLL: "YYYY年M月D日dddd HH:mm",
              l: "D/M/YYYY",
              ll: "YYYY年M月D日",
              lll: "YYYY年M月D日 HH:mm",
              llll: "YYYY年M月D日dddd HH:mm",
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                meridiem === "凌晨" ||
                meridiem === "早上" ||
                meridiem === "上午"
              ) {
                return hour;
              } else if (meridiem === "中午") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "下午" || meridiem === "晚上") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return "凌晨";
              } else if (hm < 900) {
                return "早上";
              } else if (hm < 1130) {
                return "上午";
              } else if (hm < 1230) {
                return "中午";
              } else if (hm < 1800) {
                return "下午";
              } else {
                return "晚上";
              }
            },
            calendar: {
              sameDay: "[今天] LT",
              nextDay: "[明天] LT",
              nextWeek: "[下]dddd LT",
              lastDay: "[昨天] LT",
              lastWeek: "[上]dddd LT",
              sameElse: "L",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "日";
                case "M":
                  return number + "月";
                case "w":
                case "W":
                  return number + "週";
                default:
                  return number;
              }
            },
            relativeTime: {
              future: "%s內",
              past: "%s前",
              s: "幾秒",
              ss: "%d 秒",
              m: "1 分鐘",
              mm: "%d 分鐘",
              h: "1 小時",
              hh: "%d 小時",
              d: "1 天",
              dd: "%d 天",
              M: "1 個月",
              MM: "%d 個月",
              y: "1 年",
              yy: "%d 年",
            },
          });

          return zhMo;
        });

        /***/
      },

    /***/ "./node_modules/moment/locale/zh-tw.js":
      /*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        //! moment.js locale configuration
        //! locale : Chinese (Taiwan) [zh-tw]
        //! author : Ben : https://github.com/ben-lin
        //! author : Chris Lam : https://github.com/hehachris

        (function(global, factory) {
          true
            ? factory(
                __webpack_require__(
                  /*! ../moment */ "./node_modules/moment/moment.js"
                )
              )
            : undefined;
        })(this, function(moment) {
          "use strict";

          //! moment.js locale configuration

          var zhTw = moment.defineLocale("zh-tw", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split(
              "_"
            ),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split(
              "_"
            ),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split(
              "_"
            ),
            weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "YYYY/MM/DD",
              LL: "YYYY年M月D日",
              LLL: "YYYY年M月D日 HH:mm",
              LLLL: "YYYY年M月D日dddd HH:mm",
              l: "YYYY/M/D",
              ll: "YYYY年M月D日",
              lll: "YYYY年M月D日 HH:mm",
              llll: "YYYY年M月D日dddd HH:mm",
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(hour, meridiem) {
              if (hour === 12) {
                hour = 0;
              }
              if (
                meridiem === "凌晨" ||
                meridiem === "早上" ||
                meridiem === "上午"
              ) {
                return hour;
              } else if (meridiem === "中午") {
                return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === "下午" || meridiem === "晚上") {
                return hour + 12;
              }
            },
            meridiem: function(hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                return "凌晨";
              } else if (hm < 900) {
                return "早上";
              } else if (hm < 1130) {
                return "上午";
              } else if (hm < 1230) {
                return "中午";
              } else if (hm < 1800) {
                return "下午";
              } else {
                return "晚上";
              }
            },
            calendar: {
              sameDay: "[今天] LT",
              nextDay: "[明天] LT",
              nextWeek: "[下]dddd LT",
              lastDay: "[昨天] LT",
              lastWeek: "[上]dddd LT",
              sameElse: "L",
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function(number, period) {
              switch (period) {
                case "d":
                case "D":
                case "DDD":
                  return number + "日";
                case "M":
                  return number + "月";
                case "w":
                case "W":
                  return number + "週";
                default:
                  return number;
              }
            },
            relativeTime: {
              future: "%s後",
              past: "%s前",
              s: "幾秒",
              ss: "%d 秒",
              m: "1 分鐘",
              mm: "%d 分鐘",
              h: "1 小時",
              hh: "%d 小時",
              d: "1 天",
              dd: "%d 天",
              M: "1 個月",
              MM: "%d 個月",
              y: "1 年",
              yy: "%d 年",
            },
          });

          return zhTw;
        });

        /***/
      },

    /***/ "./node_modules/moment/moment.js":
      /*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module) {
          var require; //! moment.js
          //! version : 2.25.3
          //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
          //! license : MIT
          //! momentjs.com

          (function(global, factory) {
            true ? (module.exports = factory()) : undefined;
          })(this, function() {
            "use strict";

            var hookCallback;

            function hooks() {
              return hookCallback.apply(null, arguments);
            }

            // This is done to register the method called with moment()
            // without creating circular dependencies.
            function setHookCallback(callback) {
              hookCallback = callback;
            }

            function isArray(input) {
              return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === "[object Array]"
              );
            }

            function isObject(input) {
              // IE8 will treat undefined and null as object if it wasn't for
              // input != null
              return (
                input != null &&
                Object.prototype.toString.call(input) === "[object Object]"
              );
            }

            function hasOwnProp(a, b) {
              return Object.prototype.hasOwnProperty.call(a, b);
            }

            function isObjectEmpty(obj) {
              if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
              } else {
                var k;
                for (k in obj) {
                  if (hasOwnProp(obj, k)) {
                    return false;
                  }
                }
                return true;
              }
            }

            function isUndefined(input) {
              return input === void 0;
            }

            function isNumber(input) {
              return (
                typeof input === "number" ||
                Object.prototype.toString.call(input) === "[object Number]"
              );
            }

            function isDate(input) {
              return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === "[object Date]"
              );
            }

            function map(arr, fn) {
              var res = [],
                i;
              for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
              }
              return res;
            }

            function extend(a, b) {
              for (var i in b) {
                if (hasOwnProp(b, i)) {
                  a[i] = b[i];
                }
              }

              if (hasOwnProp(b, "toString")) {
                a.toString = b.toString;
              }

              if (hasOwnProp(b, "valueOf")) {
                a.valueOf = b.valueOf;
              }

              return a;
            }

            function createUTC(input, format, locale, strict) {
              return createLocalOrUTC(
                input,
                format,
                locale,
                strict,
                true
              ).utc();
            }

            function defaultParsingFlags() {
              // We need to deep clone this object.
              return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
              };
            }

            function getParsingFlags(m) {
              if (m._pf == null) {
                m._pf = defaultParsingFlags();
              }
              return m._pf;
            }

            var some;
            if (Array.prototype.some) {
              some = Array.prototype.some;
            } else {
              some = function(fun) {
                var t = Object(this),
                  len = t.length >>> 0,
                  i;

                for (i = 0; i < len; i++) {
                  if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                  }
                }

                return false;
              };
            }

            function isValid(m) {
              if (m._isValid == null) {
                var flags = getParsingFlags(m),
                  parsedParts = some.call(flags.parsedDateParts, function(i) {
                    return i != null;
                  }),
                  isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                  isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                  m._isValid = isNowValid;
                } else {
                  return isNowValid;
                }
              }
              return m._isValid;
            }

            function createInvalid(flags) {
              var m = createUTC(NaN);
              if (flags != null) {
                extend(getParsingFlags(m), flags);
              } else {
                getParsingFlags(m).userInvalidated = true;
              }

              return m;
            }

            // Plugins that add properties should also add the key here (null value),
            // so we can properly clone ourselves.
            var momentProperties = (hooks.momentProperties = []),
              updateInProgress = false;

            function copyConfig(to, from) {
              var i, prop, val;

              if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
              }
              if (!isUndefined(from._i)) {
                to._i = from._i;
              }
              if (!isUndefined(from._f)) {
                to._f = from._f;
              }
              if (!isUndefined(from._l)) {
                to._l = from._l;
              }
              if (!isUndefined(from._strict)) {
                to._strict = from._strict;
              }
              if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
              }
              if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
              }
              if (!isUndefined(from._offset)) {
                to._offset = from._offset;
              }
              if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
              }
              if (!isUndefined(from._locale)) {
                to._locale = from._locale;
              }

              if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                  prop = momentProperties[i];
                  val = from[prop];
                  if (!isUndefined(val)) {
                    to[prop] = val;
                  }
                }
              }

              return to;
            }

            // Moment prototype object
            function Moment(config) {
              copyConfig(this, config);
              this._d = new Date(config._d != null ? config._d.getTime() : NaN);
              if (!this.isValid()) {
                this._d = new Date(NaN);
              }
              // Prevent infinite loop in case updateOffset creates new moment
              // objects.
              if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
              }
            }

            function isMoment(obj) {
              return (
                obj instanceof Moment ||
                (obj != null && obj._isAMomentObject != null)
              );
            }

            function warn(msg) {
              if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== "undefined" &&
                console.warn
              ) {
                console.warn("Deprecation warning: " + msg);
              }
            }

            function deprecate(msg, fn) {
              var firstTime = true;

              return extend(function() {
                if (hooks.deprecationHandler != null) {
                  hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                  var args = [],
                    arg,
                    i,
                    key;
                  for (i = 0; i < arguments.length; i++) {
                    arg = "";
                    if (typeof arguments[i] === "object") {
                      arg += "\n[" + i + "] ";
                      for (key in arguments[0]) {
                        if (hasOwnProp(arguments[0], key)) {
                          arg += key + ": " + arguments[0][key] + ", ";
                        }
                      }
                      arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                      arg = arguments[i];
                    }
                    args.push(arg);
                  }
                  warn(
                    msg +
                      "\nArguments: " +
                      Array.prototype.slice.call(args).join("") +
                      "\n" +
                      new Error().stack
                  );
                  firstTime = false;
                }
                return fn.apply(this, arguments);
              }, fn);
            }

            var deprecations = {};

            function deprecateSimple(name, msg) {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
              }
              if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
              }
            }

            hooks.suppressDeprecationWarnings = false;
            hooks.deprecationHandler = null;

            function isFunction(input) {
              return (
                (typeof Function !== "undefined" &&
                  input instanceof Function) ||
                Object.prototype.toString.call(input) === "[object Function]"
              );
            }

            function set(config) {
              var prop, i;
              for (i in config) {
                if (hasOwnProp(config, i)) {
                  prop = config[i];
                  if (isFunction(prop)) {
                    this[i] = prop;
                  } else {
                    this["_" + i] = prop;
                  }
                }
              }
              this._config = config;
              // Lenient ordinal parsing accepts just a number in addition to
              // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
              // TODO: Remove "ordinalParse" fallback in next major release.
              this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source ||
                  this._ordinalParse.source) +
                  "|" +
                  /\d{1,2}/.source
              );
            }

            function mergeConfigs(parentConfig, childConfig) {
              var res = extend({}, parentConfig),
                prop;
              for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                  if (
                    isObject(parentConfig[prop]) &&
                    isObject(childConfig[prop])
                  ) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                  } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                  } else {
                    delete res[prop];
                  }
                }
              }
              for (prop in parentConfig) {
                if (
                  hasOwnProp(parentConfig, prop) &&
                  !hasOwnProp(childConfig, prop) &&
                  isObject(parentConfig[prop])
                ) {
                  // make sure changes to properties don't modify parent config
                  res[prop] = extend({}, res[prop]);
                }
              }
              return res;
            }

            function Locale(config) {
              if (config != null) {
                this.set(config);
              }
            }

            var keys;

            if (Object.keys) {
              keys = Object.keys;
            } else {
              keys = function(obj) {
                var i,
                  res = [];
                for (i in obj) {
                  if (hasOwnProp(obj, i)) {
                    res.push(i);
                  }
                }
                return res;
              };
            }

            var defaultCalendar = {
              sameDay: "[Today at] LT",
              nextDay: "[Tomorrow at] LT",
              nextWeek: "dddd [at] LT",
              lastDay: "[Yesterday at] LT",
              lastWeek: "[Last] dddd [at] LT",
              sameElse: "L",
            };

            function calendar(key, mom, now) {
              var output = this._calendar[key] || this._calendar["sameElse"];
              return isFunction(output) ? output.call(mom, now) : output;
            }

            function zeroFill(number, targetLength, forceSign) {
              var absNumber = "" + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
              return (
                (sign ? (forceSign ? "+" : "") : "-") +
                Math.pow(10, Math.max(0, zerosToFill))
                  .toString()
                  .substr(1) +
                absNumber
              );
            }

            var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
              localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
              formatFunctions = {},
              formatTokenFunctions = {};

            // token:    'M'
            // padded:   ['MM', 2]
            // ordinal:  'Mo'
            // callback: function () { this.month() + 1 }
            function addFormatToken(token, padded, ordinal, callback) {
              var func = callback;
              if (typeof callback === "string") {
                func = function() {
                  return this[callback]();
                };
              }
              if (token) {
                formatTokenFunctions[token] = func;
              }
              if (padded) {
                formatTokenFunctions[padded[0]] = function() {
                  return zeroFill(
                    func.apply(this, arguments),
                    padded[1],
                    padded[2]
                  );
                };
              }
              if (ordinal) {
                formatTokenFunctions[ordinal] = function() {
                  return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                  );
                };
              }
            }

            function removeFormattingTokens(input) {
              if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, "");
              }
              return input.replace(/\\/g, "");
            }

            function makeFormatFunction(format) {
              var array = format.match(formattingTokens),
                i,
                length;

              for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                  array[i] = formatTokenFunctions[array[i]];
                } else {
                  array[i] = removeFormattingTokens(array[i]);
                }
              }

              return function(mom) {
                var output = "",
                  i;
                for (i = 0; i < length; i++) {
                  output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
                }
                return output;
              };
            }

            // format date using native date object
            function formatMoment(m, format) {
              if (!m.isValid()) {
                return m.localeData().invalidDate();
              }

              format = expandFormat(format, m.localeData());
              formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);

              return formatFunctions[format](m);
            }

            function expandFormat(format, locale) {
              var i = 5;

              function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
              }

              localFormattingTokens.lastIndex = 0;
              while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                  localFormattingTokens,
                  replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
              }

              return format;
            }

            var defaultLongDateFormat = {
              LTS: "h:mm:ss A",
              LT: "h:mm A",
              L: "MM/DD/YYYY",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY h:mm A",
              LLLL: "dddd, MMMM D, YYYY h:mm A",
            };

            function longDateFormat(key) {
              var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

              if (format || !formatUpper) {
                return format;
              }

              this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function(tok) {
                  if (
                    tok === "MMMM" ||
                    tok === "MM" ||
                    tok === "DD" ||
                    tok === "dddd"
                  ) {
                    return tok.slice(1);
                  }
                  return tok;
                })
                .join("");

              return this._longDateFormat[key];
            }

            var defaultInvalidDate = "Invalid date";

            function invalidDate() {
              return this._invalidDate;
            }

            var defaultOrdinal = "%d",
              defaultDayOfMonthOrdinalParse = /\d{1,2}/;

            function ordinal(number) {
              return this._ordinal.replace("%d", number);
            }

            var defaultRelativeTime = {
              future: "in %s",
              past: "%s ago",
              s: "a few seconds",
              ss: "%d seconds",
              m: "a minute",
              mm: "%d minutes",
              h: "an hour",
              hh: "%d hours",
              d: "a day",
              dd: "%d days",
              w: "a week",
              ww: "%d weeks",
              M: "a month",
              MM: "%d months",
              y: "a year",
              yy: "%d years",
            };

            function relativeTime(number, withoutSuffix, string, isFuture) {
              var output = this._relativeTime[string];
              return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
            }

            function pastFuture(diff, output) {
              var format = this._relativeTime[diff > 0 ? "future" : "past"];
              return isFunction(format)
                ? format(output)
                : format.replace(/%s/i, output);
            }

            var aliases = {};

            function addUnitAlias(unit, shorthand) {
              var lowerCase = unit.toLowerCase();
              aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[
                shorthand
              ] = unit;
            }

            function normalizeUnits(units) {
              return typeof units === "string"
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
            }

            function normalizeObjectUnits(inputObject) {
              var normalizedInput = {},
                normalizedProp,
                prop;

              for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                  normalizedProp = normalizeUnits(prop);
                  if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                  }
                }
              }

              return normalizedInput;
            }

            var priorities = {};

            function addUnitPriority(unit, priority) {
              priorities[unit] = priority;
            }

            function getPrioritizedUnits(unitsObj) {
              var units = [],
                u;
              for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                  units.push({ unit: u, priority: priorities[u] });
                }
              }
              units.sort(function(a, b) {
                return a.priority - b.priority;
              });
              return units;
            }

            function isLeapYear(year) {
              return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
            }

            function absFloor(number) {
              if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
              } else {
                return Math.floor(number);
              }
            }

            function toInt(argumentForCoercion) {
              var coercedNumber = +argumentForCoercion,
                value = 0;

              if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
              }

              return value;
            }

            function makeGetSet(unit, keepTime) {
              return function(value) {
                if (value != null) {
                  set$1(this, unit, value);
                  hooks.updateOffset(this, keepTime);
                  return this;
                } else {
                  return get(this, unit);
                }
              };
            }

            function get(mom, unit) {
              return mom.isValid()
                ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]()
                : NaN;
            }

            function set$1(mom, unit, value) {
              if (mom.isValid() && !isNaN(value)) {
                if (
                  unit === "FullYear" &&
                  isLeapYear(mom.year()) &&
                  mom.month() === 1 &&
                  mom.date() === 29
                ) {
                  value = toInt(value);
                  mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                  );
                } else {
                  mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
                }
              }
            }

            // MOMENTS

            function stringGet(units) {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units]();
              }
              return this;
            }

            function stringSet(units, value) {
              if (typeof units === "object") {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                  i;
                for (i = 0; i < prioritized.length; i++) {
                  this[prioritized[i].unit](units[prioritized[i].unit]);
                }
              } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                  return this[units](value);
                }
              }
              return this;
            }

            var match1 = /\d/, //       0 - 9
              match2 = /\d\d/, //      00 - 99
              match3 = /\d{3}/, //     000 - 999
              match4 = /\d{4}/, //    0000 - 9999
              match6 = /[+-]?\d{6}/, // -999999 - 999999
              match1to2 = /\d\d?/, //       0 - 99
              match3to4 = /\d\d\d\d?/, //     999 - 9999
              match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
              match1to3 = /\d{1,3}/, //       0 - 999
              match1to4 = /\d{1,4}/, //       0 - 9999
              match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
              matchUnsigned = /\d+/, //       0 - inf
              matchSigned = /[+-]?\d+/, //    -inf - inf
              matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
              matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
              matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
              // any word (or two) characters or numbers including two/three word month in arabic.
              // includes scottish gaelic two word and hyphenated months
              matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
              regexes;

            regexes = {};

            function addRegexToken(token, regex, strictRegex) {
              regexes[token] = isFunction(regex)
                ? regex
                : function(isStrict, localeData) {
                    return isStrict && strictRegex ? strictRegex : regex;
                  };
            }

            function getParseRegexForToken(token, config) {
              if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
              }

              return regexes[token](config._strict, config._locale);
            }

            // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
            function unescapeFormat(s) {
              return regexEscape(
                s
                  .replace("\\", "")
                  .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                  ) {
                    return p1 || p2 || p3 || p4;
                  })
              );
            }

            function regexEscape(s) {
              return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
            }

            var tokens = {};

            function addParseToken(token, callback) {
              var i,
                func = callback;
              if (typeof token === "string") {
                token = [token];
              }
              if (isNumber(callback)) {
                func = function(input, array) {
                  array[callback] = toInt(input);
                };
              }
              for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
              }
            }

            function addWeekParseToken(token, callback) {
              addParseToken(token, function(input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
              });
            }

            function addTimeToArrayFromToken(token, input, config) {
              if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
              }
            }

            var YEAR = 0,
              MONTH = 1,
              DATE = 2,
              HOUR = 3,
              MINUTE = 4,
              SECOND = 5,
              MILLISECOND = 6,
              WEEK = 7,
              WEEKDAY = 8;

            function mod(n, x) {
              return ((n % x) + x) % x;
            }

            var indexOf;

            if (Array.prototype.indexOf) {
              indexOf = Array.prototype.indexOf;
            } else {
              indexOf = function(o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                  if (this[i] === o) {
                    return i;
                  }
                }
                return -1;
              };
            }

            function daysInMonth(year, month) {
              if (isNaN(year) || isNaN(month)) {
                return NaN;
              }
              var modMonth = mod(month, 12);
              year += (month - modMonth) / 12;
              return modMonth === 1
                ? isLeapYear(year)
                  ? 29
                  : 28
                : 31 - ((modMonth % 7) % 2);
            }

            // FORMATTING

            addFormatToken("M", ["MM", 2], "Mo", function() {
              return this.month() + 1;
            });

            addFormatToken("MMM", 0, 0, function(format) {
              return this.localeData().monthsShort(this, format);
            });

            addFormatToken("MMMM", 0, 0, function(format) {
              return this.localeData().months(this, format);
            });

            // ALIASES

            addUnitAlias("month", "M");

            // PRIORITY

            addUnitPriority("month", 8);

            // PARSING

            addRegexToken("M", match1to2);
            addRegexToken("MM", match1to2, match2);
            addRegexToken("MMM", function(isStrict, locale) {
              return locale.monthsShortRegex(isStrict);
            });
            addRegexToken("MMMM", function(isStrict, locale) {
              return locale.monthsRegex(isStrict);
            });

            addParseToken(["M", "MM"], function(input, array) {
              array[MONTH] = toInt(input) - 1;
            });

            addParseToken(["MMM", "MMMM"], function(
              input,
              array,
              config,
              token
            ) {
              var month = config._locale.monthsParse(
                input,
                token,
                config._strict
              );
              // if we didn't find a month name, mark the date as invalid.
              if (month != null) {
                array[MONTH] = month;
              } else {
                getParsingFlags(config).invalidMonth = input;
              }
            });

            // LOCALES

            var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
                "_"
              ),
              defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
                "_"
              ),
              MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
              defaultMonthsShortRegex = matchWord,
              defaultMonthsRegex = matchWord;

            function localeMonths(m, format) {
              if (!m) {
                return isArray(this._months)
                  ? this._months
                  : this._months["standalone"];
              }
              return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                    (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? "format"
                      : "standalone"
                  ][m.month()];
            }

            function localeMonthsShort(m, format) {
              if (!m) {
                return isArray(this._monthsShort)
                  ? this._monthsShort
                  : this._monthsShort["standalone"];
              }
              return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                    MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"
                  ][m.month()];
            }

            function handleStrictParse(monthName, format, strict) {
              var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
              if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                  mom = createUTC([2000, i]);
                  this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ""
                  ).toLocaleLowerCase();
                  this._longMonthsParse[i] = this.months(
                    mom,
                    ""
                  ).toLocaleLowerCase();
                }
              }

              if (strict) {
                if (format === "MMM") {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                }
              } else {
                if (format === "MMM") {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
                }
              }
            }

            function localeMonthsParse(monthName, format, strict) {
              var i, mom, regex;

              if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
              }

              if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
              }

              // TODO: add sorting
              // Sorting makes sure if one month (or abbr) is a prefix of another
              // see sorting in computeMonthsParse
              for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                  this._longMonthsParse[i] = new RegExp(
                    "^" + this.months(mom, "").replace(".", "") + "$",
                    "i"
                  );
                  this._shortMonthsParse[i] = new RegExp(
                    "^" + this.monthsShort(mom, "").replace(".", "") + "$",
                    "i"
                  );
                }
                if (!strict && !this._monthsParse[i]) {
                  regex =
                    "^" +
                    this.months(mom, "") +
                    "|^" +
                    this.monthsShort(mom, "");
                  this._monthsParse[i] = new RegExp(
                    regex.replace(".", ""),
                    "i"
                  );
                }
                // test the regex
                if (
                  strict &&
                  format === "MMMM" &&
                  this._longMonthsParse[i].test(monthName)
                ) {
                  return i;
                } else if (
                  strict &&
                  format === "MMM" &&
                  this._shortMonthsParse[i].test(monthName)
                ) {
                  return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                  return i;
                }
              }
            }

            // MOMENTS

            function setMonth(mom, value) {
              var dayOfMonth;

              if (!mom.isValid()) {
                // No op
                return mom;
              }

              if (typeof value === "string") {
                if (/^\d+$/.test(value)) {
                  value = toInt(value);
                } else {
                  value = mom.localeData().monthsParse(value);
                  // TODO: Another silent failure?
                  if (!isNumber(value)) {
                    return mom;
                  }
                }
              }

              dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
              mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](
                value,
                dayOfMonth
              );
              return mom;
            }

            function getSetMonth(value) {
              if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
              } else {
                return get(this, "Month");
              }
            }

            function getDaysInMonth() {
              return daysInMonth(this.year(), this.month());
            }

            function monthsShortRegex(isStrict) {
              if (this._monthsParseExact) {
                if (!hasOwnProp(this, "_monthsRegex")) {
                  computeMonthsParse.call(this);
                }
                if (isStrict) {
                  return this._monthsShortStrictRegex;
                } else {
                  return this._monthsShortRegex;
                }
              } else {
                if (!hasOwnProp(this, "_monthsShortRegex")) {
                  this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                  ? this._monthsShortStrictRegex
                  : this._monthsShortRegex;
              }
            }

            function monthsRegex(isStrict) {
              if (this._monthsParseExact) {
                if (!hasOwnProp(this, "_monthsRegex")) {
                  computeMonthsParse.call(this);
                }
                if (isStrict) {
                  return this._monthsStrictRegex;
                } else {
                  return this._monthsRegex;
                }
              } else {
                if (!hasOwnProp(this, "_monthsRegex")) {
                  this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                  ? this._monthsStrictRegex
                  : this._monthsRegex;
              }
            }

            function computeMonthsParse() {
              function cmpLenRev(a, b) {
                return b.length - a.length;
              }

              var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;
              for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ""));
                longPieces.push(this.months(mom, ""));
                mixedPieces.push(this.months(mom, ""));
                mixedPieces.push(this.monthsShort(mom, ""));
              }
              // Sorting makes sure if one month (or abbr) is a prefix of another it
              // will match the longer piece.
              shortPieces.sort(cmpLenRev);
              longPieces.sort(cmpLenRev);
              mixedPieces.sort(cmpLenRev);
              for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
              }
              for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
              }

              this._monthsRegex = new RegExp(
                "^(" + mixedPieces.join("|") + ")",
                "i"
              );
              this._monthsShortRegex = this._monthsRegex;
              this._monthsStrictRegex = new RegExp(
                "^(" + longPieces.join("|") + ")",
                "i"
              );
              this._monthsShortStrictRegex = new RegExp(
                "^(" + shortPieces.join("|") + ")",
                "i"
              );
            }

            // FORMATTING

            addFormatToken("Y", 0, 0, function() {
              var y = this.year();
              return y <= 9999 ? zeroFill(y, 4) : "+" + y;
            });

            addFormatToken(0, ["YY", 2], 0, function() {
              return this.year() % 100;
            });

            addFormatToken(0, ["YYYY", 4], 0, "year");
            addFormatToken(0, ["YYYYY", 5], 0, "year");
            addFormatToken(0, ["YYYYYY", 6, true], 0, "year");

            // ALIASES

            addUnitAlias("year", "y");

            // PRIORITIES

            addUnitPriority("year", 1);

            // PARSING

            addRegexToken("Y", matchSigned);
            addRegexToken("YY", match1to2, match2);
            addRegexToken("YYYY", match1to4, match4);
            addRegexToken("YYYYY", match1to6, match6);
            addRegexToken("YYYYYY", match1to6, match6);

            addParseToken(["YYYYY", "YYYYYY"], YEAR);
            addParseToken("YYYY", function(input, array) {
              array[YEAR] =
                input.length === 2
                  ? hooks.parseTwoDigitYear(input)
                  : toInt(input);
            });
            addParseToken("YY", function(input, array) {
              array[YEAR] = hooks.parseTwoDigitYear(input);
            });
            addParseToken("Y", function(input, array) {
              array[YEAR] = parseInt(input, 10);
            });

            // HELPERS

            function daysInYear(year) {
              return isLeapYear(year) ? 366 : 365;
            }

            // HOOKS

            hooks.parseTwoDigitYear = function(input) {
              return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            };

            // MOMENTS

            var getSetYear = makeGetSet("FullYear", true);

            function getIsLeapYear() {
              return isLeapYear(this.year());
            }

            function createDate(y, m, d, h, M, s, ms) {
              // can't just apply() to create a date:
              // https://stackoverflow.com/q/181348
              var date;
              // the date constructor remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                  date.setFullYear(y);
                }
              } else {
                date = new Date(y, m, d, h, M, s, ms);
              }

              return date;
            }

            function createUTCDate(y) {
              var date, args;
              // the Date.UTC function remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                  date.setUTCFullYear(y);
                }
              } else {
                date = new Date(Date.UTC.apply(null, arguments));
              }

              return date;
            }

            // start-of-first-week - start-of-year
            function firstWeekOffset(year, dow, doy) {
              var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

              return -fwdlw + fwd - 1;
            }

            // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
            function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
              var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

              if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
              } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
              } else {
                resYear = year;
                resDayOfYear = dayOfYear;
              }

              return {
                year: resYear,
                dayOfYear: resDayOfYear,
              };
            }

            function weekOfYear(mom, dow, doy) {
              var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

              if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
              } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
              } else {
                resYear = mom.year();
                resWeek = week;
              }

              return {
                week: resWeek,
                year: resYear,
              };
            }

            function weeksInYear(year, dow, doy) {
              var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
              return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
            }

            // FORMATTING

            addFormatToken("w", ["ww", 2], "wo", "week");
            addFormatToken("W", ["WW", 2], "Wo", "isoWeek");

            // ALIASES

            addUnitAlias("week", "w");
            addUnitAlias("isoWeek", "W");

            // PRIORITIES

            addUnitPriority("week", 5);
            addUnitPriority("isoWeek", 5);

            // PARSING

            addRegexToken("w", match1to2);
            addRegexToken("ww", match1to2, match2);
            addRegexToken("W", match1to2);
            addRegexToken("WW", match1to2, match2);

            addWeekParseToken(["w", "ww", "W", "WW"], function(
              input,
              week,
              config,
              token
            ) {
              week[token.substr(0, 1)] = toInt(input);
            });

            // HELPERS

            // LOCALES

            function localeWeek(mom) {
              return weekOfYear(mom, this._week.dow, this._week.doy).week;
            }

            var defaultLocaleWeek = {
              dow: 0, // Sunday is the first day of the week.
              doy: 6, // The week that contains Jan 6th is the first week of the year.
            };

            function localeFirstDayOfWeek() {
              return this._week.dow;
            }

            function localeFirstDayOfYear() {
              return this._week.doy;
            }

            // MOMENTS

            function getSetWeek(input) {
              var week = this.localeData().week(this);
              return input == null ? week : this.add((input - week) * 7, "d");
            }

            function getSetISOWeek(input) {
              var week = weekOfYear(this, 1, 4).week;
              return input == null ? week : this.add((input - week) * 7, "d");
            }

            // FORMATTING

            addFormatToken("d", 0, "do", "day");

            addFormatToken("dd", 0, 0, function(format) {
              return this.localeData().weekdaysMin(this, format);
            });

            addFormatToken("ddd", 0, 0, function(format) {
              return this.localeData().weekdaysShort(this, format);
            });

            addFormatToken("dddd", 0, 0, function(format) {
              return this.localeData().weekdays(this, format);
            });

            addFormatToken("e", 0, 0, "weekday");
            addFormatToken("E", 0, 0, "isoWeekday");

            // ALIASES

            addUnitAlias("day", "d");
            addUnitAlias("weekday", "e");
            addUnitAlias("isoWeekday", "E");

            // PRIORITY
            addUnitPriority("day", 11);
            addUnitPriority("weekday", 11);
            addUnitPriority("isoWeekday", 11);

            // PARSING

            addRegexToken("d", match1to2);
            addRegexToken("e", match1to2);
            addRegexToken("E", match1to2);
            addRegexToken("dd", function(isStrict, locale) {
              return locale.weekdaysMinRegex(isStrict);
            });
            addRegexToken("ddd", function(isStrict, locale) {
              return locale.weekdaysShortRegex(isStrict);
            });
            addRegexToken("dddd", function(isStrict, locale) {
              return locale.weekdaysRegex(isStrict);
            });

            addWeekParseToken(["dd", "ddd", "dddd"], function(
              input,
              week,
              config,
              token
            ) {
              var weekday = config._locale.weekdaysParse(
                input,
                token,
                config._strict
              );
              // if we didn't get a weekday name, mark the date as invalid
              if (weekday != null) {
                week.d = weekday;
              } else {
                getParsingFlags(config).invalidWeekday = input;
              }
            });

            addWeekParseToken(["d", "e", "E"], function(
              input,
              week,
              config,
              token
            ) {
              week[token] = toInt(input);
            });

            // HELPERS

            function parseWeekday(input, locale) {
              if (typeof input !== "string") {
                return input;
              }

              if (!isNaN(input)) {
                return parseInt(input, 10);
              }

              input = locale.weekdaysParse(input);
              if (typeof input === "number") {
                return input;
              }

              return null;
            }

            function parseIsoWeekday(input, locale) {
              if (typeof input === "string") {
                return locale.weekdaysParse(input) % 7 || 7;
              }
              return isNaN(input) ? null : input;
            }

            // LOCALES
            function shiftWeekdays(ws, n) {
              return ws.slice(n, 7).concat(ws.slice(0, n));
            }

            var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
                "_"
              ),
              defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split(
                "_"
              ),
              defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
              defaultWeekdaysRegex = matchWord,
              defaultWeekdaysShortRegex = matchWord,
              defaultWeekdaysMinRegex = matchWord;

            function localeWeekdays(m, format) {
              var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                    m && m !== true && this._weekdays.isFormat.test(format)
                      ? "format"
                      : "standalone"
                  ];
              return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                ? weekdays[m.day()]
                : weekdays;
            }

            function localeWeekdaysShort(m) {
              return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                ? this._weekdaysShort[m.day()]
                : this._weekdaysShort;
            }

            function localeWeekdaysMin(m) {
              return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                ? this._weekdaysMin[m.day()]
                : this._weekdaysMin;
            }

            function handleStrictParse$1(weekdayName, format, strict) {
              var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
              if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                  mom = createUTC([2000, 1]).day(i);
                  this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ""
                  ).toLocaleLowerCase();
                  this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ""
                  ).toLocaleLowerCase();
                  this._weekdaysParse[i] = this.weekdays(
                    mom,
                    ""
                  ).toLocaleLowerCase();
                }
              }

              if (strict) {
                if (format === "dddd") {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else if (format === "ddd") {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                }
              } else {
                if (format === "dddd") {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else if (format === "ddd") {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                    return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
                }
              }
            }

            function localeWeekdaysParse(weekdayName, format, strict) {
              var i, mom, regex;

              if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(
                  this,
                  weekdayName,
                  format,
                  strict
                );
              }

              if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
              }

              for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                  this._fullWeekdaysParse[i] = new RegExp(
                    "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
                    "i"
                  );
                  this._shortWeekdaysParse[i] = new RegExp(
                    "^" +
                      this.weekdaysShort(mom, "").replace(".", "\\.?") +
                      "$",
                    "i"
                  );
                  this._minWeekdaysParse[i] = new RegExp(
                    "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
                    "i"
                  );
                }
                if (!this._weekdaysParse[i]) {
                  regex =
                    "^" +
                    this.weekdays(mom, "") +
                    "|^" +
                    this.weekdaysShort(mom, "") +
                    "|^" +
                    this.weekdaysMin(mom, "");
                  this._weekdaysParse[i] = new RegExp(
                    regex.replace(".", ""),
                    "i"
                  );
                }
                // test the regex
                if (
                  strict &&
                  format === "dddd" &&
                  this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                  return i;
                } else if (
                  strict &&
                  format === "ddd" &&
                  this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                  return i;
                } else if (
                  strict &&
                  format === "dd" &&
                  this._minWeekdaysParse[i].test(weekdayName)
                ) {
                  return i;
                } else if (
                  !strict &&
                  this._weekdaysParse[i].test(weekdayName)
                ) {
                  return i;
                }
              }
            }

            // MOMENTS

            function getSetDayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
              if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, "d");
              } else {
                return day;
              }
            }

            function getSetLocaleDayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
              return input == null ? weekday : this.add(input - weekday, "d");
            }

            function getSetISODayOfWeek(input) {
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }

              // behaves the same as moment#day except
              // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
              // as a setter, sunday should belong to the previous week.

              if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
              } else {
                return this.day() || 7;
              }
            }

            function weekdaysRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, "_weekdaysRegex")) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysStrictRegex;
                } else {
                  return this._weekdaysRegex;
                }
              } else {
                if (!hasOwnProp(this, "_weekdaysRegex")) {
                  this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                  ? this._weekdaysStrictRegex
                  : this._weekdaysRegex;
              }
            }

            function weekdaysShortRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, "_weekdaysRegex")) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysShortStrictRegex;
                } else {
                  return this._weekdaysShortRegex;
                }
              } else {
                if (!hasOwnProp(this, "_weekdaysShortRegex")) {
                  this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                  ? this._weekdaysShortStrictRegex
                  : this._weekdaysShortRegex;
              }
            }

            function weekdaysMinRegex(isStrict) {
              if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, "_weekdaysRegex")) {
                  computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                  return this._weekdaysMinStrictRegex;
                } else {
                  return this._weekdaysMinRegex;
                }
              } else {
                if (!hasOwnProp(this, "_weekdaysMinRegex")) {
                  this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                  ? this._weekdaysMinStrictRegex
                  : this._weekdaysMinRegex;
              }
            }

            function computeWeekdaysParse() {
              function cmpLenRev(a, b) {
                return b.length - a.length;
              }

              var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
              for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ""));
                shortp = regexEscape(this.weekdaysShort(mom, ""));
                longp = regexEscape(this.weekdays(mom, ""));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
              }
              // Sorting makes sure if one weekday (or abbr) is a prefix of another it
              // will match the longer piece.
              minPieces.sort(cmpLenRev);
              shortPieces.sort(cmpLenRev);
              longPieces.sort(cmpLenRev);
              mixedPieces.sort(cmpLenRev);

              this._weekdaysRegex = new RegExp(
                "^(" + mixedPieces.join("|") + ")",
                "i"
              );
              this._weekdaysShortRegex = this._weekdaysRegex;
              this._weekdaysMinRegex = this._weekdaysRegex;

              this._weekdaysStrictRegex = new RegExp(
                "^(" + longPieces.join("|") + ")",
                "i"
              );
              this._weekdaysShortStrictRegex = new RegExp(
                "^(" + shortPieces.join("|") + ")",
                "i"
              );
              this._weekdaysMinStrictRegex = new RegExp(
                "^(" + minPieces.join("|") + ")",
                "i"
              );
            }

            // FORMATTING

            function hFormat() {
              return this.hours() % 12 || 12;
            }

            function kFormat() {
              return this.hours() || 24;
            }

            addFormatToken("H", ["HH", 2], 0, "hour");
            addFormatToken("h", ["hh", 2], 0, hFormat);
            addFormatToken("k", ["kk", 2], 0, kFormat);

            addFormatToken("hmm", 0, 0, function() {
              return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
            });

            addFormatToken("hmmss", 0, 0, function() {
              return (
                "" +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
              );
            });

            addFormatToken("Hmm", 0, 0, function() {
              return "" + this.hours() + zeroFill(this.minutes(), 2);
            });

            addFormatToken("Hmmss", 0, 0, function() {
              return (
                "" +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
              );
            });

            function meridiem(token, lowercase) {
              addFormatToken(token, 0, 0, function() {
                return this.localeData().meridiem(
                  this.hours(),
                  this.minutes(),
                  lowercase
                );
              });
            }

            meridiem("a", true);
            meridiem("A", false);

            // ALIASES

            addUnitAlias("hour", "h");

            // PRIORITY
            addUnitPriority("hour", 13);

            // PARSING

            function matchMeridiem(isStrict, locale) {
              return locale._meridiemParse;
            }

            addRegexToken("a", matchMeridiem);
            addRegexToken("A", matchMeridiem);
            addRegexToken("H", match1to2);
            addRegexToken("h", match1to2);
            addRegexToken("k", match1to2);
            addRegexToken("HH", match1to2, match2);
            addRegexToken("hh", match1to2, match2);
            addRegexToken("kk", match1to2, match2);

            addRegexToken("hmm", match3to4);
            addRegexToken("hmmss", match5to6);
            addRegexToken("Hmm", match3to4);
            addRegexToken("Hmmss", match5to6);

            addParseToken(["H", "HH"], HOUR);
            addParseToken(["k", "kk"], function(input, array, config) {
              var kInput = toInt(input);
              array[HOUR] = kInput === 24 ? 0 : kInput;
            });
            addParseToken(["a", "A"], function(input, array, config) {
              config._isPm = config._locale.isPM(input);
              config._meridiem = input;
            });
            addParseToken(["h", "hh"], function(input, array, config) {
              array[HOUR] = toInt(input);
              getParsingFlags(config).bigHour = true;
            });
            addParseToken("hmm", function(input, array, config) {
              var pos = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos));
              array[MINUTE] = toInt(input.substr(pos));
              getParsingFlags(config).bigHour = true;
            });
            addParseToken("hmmss", function(input, array, config) {
              var pos1 = input.length - 4,
                pos2 = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos1));
              array[MINUTE] = toInt(input.substr(pos1, 2));
              array[SECOND] = toInt(input.substr(pos2));
              getParsingFlags(config).bigHour = true;
            });
            addParseToken("Hmm", function(input, array, config) {
              var pos = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos));
              array[MINUTE] = toInt(input.substr(pos));
            });
            addParseToken("Hmmss", function(input, array, config) {
              var pos1 = input.length - 4,
                pos2 = input.length - 2;
              array[HOUR] = toInt(input.substr(0, pos1));
              array[MINUTE] = toInt(input.substr(pos1, 2));
              array[SECOND] = toInt(input.substr(pos2));
            });

            // LOCALES

            function localeIsPM(input) {
              // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
              // Using charAt should be more compatible.
              return (input + "").toLowerCase().charAt(0) === "p";
            }

            var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
              // Setting the hour should keep the time, because the user explicitly
              // specified which hour they want. So trying to maintain the same hour (in
              // a new timezone) makes sense. Adding/subtracting hours does not follow
              // this rule.
              getSetHour = makeGetSet("Hours", true);

            function localeMeridiem(hours, minutes, isLower) {
              if (hours > 11) {
                return isLower ? "pm" : "PM";
              } else {
                return isLower ? "am" : "AM";
              }
            }

            var baseConfig = {
              calendar: defaultCalendar,
              longDateFormat: defaultLongDateFormat,
              invalidDate: defaultInvalidDate,
              ordinal: defaultOrdinal,
              dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
              relativeTime: defaultRelativeTime,

              months: defaultLocaleMonths,
              monthsShort: defaultLocaleMonthsShort,

              week: defaultLocaleWeek,

              weekdays: defaultLocaleWeekdays,
              weekdaysMin: defaultLocaleWeekdaysMin,
              weekdaysShort: defaultLocaleWeekdaysShort,

              meridiemParse: defaultLocaleMeridiemParse,
            };

            // internal storage for locale config files
            var locales = {},
              localeFamilies = {},
              globalLocale;

            function commonPrefix(arr1, arr2) {
              var i,
                minl = Math.min(arr1.length, arr2.length);
              for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                  return i;
                }
              }
              return minl;
            }

            function normalizeLocale(key) {
              return key ? key.toLowerCase().replace("_", "-") : key;
            }

            // pick the locale from the array
            // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
            // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
            function chooseLocale(names) {
              var i = 0,
                j,
                next,
                locale,
                split;

              while (i < names.length) {
                split = normalizeLocale(names[i]).split("-");
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split("-") : null;
                while (j > 0) {
                  locale = loadLocale(split.slice(0, j).join("-"));
                  if (locale) {
                    return locale;
                  }
                  if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                  ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                  }
                  j--;
                }
                i++;
              }
              return globalLocale;
            }

            function loadLocale(name) {
              var oldLocale = null,
                aliasedRequire;
              // TODO: Find a better way to register and load all the locales in Node
              if (
                locales[name] === undefined &&
                typeof module !== "undefined" &&
                module &&
                module.exports
              ) {
                try {
                  oldLocale = globalLocale._abbr;
                  aliasedRequire = require;
                  __webpack_require__(
                    "./node_modules/moment/locale sync recursive ^\\.\\/.*$"
                  )("./" + name);
                  getSetGlobalLocale(oldLocale);
                } catch (e) {
                  // mark as not found to avoid repeating expensive file require call causing high CPU
                  // when trying to find en-US, en_US, en-us for every format call
                  locales[name] = null; // null means not found
                }
              }
              return locales[name];
            }

            // This function will load locale and then set the global locale.  If
            // no arguments are passed in, it will simply return the current global
            // locale key.
            function getSetGlobalLocale(key, values) {
              var data;
              if (key) {
                if (isUndefined(values)) {
                  data = getLocale(key);
                } else {
                  data = defineLocale(key, values);
                }

                if (data) {
                  // moment.duration._locale = moment._locale = data;
                  globalLocale = data;
                } else {
                  if (typeof console !== "undefined" && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                      "Locale " + key + " not found. Did you forget to load it?"
                    );
                  }
                }
              }

              return globalLocale._abbr;
            }

            function defineLocale(name, config) {
              if (config !== null) {
                var locale,
                  parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                  deprecateSimple(
                    "defineLocaleOverride",
                    "use moment.updateLocale(localeName, config) to change " +
                      "an existing locale. moment.defineLocale(localeName, " +
                      "config) should only be used for creating a new locale " +
                      "See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
                  );
                  parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                  if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                  } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                      parentConfig = locale._config;
                    } else {
                      if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                      }
                      localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config,
                      });
                      return null;
                    }
                  }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                  localeFamilies[name].forEach(function(x) {
                    defineLocale(x.name, x.config);
                  });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);

                return locales[name];
              } else {
                // useful for testing
                delete locales[name];
                return null;
              }
            }

            function updateLocale(name, config) {
              if (config != null) {
                var locale,
                  tmpLocale,
                  parentConfig = baseConfig;

                if (
                  locales[name] != null &&
                  locales[name].parentLocale != null
                ) {
                  // Update existing child locale in-place to avoid memory-leaks
                  locales[name].set(
                    mergeConfigs(locales[name]._config, config)
                  );
                } else {
                  // MERGE
                  tmpLocale = loadLocale(name);
                  if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                  }
                  config = mergeConfigs(parentConfig, config);
                  if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                  }
                  locale = new Locale(config);
                  locale.parentLocale = locales[name];
                  locales[name] = locale;
                }

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
              } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                  if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                      getSetGlobalLocale(name);
                    }
                  } else if (locales[name] != null) {
                    delete locales[name];
                  }
                }
              }
              return locales[name];
            }

            // returns locale data
            function getLocale(key) {
              var locale;

              if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
              }

              if (!key) {
                return globalLocale;
              }

              if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                  return locale;
                }
                key = [key];
              }

              return chooseLocale(key);
            }

            function listLocales() {
              return keys(locales);
            }

            function checkOverflow(m) {
              var overflow,
                a = m._a;

              if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                  a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                        (a[MINUTE] !== 0 ||
                          a[SECOND] !== 0 ||
                          a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

                if (
                  getParsingFlags(m)._overflowDayOfYear &&
                  (overflow < YEAR || overflow > DATE)
                ) {
                  overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                  overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                  overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
              }

              return m;
            }

            // iso 8601 regex
            // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
            var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
              basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
              tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
              isoDates = [
                ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
                ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
                ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
                ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
                ["YYYY-DDD", /\d{4}-\d{3}/],
                ["YYYY-MM", /\d{4}-\d\d/, false],
                ["YYYYYYMMDD", /[+-]\d{10}/],
                ["YYYYMMDD", /\d{8}/],
                ["GGGG[W]WWE", /\d{4}W\d{3}/],
                ["GGGG[W]WW", /\d{4}W\d{2}/, false],
                ["YYYYDDD", /\d{7}/],
                ["YYYYMM", /\d{6}/, false],
                ["YYYY", /\d{4}/, false],
              ],
              // iso time formats and regexes
              isoTimes = [
                ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
                ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
                ["HH:mm:ss", /\d\d:\d\d:\d\d/],
                ["HH:mm", /\d\d:\d\d/],
                ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
                ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
                ["HHmmss", /\d\d\d\d\d\d/],
                ["HHmm", /\d\d\d\d/],
                ["HH", /\d\d/],
              ],
              aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
              // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
              rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
              obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
              };

            // date from iso format
            function configFromISO(config) {
              var i,
                l,
                string = config._i,
                match =
                  extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

              if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                  if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                  }
                }
                if (dateFormat == null) {
                  config._isValid = false;
                  return;
                }
                if (match[3]) {
                  for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                      // match[2] should be 'T' or space
                      timeFormat = (match[2] || " ") + isoTimes[i][0];
                      break;
                    }
                  }
                  if (timeFormat == null) {
                    config._isValid = false;
                    return;
                  }
                }
                if (!allowTime && timeFormat != null) {
                  config._isValid = false;
                  return;
                }
                if (match[4]) {
                  if (tzRegex.exec(match[4])) {
                    tzFormat = "Z";
                  } else {
                    config._isValid = false;
                    return;
                  }
                }
                config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
                configFromStringAndFormat(config);
              } else {
                config._isValid = false;
              }
            }

            function extractFromRFC2822Strings(
              yearStr,
              monthStr,
              dayStr,
              hourStr,
              minuteStr,
              secondStr
            ) {
              var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
              ];

              if (secondStr) {
                result.push(parseInt(secondStr, 10));
              }

              return result;
            }

            function untruncateYear(yearStr) {
              var year = parseInt(yearStr, 10);
              if (year <= 49) {
                return 2000 + year;
              } else if (year <= 999) {
                return 1900 + year;
              }
              return year;
            }

            function preprocessRFC2822(s) {
              // Remove comments and folding whitespace and replace multiple-spaces with a single space
              return s
                .replace(/\([^)]*\)|[\n\t]/g, " ")
                .replace(/(\s\s+)/g, " ")
                .replace(/^\s\s*/, "")
                .replace(/\s\s*$/, "");
            }

            function checkWeekday(weekdayStr, parsedInput, config) {
              if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(
                    weekdayStr
                  ),
                  weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                  ).getDay();
                if (weekdayProvided !== weekdayActual) {
                  getParsingFlags(config).weekdayMismatch = true;
                  config._isValid = false;
                  return false;
                }
              }
              return true;
            }

            function calculateOffset(obsOffset, militaryOffset, numOffset) {
              if (obsOffset) {
                return obsOffsets[obsOffset];
              } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
              } else {
                var hm = parseInt(numOffset, 10),
                  m = hm % 100,
                  h = (hm - m) / 100;
                return h * 60 + m;
              }
            }

            // date and time from ref 2822 format
            function configFromRFC2822(config) {
              var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
              if (match) {
                parsedArray = extractFromRFC2822Strings(
                  match[4],
                  match[3],
                  match[2],
                  match[5],
                  match[6],
                  match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                  return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(
                  config._d.getUTCMinutes() - config._tzm
                );

                getParsingFlags(config).rfc2822 = true;
              } else {
                config._isValid = false;
              }
            }

            // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
            function configFromString(config) {
              var matched = aspNetJsonRegex.exec(config._i);
              if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
              }

              configFromISO(config);
              if (config._isValid === false) {
                delete config._isValid;
              } else {
                return;
              }

              configFromRFC2822(config);
              if (config._isValid === false) {
                delete config._isValid;
              } else {
                return;
              }

              if (config._strict) {
                config._isValid = false;
              } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
              }
            }

            hooks.createFromInputFallback = deprecate(
              "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), " +
                "which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are " +
                "discouraged and will be removed in an upcoming major release. Please refer to " +
                "http://momentjs.com/guides/#/warnings/js-date/ for more info.",
              function(config) {
                config._d = new Date(
                  config._i + (config._useUTC ? " UTC" : "")
                );
              }
            );

            // Pick the first defined of two or three arguments.
            function defaults(a, b, c) {
              if (a != null) {
                return a;
              }
              if (b != null) {
                return b;
              }
              return c;
            }

            function currentDateArray(config) {
              // hooks is actually the exported moment object
              var nowValue = new Date(hooks.now());
              if (config._useUTC) {
                return [
                  nowValue.getUTCFullYear(),
                  nowValue.getUTCMonth(),
                  nowValue.getUTCDate(),
                ];
              }
              return [
                nowValue.getFullYear(),
                nowValue.getMonth(),
                nowValue.getDate(),
              ];
            }

            // convert an array to a date.
            // the array should mirror the parameters below
            // note: all values past the year are optional and will default to the lowest possible value.
            // [year, month, day , hour, minute, second, millisecond]
            function configFromArray(config) {
              var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

              if (config._d) {
                return;
              }

              currentDate = currentDateArray(config);

              //compute day of the year from weeks and weekdays
              if (
                config._w &&
                config._a[DATE] == null &&
                config._a[MONTH] == null
              ) {
                dayOfYearFromWeekInfo(config);
              }

              //if the day of the year is set, figure out what it is
              if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (
                  config._dayOfYear > daysInYear(yearToUse) ||
                  config._dayOfYear === 0
                ) {
                  getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
              }

              // Default to current date.
              // * if no year, month, day of month are given, default to today
              // * if day of month is given, default month and year
              // * if month is given, default only year
              // * if year is given, don't default anything
              for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
              }

              // Zero out whatever was not defaulted, including time
              for (; i < 7; i++) {
                config._a[i] = input[i] =
                  config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
              }

              // Check for 24:00:00.000
              if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
              ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
              }

              config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
              );
              expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();

              // Apply timezone offset from input. The actual utcOffset can be changed
              // with parseZone.
              if (config._tzm != null) {
                config._d.setUTCMinutes(
                  config._d.getUTCMinutes() - config._tzm
                );
              }

              if (config._nextDay) {
                config._a[HOUR] = 24;
              }

              // check for mismatching day of week
              if (
                config._w &&
                typeof config._w.d !== "undefined" &&
                config._w.d !== expectedWeekday
              ) {
                getParsingFlags(config).weekdayMismatch = true;
              }
            }

            function dayOfYearFromWeekInfo(config) {
              var w,
                weekYear,
                week,
                weekday,
                dow,
                doy,
                temp,
                weekdayOverflow,
                curWeek;

              w = config._w;
              if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                  w.GG,
                  config._a[YEAR],
                  weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                  weekdayOverflow = true;
                }
              } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                  // weekday -- low day numbers are considered next week
                  weekday = w.d;
                  if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                  }
                } else if (w.e != null) {
                  // local weekday -- counting starts from beginning of week
                  weekday = w.e + dow;
                  if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                  }
                } else {
                  // default to beginning of week
                  weekday = dow;
                }
              }
              if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
              } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
              } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
              }
            }

            // constant that refers to the ISO standard
            hooks.ISO_8601 = function() {};

            // constant that refers to the RFC 2822 form
            hooks.RFC_2822 = function() {};

            // date from string and format string
            function configFromStringAndFormat(config) {
              // TODO: Move this to another part of the creation flow to prevent circular deps
              if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
              }
              if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
              }
              config._a = [];
              getParsingFlags(config).empty = true;

              // This array is used to make a Date, either with `new Date` or `Date.UTC`
              var string = "" + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era;

              tokens =
                expandFormat(config._f, config._locale).match(
                  formattingTokens
                ) || [];

              for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(
                  getParseRegexForToken(token, config)
                ) || [])[0];
                // console.log('token', token, 'parsedInput', parsedInput,
                //         'regex', getParseRegexForToken(token, config));
                if (parsedInput) {
                  skipped = string.substr(0, string.indexOf(parsedInput));
                  if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                  }
                  string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                  );
                  totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                  if (parsedInput) {
                    getParsingFlags(config).empty = false;
                  } else {
                    getParsingFlags(config).unusedTokens.push(token);
                  }
                  addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                  getParsingFlags(config).unusedTokens.push(token);
                }
              }

              // add remaining unparsed input length to the string
              getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
              if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
              }

              // clear _12h flag if hour is <= 12
              if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
              ) {
                getParsingFlags(config).bigHour = undefined;
              }

              getParsingFlags(config).parsedDateParts = config._a.slice(0);
              getParsingFlags(config).meridiem = config._meridiem;
              // handle meridiem
              config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
              );

              // handle era
              era = getParsingFlags(config).era;
              if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(
                  era,
                  config._a[YEAR]
                );
              }

              configFromArray(config);
              checkOverflow(config);
            }

            function meridiemFixWrap(locale, hour, meridiem) {
              var isPm;

              if (meridiem == null) {
                // nothing to do
                return hour;
              }
              if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
              } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                  hour += 12;
                }
                if (!isPm && hour === 12) {
                  hour = 0;
                }
                return hour;
              } else {
                // this is not supposed to happen
                return hour;
              }
            }

            // date from string and array of format strings
            function configFromStringAndArray(config) {
              var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false;

              if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
              }

              for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                  tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (isValid(tempConfig)) {
                  validFormatFound = true;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore +=
                  getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (!bestFormatIsValid) {
                  if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                  ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                      bestFormatIsValid = true;
                    }
                  }
                } else {
                  if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                  }
                }
              }

              extend(config, bestMoment || tempConfig);
            }

            function configFromObject(config) {
              if (config._d) {
                return;
              }

              var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
              config._a = map(
                [
                  i.year,
                  i.month,
                  dayOrDate,
                  i.hour,
                  i.minute,
                  i.second,
                  i.millisecond,
                ],
                function(obj) {
                  return obj && parseInt(obj, 10);
                }
              );

              configFromArray(config);
            }

            function createFromConfig(config) {
              var res = new Moment(checkOverflow(prepareConfig(config)));
              if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, "d");
                res._nextDay = undefined;
              }

              return res;
            }

            function prepareConfig(config) {
              var input = config._i,
                format = config._f;

              config._locale = config._locale || getLocale(config._l);

              if (input === null || (format === undefined && input === "")) {
                return createInvalid({ nullInput: true });
              }

              if (typeof input === "string") {
                config._i = input = config._locale.preparse(input);
              }

              if (isMoment(input)) {
                return new Moment(checkOverflow(input));
              } else if (isDate(input)) {
                config._d = input;
              } else if (isArray(format)) {
                configFromStringAndArray(config);
              } else if (format) {
                configFromStringAndFormat(config);
              } else {
                configFromInput(config);
              }

              if (!isValid(config)) {
                config._d = null;
              }

              return config;
            }

            function configFromInput(config) {
              var input = config._i;
              if (isUndefined(input)) {
                config._d = new Date(hooks.now());
              } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
              } else if (typeof input === "string") {
                configFromString(config);
              } else if (isArray(input)) {
                config._a = map(input.slice(0), function(obj) {
                  return parseInt(obj, 10);
                });
                configFromArray(config);
              } else if (isObject(input)) {
                configFromObject(config);
              } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
              } else {
                hooks.createFromInputFallback(config);
              }
            }

            function createLocalOrUTC(input, format, locale, strict, isUTC) {
              var c = {};

              if (format === true || format === false) {
                strict = format;
                format = undefined;
              }

              if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
              }

              if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
              ) {
                input = undefined;
              }
              // object construction must be done this way.
              // https://github.com/moment/moment/issues/1423
              c._isAMomentObject = true;
              c._useUTC = c._isUTC = isUTC;
              c._l = locale;
              c._i = input;
              c._f = format;
              c._strict = strict;

              return createFromConfig(c);
            }

            function createLocal(input, format, locale, strict) {
              return createLocalOrUTC(input, format, locale, strict, false);
            }

            var prototypeMin = deprecate(
                "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
                function() {
                  var other = createLocal.apply(null, arguments);
                  if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                  } else {
                    return createInvalid();
                  }
                }
              ),
              prototypeMax = deprecate(
                "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
                function() {
                  var other = createLocal.apply(null, arguments);
                  if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                  } else {
                    return createInvalid();
                  }
                }
              );

            // Pick a moment m from moments so that m[fn](other) is true for all
            // other. This relies on the function fn to be transitive.
            //
            // moments should either be an array of moment objects or an array, whose
            // first element is an array of moment objects.
            function pickBy(fn, moments) {
              var res, i;
              if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
              }
              if (!moments.length) {
                return createLocal();
              }
              res = moments[0];
              for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                  res = moments[i];
                }
              }
              return res;
            }

            // TODO: Use [].sort instead?
            function min() {
              var args = [].slice.call(arguments, 0);

              return pickBy("isBefore", args);
            }

            function max() {
              var args = [].slice.call(arguments, 0);

              return pickBy("isAfter", args);
            }

            var now = function() {
              return Date.now ? Date.now() : +new Date();
            };

            var ordering = [
              "year",
              "quarter",
              "month",
              "week",
              "day",
              "hour",
              "minute",
              "second",
              "millisecond",
            ];

            function isDurationValid(m) {
              var key,
                unitHasDecimal = false,
                i;
              for (key in m) {
                if (
                  hasOwnProp(m, key) &&
                  !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                  )
                ) {
                  return false;
                }
              }

              for (i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                  if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                  }
                  if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                  }
                }
              }

              return true;
            }

            function isValid$1() {
              return this._isValid;
            }

            function createInvalid$1() {
              return createDuration(NaN);
            }

            function Duration(duration) {
              var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

              this._isValid = isDurationValid(normalizedInput);

              // representation for dateAddRemove
              this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
              // Because of dateAddRemove treats 24 hours as different from a
              // day when working around DST, we need to store them separately
              this._days = +days + weeks * 7;
              // It is impossible to translate months into days without knowing
              // which months you are are talking about, so we have to store
              // it separately.
              this._months = +months + quarters * 3 + years * 12;

              this._data = {};

              this._locale = getLocale();

              this._bubble();
            }

            function isDuration(obj) {
              return obj instanceof Duration;
            }

            function absRound(number) {
              if (number < 0) {
                return Math.round(-1 * number) * -1;
              } else {
                return Math.round(number);
              }
            }

            // compare two arrays, return the number of differences
            function compareArrays(array1, array2, dontConvert) {
              var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
              for (i = 0; i < len; i++) {
                if (
                  (dontConvert && array1[i] !== array2[i]) ||
                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                  diffs++;
                }
              }
              return diffs + lengthDiff;
            }

            // FORMATTING

            function offset(token, separator) {
              addFormatToken(token, 0, 0, function() {
                var offset = this.utcOffset(),
                  sign = "+";
                if (offset < 0) {
                  offset = -offset;
                  sign = "-";
                }
                return (
                  sign +
                  zeroFill(~~(offset / 60), 2) +
                  separator +
                  zeroFill(~~offset % 60, 2)
                );
              });
            }

            offset("Z", ":");
            offset("ZZ", "");

            // PARSING

            addRegexToken("Z", matchShortOffset);
            addRegexToken("ZZ", matchShortOffset);
            addParseToken(["Z", "ZZ"], function(input, array, config) {
              config._useUTC = true;
              config._tzm = offsetFromString(matchShortOffset, input);
            });

            // HELPERS

            // timezone chunker
            // '+10:00' > ['10',  '00']
            // '-1530'  > ['-15', '30']
            var chunkOffset = /([\+\-]|\d\d)/gi;

            function offsetFromString(matcher, string) {
              var matches = (string || "").match(matcher),
                chunk,
                parts,
                minutes;

              if (matches === null) {
                return null;
              }

              chunk = matches[matches.length - 1] || [];
              parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
              minutes = +(parts[1] * 60) + toInt(parts[2]);

              return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
            }

            // Return a moment from input, that is local/utc/zone equivalent to model.
            function cloneWithOffset(input, model) {
              var res, diff;
              if (model._isUTC) {
                res = model.clone();
                diff =
                  (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
              } else {
                return createLocal(input).local();
              }
            }

            function getDateOffset(m) {
              // On Firefox.24 Date#getTimezoneOffset returns a floating point.
              // https://github.com/moment/moment/pull/1871
              return -Math.round(m._d.getTimezoneOffset());
            }

            // HOOKS

            // This function will be called whenever a moment is mutated.
            // It is intended to keep the offset in sync with the timezone.
            hooks.updateOffset = function() {};

            // MOMENTS

            // keepLocalTime = true means only change the timezone, without
            // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
            // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
            // +0200, so we adjust the time as needed, to be valid.
            //
            // Keeping the time actually adds/subtracts (one hour)
            // from the actual represented time. That is why we call updateOffset
            // a second time. In case it wants us to change the offset again
            // _changeInProgress == true case, then we have to adjust, because
            // there is no such time in the given timezone.
            function getSetOffset(input, keepLocalTime, keepMinutes) {
              var offset = this._offset || 0,
                localAdjust;
              if (!this.isValid()) {
                return input != null ? this : NaN;
              }
              if (input != null) {
                if (typeof input === "string") {
                  input = offsetFromString(matchShortOffset, input);
                  if (input === null) {
                    return this;
                  }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                  input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                  localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                  this.add(localAdjust, "m");
                }
                if (offset !== input) {
                  if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                      this,
                      createDuration(input - offset, "m"),
                      1,
                      false
                    );
                  } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                  }
                }
                return this;
              } else {
                return this._isUTC ? offset : getDateOffset(this);
              }
            }

            function getSetZone(input, keepLocalTime) {
              if (input != null) {
                if (typeof input !== "string") {
                  input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
              } else {
                return -this.utcOffset();
              }
            }

            function setOffsetToUTC(keepLocalTime) {
              return this.utcOffset(0, keepLocalTime);
            }

            function setOffsetToLocal(keepLocalTime) {
              if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                  this.subtract(getDateOffset(this), "m");
                }
              }
              return this;
            }

            function setOffsetToParsedOffset() {
              if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
              } else if (typeof this._i === "string") {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                  this.utcOffset(tZone);
                } else {
                  this.utcOffset(0, true);
                }
              }
              return this;
            }

            function hasAlignedHourOffset(input) {
              if (!this.isValid()) {
                return false;
              }
              input = input ? createLocal(input).utcOffset() : 0;

              return (this.utcOffset() - input) % 60 === 0;
            }

            function isDaylightSavingTime() {
              return (
                this.utcOffset() >
                  this.clone()
                    .month(0)
                    .utcOffset() ||
                this.utcOffset() >
                  this.clone()
                    .month(5)
                    .utcOffset()
              );
            }

            function isDaylightSavingTimeShifted() {
              if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
              }

              var c = {},
                other;

              copyConfig(c, this);
              c = prepareConfig(c);

              if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                  this.isValid() && compareArrays(c._a, other.toArray()) > 0;
              } else {
                this._isDSTShifted = false;
              }

              return this._isDSTShifted;
            }

            function isLocal() {
              return this.isValid() ? !this._isUTC : false;
            }

            function isUtcOffset() {
              return this.isValid() ? this._isUTC : false;
            }

            function isUtc() {
              return this.isValid() ? this._isUTC && this._offset === 0 : false;
            }

            // ASP.NET json date format regex
            var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
              // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
              // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
              // and further modified to allow for strings containing both week and day
              isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

            function createDuration(input, key) {
              var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

              if (isDuration(input)) {
                duration = {
                  ms: input._milliseconds,
                  d: input._days,
                  M: input._months,
                };
              } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                  duration[key] = +input;
                } else {
                  duration.milliseconds = +input;
                }
              } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === "-" ? -1 : 1;
                duration = {
                  y: 0,
                  d: toInt(match[DATE]) * sign,
                  h: toInt(match[HOUR]) * sign,
                  m: toInt(match[MINUTE]) * sign,
                  s: toInt(match[SECOND]) * sign,
                  ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
              } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === "-" ? -1 : 1;
                duration = {
                  y: parseIso(match[2], sign),
                  M: parseIso(match[3], sign),
                  w: parseIso(match[4], sign),
                  d: parseIso(match[5], sign),
                  h: parseIso(match[6], sign),
                  m: parseIso(match[7], sign),
                  s: parseIso(match[8], sign),
                };
              } else if (duration == null) {
                // checks for null or undefined
                duration = {};
              } else if (
                typeof duration === "object" &&
                ("from" in duration || "to" in duration)
              ) {
                diffRes = momentsDifference(
                  createLocal(duration.from),
                  createLocal(duration.to)
                );

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
              }

              ret = new Duration(duration);

              if (isDuration(input) && hasOwnProp(input, "_locale")) {
                ret._locale = input._locale;
              }

              if (isDuration(input) && hasOwnProp(input, "_isValid")) {
                ret._isValid = input._isValid;
              }

              return ret;
            }

            createDuration.fn = Duration.prototype;
            createDuration.invalid = createInvalid$1;

            function parseIso(inp, sign) {
              // We'd normally use ~~inp for this, but unfortunately it also
              // converts floats to ints.
              // inp may be undefined, so careful calling replace on it.
              var res = inp && parseFloat(inp.replace(",", "."));
              // apply sign while we're at it
              return (isNaN(res) ? 0 : res) * sign;
            }

            function positiveMomentsDifference(base, other) {
              var res = {};

              res.months =
                other.month() -
                base.month() +
                (other.year() - base.year()) * 12;
              if (
                base
                  .clone()
                  .add(res.months, "M")
                  .isAfter(other)
              ) {
                --res.months;
              }

              res.milliseconds = +other - +base.clone().add(res.months, "M");

              return res;
            }

            function momentsDifference(base, other) {
              var res;
              if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
              }

              other = cloneWithOffset(other, base);
              if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
              } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
              }

              return res;
            }

            // TODO: remove 'name' arg after deprecation is removed
            function createAdder(direction, name) {
              return function(val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                  deprecateSimple(
                    name,
                    "moment()." +
                      name +
                      "(period, number) is deprecated. Please use moment()." +
                      name +
                      "(number, period). " +
                      "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
                  );
                  tmp = val;
                  val = period;
                  period = tmp;
                }

                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
              };
            }

            function addSubtract(mom, duration, isAdding, updateOffset) {
              var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

              if (!mom.isValid()) {
                // No op
                return;
              }

              updateOffset = updateOffset == null ? true : updateOffset;

              if (months) {
                setMonth(mom, get(mom, "Month") + months * isAdding);
              }
              if (days) {
                set$1(mom, "Date", get(mom, "Date") + days * isAdding);
              }
              if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
              }
              if (updateOffset) {
                hooks.updateOffset(mom, days || months);
              }
            }

            var add = createAdder(1, "add"),
              subtract = createAdder(-1, "subtract");

            function isString(input) {
              return typeof input === "string" || input instanceof String;
            }

            // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
            function isMomentInput(input) {
              return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
              );
            }

            function isMomentInputObject(input) {
              var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                  "years",
                  "year",
                  "y",
                  "months",
                  "month",
                  "M",
                  "days",
                  "day",
                  "d",
                  "dates",
                  "date",
                  "D",
                  "hours",
                  "hour",
                  "h",
                  "minutes",
                  "minute",
                  "m",
                  "seconds",
                  "second",
                  "s",
                  "milliseconds",
                  "millisecond",
                  "ms",
                ],
                i,
                property;

              for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
              }

              return objectTest && propertyTest;
            }

            function isNumberOrStringArray(input) {
              var arrayTest = isArray(input),
                dataTypeTest = false;
              if (arrayTest) {
                dataTypeTest =
                  input.filter(function(item) {
                    return !isNumber(item) && isString(input);
                  }).length === 0;
              }
              return arrayTest && dataTypeTest;
            }

            function isCalendarSpec(input) {
              var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                  "sameDay",
                  "nextDay",
                  "lastDay",
                  "nextWeek",
                  "lastWeek",
                  "sameElse",
                ],
                i,
                property;

              for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
              }

              return objectTest && propertyTest;
            }

            function getCalendarFormat(myMoment, now) {
              var diff = myMoment.diff(now, "days", true);
              return diff < -6
                ? "sameElse"
                : diff < -1
                ? "lastWeek"
                : diff < 0
                ? "lastDay"
                : diff < 1
                ? "sameDay"
                : diff < 2
                ? "nextDay"
                : diff < 7
                ? "nextWeek"
                : "sameElse";
            }

            function calendar$1(time, formats) {
              // Support for single parameter, formats only overload to the calendar function
              if (arguments.length === 1) {
                if (isMomentInput(arguments[0])) {
                  time = arguments[0];
                  formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                  formats = arguments[0];
                  time = undefined;
                }
              }
              // We want to compare the start of today, vs this.
              // Getting start-of-today depends on whether we're local/utc/offset or not.
              var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf("day"),
                format = hooks.calendarFormat(this, sod) || "sameElse",
                output =
                  formats &&
                  (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

              return this.format(
                output ||
                  this.localeData().calendar(format, this, createLocal(now))
              );
            }

            function clone() {
              return new Moment(this);
            }

            function isAfter(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input);
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(units) || "millisecond";
              if (units === "millisecond") {
                return this.valueOf() > localInput.valueOf();
              } else {
                return (
                  localInput.valueOf() <
                  this.clone()
                    .startOf(units)
                    .valueOf()
                );
              }
            }

            function isBefore(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input);
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(units) || "millisecond";
              if (units === "millisecond") {
                return this.valueOf() < localInput.valueOf();
              } else {
                return (
                  this.clone()
                    .endOf(units)
                    .valueOf() < localInput.valueOf()
                );
              }
            }

            function isBetween(from, to, units, inclusivity) {
              var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
              if (
                !(this.isValid() && localFrom.isValid() && localTo.isValid())
              ) {
                return false;
              }
              inclusivity = inclusivity || "()";
              return (
                (inclusivity[0] === "("
                  ? this.isAfter(localFrom, units)
                  : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ")"
                  ? this.isBefore(localTo, units)
                  : !this.isAfter(localTo, units))
              );
            }

            function isSame(input, units) {
              var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
              if (!(this.isValid() && localInput.isValid())) {
                return false;
              }
              units = normalizeUnits(units) || "millisecond";
              if (units === "millisecond") {
                return this.valueOf() === localInput.valueOf();
              } else {
                inputMs = localInput.valueOf();
                return (
                  this.clone()
                    .startOf(units)
                    .valueOf() <= inputMs &&
                  inputMs <=
                    this.clone()
                      .endOf(units)
                      .valueOf()
                );
              }
            }

            function isSameOrAfter(input, units) {
              return this.isSame(input, units) || this.isAfter(input, units);
            }

            function isSameOrBefore(input, units) {
              return this.isSame(input, units) || this.isBefore(input, units);
            }

            function diff(input, units, asFloat) {
              var that, zoneDelta, output;

              if (!this.isValid()) {
                return NaN;
              }

              that = cloneWithOffset(input, this);

              if (!that.isValid()) {
                return NaN;
              }

              zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

              units = normalizeUnits(units);

              switch (units) {
                case "year":
                  output = monthDiff(this, that) / 12;
                  break;
                case "month":
                  output = monthDiff(this, that);
                  break;
                case "quarter":
                  output = monthDiff(this, that) / 3;
                  break;
                case "second":
                  output = (this - that) / 1e3;
                  break; // 1000
                case "minute":
                  output = (this - that) / 6e4;
                  break; // 1000 * 60
                case "hour":
                  output = (this - that) / 36e5;
                  break; // 1000 * 60 * 60
                case "day":
                  output = (this - that - zoneDelta) / 864e5;
                  break; // 1000 * 60 * 60 * 24, negate dst
                case "week":
                  output = (this - that - zoneDelta) / 6048e5;
                  break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                  output = this - that;
              }

              return asFloat ? output : absFloor(output);
            }

            function monthDiff(a, b) {
              if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
              }
              // difference in months
              var wholeMonthDiff =
                  (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, "months"),
                anchor2,
                adjust;

              if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
              } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
              }

              //check for negative zero, return zero if negative zero
              return -(wholeMonthDiff + adjust) || 0;
            }

            hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
            hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";

            function toString() {
              return this.clone()
                .locale("en")
                .format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
            }

            function toISOString(keepOffset) {
              if (!this.isValid()) {
                return null;
              }
              var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
              if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                  m,
                  utc
                    ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                    : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
                );
              }
              if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                  return this.toDate().toISOString();
                } else {
                  return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace("Z", formatMoment(m, "Z"));
                }
              }
              return formatMoment(
                m,
                utc
                  ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                  : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
              );
            }

            /**
             * Return a human readable representation of a moment that can
             * also be evaluated to get a new moment which is the same
             *
             * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
             */
            function inspect() {
              if (!this.isValid()) {
                return "moment.invalid(/* " + this._i + " */)";
              }
              var func = "moment",
                zone = "",
                prefix,
                year,
                datetime,
                suffix;
              if (!this.isLocal()) {
                func =
                  this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
                zone = "Z";
              }
              prefix = "[" + func + '("]';
              year =
                0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
              datetime = "-MM-DD[T]HH:mm:ss.SSS";
              suffix = zone + '[")]';

              return this.format(prefix + year + datetime + suffix);
            }

            function format(inputString) {
              if (!inputString) {
                inputString = this.isUtc()
                  ? hooks.defaultFormatUtc
                  : hooks.defaultFormat;
              }
              var output = formatMoment(this, inputString);
              return this.localeData().postformat(output);
            }

            function from(time, withoutSuffix) {
              if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                  createLocal(time).isValid())
              ) {
                return createDuration({ to: this, from: time })
                  .locale(this.locale())
                  .humanize(!withoutSuffix);
              } else {
                return this.localeData().invalidDate();
              }
            }

            function fromNow(withoutSuffix) {
              return this.from(createLocal(), withoutSuffix);
            }

            function to(time, withoutSuffix) {
              if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                  createLocal(time).isValid())
              ) {
                return createDuration({ from: this, to: time })
                  .locale(this.locale())
                  .humanize(!withoutSuffix);
              } else {
                return this.localeData().invalidDate();
              }
            }

            function toNow(withoutSuffix) {
              return this.to(createLocal(), withoutSuffix);
            }

            // If passed a locale key, it will set the locale for this
            // instance.  Otherwise, it will return the locale configuration
            // variables for this instance.
            function locale(key) {
              var newLocaleData;

              if (key === undefined) {
                return this._locale._abbr;
              } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                  this._locale = newLocaleData;
                }
                return this;
              }
            }

            var lang = deprecate(
              "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
              function(key) {
                if (key === undefined) {
                  return this.localeData();
                } else {
                  return this.locale(key);
                }
              }
            );

            function localeData() {
              return this._locale;
            }

            var MS_PER_SECOND = 1000,
              MS_PER_MINUTE = 60 * MS_PER_SECOND,
              MS_PER_HOUR = 60 * MS_PER_MINUTE,
              MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

            // actual modulo - handles negative numbers (for dates before 1970):
            function mod$1(dividend, divisor) {
              return ((dividend % divisor) + divisor) % divisor;
            }

            function localStartOfDate(y, m, d) {
              // the date constructor remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
              } else {
                return new Date(y, m, d).valueOf();
              }
            }

            function utcStartOfDate(y, m, d) {
              // Date.UTC remaps years 0-99 to 1900-1999
              if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
              } else {
                return Date.UTC(y, m, d);
              }
            }

            function startOf(units) {
              var time, startOfDate;
              units = normalizeUnits(units);
              if (
                units === undefined ||
                units === "millisecond" ||
                !this.isValid()
              ) {
                return this;
              }

              startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

              switch (units) {
                case "year":
                  time = startOfDate(this.year(), 0, 1);
                  break;
                case "quarter":
                  time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                  );
                  break;
                case "month":
                  time = startOfDate(this.year(), this.month(), 1);
                  break;
                case "week":
                  time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                  );
                  break;
                case "isoWeek":
                  time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                  );
                  break;
                case "day":
                case "date":
                  time = startOfDate(this.year(), this.month(), this.date());
                  break;
                case "hour":
                  time = this._d.valueOf();
                  time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                  );
                  break;
                case "minute":
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_MINUTE);
                  break;
                case "second":
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_SECOND);
                  break;
              }

              this._d.setTime(time);
              hooks.updateOffset(this, true);
              return this;
            }

            function endOf(units) {
              var time, startOfDate;
              units = normalizeUnits(units);
              if (
                units === undefined ||
                units === "millisecond" ||
                !this.isValid()
              ) {
                return this;
              }

              startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

              switch (units) {
                case "year":
                  time = startOfDate(this.year() + 1, 0, 1) - 1;
                  break;
                case "quarter":
                  time =
                    startOfDate(
                      this.year(),
                      this.month() - (this.month() % 3) + 3,
                      1
                    ) - 1;
                  break;
                case "month":
                  time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                  break;
                case "week":
                  time =
                    startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - this.weekday() + 7
                    ) - 1;
                  break;
                case "isoWeek":
                  time =
                    startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                  break;
                case "day":
                case "date":
                  time =
                    startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                  break;
                case "hour":
                  time = this._d.valueOf();
                  time +=
                    MS_PER_HOUR -
                    mod$1(
                      time +
                        (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                      MS_PER_HOUR
                    ) -
                    1;
                  break;
                case "minute":
                  time = this._d.valueOf();
                  time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                  break;
                case "second":
                  time = this._d.valueOf();
                  time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                  break;
              }

              this._d.setTime(time);
              hooks.updateOffset(this, true);
              return this;
            }

            function valueOf() {
              return this._d.valueOf() - (this._offset || 0) * 60000;
            }

            function unix() {
              return Math.floor(this.valueOf() / 1000);
            }

            function toDate() {
              return new Date(this.valueOf());
            }

            function toArray() {
              var m = this;
              return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
              ];
            }

            function toObject() {
              var m = this;
              return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
              };
            }

            function toJSON() {
              // new Date(NaN).toJSON() === null
              return this.isValid() ? this.toISOString() : null;
            }

            function isValid$2() {
              return isValid(this);
            }

            function parsingFlags() {
              return extend({}, getParsingFlags(this));
            }

            function invalidAt() {
              return getParsingFlags(this).overflow;
            }

            function creationData() {
              return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
              };
            }

            addFormatToken("N", 0, 0, "eraAbbr");
            addFormatToken("NN", 0, 0, "eraAbbr");
            addFormatToken("NNN", 0, 0, "eraAbbr");
            addFormatToken("NNNN", 0, 0, "eraName");
            addFormatToken("NNNNN", 0, 0, "eraNarrow");

            addFormatToken("y", ["y", 1], "yo", "eraYear");
            addFormatToken("y", ["yy", 2], 0, "eraYear");
            addFormatToken("y", ["yyy", 3], 0, "eraYear");
            addFormatToken("y", ["yyyy", 4], 0, "eraYear");

            addRegexToken("N", matchEraAbbr);
            addRegexToken("NN", matchEraAbbr);
            addRegexToken("NNN", matchEraAbbr);
            addRegexToken("NNNN", matchEraName);
            addRegexToken("NNNNN", matchEraNarrow);

            addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(
              input,
              array,
              config,
              token
            ) {
              var era = config._locale.erasParse(input, token, config._strict);
              if (era) {
                getParsingFlags(config).era = era;
              } else {
                getParsingFlags(config).invalidEra = input;
              }
            });

            addRegexToken("y", matchUnsigned);
            addRegexToken("yy", matchUnsigned);
            addRegexToken("yyy", matchUnsigned);
            addRegexToken("yyyy", matchUnsigned);
            addRegexToken("yo", matchEraYearOrdinal);

            addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
            addParseToken(["yo"], function(input, array, config, token) {
              var match;
              if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
              }

              if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
              } else {
                array[YEAR] = parseInt(input, 10);
              }
            });

            function localeEras(m, format) {
              var i,
                l,
                date,
                eras = this._eras || getLocale("en")._eras;
              for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                  case "string":
                    // truncate time
                    date = hooks(eras[i].since).startOf("day");
                    eras[i].since = date.valueOf();
                    break;
                }

                switch (typeof eras[i].until) {
                  case "undefined":
                    eras[i].until = +Infinity;
                    break;
                  case "string":
                    // truncate time
                    date = hooks(eras[i].until)
                      .startOf("day")
                      .valueOf();
                    eras[i].until = date.valueOf();
                    break;
                }
              }
              return eras;
            }

            function localeErasParse(eraName, format, strict) {
              var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
              eraName = eraName.toUpperCase();

              for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();

                if (strict) {
                  switch (format) {
                    case "N":
                    case "NN":
                    case "NNN":
                      if (abbr === eraName) {
                        return eras[i];
                      }
                      break;

                    case "NNNN":
                      if (name === eraName) {
                        return eras[i];
                      }
                      break;

                    case "NNNNN":
                      if (narrow === eraName) {
                        return eras[i];
                      }
                      break;
                  }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                  return eras[i];
                }
              }
            }

            function localeErasConvertYear(era, year) {
              var dir = era.since <= era.until ? +1 : -1;
              if (year === undefined) {
                return hooks(era.since).year();
              } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
              }
            }

            function getEraName() {
              var i,
                l,
                val,
                eras = this.localeData().eras();
              for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.startOf("day").valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].name;
                }
              }

              return "";
            }

            function getEraNarrow() {
              var i,
                l,
                val,
                eras = this.localeData().eras();
              for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.startOf("day").valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].narrow;
                }
              }

              return "";
            }

            function getEraAbbr() {
              var i,
                l,
                val,
                eras = this.localeData().eras();
              for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.startOf("day").valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                  return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                  return eras[i].abbr;
                }
              }

              return "";
            }

            function getEraYear() {
              var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
              for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;

                // truncate time
                val = this.startOf("day").valueOf();

                if (
                  (eras[i].since <= val && val <= eras[i].until) ||
                  (eras[i].until <= val && val <= eras[i].since)
                ) {
                  return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                  );
                }
              }

              return this.year();
            }

            function erasNameRegex(isStrict) {
              if (!hasOwnProp(this, "_erasNameRegex")) {
                computeErasParse.call(this);
              }
              return isStrict ? this._erasNameRegex : this._erasRegex;
            }

            function erasAbbrRegex(isStrict) {
              if (!hasOwnProp(this, "_erasAbbrRegex")) {
                computeErasParse.call(this);
              }
              return isStrict ? this._erasAbbrRegex : this._erasRegex;
            }

            function erasNarrowRegex(isStrict) {
              if (!hasOwnProp(this, "_erasNarrowRegex")) {
                computeErasParse.call(this);
              }
              return isStrict ? this._erasNarrowRegex : this._erasRegex;
            }

            function matchEraAbbr(isStrict, locale) {
              return locale.erasAbbrRegex(isStrict);
            }

            function matchEraName(isStrict, locale) {
              return locale.erasNameRegex(isStrict);
            }

            function matchEraNarrow(isStrict, locale) {
              return locale.erasNarrowRegex(isStrict);
            }

            function matchEraYearOrdinal(isStrict, locale) {
              return locale._eraYearOrdinalRegex || matchUnsigned;
            }

            function computeErasParse() {
              var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                eras = this.eras();

              for (i = 0, l = eras.length; i < l; ++i) {
                namePieces.push(regexEscape(eras[i].name));
                abbrPieces.push(regexEscape(eras[i].abbr));
                narrowPieces.push(regexEscape(eras[i].narrow));

                mixedPieces.push(regexEscape(eras[i].name));
                mixedPieces.push(regexEscape(eras[i].abbr));
                mixedPieces.push(regexEscape(eras[i].narrow));
              }

              this._erasRegex = new RegExp(
                "^(" + mixedPieces.join("|") + ")",
                "i"
              );
              this._erasNameRegex = new RegExp(
                "^(" + namePieces.join("|") + ")",
                "i"
              );
              this._erasAbbrRegex = new RegExp(
                "^(" + abbrPieces.join("|") + ")",
                "i"
              );
              this._erasNarrowRegex = new RegExp(
                "^(" + narrowPieces.join("|") + ")",
                "i"
              );
            }

            // FORMATTING

            addFormatToken(0, ["gg", 2], 0, function() {
              return this.weekYear() % 100;
            });

            addFormatToken(0, ["GG", 2], 0, function() {
              return this.isoWeekYear() % 100;
            });

            function addWeekYearFormatToken(token, getter) {
              addFormatToken(0, [token, token.length], 0, getter);
            }

            addWeekYearFormatToken("gggg", "weekYear");
            addWeekYearFormatToken("ggggg", "weekYear");
            addWeekYearFormatToken("GGGG", "isoWeekYear");
            addWeekYearFormatToken("GGGGG", "isoWeekYear");

            // ALIASES

            addUnitAlias("weekYear", "gg");
            addUnitAlias("isoWeekYear", "GG");

            // PRIORITY

            addUnitPriority("weekYear", 1);
            addUnitPriority("isoWeekYear", 1);

            // PARSING

            addRegexToken("G", matchSigned);
            addRegexToken("g", matchSigned);
            addRegexToken("GG", match1to2, match2);
            addRegexToken("gg", match1to2, match2);
            addRegexToken("GGGG", match1to4, match4);
            addRegexToken("gggg", match1to4, match4);
            addRegexToken("GGGGG", match1to6, match6);
            addRegexToken("ggggg", match1to6, match6);

            addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(
              input,
              week,
              config,
              token
            ) {
              week[token.substr(0, 2)] = toInt(input);
            });

            addWeekParseToken(["gg", "GG"], function(
              input,
              week,
              config,
              token
            ) {
              week[token] = hooks.parseTwoDigitYear(input);
            });

            // MOMENTS

            function getSetWeekYear(input) {
              return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy
              );
            }

            function getSetISOWeekYear(input) {
              return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
              );
            }

            function getISOWeeksInYear() {
              return weeksInYear(this.year(), 1, 4);
            }

            function getISOWeeksInISOWeekYear() {
              return weeksInYear(this.isoWeekYear(), 1, 4);
            }

            function getWeeksInYear() {
              var weekInfo = this.localeData()._week;
              return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            }

            function getWeeksInWeekYear() {
              var weekInfo = this.localeData()._week;
              return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
            }

            function getSetWeekYearHelper(input, week, weekday, dow, doy) {
              var weeksTarget;
              if (input == null) {
                return weekOfYear(this, dow, doy).year;
              } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                  week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
              }
            }

            function setWeekAll(weekYear, week, weekday, dow, doy) {
              var dayOfYearData = dayOfYearFromWeeks(
                  weekYear,
                  week,
                  weekday,
                  dow,
                  doy
                ),
                date = createUTCDate(
                  dayOfYearData.year,
                  0,
                  dayOfYearData.dayOfYear
                );

              this.year(date.getUTCFullYear());
              this.month(date.getUTCMonth());
              this.date(date.getUTCDate());
              return this;
            }

            // FORMATTING

            addFormatToken("Q", 0, "Qo", "quarter");

            // ALIASES

            addUnitAlias("quarter", "Q");

            // PRIORITY

            addUnitPriority("quarter", 7);

            // PARSING

            addRegexToken("Q", match1);
            addParseToken("Q", function(input, array) {
              array[MONTH] = (toInt(input) - 1) * 3;
            });

            // MOMENTS

            function getSetQuarter(input) {
              return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
            }

            // FORMATTING

            addFormatToken("D", ["DD", 2], "Do", "date");

            // ALIASES

            addUnitAlias("date", "D");

            // PRIORITY
            addUnitPriority("date", 9);

            // PARSING

            addRegexToken("D", match1to2);
            addRegexToken("DD", match1to2, match2);
            addRegexToken("Do", function(isStrict, locale) {
              // TODO: Remove "ordinalParse" fallback in next major release.
              return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
            });

            addParseToken(["D", "DD"], DATE);
            addParseToken("Do", function(input, array) {
              array[DATE] = toInt(input.match(match1to2)[0]);
            });

            // MOMENTS

            var getSetDayOfMonth = makeGetSet("Date", true);

            // FORMATTING

            addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");

            // ALIASES

            addUnitAlias("dayOfYear", "DDD");

            // PRIORITY
            addUnitPriority("dayOfYear", 4);

            // PARSING

            addRegexToken("DDD", match1to3);
            addRegexToken("DDDD", match3);
            addParseToken(["DDD", "DDDD"], function(input, array, config) {
              config._dayOfYear = toInt(input);
            });

            // HELPERS

            // MOMENTS

            function getSetDayOfYear(input) {
              var dayOfYear =
                Math.round(
                  (this.clone().startOf("day") - this.clone().startOf("year")) /
                    864e5
                ) + 1;
              return input == null
                ? dayOfYear
                : this.add(input - dayOfYear, "d");
            }

            // FORMATTING

            addFormatToken("m", ["mm", 2], 0, "minute");

            // ALIASES

            addUnitAlias("minute", "m");

            // PRIORITY

            addUnitPriority("minute", 14);

            // PARSING

            addRegexToken("m", match1to2);
            addRegexToken("mm", match1to2, match2);
            addParseToken(["m", "mm"], MINUTE);

            // MOMENTS

            var getSetMinute = makeGetSet("Minutes", false);

            // FORMATTING

            addFormatToken("s", ["ss", 2], 0, "second");

            // ALIASES

            addUnitAlias("second", "s");

            // PRIORITY

            addUnitPriority("second", 15);

            // PARSING

            addRegexToken("s", match1to2);
            addRegexToken("ss", match1to2, match2);
            addParseToken(["s", "ss"], SECOND);

            // MOMENTS

            var getSetSecond = makeGetSet("Seconds", false);

            // FORMATTING

            addFormatToken("S", 0, 0, function() {
              return ~~(this.millisecond() / 100);
            });

            addFormatToken(0, ["SS", 2], 0, function() {
              return ~~(this.millisecond() / 10);
            });

            addFormatToken(0, ["SSS", 3], 0, "millisecond");
            addFormatToken(0, ["SSSS", 4], 0, function() {
              return this.millisecond() * 10;
            });
            addFormatToken(0, ["SSSSS", 5], 0, function() {
              return this.millisecond() * 100;
            });
            addFormatToken(0, ["SSSSSS", 6], 0, function() {
              return this.millisecond() * 1000;
            });
            addFormatToken(0, ["SSSSSSS", 7], 0, function() {
              return this.millisecond() * 10000;
            });
            addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
              return this.millisecond() * 100000;
            });
            addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
              return this.millisecond() * 1000000;
            });

            // ALIASES

            addUnitAlias("millisecond", "ms");

            // PRIORITY

            addUnitPriority("millisecond", 16);

            // PARSING

            addRegexToken("S", match1to3, match1);
            addRegexToken("SS", match1to3, match2);
            addRegexToken("SSS", match1to3, match3);

            var token, getSetMillisecond;
            for (token = "SSSS"; token.length <= 9; token += "S") {
              addRegexToken(token, matchUnsigned);
            }

            function parseMs(input, array) {
              array[MILLISECOND] = toInt(("0." + input) * 1000);
            }

            for (token = "S"; token.length <= 9; token += "S") {
              addParseToken(token, parseMs);
            }

            getSetMillisecond = makeGetSet("Milliseconds", false);

            // FORMATTING

            addFormatToken("z", 0, 0, "zoneAbbr");
            addFormatToken("zz", 0, 0, "zoneName");

            // MOMENTS

            function getZoneAbbr() {
              return this._isUTC ? "UTC" : "";
            }

            function getZoneName() {
              return this._isUTC ? "Coordinated Universal Time" : "";
            }

            var proto = Moment.prototype;

            proto.add = add;
            proto.calendar = calendar$1;
            proto.clone = clone;
            proto.diff = diff;
            proto.endOf = endOf;
            proto.format = format;
            proto.from = from;
            proto.fromNow = fromNow;
            proto.to = to;
            proto.toNow = toNow;
            proto.get = stringGet;
            proto.invalidAt = invalidAt;
            proto.isAfter = isAfter;
            proto.isBefore = isBefore;
            proto.isBetween = isBetween;
            proto.isSame = isSame;
            proto.isSameOrAfter = isSameOrAfter;
            proto.isSameOrBefore = isSameOrBefore;
            proto.isValid = isValid$2;
            proto.lang = lang;
            proto.locale = locale;
            proto.localeData = localeData;
            proto.max = prototypeMax;
            proto.min = prototypeMin;
            proto.parsingFlags = parsingFlags;
            proto.set = stringSet;
            proto.startOf = startOf;
            proto.subtract = subtract;
            proto.toArray = toArray;
            proto.toObject = toObject;
            proto.toDate = toDate;
            proto.toISOString = toISOString;
            proto.inspect = inspect;
            if (typeof Symbol !== "undefined" && Symbol.for != null) {
              proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
                return "Moment<" + this.format() + ">";
              };
            }
            proto.toJSON = toJSON;
            proto.toString = toString;
            proto.unix = unix;
            proto.valueOf = valueOf;
            proto.creationData = creationData;
            proto.eraName = getEraName;
            proto.eraNarrow = getEraNarrow;
            proto.eraAbbr = getEraAbbr;
            proto.eraYear = getEraYear;
            proto.year = getSetYear;
            proto.isLeapYear = getIsLeapYear;
            proto.weekYear = getSetWeekYear;
            proto.isoWeekYear = getSetISOWeekYear;
            proto.quarter = proto.quarters = getSetQuarter;
            proto.month = getSetMonth;
            proto.daysInMonth = getDaysInMonth;
            proto.week = proto.weeks = getSetWeek;
            proto.isoWeek = proto.isoWeeks = getSetISOWeek;
            proto.weeksInYear = getWeeksInYear;
            proto.weeksInWeekYear = getWeeksInWeekYear;
            proto.isoWeeksInYear = getISOWeeksInYear;
            proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
            proto.date = getSetDayOfMonth;
            proto.day = proto.days = getSetDayOfWeek;
            proto.weekday = getSetLocaleDayOfWeek;
            proto.isoWeekday = getSetISODayOfWeek;
            proto.dayOfYear = getSetDayOfYear;
            proto.hour = proto.hours = getSetHour;
            proto.minute = proto.minutes = getSetMinute;
            proto.second = proto.seconds = getSetSecond;
            proto.millisecond = proto.milliseconds = getSetMillisecond;
            proto.utcOffset = getSetOffset;
            proto.utc = setOffsetToUTC;
            proto.local = setOffsetToLocal;
            proto.parseZone = setOffsetToParsedOffset;
            proto.hasAlignedHourOffset = hasAlignedHourOffset;
            proto.isDST = isDaylightSavingTime;
            proto.isLocal = isLocal;
            proto.isUtcOffset = isUtcOffset;
            proto.isUtc = isUtc;
            proto.isUTC = isUtc;
            proto.zoneAbbr = getZoneAbbr;
            proto.zoneName = getZoneName;
            proto.dates = deprecate(
              "dates accessor is deprecated. Use date instead.",
              getSetDayOfMonth
            );
            proto.months = deprecate(
              "months accessor is deprecated. Use month instead",
              getSetMonth
            );
            proto.years = deprecate(
              "years accessor is deprecated. Use year instead",
              getSetYear
            );
            proto.zone = deprecate(
              "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
              getSetZone
            );
            proto.isDSTShifted = deprecate(
              "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
              isDaylightSavingTimeShifted
            );

            function createUnix(input) {
              return createLocal(input * 1000);
            }

            function createInZone() {
              return createLocal.apply(null, arguments).parseZone();
            }

            function preParsePostFormat(string) {
              return string;
            }

            var proto$1 = Locale.prototype;

            proto$1.calendar = calendar;
            proto$1.longDateFormat = longDateFormat;
            proto$1.invalidDate = invalidDate;
            proto$1.ordinal = ordinal;
            proto$1.preparse = preParsePostFormat;
            proto$1.postformat = preParsePostFormat;
            proto$1.relativeTime = relativeTime;
            proto$1.pastFuture = pastFuture;
            proto$1.set = set;
            proto$1.eras = localeEras;
            proto$1.erasParse = localeErasParse;
            proto$1.erasConvertYear = localeErasConvertYear;
            proto$1.erasAbbrRegex = erasAbbrRegex;
            proto$1.erasNameRegex = erasNameRegex;
            proto$1.erasNarrowRegex = erasNarrowRegex;

            proto$1.months = localeMonths;
            proto$1.monthsShort = localeMonthsShort;
            proto$1.monthsParse = localeMonthsParse;
            proto$1.monthsRegex = monthsRegex;
            proto$1.monthsShortRegex = monthsShortRegex;
            proto$1.week = localeWeek;
            proto$1.firstDayOfYear = localeFirstDayOfYear;
            proto$1.firstDayOfWeek = localeFirstDayOfWeek;

            proto$1.weekdays = localeWeekdays;
            proto$1.weekdaysMin = localeWeekdaysMin;
            proto$1.weekdaysShort = localeWeekdaysShort;
            proto$1.weekdaysParse = localeWeekdaysParse;

            proto$1.weekdaysRegex = weekdaysRegex;
            proto$1.weekdaysShortRegex = weekdaysShortRegex;
            proto$1.weekdaysMinRegex = weekdaysMinRegex;

            proto$1.isPM = localeIsPM;
            proto$1.meridiem = localeMeridiem;

            function get$1(format, index, field, setter) {
              var locale = getLocale(),
                utc = createUTC().set(setter, index);
              return locale[field](utc, format);
            }

            function listMonthsImpl(format, index, field) {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || "";

              if (index != null) {
                return get$1(format, index, field, "month");
              }

              var i,
                out = [];
              for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, "month");
              }
              return out;
            }

            // ()
            // (5)
            // (fmt, 5)
            // (fmt)
            // (true)
            // (true, 5)
            // (true, fmt, 5)
            // (true, fmt)
            function listWeekdaysImpl(localeSorted, format, index, field) {
              if (typeof localeSorted === "boolean") {
                if (isNumber(format)) {
                  index = format;
                  format = undefined;
                }

                format = format || "";
              } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                  index = format;
                  format = undefined;
                }

                format = format || "";
              }

              var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

              if (index != null) {
                return get$1(format, (index + shift) % 7, field, "day");
              }

              for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, "day");
              }
              return out;
            }

            function listMonths(format, index) {
              return listMonthsImpl(format, index, "months");
            }

            function listMonthsShort(format, index) {
              return listMonthsImpl(format, index, "monthsShort");
            }

            function listWeekdays(localeSorted, format, index) {
              return listWeekdaysImpl(localeSorted, format, index, "weekdays");
            }

            function listWeekdaysShort(localeSorted, format, index) {
              return listWeekdaysImpl(
                localeSorted,
                format,
                index,
                "weekdaysShort"
              );
            }

            function listWeekdaysMin(localeSorted, format, index) {
              return listWeekdaysImpl(
                localeSorted,
                format,
                index,
                "weekdaysMin"
              );
            }

            getSetGlobalLocale("en", {
              eras: [
                {
                  since: "0001-01-01",
                  until: +Infinity,
                  offset: 1,
                  name: "Anno Domini",
                  narrow: "AD",
                  abbr: "AD",
                },
                {
                  since: "0000-12-31",
                  until: -Infinity,
                  offset: 1,
                  name: "Before Christ",
                  narrow: "BC",
                  abbr: "BC",
                },
              ],
              dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
              ordinal: function(number) {
                var b = number % 10,
                  output =
                    toInt((number % 100) / 10) === 1
                      ? "th"
                      : b === 1
                      ? "st"
                      : b === 2
                      ? "nd"
                      : b === 3
                      ? "rd"
                      : "th";
                return number + output;
              },
            });

            // Side effect imports

            hooks.lang = deprecate(
              "moment.lang is deprecated. Use moment.locale instead.",
              getSetGlobalLocale
            );
            hooks.langData = deprecate(
              "moment.langData is deprecated. Use moment.localeData instead.",
              getLocale
            );

            var mathAbs = Math.abs;

            function abs() {
              var data = this._data;

              this._milliseconds = mathAbs(this._milliseconds);
              this._days = mathAbs(this._days);
              this._months = mathAbs(this._months);

              data.milliseconds = mathAbs(data.milliseconds);
              data.seconds = mathAbs(data.seconds);
              data.minutes = mathAbs(data.minutes);
              data.hours = mathAbs(data.hours);
              data.months = mathAbs(data.months);
              data.years = mathAbs(data.years);

              return this;
            }

            function addSubtract$1(duration, input, value, direction) {
              var other = createDuration(input, value);

              duration._milliseconds += direction * other._milliseconds;
              duration._days += direction * other._days;
              duration._months += direction * other._months;

              return duration._bubble();
            }

            // supports only 2.0-style add(1, 's') or add(duration)
            function add$1(input, value) {
              return addSubtract$1(this, input, value, 1);
            }

            // supports only 2.0-style subtract(1, 's') or subtract(duration)
            function subtract$1(input, value) {
              return addSubtract$1(this, input, value, -1);
            }

            function absCeil(number) {
              if (number < 0) {
                return Math.floor(number);
              } else {
                return Math.ceil(number);
              }
            }

            function bubble() {
              var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;

              // if we have a mix of positive and negative values, bubble down first
              // check: https://github.com/moment/moment/issues/2166
              if (
                !(
                  (milliseconds >= 0 && days >= 0 && months >= 0) ||
                  (milliseconds <= 0 && days <= 0 && months <= 0)
                )
              ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
              }

              // The following code bubbles up values, see the tests for
              // examples of what that means.
              data.milliseconds = milliseconds % 1000;

              seconds = absFloor(milliseconds / 1000);
              data.seconds = seconds % 60;

              minutes = absFloor(seconds / 60);
              data.minutes = minutes % 60;

              hours = absFloor(minutes / 60);
              data.hours = hours % 24;

              days += absFloor(hours / 24);

              // convert days to months
              monthsFromDays = absFloor(daysToMonths(days));
              months += monthsFromDays;
              days -= absCeil(monthsToDays(monthsFromDays));

              // 12 months -> 1 year
              years = absFloor(months / 12);
              months %= 12;

              data.days = days;
              data.months = months;
              data.years = years;

              return this;
            }

            function daysToMonths(days) {
              // 400 years have 146097 days (taking into account leap year rules)
              // 400 years have 12 months === 4800
              return (days * 4800) / 146097;
            }

            function monthsToDays(months) {
              // the reverse of daysToMonths
              return (months * 146097) / 4800;
            }

            function as(units) {
              if (!this.isValid()) {
                return NaN;
              }
              var days,
                months,
                milliseconds = this._milliseconds;

              units = normalizeUnits(units);

              if (
                units === "month" ||
                units === "quarter" ||
                units === "year"
              ) {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                  case "month":
                    return months;
                  case "quarter":
                    return months / 3;
                  case "year":
                    return months / 12;
                }
              } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                  case "week":
                    return days / 7 + milliseconds / 6048e5;
                  case "day":
                    return days + milliseconds / 864e5;
                  case "hour":
                    return days * 24 + milliseconds / 36e5;
                  case "minute":
                    return days * 1440 + milliseconds / 6e4;
                  case "second":
                    return days * 86400 + milliseconds / 1000;
                  // Math.floor prevents floating point math errors here
                  case "millisecond":
                    return Math.floor(days * 864e5) + milliseconds;
                  default:
                    throw new Error("Unknown unit " + units);
                }
              }
            }

            // TODO: Use this.as('ms')?
            function valueOf$1() {
              if (!this.isValid()) {
                return NaN;
              }
              return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
              );
            }

            function makeAs(alias) {
              return function() {
                return this.as(alias);
              };
            }

            var asMilliseconds = makeAs("ms"),
              asSeconds = makeAs("s"),
              asMinutes = makeAs("m"),
              asHours = makeAs("h"),
              asDays = makeAs("d"),
              asWeeks = makeAs("w"),
              asMonths = makeAs("M"),
              asQuarters = makeAs("Q"),
              asYears = makeAs("y");

            function clone$1() {
              return createDuration(this);
            }

            function get$2(units) {
              units = normalizeUnits(units);
              return this.isValid() ? this[units + "s"]() : NaN;
            }

            function makeGetter(name) {
              return function() {
                return this.isValid() ? this._data[name] : NaN;
              };
            }

            var milliseconds = makeGetter("milliseconds"),
              seconds = makeGetter("seconds"),
              minutes = makeGetter("minutes"),
              hours = makeGetter("hours"),
              days = makeGetter("days"),
              months = makeGetter("months"),
              years = makeGetter("years");

            function weeks() {
              return absFloor(this.days() / 7);
            }

            var round = Math.round,
              thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
              };

            // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
            function substituteTimeAgo(
              string,
              number,
              withoutSuffix,
              isFuture,
              locale
            ) {
              return locale.relativeTime(
                number || 1,
                !!withoutSuffix,
                string,
                isFuture
              );
            }

            function relativeTime$1(
              posNegDuration,
              withoutSuffix,
              thresholds,
              locale
            ) {
              var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as("s")),
                minutes = round(duration.as("m")),
                hours = round(duration.as("h")),
                days = round(duration.as("d")),
                months = round(duration.as("M")),
                weeks = round(duration.as("w")),
                years = round(duration.as("y")),
                a =
                  (seconds <= thresholds.ss && ["s", seconds]) ||
                  (seconds < thresholds.s && ["ss", seconds]) ||
                  (minutes <= 1 && ["m"]) ||
                  (minutes < thresholds.m && ["mm", minutes]) ||
                  (hours <= 1 && ["h"]) ||
                  (hours < thresholds.h && ["hh", hours]) ||
                  (days <= 1 && ["d"]) ||
                  (days < thresholds.d && ["dd", days]);

              if (thresholds.w != null) {
                a =
                  a ||
                  (weeks <= 1 && ["w"]) ||
                  (weeks < thresholds.w && ["ww", weeks]);
              }
              a = a ||
                (months <= 1 && ["M"]) ||
                (months < thresholds.M && ["MM", months]) ||
                (years <= 1 && ["y"]) || ["yy", years];

              a[2] = withoutSuffix;
              a[3] = +posNegDuration > 0;
              a[4] = locale;
              return substituteTimeAgo.apply(null, a);
            }

            // This function allows you to set the rounding function for relative time strings
            function getSetRelativeTimeRounding(roundingFunction) {
              if (roundingFunction === undefined) {
                return round;
              }
              if (typeof roundingFunction === "function") {
                round = roundingFunction;
                return true;
              }
              return false;
            }

            // This function allows you to set a threshold for relative time strings
            function getSetRelativeTimeThreshold(threshold, limit) {
              if (thresholds[threshold] === undefined) {
                return false;
              }
              if (limit === undefined) {
                return thresholds[threshold];
              }
              thresholds[threshold] = limit;
              if (threshold === "s") {
                thresholds.ss = limit - 1;
              }
              return true;
            }

            function humanize(argWithSuffix, argThresholds) {
              if (!this.isValid()) {
                return this.localeData().invalidDate();
              }

              var withSuffix = false,
                th = thresholds,
                locale,
                output;

              if (typeof argWithSuffix === "object") {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
              }
              if (typeof argWithSuffix === "boolean") {
                withSuffix = argWithSuffix;
              }
              if (typeof argThresholds === "object") {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                  th.ss = argThresholds.s - 1;
                }
              }

              locale = this.localeData();
              output = relativeTime$1(this, !withSuffix, th, locale);

              if (withSuffix) {
                output = locale.pastFuture(+this, output);
              }

              return locale.postformat(output);
            }

            var abs$1 = Math.abs;

            function sign(x) {
              return (x > 0) - (x < 0) || +x;
            }

            function toISOString$1() {
              // for ISO strings we do not use the normal bubbling rules:
              //  * milliseconds bubble up until they become hours
              //  * days do not bubble at all
              //  * months bubble up until they become years
              // This is because there is no context-free conversion between hours and days
              // (think of clock changes)
              // and also not between days and months (28-31 days per month)
              if (!this.isValid()) {
                return this.localeData().invalidDate();
              }

              var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

              if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return "P0D";
              }

              // 3600 seconds -> 60 minutes -> 1 hour
              minutes = absFloor(seconds / 60);
              hours = absFloor(minutes / 60);
              seconds %= 60;
              minutes %= 60;

              // 12 months -> 1 year
              years = absFloor(months / 12);
              months %= 12;

              // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
              s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";

              totalSign = total < 0 ? "-" : "";
              ymSign = sign(this._months) !== sign(total) ? "-" : "";
              daysSign = sign(this._days) !== sign(total) ? "-" : "";
              hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";

              return (
                totalSign +
                "P" +
                (years ? ymSign + years + "Y" : "") +
                (months ? ymSign + months + "M" : "") +
                (days ? daysSign + days + "D" : "") +
                (hours || minutes || seconds ? "T" : "") +
                (hours ? hmsSign + hours + "H" : "") +
                (minutes ? hmsSign + minutes + "M" : "") +
                (seconds ? hmsSign + s + "S" : "")
              );
            }

            var proto$2 = Duration.prototype;

            proto$2.isValid = isValid$1;
            proto$2.abs = abs;
            proto$2.add = add$1;
            proto$2.subtract = subtract$1;
            proto$2.as = as;
            proto$2.asMilliseconds = asMilliseconds;
            proto$2.asSeconds = asSeconds;
            proto$2.asMinutes = asMinutes;
            proto$2.asHours = asHours;
            proto$2.asDays = asDays;
            proto$2.asWeeks = asWeeks;
            proto$2.asMonths = asMonths;
            proto$2.asQuarters = asQuarters;
            proto$2.asYears = asYears;
            proto$2.valueOf = valueOf$1;
            proto$2._bubble = bubble;
            proto$2.clone = clone$1;
            proto$2.get = get$2;
            proto$2.milliseconds = milliseconds;
            proto$2.seconds = seconds;
            proto$2.minutes = minutes;
            proto$2.hours = hours;
            proto$2.days = days;
            proto$2.weeks = weeks;
            proto$2.months = months;
            proto$2.years = years;
            proto$2.humanize = humanize;
            proto$2.toISOString = toISOString$1;
            proto$2.toString = toISOString$1;
            proto$2.toJSON = toISOString$1;
            proto$2.locale = locale;
            proto$2.localeData = localeData;

            proto$2.toIsoString = deprecate(
              "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
              toISOString$1
            );
            proto$2.lang = lang;

            // FORMATTING

            addFormatToken("X", 0, 0, "unix");
            addFormatToken("x", 0, 0, "valueOf");

            // PARSING

            addRegexToken("x", matchSigned);
            addRegexToken("X", matchTimestamp);
            addParseToken("X", function(input, array, config) {
              config._d = new Date(parseFloat(input) * 1000);
            });
            addParseToken("x", function(input, array, config) {
              config._d = new Date(toInt(input));
            });

            //! moment.js

            hooks.version = "2.25.3";

            setHookCallback(createLocal);

            hooks.fn = proto;
            hooks.min = min;
            hooks.max = max;
            hooks.now = now;
            hooks.utc = createUTC;
            hooks.unix = createUnix;
            hooks.months = listMonths;
            hooks.isDate = isDate;
            hooks.locale = getSetGlobalLocale;
            hooks.invalid = createInvalid;
            hooks.duration = createDuration;
            hooks.isMoment = isMoment;
            hooks.weekdays = listWeekdays;
            hooks.parseZone = createInZone;
            hooks.localeData = getLocale;
            hooks.isDuration = isDuration;
            hooks.monthsShort = listMonthsShort;
            hooks.weekdaysMin = listWeekdaysMin;
            hooks.defineLocale = defineLocale;
            hooks.updateLocale = updateLocale;
            hooks.locales = listLocales;
            hooks.weekdaysShort = listWeekdaysShort;
            hooks.normalizeUnits = normalizeUnits;
            hooks.relativeTimeRounding = getSetRelativeTimeRounding;
            hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
            hooks.calendarFormat = getCalendarFormat;
            hooks.prototype = proto;

            // currently HTML5 input type only supports 24-hour formats
            hooks.HTML5_FMT = {
              DATETIME_LOCAL: "YYYY-MM-DDTHH:mm", // <input type="datetime-local" />
              DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss", // <input type="datetime-local" step="1" />
              DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS", // <input type="datetime-local" step="0.001" />
              DATE: "YYYY-MM-DD", // <input type="date" />
              TIME: "HH:mm", // <input type="time" />
              TIME_SECONDS: "HH:mm:ss", // <input type="time" step="1" />
              TIME_MS: "HH:mm:ss.SSS", // <input type="time" step="0.001" />
              WEEK: "GGGG-[W]WW", // <input type="week" />
              MONTH: "YYYY-MM", // <input type="month" />
            };

            return hooks;
          });

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js"
          )(module)
        ));

        /***/
      },

    /***/ "./node_modules/popper.js/dist/esm/popper.js":
      /*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**!
           * @fileOverview Kickass library to create and place poppers near their reference elements.
           * @version 1.16.1
           * @license
           * Copyright (c) 2016 Federico Zivolo and contributors
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in all
           * copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
           * SOFTWARE.
           */
          var isBrowser =
            typeof window !== "undefined" &&
            typeof document !== "undefined" &&
            typeof navigator !== "undefined";

          var timeoutDuration = (function() {
            var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
            for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
              if (
                isBrowser &&
                navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0
              ) {
                return 1;
              }
            }
            return 0;
          })();

          function microtaskDebounce(fn) {
            var called = false;
            return function() {
              if (called) {
                return;
              }
              called = true;
              window.Promise.resolve().then(function() {
                called = false;
                fn();
              });
            };
          }

          function taskDebounce(fn) {
            var scheduled = false;
            return function() {
              if (!scheduled) {
                scheduled = true;
                setTimeout(function() {
                  scheduled = false;
                  fn();
                }, timeoutDuration);
              }
            };
          }

          var supportsMicroTasks = isBrowser && window.Promise;

          /**
           * Create a debounced version of a method, that's asynchronously deferred
           * but called in the minimum time possible.
           *
           * @method
           * @memberof Popper.Utils
           * @argument {Function} fn
           * @returns {Function}
           */
          var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

          /**
           * Check if the given variable is a function
           * @method
           * @memberof Popper.Utils
           * @argument {Any} functionToCheck - variable to check
           * @returns {Boolean} answer to: is a function?
           */
          function isFunction(functionToCheck) {
            var getType = {};
            return (
              functionToCheck &&
              getType.toString.call(functionToCheck) === "[object Function]"
            );
          }

          /**
           * Get CSS computed property of the given element
           * @method
           * @memberof Popper.Utils
           * @argument {Eement} element
           * @argument {String} property
           */
          function getStyleComputedProperty(element, property) {
            if (element.nodeType !== 1) {
              return [];
            }
            // NOTE: 1 DOM access here
            var window = element.ownerDocument.defaultView;
            var css = window.getComputedStyle(element, null);
            return property ? css[property] : css;
          }

          /**
           * Returns the parentNode or the host of the element
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @returns {Element} parent
           */
          function getParentNode(element) {
            if (element.nodeName === "HTML") {
              return element;
            }
            return element.parentNode || element.host;
          }

          /**
           * Returns the scrolling parent of the given element
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @returns {Element} scroll parent
           */
          function getScrollParent(element) {
            // Return body, `getScroll` will take care to get the correct `scrollTop` from it
            if (!element) {
              return document.body;
            }

            switch (element.nodeName) {
              case "HTML":
              case "BODY":
                return element.ownerDocument.body;
              case "#document":
                return element.body;
            }

            // Firefox want us to check `-x` and `-y` variations as well

            var _getStyleComputedProp = getStyleComputedProperty(element),
              overflow = _getStyleComputedProp.overflow,
              overflowX = _getStyleComputedProp.overflowX,
              overflowY = _getStyleComputedProp.overflowY;

            if (
              /(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)
            ) {
              return element;
            }

            return getScrollParent(getParentNode(element));
          }

          /**
           * Returns the reference node of the reference object, or the reference object itself.
           * @method
           * @memberof Popper.Utils
           * @param {Element|Object} reference - the reference element (the popper will be relative to this)
           * @returns {Element} parent
           */
          function getReferenceNode(reference) {
            return reference && reference.referenceNode
              ? reference.referenceNode
              : reference;
          }

          var isIE11 =
            isBrowser &&
            !!(window.MSInputMethodContext && document.documentMode);
          var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

          /**
           * Determines if the browser is Internet Explorer
           * @method
           * @memberof Popper.Utils
           * @param {Number} version to check
           * @returns {Boolean} isIE
           */
          function isIE(version) {
            if (version === 11) {
              return isIE11;
            }
            if (version === 10) {
              return isIE10;
            }
            return isIE11 || isIE10;
          }

          /**
           * Returns the offset parent of the given element
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @returns {Element} offset parent
           */
          function getOffsetParent(element) {
            if (!element) {
              return document.documentElement;
            }

            var noOffsetParent = isIE(10) ? document.body : null;

            // NOTE: 1 DOM access here
            var offsetParent = element.offsetParent || null;
            // Skip hidden elements which don't have an offsetParent
            while (
              offsetParent === noOffsetParent &&
              element.nextElementSibling
            ) {
              offsetParent = (element = element.nextElementSibling)
                .offsetParent;
            }

            var nodeName = offsetParent && offsetParent.nodeName;

            if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
              return element
                ? element.ownerDocument.documentElement
                : document.documentElement;
            }

            // .offsetParent will return the closest TH, TD or TABLE in case
            // no offsetParent is present, I hate this job...
            if (
              ["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 &&
              getStyleComputedProperty(offsetParent, "position") === "static"
            ) {
              return getOffsetParent(offsetParent);
            }

            return offsetParent;
          }

          function isOffsetContainer(element) {
            var nodeName = element.nodeName;

            if (nodeName === "BODY") {
              return false;
            }
            return (
              nodeName === "HTML" ||
              getOffsetParent(element.firstElementChild) === element
            );
          }

          /**
           * Finds the root node (document, shadowDOM root) of the given element
           * @method
           * @memberof Popper.Utils
           * @argument {Element} node
           * @returns {Element} root node
           */
          function getRoot(node) {
            if (node.parentNode !== null) {
              return getRoot(node.parentNode);
            }

            return node;
          }

          /**
           * Finds the offset parent common to the two provided nodes
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element1
           * @argument {Element} element2
           * @returns {Element} common offset parent
           */
          function findCommonOffsetParent(element1, element2) {
            // This check is needed to avoid errors in case one of the elements isn't defined for any reason
            if (
              !element1 ||
              !element1.nodeType ||
              !element2 ||
              !element2.nodeType
            ) {
              return document.documentElement;
            }

            // Here we make sure to give as "start" the element that comes first in the DOM
            var order =
              element1.compareDocumentPosition(element2) &
              Node.DOCUMENT_POSITION_FOLLOWING;
            var start = order ? element1 : element2;
            var end = order ? element2 : element1;

            // Get common ancestor container
            var range = document.createRange();
            range.setStart(start, 0);
            range.setEnd(end, 0);
            var commonAncestorContainer = range.commonAncestorContainer;

            // Both nodes are inside #document

            if (
              (element1 !== commonAncestorContainer &&
                element2 !== commonAncestorContainer) ||
              start.contains(end)
            ) {
              if (isOffsetContainer(commonAncestorContainer)) {
                return commonAncestorContainer;
              }

              return getOffsetParent(commonAncestorContainer);
            }

            // one of the nodes is inside shadowDOM, find which one
            var element1root = getRoot(element1);
            if (element1root.host) {
              return findCommonOffsetParent(element1root.host, element2);
            } else {
              return findCommonOffsetParent(element1, getRoot(element2).host);
            }
          }

          /**
           * Gets the scroll value of the given element in the given side (top and left)
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @argument {String} side `top` or `left`
           * @returns {number} amount of scrolled pixels
           */
          function getScroll(element) {
            var side =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : "top";

            var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
            var nodeName = element.nodeName;

            if (nodeName === "BODY" || nodeName === "HTML") {
              var html = element.ownerDocument.documentElement;
              var scrollingElement =
                element.ownerDocument.scrollingElement || html;
              return scrollingElement[upperSide];
            }

            return element[upperSide];
          }

          /*
           * Sum or subtract the element scroll values (left and top) from a given rect object
           * @method
           * @memberof Popper.Utils
           * @param {Object} rect - Rect object you want to change
           * @param {HTMLElement} element - The element from the function reads the scroll values
           * @param {Boolean} subtract - set to true if you want to subtract the scroll values
           * @return {Object} rect - The modifier rect object
           */
          function includeScroll(rect, element) {
            var subtract =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : false;

            var scrollTop = getScroll(element, "top");
            var scrollLeft = getScroll(element, "left");
            var modifier = subtract ? -1 : 1;
            rect.top += scrollTop * modifier;
            rect.bottom += scrollTop * modifier;
            rect.left += scrollLeft * modifier;
            rect.right += scrollLeft * modifier;
            return rect;
          }

          /*
           * Helper to detect borders of a given element
           * @method
           * @memberof Popper.Utils
           * @param {CSSStyleDeclaration} styles
           * Result of `getStyleComputedProperty` on the given element
           * @param {String} axis - `x` or `y`
           * @return {number} borders - The borders size of the given axis
           */

          function getBordersSize(styles, axis) {
            var sideA = axis === "x" ? "Left" : "Top";
            var sideB = sideA === "Left" ? "Right" : "Bottom";

            return (
              parseFloat(styles["border" + sideA + "Width"]) +
              parseFloat(styles["border" + sideB + "Width"])
            );
          }

          function getSize(axis, body, html, computedStyle) {
            return Math.max(
              body["offset" + axis],
              body["scroll" + axis],
              html["client" + axis],
              html["offset" + axis],
              html["scroll" + axis],
              isIE(10)
                ? parseInt(html["offset" + axis]) +
                    parseInt(
                      computedStyle[
                        "margin" + (axis === "Height" ? "Top" : "Left")
                      ]
                    ) +
                    parseInt(
                      computedStyle[
                        "margin" + (axis === "Height" ? "Bottom" : "Right")
                      ]
                    )
                : 0
            );
          }

          function getWindowSizes(document) {
            var body = document.body;
            var html = document.documentElement;
            var computedStyle = isIE(10) && getComputedStyle(html);

            return {
              height: getSize("Height", body, html, computedStyle),
              width: getSize("Width", body, html, computedStyle),
            };
          }

          var classCallCheck = function(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          };

          var createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();

          var defineProperty = function(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          };

          var _extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          /**
           * Given element offsets, generate an output similar to getBoundingClientRect
           * @method
           * @memberof Popper.Utils
           * @argument {Object} offsets
           * @returns {Object} ClientRect like output
           */
          function getClientRect(offsets) {
            return _extends({}, offsets, {
              right: offsets.left + offsets.width,
              bottom: offsets.top + offsets.height,
            });
          }

          /**
           * Get bounding client rect of given element
           * @method
           * @memberof Popper.Utils
           * @param {HTMLElement} element
           * @return {Object} client rect
           */
          function getBoundingClientRect(element) {
            var rect = {};

            // IE10 10 FIX: Please, don't ask, the element isn't
            // considered in DOM in some circumstances...
            // This isn't reproducible in IE10 compatibility mode of IE11
            try {
              if (isIE(10)) {
                rect = element.getBoundingClientRect();
                var scrollTop = getScroll(element, "top");
                var scrollLeft = getScroll(element, "left");
                rect.top += scrollTop;
                rect.left += scrollLeft;
                rect.bottom += scrollTop;
                rect.right += scrollLeft;
              } else {
                rect = element.getBoundingClientRect();
              }
            } catch (e) {}

            var result = {
              left: rect.left,
              top: rect.top,
              width: rect.right - rect.left,
              height: rect.bottom - rect.top,
            };

            // subtract scrollbar size from sizes
            var sizes =
              element.nodeName === "HTML"
                ? getWindowSizes(element.ownerDocument)
                : {};
            var width = sizes.width || element.clientWidth || result.width;
            var height = sizes.height || element.clientHeight || result.height;

            var horizScrollbar = element.offsetWidth - width;
            var vertScrollbar = element.offsetHeight - height;

            // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
            // we make this check conditional for performance reasons
            if (horizScrollbar || vertScrollbar) {
              var styles = getStyleComputedProperty(element);
              horizScrollbar -= getBordersSize(styles, "x");
              vertScrollbar -= getBordersSize(styles, "y");

              result.width -= horizScrollbar;
              result.height -= vertScrollbar;
            }

            return getClientRect(result);
          }

          function getOffsetRectRelativeToArbitraryNode(children, parent) {
            var fixedPosition =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : false;

            var isIE10 = isIE(10);
            var isHTML = parent.nodeName === "HTML";
            var childrenRect = getBoundingClientRect(children);
            var parentRect = getBoundingClientRect(parent);
            var scrollParent = getScrollParent(children);

            var styles = getStyleComputedProperty(parent);
            var borderTopWidth = parseFloat(styles.borderTopWidth);
            var borderLeftWidth = parseFloat(styles.borderLeftWidth);

            // In cases where the parent is fixed, we must ignore negative scroll in offset calc
            if (fixedPosition && isHTML) {
              parentRect.top = Math.max(parentRect.top, 0);
              parentRect.left = Math.max(parentRect.left, 0);
            }
            var offsets = getClientRect({
              top: childrenRect.top - parentRect.top - borderTopWidth,
              left: childrenRect.left - parentRect.left - borderLeftWidth,
              width: childrenRect.width,
              height: childrenRect.height,
            });
            offsets.marginTop = 0;
            offsets.marginLeft = 0;

            // Subtract margins of documentElement in case it's being used as parent
            // we do this only on HTML because it's the only element that behaves
            // differently when margins are applied to it. The margins are included in
            // the box of the documentElement, in the other cases not.
            if (!isIE10 && isHTML) {
              var marginTop = parseFloat(styles.marginTop);
              var marginLeft = parseFloat(styles.marginLeft);

              offsets.top -= borderTopWidth - marginTop;
              offsets.bottom -= borderTopWidth - marginTop;
              offsets.left -= borderLeftWidth - marginLeft;
              offsets.right -= borderLeftWidth - marginLeft;

              // Attach marginTop and marginLeft because in some circumstances we may need them
              offsets.marginTop = marginTop;
              offsets.marginLeft = marginLeft;
            }

            if (
              isIE10 && !fixedPosition
                ? parent.contains(scrollParent)
                : parent === scrollParent && scrollParent.nodeName !== "BODY"
            ) {
              offsets = includeScroll(offsets, parent);
            }

            return offsets;
          }

          function getViewportOffsetRectRelativeToArtbitraryNode(element) {
            var excludeScroll =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : false;

            var html = element.ownerDocument.documentElement;
            var relativeOffset = getOffsetRectRelativeToArbitraryNode(
              element,
              html
            );
            var width = Math.max(html.clientWidth, window.innerWidth || 0);
            var height = Math.max(html.clientHeight, window.innerHeight || 0);

            var scrollTop = !excludeScroll ? getScroll(html) : 0;
            var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;

            var offset = {
              top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
              left:
                scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
              width: width,
              height: height,
            };

            return getClientRect(offset);
          }

          /**
           * Check if the given element is fixed or is inside a fixed parent
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @argument {Element} customContainer
           * @returns {Boolean} answer to "isFixed?"
           */
          function isFixed(element) {
            var nodeName = element.nodeName;
            if (nodeName === "BODY" || nodeName === "HTML") {
              return false;
            }
            if (getStyleComputedProperty(element, "position") === "fixed") {
              return true;
            }
            var parentNode = getParentNode(element);
            if (!parentNode) {
              return false;
            }
            return isFixed(parentNode);
          }

          /**
           * Finds the first parent of an element that has a transformed property defined
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @returns {Element} first transformed parent or documentElement
           */

          function getFixedPositionOffsetParent(element) {
            // This check is needed to avoid errors in case one of the elements isn't defined for any reason
            if (!element || !element.parentElement || isIE()) {
              return document.documentElement;
            }
            var el = element.parentElement;
            while (el && getStyleComputedProperty(el, "transform") === "none") {
              el = el.parentElement;
            }
            return el || document.documentElement;
          }

          /**
           * Computed the boundaries limits and return them
           * @method
           * @memberof Popper.Utils
           * @param {HTMLElement} popper
           * @param {HTMLElement} reference
           * @param {number} padding
           * @param {HTMLElement} boundariesElement - Element used to define the boundaries
           * @param {Boolean} fixedPosition - Is in fixed position mode
           * @returns {Object} Coordinates of the boundaries
           */
          function getBoundaries(
            popper,
            reference,
            padding,
            boundariesElement
          ) {
            var fixedPosition =
              arguments.length > 4 && arguments[4] !== undefined
                ? arguments[4]
                : false;

            // NOTE: 1 DOM access here

            var boundaries = { top: 0, left: 0 };
            var offsetParent = fixedPosition
              ? getFixedPositionOffsetParent(popper)
              : findCommonOffsetParent(popper, getReferenceNode(reference));

            // Handle viewport case
            if (boundariesElement === "viewport") {
              boundaries = getViewportOffsetRectRelativeToArtbitraryNode(
                offsetParent,
                fixedPosition
              );
            } else {
              // Handle other cases based on DOM element used as boundaries
              var boundariesNode = void 0;
              if (boundariesElement === "scrollParent") {
                boundariesNode = getScrollParent(getParentNode(reference));
                if (boundariesNode.nodeName === "BODY") {
                  boundariesNode = popper.ownerDocument.documentElement;
                }
              } else if (boundariesElement === "window") {
                boundariesNode = popper.ownerDocument.documentElement;
              } else {
                boundariesNode = boundariesElement;
              }

              var offsets = getOffsetRectRelativeToArbitraryNode(
                boundariesNode,
                offsetParent,
                fixedPosition
              );

              // In case of HTML, we need a different computation
              if (
                boundariesNode.nodeName === "HTML" &&
                !isFixed(offsetParent)
              ) {
                var _getWindowSizes = getWindowSizes(popper.ownerDocument),
                  height = _getWindowSizes.height,
                  width = _getWindowSizes.width;

                boundaries.top += offsets.top - offsets.marginTop;
                boundaries.bottom = height + offsets.top;
                boundaries.left += offsets.left - offsets.marginLeft;
                boundaries.right = width + offsets.left;
              } else {
                // for all the other DOM elements, this one is good
                boundaries = offsets;
              }
            }

            // Add paddings
            padding = padding || 0;
            var isPaddingNumber = typeof padding === "number";
            boundaries.left += isPaddingNumber ? padding : padding.left || 0;
            boundaries.top += isPaddingNumber ? padding : padding.top || 0;
            boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
            boundaries.bottom -= isPaddingNumber
              ? padding
              : padding.bottom || 0;

            return boundaries;
          }

          function getArea(_ref) {
            var width = _ref.width,
              height = _ref.height;

            return width * height;
          }

          /**
           * Utility used to transform the `auto` placement to the placement with more
           * available space.
           * @method
           * @memberof Popper.Utils
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function computeAutoPlacement(
            placement,
            refRect,
            popper,
            reference,
            boundariesElement
          ) {
            var padding =
              arguments.length > 5 && arguments[5] !== undefined
                ? arguments[5]
                : 0;

            if (placement.indexOf("auto") === -1) {
              return placement;
            }

            var boundaries = getBoundaries(
              popper,
              reference,
              padding,
              boundariesElement
            );

            var rects = {
              top: {
                width: boundaries.width,
                height: refRect.top - boundaries.top,
              },
              right: {
                width: boundaries.right - refRect.right,
                height: boundaries.height,
              },
              bottom: {
                width: boundaries.width,
                height: boundaries.bottom - refRect.bottom,
              },
              left: {
                width: refRect.left - boundaries.left,
                height: boundaries.height,
              },
            };

            var sortedAreas = Object.keys(rects)
              .map(function(key) {
                return _extends(
                  {
                    key: key,
                  },
                  rects[key],
                  {
                    area: getArea(rects[key]),
                  }
                );
              })
              .sort(function(a, b) {
                return b.area - a.area;
              });

            var filteredAreas = sortedAreas.filter(function(_ref2) {
              var width = _ref2.width,
                height = _ref2.height;
              return (
                width >= popper.clientWidth && height >= popper.clientHeight
              );
            });

            var computedPlacement =
              filteredAreas.length > 0
                ? filteredAreas[0].key
                : sortedAreas[0].key;

            var variation = placement.split("-")[1];

            return computedPlacement + (variation ? "-" + variation : "");
          }

          /**
           * Get offsets to the reference element
           * @method
           * @memberof Popper.Utils
           * @param {Object} state
           * @param {Element} popper - the popper element
           * @param {Element} reference - the reference element (the popper will be relative to this)
           * @param {Element} fixedPosition - is in fixed position mode
           * @returns {Object} An object containing the offsets which will be applied to the popper
           */
          function getReferenceOffsets(state, popper, reference) {
            var fixedPosition =
              arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : null;

            var commonOffsetParent = fixedPosition
              ? getFixedPositionOffsetParent(popper)
              : findCommonOffsetParent(popper, getReferenceNode(reference));
            return getOffsetRectRelativeToArbitraryNode(
              reference,
              commonOffsetParent,
              fixedPosition
            );
          }

          /**
           * Get the outer sizes of the given element (offset size + margins)
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element
           * @returns {Object} object containing width and height properties
           */
          function getOuterSizes(element) {
            var window = element.ownerDocument.defaultView;
            var styles = window.getComputedStyle(element);
            var x =
              parseFloat(styles.marginTop || 0) +
              parseFloat(styles.marginBottom || 0);
            var y =
              parseFloat(styles.marginLeft || 0) +
              parseFloat(styles.marginRight || 0);
            var result = {
              width: element.offsetWidth + y,
              height: element.offsetHeight + x,
            };
            return result;
          }

          /**
           * Get the opposite placement of the given one
           * @method
           * @memberof Popper.Utils
           * @argument {String} placement
           * @returns {String} flipped placement
           */
          function getOppositePlacement(placement) {
            var hash = {
              left: "right",
              right: "left",
              bottom: "top",
              top: "bottom",
            };
            return placement.replace(/left|right|bottom|top/g, function(
              matched
            ) {
              return hash[matched];
            });
          }

          /**
           * Get offsets to the popper
           * @method
           * @memberof Popper.Utils
           * @param {Object} position - CSS position the Popper will get applied
           * @param {HTMLElement} popper - the popper element
           * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
           * @param {String} placement - one of the valid placement options
           * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
           */
          function getPopperOffsets(popper, referenceOffsets, placement) {
            placement = placement.split("-")[0];

            // Get popper node sizes
            var popperRect = getOuterSizes(popper);

            // Add position, width and height to our offsets object
            var popperOffsets = {
              width: popperRect.width,
              height: popperRect.height,
            };

            // depending by the popper placement we have to compute its offsets slightly differently
            var isHoriz = ["right", "left"].indexOf(placement) !== -1;
            var mainSide = isHoriz ? "top" : "left";
            var secondarySide = isHoriz ? "left" : "top";
            var measurement = isHoriz ? "height" : "width";
            var secondaryMeasurement = !isHoriz ? "height" : "width";

            popperOffsets[mainSide] =
              referenceOffsets[mainSide] +
              referenceOffsets[measurement] / 2 -
              popperRect[measurement] / 2;
            if (placement === secondarySide) {
              popperOffsets[secondarySide] =
                referenceOffsets[secondarySide] -
                popperRect[secondaryMeasurement];
            } else {
              popperOffsets[secondarySide] =
                referenceOffsets[getOppositePlacement(secondarySide)];
            }

            return popperOffsets;
          }

          /**
           * Mimics the `find` method of Array
           * @method
           * @memberof Popper.Utils
           * @argument {Array} arr
           * @argument prop
           * @argument value
           * @returns index or -1
           */
          function find(arr, check) {
            // use native find if supported
            if (Array.prototype.find) {
              return arr.find(check);
            }

            // use `filter` to obtain the same behavior of `find`
            return arr.filter(check)[0];
          }

          /**
           * Return the index of the matching object
           * @method
           * @memberof Popper.Utils
           * @argument {Array} arr
           * @argument prop
           * @argument value
           * @returns index or -1
           */
          function findIndex(arr, prop, value) {
            // use native findIndex if supported
            if (Array.prototype.findIndex) {
              return arr.findIndex(function(cur) {
                return cur[prop] === value;
              });
            }

            // use `find` + `indexOf` if `findIndex` isn't supported
            var match = find(arr, function(obj) {
              return obj[prop] === value;
            });
            return arr.indexOf(match);
          }

          /**
           * Loop trough the list of modifiers and run them in order,
           * each of them will then edit the data object.
           * @method
           * @memberof Popper.Utils
           * @param {dataObject} data
           * @param {Array} modifiers
           * @param {String} ends - Optional modifier name used as stopper
           * @returns {dataObject}
           */
          function runModifiers(modifiers, data, ends) {
            var modifiersToRun =
              ends === undefined
                ? modifiers
                : modifiers.slice(0, findIndex(modifiers, "name", ends));

            modifiersToRun.forEach(function(modifier) {
              if (modifier["function"]) {
                // eslint-disable-line dot-notation
                console.warn(
                  "`modifier.function` is deprecated, use `modifier.fn`!"
                );
              }
              var fn = modifier["function"] || modifier.fn; // eslint-disable-line dot-notation
              if (modifier.enabled && isFunction(fn)) {
                // Add properties to offsets to make them a complete clientRect object
                // we do this before each modifier to make sure the previous one doesn't
                // mess with these values
                data.offsets.popper = getClientRect(data.offsets.popper);
                data.offsets.reference = getClientRect(data.offsets.reference);

                data = fn(data, modifier);
              }
            });

            return data;
          }

          /**
           * Updates the position of the popper, computing the new offsets and applying
           * the new style.<br />
           * Prefer `scheduleUpdate` over `update` because of performance reasons.
           * @method
           * @memberof Popper
           */
          function update() {
            // if popper is destroyed, don't perform any further update
            if (this.state.isDestroyed) {
              return;
            }

            var data = {
              instance: this,
              styles: {},
              arrowStyles: {},
              attributes: {},
              flipped: false,
              offsets: {},
            };

            // compute reference element offsets
            data.offsets.reference = getReferenceOffsets(
              this.state,
              this.popper,
              this.reference,
              this.options.positionFixed
            );

            // compute auto placement, store placement inside the data object,
            // modifiers will be able to edit `placement` if needed
            // and refer to originalPlacement to know the original value
            data.placement = computeAutoPlacement(
              this.options.placement,
              data.offsets.reference,
              this.popper,
              this.reference,
              this.options.modifiers.flip.boundariesElement,
              this.options.modifiers.flip.padding
            );

            // store the computed placement inside `originalPlacement`
            data.originalPlacement = data.placement;

            data.positionFixed = this.options.positionFixed;

            // compute the popper offsets
            data.offsets.popper = getPopperOffsets(
              this.popper,
              data.offsets.reference,
              data.placement
            );

            data.offsets.popper.position = this.options.positionFixed
              ? "fixed"
              : "absolute";

            // run the modifiers
            data = runModifiers(this.modifiers, data);

            // the first `update` will call `onCreate` callback
            // the other ones will call `onUpdate` callback
            if (!this.state.isCreated) {
              this.state.isCreated = true;
              this.options.onCreate(data);
            } else {
              this.options.onUpdate(data);
            }
          }

          /**
           * Helper used to know if the given modifier is enabled.
           * @method
           * @memberof Popper.Utils
           * @returns {Boolean}
           */
          function isModifierEnabled(modifiers, modifierName) {
            return modifiers.some(function(_ref) {
              var name = _ref.name,
                enabled = _ref.enabled;
              return enabled && name === modifierName;
            });
          }

          /**
           * Get the prefixed supported property name
           * @method
           * @memberof Popper.Utils
           * @argument {String} property (camelCase)
           * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
           */
          function getSupportedPropertyName(property) {
            var prefixes = [false, "ms", "Webkit", "Moz", "O"];
            var upperProp =
              property.charAt(0).toUpperCase() + property.slice(1);

            for (var i = 0; i < prefixes.length; i++) {
              var prefix = prefixes[i];
              var toCheck = prefix ? "" + prefix + upperProp : property;
              if (typeof document.body.style[toCheck] !== "undefined") {
                return toCheck;
              }
            }
            return null;
          }

          /**
           * Destroys the popper.
           * @method
           * @memberof Popper
           */
          function destroy() {
            this.state.isDestroyed = true;

            // touch DOM only if `applyStyle` modifier is enabled
            if (isModifierEnabled(this.modifiers, "applyStyle")) {
              this.popper.removeAttribute("x-placement");
              this.popper.style.position = "";
              this.popper.style.top = "";
              this.popper.style.left = "";
              this.popper.style.right = "";
              this.popper.style.bottom = "";
              this.popper.style.willChange = "";
              this.popper.style[getSupportedPropertyName("transform")] = "";
            }

            this.disableEventListeners();

            // remove the popper if user explicitly asked for the deletion on destroy
            // do not use `remove` because IE11 doesn't support it
            if (this.options.removeOnDestroy) {
              this.popper.parentNode.removeChild(this.popper);
            }
            return this;
          }

          /**
           * Get the window associated with the element
           * @argument {Element} element
           * @returns {Window}
           */
          function getWindow(element) {
            var ownerDocument = element.ownerDocument;
            return ownerDocument ? ownerDocument.defaultView : window;
          }

          function attachToScrollParents(
            scrollParent,
            event,
            callback,
            scrollParents
          ) {
            var isBody = scrollParent.nodeName === "BODY";
            var target = isBody
              ? scrollParent.ownerDocument.defaultView
              : scrollParent;
            target.addEventListener(event, callback, { passive: true });

            if (!isBody) {
              attachToScrollParents(
                getScrollParent(target.parentNode),
                event,
                callback,
                scrollParents
              );
            }
            scrollParents.push(target);
          }

          /**
           * Setup needed event listeners used to update the popper position
           * @method
           * @memberof Popper.Utils
           * @private
           */
          function setupEventListeners(reference, options, state, updateBound) {
            // Resize event listener on window
            state.updateBound = updateBound;
            getWindow(reference).addEventListener("resize", state.updateBound, {
              passive: true,
            });

            // Scroll event listener on scroll parents
            var scrollElement = getScrollParent(reference);
            attachToScrollParents(
              scrollElement,
              "scroll",
              state.updateBound,
              state.scrollParents
            );
            state.scrollElement = scrollElement;
            state.eventsEnabled = true;

            return state;
          }

          /**
           * It will add resize/scroll events and start recalculating
           * position of the popper element when they are triggered.
           * @method
           * @memberof Popper
           */
          function enableEventListeners() {
            if (!this.state.eventsEnabled) {
              this.state = setupEventListeners(
                this.reference,
                this.options,
                this.state,
                this.scheduleUpdate
              );
            }
          }

          /**
           * Remove event listeners used to update the popper position
           * @method
           * @memberof Popper.Utils
           * @private
           */
          function removeEventListeners(reference, state) {
            // Remove resize event listener on window
            getWindow(reference).removeEventListener(
              "resize",
              state.updateBound
            );

            // Remove scroll event listener on scroll parents
            state.scrollParents.forEach(function(target) {
              target.removeEventListener("scroll", state.updateBound);
            });

            // Reset state
            state.updateBound = null;
            state.scrollParents = [];
            state.scrollElement = null;
            state.eventsEnabled = false;
            return state;
          }

          /**
           * It will remove resize/scroll events and won't recalculate popper position
           * when they are triggered. It also won't trigger `onUpdate` callback anymore,
           * unless you call `update` method manually.
           * @method
           * @memberof Popper
           */
          function disableEventListeners() {
            if (this.state.eventsEnabled) {
              cancelAnimationFrame(this.scheduleUpdate);
              this.state = removeEventListeners(this.reference, this.state);
            }
          }

          /**
           * Tells if a given input is a number
           * @method
           * @memberof Popper.Utils
           * @param {*} input to check
           * @return {Boolean}
           */
          function isNumeric(n) {
            return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
          }

          /**
           * Set the style to the given popper
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element - Element to apply the style to
           * @argument {Object} styles
           * Object with a list of properties and values which will be applied to the element
           */
          function setStyles(element, styles) {
            Object.keys(styles).forEach(function(prop) {
              var unit = "";
              // add unit if the value is numeric and is one of the following
              if (
                ["width", "height", "top", "right", "bottom", "left"].indexOf(
                  prop
                ) !== -1 &&
                isNumeric(styles[prop])
              ) {
                unit = "px";
              }
              element.style[prop] = styles[prop] + unit;
            });
          }

          /**
           * Set the attributes to the given popper
           * @method
           * @memberof Popper.Utils
           * @argument {Element} element - Element to apply the attributes to
           * @argument {Object} styles
           * Object with a list of properties and values which will be applied to the element
           */
          function setAttributes(element, attributes) {
            Object.keys(attributes).forEach(function(prop) {
              var value = attributes[prop];
              if (value !== false) {
                element.setAttribute(prop, attributes[prop]);
              } else {
                element.removeAttribute(prop);
              }
            });
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Object} data.styles - List of style properties - values to apply to popper element
           * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The same data object
           */
          function applyStyle(data) {
            // any property present in `data.styles` will be applied to the popper,
            // in this way we can make the 3rd party modifiers add custom styles to it
            // Be aware, modifiers could override the properties defined in the previous
            // lines of this modifier!
            setStyles(data.instance.popper, data.styles);

            // any property present in `data.attributes` will be applied to the popper,
            // they will be set as HTML attributes of the element
            setAttributes(data.instance.popper, data.attributes);

            // if arrowElement is defined and arrowStyles has some properties
            if (data.arrowElement && Object.keys(data.arrowStyles).length) {
              setStyles(data.arrowElement, data.arrowStyles);
            }

            return data;
          }

          /**
           * Set the x-placement attribute before everything else because it could be used
           * to add margins to the popper margins needs to be calculated to get the
           * correct popper offsets.
           * @method
           * @memberof Popper.modifiers
           * @param {HTMLElement} reference - The reference element used to position the popper
           * @param {HTMLElement} popper - The HTML element used as popper
           * @param {Object} options - Popper.js options
           */
          function applyStyleOnLoad(
            reference,
            popper,
            options,
            modifierOptions,
            state
          ) {
            // compute reference element offsets
            var referenceOffsets = getReferenceOffsets(
              state,
              popper,
              reference,
              options.positionFixed
            );

            // compute auto placement, store placement inside the data object,
            // modifiers will be able to edit `placement` if needed
            // and refer to originalPlacement to know the original value
            var placement = computeAutoPlacement(
              options.placement,
              referenceOffsets,
              popper,
              reference,
              options.modifiers.flip.boundariesElement,
              options.modifiers.flip.padding
            );

            popper.setAttribute("x-placement", placement);

            // Apply `position` to popper before anything else because
            // without the position applied we can't guarantee correct computations
            setStyles(popper, {
              position: options.positionFixed ? "fixed" : "absolute",
            });

            return options;
          }

          /**
           * @function
           * @memberof Popper.Utils
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Boolean} shouldRound - If the offsets should be rounded at all
           * @returns {Object} The popper's position offsets rounded
           *
           * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
           * good as it can be within reason.
           * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
           *
           * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
           * as well on High DPI screens).
           *
           * Firefox prefers no rounding for positioning and does not have blurriness on
           * high DPI screens.
           *
           * Only horizontal placement and left/right values need to be considered.
           */
          function getRoundedOffsets(data, shouldRound) {
            var _data$offsets = data.offsets,
              popper = _data$offsets.popper,
              reference = _data$offsets.reference;
            var round = Math.round,
              floor = Math.floor;

            var noRound = function noRound(v) {
              return v;
            };

            var referenceWidth = round(reference.width);
            var popperWidth = round(popper.width);

            var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
            var isVariation = data.placement.indexOf("-") !== -1;
            var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
            var bothOddWidth =
              referenceWidth % 2 === 1 && popperWidth % 2 === 1;

            var horizontalToInteger = !shouldRound
              ? noRound
              : isVertical || isVariation || sameWidthParity
              ? round
              : floor;
            var verticalToInteger = !shouldRound ? noRound : round;

            return {
              left: horizontalToInteger(
                bothOddWidth && !isVariation && shouldRound
                  ? popper.left - 1
                  : popper.left
              ),
              top: verticalToInteger(popper.top),
              bottom: verticalToInteger(popper.bottom),
              right: horizontalToInteger(popper.right),
            };
          }

          var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function computeStyle(data, options) {
            var x = options.x,
              y = options.y;
            var popper = data.offsets.popper;

            // Remove this legacy support in Popper.js v2

            var legacyGpuAccelerationOption = find(
              data.instance.modifiers,
              function(modifier) {
                return modifier.name === "applyStyle";
              }
            ).gpuAcceleration;
            if (legacyGpuAccelerationOption !== undefined) {
              console.warn(
                "WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"
              );
            }
            var gpuAcceleration =
              legacyGpuAccelerationOption !== undefined
                ? legacyGpuAccelerationOption
                : options.gpuAcceleration;

            var offsetParent = getOffsetParent(data.instance.popper);
            var offsetParentRect = getBoundingClientRect(offsetParent);

            // Styles
            var styles = {
              position: popper.position,
            };

            var offsets = getRoundedOffsets(
              data,
              window.devicePixelRatio < 2 || !isFirefox
            );

            var sideA = x === "bottom" ? "top" : "bottom";
            var sideB = y === "right" ? "left" : "right";

            // if gpuAcceleration is set to `true` and transform is supported,
            //  we use `translate3d` to apply the position to the popper we
            // automatically use the supported prefixed version if needed
            var prefixedProperty = getSupportedPropertyName("transform");

            // now, let's make a step back and look at this code closely (wtf?)
            // If the content of the popper grows once it's been positioned, it
            // may happen that the popper gets misplaced because of the new content
            // overflowing its reference element
            // To avoid this problem, we provide two options (x and y), which allow
            // the consumer to define the offset origin.
            // If we position a popper on top of a reference element, we can set
            // `x` to `top` to make the popper grow towards its top instead of
            // its bottom.
            var left = void 0,
              top = void 0;
            if (sideA === "bottom") {
              // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
              // and not the bottom of the html element
              if (offsetParent.nodeName === "HTML") {
                top = -offsetParent.clientHeight + offsets.bottom;
              } else {
                top = -offsetParentRect.height + offsets.bottom;
              }
            } else {
              top = offsets.top;
            }
            if (sideB === "right") {
              if (offsetParent.nodeName === "HTML") {
                left = -offsetParent.clientWidth + offsets.right;
              } else {
                left = -offsetParentRect.width + offsets.right;
              }
            } else {
              left = offsets.left;
            }
            if (gpuAcceleration && prefixedProperty) {
              styles[prefixedProperty] =
                "translate3d(" + left + "px, " + top + "px, 0)";
              styles[sideA] = 0;
              styles[sideB] = 0;
              styles.willChange = "transform";
            } else {
              // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
              var invertTop = sideA === "bottom" ? -1 : 1;
              var invertLeft = sideB === "right" ? -1 : 1;
              styles[sideA] = top * invertTop;
              styles[sideB] = left * invertLeft;
              styles.willChange = sideA + ", " + sideB;
            }

            // Attributes
            var attributes = {
              "x-placement": data.placement,
            };

            // Update `data` attributes, styles and arrowStyles
            data.attributes = _extends({}, attributes, data.attributes);
            data.styles = _extends({}, styles, data.styles);
            data.arrowStyles = _extends(
              {},
              data.offsets.arrow,
              data.arrowStyles
            );

            return data;
          }

          /**
           * Helper used to know if the given modifier depends from another one.<br />
           * It checks if the needed modifier is listed and enabled.
           * @method
           * @memberof Popper.Utils
           * @param {Array} modifiers - list of modifiers
           * @param {String} requestingName - name of requesting modifier
           * @param {String} requestedName - name of requested modifier
           * @returns {Boolean}
           */
          function isModifierRequired(
            modifiers,
            requestingName,
            requestedName
          ) {
            var requesting = find(modifiers, function(_ref) {
              var name = _ref.name;
              return name === requestingName;
            });

            var isRequired =
              !!requesting &&
              modifiers.some(function(modifier) {
                return (
                  modifier.name === requestedName &&
                  modifier.enabled &&
                  modifier.order < requesting.order
                );
              });

            if (!isRequired) {
              var _requesting = "`" + requestingName + "`";
              var requested = "`" + requestedName + "`";
              console.warn(
                requested +
                  " modifier is required by " +
                  _requesting +
                  " modifier in order to work, be sure to include it before " +
                  _requesting +
                  "!"
              );
            }
            return isRequired;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function arrow(data, options) {
            var _data$offsets$arrow;

            // arrow depends on keepTogether in order to work
            if (
              !isModifierRequired(
                data.instance.modifiers,
                "arrow",
                "keepTogether"
              )
            ) {
              return data;
            }

            var arrowElement = options.element;

            // if arrowElement is a string, suppose it's a CSS selector
            if (typeof arrowElement === "string") {
              arrowElement = data.instance.popper.querySelector(arrowElement);

              // if arrowElement is not found, don't run the modifier
              if (!arrowElement) {
                return data;
              }
            } else {
              // if the arrowElement isn't a query selector we must check that the
              // provided DOM node is child of its popper node
              if (!data.instance.popper.contains(arrowElement)) {
                console.warn(
                  "WARNING: `arrow.element` must be child of its popper element!"
                );
                return data;
              }
            }

            var placement = data.placement.split("-")[0];
            var _data$offsets = data.offsets,
              popper = _data$offsets.popper,
              reference = _data$offsets.reference;

            var isVertical = ["left", "right"].indexOf(placement) !== -1;

            var len = isVertical ? "height" : "width";
            var sideCapitalized = isVertical ? "Top" : "Left";
            var side = sideCapitalized.toLowerCase();
            var altSide = isVertical ? "left" : "top";
            var opSide = isVertical ? "bottom" : "right";
            var arrowElementSize = getOuterSizes(arrowElement)[len];

            //
            // extends keepTogether behavior making sure the popper and its
            // reference have enough pixels in conjunction
            //

            // top/left side
            if (reference[opSide] - arrowElementSize < popper[side]) {
              data.offsets.popper[side] -=
                popper[side] - (reference[opSide] - arrowElementSize);
            }
            // bottom/right side
            if (reference[side] + arrowElementSize > popper[opSide]) {
              data.offsets.popper[side] +=
                reference[side] + arrowElementSize - popper[opSide];
            }
            data.offsets.popper = getClientRect(data.offsets.popper);

            // compute center of the popper
            var center =
              reference[side] + reference[len] / 2 - arrowElementSize / 2;

            // Compute the sideValue using the updated popper offsets
            // take popper margin in account because we don't have this info available
            var css = getStyleComputedProperty(data.instance.popper);
            var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
            var popperBorderSide = parseFloat(
              css["border" + sideCapitalized + "Width"]
            );
            var sideValue =
              center -
              data.offsets.popper[side] -
              popperMarginSide -
              popperBorderSide;

            // prevent arrowElement from being placed not contiguously to its popper
            sideValue = Math.max(
              Math.min(popper[len] - arrowElementSize, sideValue),
              0
            );

            data.arrowElement = arrowElement;
            data.offsets.arrow =
              ((_data$offsets$arrow = {}),
              defineProperty(_data$offsets$arrow, side, Math.round(sideValue)),
              defineProperty(_data$offsets$arrow, altSide, ""),
              _data$offsets$arrow);

            return data;
          }

          /**
           * Get the opposite placement variation of the given one
           * @method
           * @memberof Popper.Utils
           * @argument {String} placement variation
           * @returns {String} flipped placement variation
           */
          function getOppositeVariation(variation) {
            if (variation === "end") {
              return "start";
            } else if (variation === "start") {
              return "end";
            }
            return variation;
          }

          /**
           * List of accepted placements to use as values of the `placement` option.<br />
           * Valid placements are:
           * - `auto`
           * - `top`
           * - `right`
           * - `bottom`
           * - `left`
           *
           * Each placement can have a variation from this list:
           * - `-start`
           * - `-end`
           *
           * Variations are interpreted easily if you think of them as the left to right
           * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
           * is right.<br />
           * Vertically (`left` and `right`), `start` is top and `end` is bottom.
           *
           * Some valid examples are:
           * - `top-end` (on top of reference, right aligned)
           * - `right-start` (on right of reference, top aligned)
           * - `bottom` (on bottom, centered)
           * - `auto-end` (on the side with more space available, alignment depends by placement)
           *
           * @static
           * @type {Array}
           * @enum {String}
           * @readonly
           * @method placements
           * @memberof Popper
           */
          var placements = [
            "auto-start",
            "auto",
            "auto-end",
            "top-start",
            "top",
            "top-end",
            "right-start",
            "right",
            "right-end",
            "bottom-end",
            "bottom",
            "bottom-start",
            "left-end",
            "left",
            "left-start",
          ];

          // Get rid of `auto` `auto-start` and `auto-end`
          var validPlacements = placements.slice(3);

          /**
           * Given an initial placement, returns all the subsequent placements
           * clockwise (or counter-clockwise).
           *
           * @method
           * @memberof Popper.Utils
           * @argument {String} placement - A valid placement (it accepts variations)
           * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
           * @returns {Array} placements including their variations
           */
          function clockwise(placement) {
            var counter =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : false;

            var index = validPlacements.indexOf(placement);
            var arr = validPlacements
              .slice(index + 1)
              .concat(validPlacements.slice(0, index));
            return counter ? arr.reverse() : arr;
          }

          var BEHAVIORS = {
            FLIP: "flip",
            CLOCKWISE: "clockwise",
            COUNTERCLOCKWISE: "counterclockwise",
          };

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function flip(data, options) {
            // if `inner` modifier is enabled, we can't use the `flip` modifier
            if (isModifierEnabled(data.instance.modifiers, "inner")) {
              return data;
            }

            if (data.flipped && data.placement === data.originalPlacement) {
              // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
              return data;
            }

            var boundaries = getBoundaries(
              data.instance.popper,
              data.instance.reference,
              options.padding,
              options.boundariesElement,
              data.positionFixed
            );

            var placement = data.placement.split("-")[0];
            var placementOpposite = getOppositePlacement(placement);
            var variation = data.placement.split("-")[1] || "";

            var flipOrder = [];

            switch (options.behavior) {
              case BEHAVIORS.FLIP:
                flipOrder = [placement, placementOpposite];
                break;
              case BEHAVIORS.CLOCKWISE:
                flipOrder = clockwise(placement);
                break;
              case BEHAVIORS.COUNTERCLOCKWISE:
                flipOrder = clockwise(placement, true);
                break;
              default:
                flipOrder = options.behavior;
            }

            flipOrder.forEach(function(step, index) {
              if (placement !== step || flipOrder.length === index + 1) {
                return data;
              }

              placement = data.placement.split("-")[0];
              placementOpposite = getOppositePlacement(placement);

              var popperOffsets = data.offsets.popper;
              var refOffsets = data.offsets.reference;

              // using floor because the reference offsets may contain decimals we are not going to consider here
              var floor = Math.floor;
              var overlapsRef =
                (placement === "left" &&
                  floor(popperOffsets.right) > floor(refOffsets.left)) ||
                (placement === "right" &&
                  floor(popperOffsets.left) < floor(refOffsets.right)) ||
                (placement === "top" &&
                  floor(popperOffsets.bottom) > floor(refOffsets.top)) ||
                (placement === "bottom" &&
                  floor(popperOffsets.top) < floor(refOffsets.bottom));

              var overflowsLeft =
                floor(popperOffsets.left) < floor(boundaries.left);
              var overflowsRight =
                floor(popperOffsets.right) > floor(boundaries.right);
              var overflowsTop =
                floor(popperOffsets.top) < floor(boundaries.top);
              var overflowsBottom =
                floor(popperOffsets.bottom) > floor(boundaries.bottom);

              var overflowsBoundaries =
                (placement === "left" && overflowsLeft) ||
                (placement === "right" && overflowsRight) ||
                (placement === "top" && overflowsTop) ||
                (placement === "bottom" && overflowsBottom);

              // flip the variation if required
              var isVertical = ["top", "bottom"].indexOf(placement) !== -1;

              // flips variation if reference element overflows boundaries
              var flippedVariationByRef =
                !!options.flipVariations &&
                ((isVertical && variation === "start" && overflowsLeft) ||
                  (isVertical && variation === "end" && overflowsRight) ||
                  (!isVertical && variation === "start" && overflowsTop) ||
                  (!isVertical && variation === "end" && overflowsBottom));

              // flips variation if popper content overflows boundaries
              var flippedVariationByContent =
                !!options.flipVariationsByContent &&
                ((isVertical && variation === "start" && overflowsRight) ||
                  (isVertical && variation === "end" && overflowsLeft) ||
                  (!isVertical && variation === "start" && overflowsBottom) ||
                  (!isVertical && variation === "end" && overflowsTop));

              var flippedVariation =
                flippedVariationByRef || flippedVariationByContent;

              if (overlapsRef || overflowsBoundaries || flippedVariation) {
                // this boolean to detect any flip loop
                data.flipped = true;

                if (overlapsRef || overflowsBoundaries) {
                  placement = flipOrder[index + 1];
                }

                if (flippedVariation) {
                  variation = getOppositeVariation(variation);
                }

                data.placement = placement + (variation ? "-" + variation : "");

                // this object contains `position`, we want to preserve it along with
                // any additional property we may add in the future
                data.offsets.popper = _extends(
                  {},
                  data.offsets.popper,
                  getPopperOffsets(
                    data.instance.popper,
                    data.offsets.reference,
                    data.placement
                  )
                );

                data = runModifiers(data.instance.modifiers, data, "flip");
              }
            });
            return data;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function keepTogether(data) {
            var _data$offsets = data.offsets,
              popper = _data$offsets.popper,
              reference = _data$offsets.reference;

            var placement = data.placement.split("-")[0];
            var floor = Math.floor;
            var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
            var side = isVertical ? "right" : "bottom";
            var opSide = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";

            if (popper[side] < floor(reference[opSide])) {
              data.offsets.popper[opSide] =
                floor(reference[opSide]) - popper[measurement];
            }
            if (popper[opSide] > floor(reference[side])) {
              data.offsets.popper[opSide] = floor(reference[side]);
            }

            return data;
          }

          /**
           * Converts a string containing value + unit into a px value number
           * @function
           * @memberof {modifiers~offset}
           * @private
           * @argument {String} str - Value + unit string
           * @argument {String} measurement - `height` or `width`
           * @argument {Object} popperOffsets
           * @argument {Object} referenceOffsets
           * @returns {Number|String}
           * Value in pixels, or original string if no values were extracted
           */
          function toValue(str, measurement, popperOffsets, referenceOffsets) {
            // separate value from unit
            var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
            var value = +split[1];
            var unit = split[2];

            // If it's not a number it's an operator, I guess
            if (!value) {
              return str;
            }

            if (unit.indexOf("%") === 0) {
              var element = void 0;
              switch (unit) {
                case "%p":
                  element = popperOffsets;
                  break;
                case "%":
                case "%r":
                default:
                  element = referenceOffsets;
              }

              var rect = getClientRect(element);
              return (rect[measurement] / 100) * value;
            } else if (unit === "vh" || unit === "vw") {
              // if is a vh or vw, we calculate the size based on the viewport
              var size = void 0;
              if (unit === "vh") {
                size = Math.max(
                  document.documentElement.clientHeight,
                  window.innerHeight || 0
                );
              } else {
                size = Math.max(
                  document.documentElement.clientWidth,
                  window.innerWidth || 0
                );
              }
              return (size / 100) * value;
            } else {
              // if is an explicit pixel unit, we get rid of the unit and keep the value
              // if is an implicit unit, it's px, and we return just the value
              return value;
            }
          }

          /**
           * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
           * @function
           * @memberof {modifiers~offset}
           * @private
           * @argument {String} offset
           * @argument {Object} popperOffsets
           * @argument {Object} referenceOffsets
           * @argument {String} basePlacement
           * @returns {Array} a two cells array with x and y offsets in numbers
           */
          function parseOffset(
            offset,
            popperOffsets,
            referenceOffsets,
            basePlacement
          ) {
            var offsets = [0, 0];

            // Use height if placement is left or right and index is 0 otherwise use width
            // in this way the first offset will use an axis and the second one
            // will use the other one
            var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;

            // Split the offset string to obtain a list of values and operands
            // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
            var fragments = offset.split(/(\+|\-)/).map(function(frag) {
              return frag.trim();
            });

            // Detect if the offset string contains a pair of values or a single one
            // they could be separated by comma or space
            var divider = fragments.indexOf(
              find(fragments, function(frag) {
                return frag.search(/,|\s/) !== -1;
              })
            );

            if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
              console.warn(
                "Offsets separated by white space(s) are deprecated, use a comma (,) instead."
              );
            }

            // If divider is found, we divide the list of values and operands to divide
            // them by ofset X and Y.
            var splitRegex = /\s*,\s*|\s+/;
            var ops =
              divider !== -1
                ? [
                    fragments
                      .slice(0, divider)
                      .concat([fragments[divider].split(splitRegex)[0]]),
                    [fragments[divider].split(splitRegex)[1]].concat(
                      fragments.slice(divider + 1)
                    ),
                  ]
                : [fragments];

            // Convert the values with units to absolute pixels to allow our computations
            ops = ops.map(function(op, index) {
              // Most of the units rely on the orientation of the popper
              var measurement = (index === 1
              ? !useHeight
              : useHeight)
                ? "height"
                : "width";
              var mergeWithPrevious = false;
              return (
                op
                  // This aggregates any `+` or `-` sign that aren't considered operators
                  // e.g.: 10 + +5 => [10, +, +5]
                  .reduce(function(a, b) {
                    if (
                      a[a.length - 1] === "" &&
                      ["+", "-"].indexOf(b) !== -1
                    ) {
                      a[a.length - 1] = b;
                      mergeWithPrevious = true;
                      return a;
                    } else if (mergeWithPrevious) {
                      a[a.length - 1] += b;
                      mergeWithPrevious = false;
                      return a;
                    } else {
                      return a.concat(b);
                    }
                  }, [])
                  // Here we convert the string values into number values (in px)
                  .map(function(str) {
                    return toValue(
                      str,
                      measurement,
                      popperOffsets,
                      referenceOffsets
                    );
                  })
              );
            });

            // Loop trough the offsets arrays and execute the operations
            ops.forEach(function(op, index) {
              op.forEach(function(frag, index2) {
                if (isNumeric(frag)) {
                  offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
                }
              });
            });
            return offsets;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @argument {Number|String} options.offset=0
           * The offset value as described in the modifier description
           * @returns {Object} The data object, properly modified
           */
          function offset(data, _ref) {
            var offset = _ref.offset;
            var placement = data.placement,
              _data$offsets = data.offsets,
              popper = _data$offsets.popper,
              reference = _data$offsets.reference;

            var basePlacement = placement.split("-")[0];

            var offsets = void 0;
            if (isNumeric(+offset)) {
              offsets = [+offset, 0];
            } else {
              offsets = parseOffset(offset, popper, reference, basePlacement);
            }

            if (basePlacement === "left") {
              popper.top += offsets[0];
              popper.left -= offsets[1];
            } else if (basePlacement === "right") {
              popper.top += offsets[0];
              popper.left += offsets[1];
            } else if (basePlacement === "top") {
              popper.left += offsets[0];
              popper.top -= offsets[1];
            } else if (basePlacement === "bottom") {
              popper.left += offsets[0];
              popper.top += offsets[1];
            }

            data.popper = popper;
            return data;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function preventOverflow(data, options) {
            var boundariesElement =
              options.boundariesElement ||
              getOffsetParent(data.instance.popper);

            // If offsetParent is the reference element, we really want to
            // go one step up and use the next offsetParent as reference to
            // avoid to make this modifier completely useless and look like broken
            if (data.instance.reference === boundariesElement) {
              boundariesElement = getOffsetParent(boundariesElement);
            }

            // NOTE: DOM access here
            // resets the popper's position so that the document size can be calculated excluding
            // the size of the popper element itself
            var transformProp = getSupportedPropertyName("transform");
            var popperStyles = data.instance.popper.style; // assignment to help minification
            var top = popperStyles.top,
              left = popperStyles.left,
              transform = popperStyles[transformProp];

            popperStyles.top = "";
            popperStyles.left = "";
            popperStyles[transformProp] = "";

            var boundaries = getBoundaries(
              data.instance.popper,
              data.instance.reference,
              options.padding,
              boundariesElement,
              data.positionFixed
            );

            // NOTE: DOM access here
            // restores the original style properties after the offsets have been computed
            popperStyles.top = top;
            popperStyles.left = left;
            popperStyles[transformProp] = transform;

            options.boundaries = boundaries;

            var order = options.priority;
            var popper = data.offsets.popper;

            var check = {
              primary: function primary(placement) {
                var value = popper[placement];
                if (
                  popper[placement] < boundaries[placement] &&
                  !options.escapeWithReference
                ) {
                  value = Math.max(popper[placement], boundaries[placement]);
                }
                return defineProperty({}, placement, value);
              },
              secondary: function secondary(placement) {
                var mainSide = placement === "right" ? "left" : "top";
                var value = popper[mainSide];
                if (
                  popper[placement] > boundaries[placement] &&
                  !options.escapeWithReference
                ) {
                  value = Math.min(
                    popper[mainSide],
                    boundaries[placement] -
                      (placement === "right" ? popper.width : popper.height)
                  );
                }
                return defineProperty({}, mainSide, value);
              },
            };

            order.forEach(function(placement) {
              var side =
                ["left", "top"].indexOf(placement) !== -1
                  ? "primary"
                  : "secondary";
              popper = _extends({}, popper, check[side](placement));
            });

            data.offsets.popper = popper;

            return data;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function shift(data) {
            var placement = data.placement;
            var basePlacement = placement.split("-")[0];
            var shiftvariation = placement.split("-")[1];

            // if shift shiftvariation is specified, run the modifier
            if (shiftvariation) {
              var _data$offsets = data.offsets,
                reference = _data$offsets.reference,
                popper = _data$offsets.popper;

              var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
              var side = isVertical ? "left" : "top";
              var measurement = isVertical ? "width" : "height";

              var shiftOffsets = {
                start: defineProperty({}, side, reference[side]),
                end: defineProperty(
                  {},
                  side,
                  reference[side] + reference[measurement] - popper[measurement]
                ),
              };

              data.offsets.popper = _extends(
                {},
                popper,
                shiftOffsets[shiftvariation]
              );
            }

            return data;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by update method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function hide(data) {
            if (
              !isModifierRequired(
                data.instance.modifiers,
                "hide",
                "preventOverflow"
              )
            ) {
              return data;
            }

            var refRect = data.offsets.reference;
            var bound = find(data.instance.modifiers, function(modifier) {
              return modifier.name === "preventOverflow";
            }).boundaries;

            if (
              refRect.bottom < bound.top ||
              refRect.left > bound.right ||
              refRect.top > bound.bottom ||
              refRect.right < bound.left
            ) {
              // Avoid unnecessary DOM access if visibility hasn't changed
              if (data.hide === true) {
                return data;
              }

              data.hide = true;
              data.attributes["x-out-of-boundaries"] = "";
            } else {
              // Avoid unnecessary DOM access if visibility hasn't changed
              if (data.hide === false) {
                return data;
              }

              data.hide = false;
              data.attributes["x-out-of-boundaries"] = false;
            }

            return data;
          }

          /**
           * @function
           * @memberof Modifiers
           * @argument {Object} data - The data object generated by `update` method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {Object} The data object, properly modified
           */
          function inner(data) {
            var placement = data.placement;
            var basePlacement = placement.split("-")[0];
            var _data$offsets = data.offsets,
              popper = _data$offsets.popper,
              reference = _data$offsets.reference;

            var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;

            var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;

            popper[isHoriz ? "left" : "top"] =
              reference[basePlacement] -
              (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);

            data.placement = getOppositePlacement(placement);
            data.offsets.popper = getClientRect(popper);

            return data;
          }

          /**
           * Modifier function, each modifier can have a function of this type assigned
           * to its `fn` property.<br />
           * These functions will be called on each update, this means that you must
           * make sure they are performant enough to avoid performance bottlenecks.
           *
           * @function ModifierFn
           * @argument {dataObject} data - The data object generated by `update` method
           * @argument {Object} options - Modifiers configuration and options
           * @returns {dataObject} The data object, properly modified
           */

          /**
           * Modifiers are plugins used to alter the behavior of your poppers.<br />
           * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
           * needed by the library.
           *
           * Usually you don't want to override the `order`, `fn` and `onLoad` props.
           * All the other properties are configurations that could be tweaked.
           * @namespace modifiers
           */
          var modifiers = {
            /**
             * Modifier used to shift the popper on the start or end of its reference
             * element.<br />
             * It will read the variation of the `placement` property.<br />
             * It can be one either `-end` or `-start`.
             * @memberof modifiers
             * @inner
             */
            shift: {
              /** @prop {number} order=100 - Index used to define the order of execution */
              order: 100,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: shift,
            },

            /**
             * The `offset` modifier can shift your popper on both its axis.
             *
             * It accepts the following units:
             * - `px` or unit-less, interpreted as pixels
             * - `%` or `%r`, percentage relative to the length of the reference element
             * - `%p`, percentage relative to the length of the popper element
             * - `vw`, CSS viewport width unit
             * - `vh`, CSS viewport height unit
             *
             * For length is intended the main axis relative to the placement of the popper.<br />
             * This means that if the placement is `top` or `bottom`, the length will be the
             * `width`. In case of `left` or `right`, it will be the `height`.
             *
             * You can provide a single value (as `Number` or `String`), or a pair of values
             * as `String` divided by a comma or one (or more) white spaces.<br />
             * The latter is a deprecated method because it leads to confusion and will be
             * removed in v2.<br />
             * Additionally, it accepts additions and subtractions between different units.
             * Note that multiplications and divisions aren't supported.
             *
             * Valid examples are:
             * ```
             * 10
             * '10%'
             * '10, 10'
             * '10%, 10'
             * '10 + 10%'
             * '10 - 5vh + 3%'
             * '-10px + 5vh, 5px - 6%'
             * ```
             * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
             * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
             * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
             *
             * @memberof modifiers
             * @inner
             */
            offset: {
              /** @prop {number} order=200 - Index used to define the order of execution */
              order: 200,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: offset,
              /** @prop {Number|String} offset=0
               * The offset value as described in the modifier description
               */
              offset: 0,
            },

            /**
             * Modifier used to prevent the popper from being positioned outside the boundary.
             *
             * A scenario exists where the reference itself is not within the boundaries.<br />
             * We can say it has "escaped the boundaries" — or just "escaped".<br />
             * In this case we need to decide whether the popper should either:
             *
             * - detach from the reference and remain "trapped" in the boundaries, or
             * - if it should ignore the boundary and "escape with its reference"
             *
             * When `escapeWithReference` is set to`true` and reference is completely
             * outside its boundaries, the popper will overflow (or completely leave)
             * the boundaries in order to remain attached to the edge of the reference.
             *
             * @memberof modifiers
             * @inner
             */
            preventOverflow: {
              /** @prop {number} order=300 - Index used to define the order of execution */
              order: 300,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: preventOverflow,
              /**
               * @prop {Array} [priority=['left','right','top','bottom']]
               * Popper will try to prevent overflow following these priorities by default,
               * then, it could overflow on the left and on top of the `boundariesElement`
               */
              priority: ["left", "right", "top", "bottom"],
              /**
               * @prop {number} padding=5
               * Amount of pixel used to define a minimum distance between the boundaries
               * and the popper. This makes sure the popper always has a little padding
               * between the edges of its container
               */
              padding: 5,
              /**
               * @prop {String|HTMLElement} boundariesElement='scrollParent'
               * Boundaries used by the modifier. Can be `scrollParent`, `window`,
               * `viewport` or any DOM element.
               */
              boundariesElement: "scrollParent",
            },

            /**
             * Modifier used to make sure the reference and its popper stay near each other
             * without leaving any gap between the two. Especially useful when the arrow is
             * enabled and you want to ensure that it points to its reference element.
             * It cares only about the first axis. You can still have poppers with margin
             * between the popper and its reference element.
             * @memberof modifiers
             * @inner
             */
            keepTogether: {
              /** @prop {number} order=400 - Index used to define the order of execution */
              order: 400,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: keepTogether,
            },

            /**
             * This modifier is used to move the `arrowElement` of the popper to make
             * sure it is positioned between the reference element and its popper element.
             * It will read the outer size of the `arrowElement` node to detect how many
             * pixels of conjunction are needed.
             *
             * It has no effect if no `arrowElement` is provided.
             * @memberof modifiers
             * @inner
             */
            arrow: {
              /** @prop {number} order=500 - Index used to define the order of execution */
              order: 500,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: arrow,
              /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
              element: "[x-arrow]",
            },

            /**
             * Modifier used to flip the popper's placement when it starts to overlap its
             * reference element.
             *
             * Requires the `preventOverflow` modifier before it in order to work.
             *
             * **NOTE:** this modifier will interrupt the current update cycle and will
             * restart it if it detects the need to flip the placement.
             * @memberof modifiers
             * @inner
             */
            flip: {
              /** @prop {number} order=600 - Index used to define the order of execution */
              order: 600,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: flip,
              /**
               * @prop {String|Array} behavior='flip'
               * The behavior used to change the popper's placement. It can be one of
               * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
               * placements (with optional variations)
               */
              behavior: "flip",
              /**
               * @prop {number} padding=5
               * The popper will flip if it hits the edges of the `boundariesElement`
               */
              padding: 5,
              /**
               * @prop {String|HTMLElement} boundariesElement='viewport'
               * The element which will define the boundaries of the popper position.
               * The popper will never be placed outside of the defined boundaries
               * (except if `keepTogether` is enabled)
               */
              boundariesElement: "viewport",
              /**
               * @prop {Boolean} flipVariations=false
               * The popper will switch placement variation between `-start` and `-end` when
               * the reference element overlaps its boundaries.
               *
               * The original placement should have a set variation.
               */
              flipVariations: false,
              /**
               * @prop {Boolean} flipVariationsByContent=false
               * The popper will switch placement variation between `-start` and `-end` when
               * the popper element overlaps its reference boundaries.
               *
               * The original placement should have a set variation.
               */
              flipVariationsByContent: false,
            },

            /**
             * Modifier used to make the popper flow toward the inner of the reference element.
             * By default, when this modifier is disabled, the popper will be placed outside
             * the reference element.
             * @memberof modifiers
             * @inner
             */
            inner: {
              /** @prop {number} order=700 - Index used to define the order of execution */
              order: 700,
              /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
              enabled: false,
              /** @prop {ModifierFn} */
              fn: inner,
            },

            /**
             * Modifier used to hide the popper when its reference element is outside of the
             * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
             * be used to hide with a CSS selector the popper when its reference is
             * out of boundaries.
             *
             * Requires the `preventOverflow` modifier before it in order to work.
             * @memberof modifiers
             * @inner
             */
            hide: {
              /** @prop {number} order=800 - Index used to define the order of execution */
              order: 800,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: hide,
            },

            /**
             * Computes the style that will be applied to the popper element to gets
             * properly positioned.
             *
             * Note that this modifier will not touch the DOM, it just prepares the styles
             * so that `applyStyle` modifier can apply it. This separation is useful
             * in case you need to replace `applyStyle` with a custom implementation.
             *
             * This modifier has `850` as `order` value to maintain backward compatibility
             * with previous versions of Popper.js. Expect the modifiers ordering method
             * to change in future major versions of the library.
             *
             * @memberof modifiers
             * @inner
             */
            computeStyle: {
              /** @prop {number} order=850 - Index used to define the order of execution */
              order: 850,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: computeStyle,
              /**
               * @prop {Boolean} gpuAcceleration=true
               * If true, it uses the CSS 3D transformation to position the popper.
               * Otherwise, it will use the `top` and `left` properties
               */
              gpuAcceleration: true,
              /**
               * @prop {string} [x='bottom']
               * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
               * Change this if your popper should grow in a direction different from `bottom`
               */
              x: "bottom",
              /**
               * @prop {string} [x='left']
               * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
               * Change this if your popper should grow in a direction different from `right`
               */
              y: "right",
            },

            /**
             * Applies the computed styles to the popper element.
             *
             * All the DOM manipulations are limited to this modifier. This is useful in case
             * you want to integrate Popper.js inside a framework or view library and you
             * want to delegate all the DOM manipulations to it.
             *
             * Note that if you disable this modifier, you must make sure the popper element
             * has its position set to `absolute` before Popper.js can do its work!
             *
             * Just disable this modifier and define your own to achieve the desired effect.
             *
             * @memberof modifiers
             * @inner
             */
            applyStyle: {
              /** @prop {number} order=900 - Index used to define the order of execution */
              order: 900,
              /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
              enabled: true,
              /** @prop {ModifierFn} */
              fn: applyStyle,
              /** @prop {Function} */
              onLoad: applyStyleOnLoad,
              /**
               * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
               * @prop {Boolean} gpuAcceleration=true
               * If true, it uses the CSS 3D transformation to position the popper.
               * Otherwise, it will use the `top` and `left` properties
               */
              gpuAcceleration: undefined,
            },
          };

          /**
           * The `dataObject` is an object containing all the information used by Popper.js.
           * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
           * @name dataObject
           * @property {Object} data.instance The Popper.js instance
           * @property {String} data.placement Placement applied to popper
           * @property {String} data.originalPlacement Placement originally defined on init
           * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
           * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
           * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
           * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
           * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
           * @property {Object} data.boundaries Offsets of the popper boundaries
           * @property {Object} data.offsets The measurements of popper, reference and arrow elements
           * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
           * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
           * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
           */

          /**
           * Default options provided to Popper.js constructor.<br />
           * These can be overridden using the `options` argument of Popper.js.<br />
           * To override an option, simply pass an object with the same
           * structure of the `options` object, as the 3rd argument. For example:
           * ```
           * new Popper(ref, pop, {
           *   modifiers: {
           *     preventOverflow: { enabled: false }
           *   }
           * })
           * ```
           * @type {Object}
           * @static
           * @memberof Popper
           */
          var Defaults = {
            /**
             * Popper's placement.
             * @prop {Popper.placements} placement='bottom'
             */
            placement: "bottom",

            /**
             * Set this to true if you want popper to position it self in 'fixed' mode
             * @prop {Boolean} positionFixed=false
             */
            positionFixed: false,

            /**
             * Whether events (resize, scroll) are initially enabled.
             * @prop {Boolean} eventsEnabled=true
             */
            eventsEnabled: true,

            /**
             * Set to true if you want to automatically remove the popper when
             * you call the `destroy` method.
             * @prop {Boolean} removeOnDestroy=false
             */
            removeOnDestroy: false,

            /**
             * Callback called when the popper is created.<br />
             * By default, it is set to no-op.<br />
             * Access Popper.js instance with `data.instance`.
             * @prop {onCreate}
             */
            onCreate: function onCreate() {},

            /**
             * Callback called when the popper is updated. This callback is not called
             * on the initialization/creation of the popper, but only on subsequent
             * updates.<br />
             * By default, it is set to no-op.<br />
             * Access Popper.js instance with `data.instance`.
             * @prop {onUpdate}
             */
            onUpdate: function onUpdate() {},

            /**
             * List of modifiers used to modify the offsets before they are applied to the popper.
             * They provide most of the functionalities of Popper.js.
             * @prop {modifiers}
             */
            modifiers: modifiers,
          };

          /**
           * @callback onCreate
           * @param {dataObject} data
           */

          /**
           * @callback onUpdate
           * @param {dataObject} data
           */

          // Utils
          // Methods
          var Popper = (function() {
            /**
             * Creates a new Popper.js instance.
             * @class Popper
             * @param {Element|referenceObject} reference - The reference element used to position the popper
             * @param {Element} popper - The HTML / XML element used as the popper
             * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
             * @return {Object} instance - The generated Popper.js instance
             */
            function Popper(reference, popper) {
              var _this = this;

              var options =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : {};
              classCallCheck(this, Popper);

              this.scheduleUpdate = function() {
                return requestAnimationFrame(_this.update);
              };

              // make update() debounced, so that it only runs at most once-per-tick
              this.update = debounce(this.update.bind(this));

              // with {} we create a new object with the options inside it
              this.options = _extends({}, Popper.Defaults, options);

              // init state
              this.state = {
                isDestroyed: false,
                isCreated: false,
                scrollParents: [],
              };

              // get reference and popper elements (allow jQuery wrappers)
              this.reference =
                reference && reference.jquery ? reference[0] : reference;
              this.popper = popper && popper.jquery ? popper[0] : popper;

              // Deep merge modifiers options
              this.options.modifiers = {};
              Object.keys(
                _extends({}, Popper.Defaults.modifiers, options.modifiers)
              ).forEach(function(name) {
                _this.options.modifiers[name] = _extends(
                  {},
                  Popper.Defaults.modifiers[name] || {},
                  options.modifiers ? options.modifiers[name] : {}
                );
              });

              // Refactoring modifiers' list (Object => Array)
              this.modifiers = Object.keys(this.options.modifiers)
                .map(function(name) {
                  return _extends(
                    {
                      name: name,
                    },
                    _this.options.modifiers[name]
                  );
                })
                // sort the modifiers by order
                .sort(function(a, b) {
                  return a.order - b.order;
                });

              // modifiers have the ability to execute arbitrary code when Popper.js get inited
              // such code is executed in the same order of its modifier
              // they could add new properties to their options configuration
              // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
              this.modifiers.forEach(function(modifierOptions) {
                if (
                  modifierOptions.enabled &&
                  isFunction(modifierOptions.onLoad)
                ) {
                  modifierOptions.onLoad(
                    _this.reference,
                    _this.popper,
                    _this.options,
                    modifierOptions,
                    _this.state
                  );
                }
              });

              // fire the first update to position the popper in the right place
              this.update();

              var eventsEnabled = this.options.eventsEnabled;
              if (eventsEnabled) {
                // setup event listeners, they will take care of update the position in specific situations
                this.enableEventListeners();
              }

              this.state.eventsEnabled = eventsEnabled;
            }

            // We can't use class properties because they don't get listed in the
            // class prototype and break stuff like Sinon stubs

            createClass(Popper, [
              {
                key: "update",
                value: function update$$1() {
                  return update.call(this);
                },
              },
              {
                key: "destroy",
                value: function destroy$$1() {
                  return destroy.call(this);
                },
              },
              {
                key: "enableEventListeners",
                value: function enableEventListeners$$1() {
                  return enableEventListeners.call(this);
                },
              },
              {
                key: "disableEventListeners",
                value: function disableEventListeners$$1() {
                  return disableEventListeners.call(this);
                },

                /**
                 * Schedules an update. It will run on the next UI update available.
                 * @method scheduleUpdate
                 * @memberof Popper
                 */

                /**
                 * Collection of utilities useful when writing custom modifiers.
                 * Starting from version 1.7, this method is available only if you
                 * include `popper-utils.js` before `popper.js`.
                 *
                 * **DEPRECATION**: This way to access PopperUtils is deprecated
                 * and will be removed in v2! Use the PopperUtils module directly instead.
                 * Due to the high instability of the methods contained in Utils, we can't
                 * guarantee them to follow semver. Use them at your own risk!
                 * @static
                 * @private
                 * @type {Object}
                 * @deprecated since version 1.8
                 * @member Utils
                 * @memberof Popper
                 */
              },
            ]);
            return Popper;
          })();

          /**
           * The `referenceObject` is an object that provides an interface compatible with Popper.js
           * and lets you use it as replacement of a real DOM node.<br />
           * You can use this method to position a popper relatively to a set of coordinates
           * in case you don't have a DOM node to use as reference.
           *
           * ```
           * new Popper(referenceObject, popperNode);
           * ```
           *
           * NB: This feature isn't supported in Internet Explorer 10.
           * @name referenceObject
           * @property {Function} data.getBoundingClientRect
           * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
           * @property {number} data.clientWidth
           * An ES6 getter that will return the width of the virtual reference element.
           * @property {number} data.clientHeight
           * An ES6 getter that will return the height of the virtual reference element.
           */

          Popper.Utils = (typeof window !== "undefined"
            ? window
            : global
          ).PopperUtils;
          Popper.placements = placements;
          Popper.Defaults = Defaults;

          /* harmony default export */ __webpack_exports__["default"] = Popper;
          //# sourceMappingURL=popper.js.map

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
      /*!*************************************************************************!*\
  !*** ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js ***!
  \*************************************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**
           * A collection of shims that provide minimal functionality of the ES6 collections.
           *
           * These implementations are not meant to be used outside of the ResizeObserver
           * modules as they cover only a limited range of use cases.
           */
          /* eslint-disable require-jsdoc, valid-jsdoc */
          var MapShim = (function() {
            if (typeof Map !== "undefined") {
              return Map;
            }
            /**
             * Returns index in provided array that matches the specified key.
             *
             * @param {Array<Array>} arr
             * @param {*} key
             * @returns {number}
             */
            function getIndex(arr, key) {
              var result = -1;
              arr.some(function(entry, index) {
                if (entry[0] === key) {
                  result = index;
                  return true;
                }
                return false;
              });
              return result;
            }
            return /** @class */ (function() {
              function class_1() {
                this.__entries__ = [];
              }
              Object.defineProperty(class_1.prototype, "size", {
                /**
                 * @returns {boolean}
                 */
                get: function() {
                  return this.__entries__.length;
                },
                enumerable: true,
                configurable: true,
              });
              /**
               * @param {*} key
               * @returns {*}
               */
              class_1.prototype.get = function(key) {
                var index = getIndex(this.__entries__, key);
                var entry = this.__entries__[index];
                return entry && entry[1];
              };
              /**
               * @param {*} key
               * @param {*} value
               * @returns {void}
               */
              class_1.prototype.set = function(key, value) {
                var index = getIndex(this.__entries__, key);
                if (~index) {
                  this.__entries__[index][1] = value;
                } else {
                  this.__entries__.push([key, value]);
                }
              };
              /**
               * @param {*} key
               * @returns {void}
               */
              class_1.prototype.delete = function(key) {
                var entries = this.__entries__;
                var index = getIndex(entries, key);
                if (~index) {
                  entries.splice(index, 1);
                }
              };
              /**
               * @param {*} key
               * @returns {void}
               */
              class_1.prototype.has = function(key) {
                return !!~getIndex(this.__entries__, key);
              };
              /**
               * @returns {void}
               */
              class_1.prototype.clear = function() {
                this.__entries__.splice(0);
              };
              /**
               * @param {Function} callback
               * @param {*} [ctx=null]
               * @returns {void}
               */
              class_1.prototype.forEach = function(callback, ctx) {
                if (ctx === void 0) {
                  ctx = null;
                }
                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  callback.call(ctx, entry[1], entry[0]);
                }
              };
              return class_1;
            })();
          })();

          /**
           * Detects whether window and document objects are available in current environment.
           */
          var isBrowser =
            typeof window !== "undefined" &&
            typeof document !== "undefined" &&
            window.document === document;

          // Returns global object of a current environment.
          var global$1 = (function() {
            if (typeof global !== "undefined" && global.Math === Math) {
              return global;
            }
            if (typeof self !== "undefined" && self.Math === Math) {
              return self;
            }
            if (typeof window !== "undefined" && window.Math === Math) {
              return window;
            }
            // eslint-disable-next-line no-new-func
            return Function("return this")();
          })();

          /**
           * A shim for the requestAnimationFrame which falls back to the setTimeout if
           * first one is not supported.
           *
           * @returns {number} Requests' identifier.
           */
          var requestAnimationFrame$1 = (function() {
            if (typeof requestAnimationFrame === "function") {
              // It's required to use a bounded function because IE sometimes throws
              // an "Invalid calling object" error if rAF is invoked without the global
              // object on the left hand side.
              return requestAnimationFrame.bind(global$1);
            }
            return function(callback) {
              return setTimeout(function() {
                return callback(Date.now());
              }, 1000 / 60);
            };
          })();

          // Defines minimum timeout before adding a trailing call.
          var trailingTimeout = 2;
          /**
           * Creates a wrapper function which ensures that provided callback will be
           * invoked only once during the specified delay period.
           *
           * @param {Function} callback - Function to be invoked after the delay period.
           * @param {number} delay - Delay after which to invoke callback.
           * @returns {Function}
           */
          function throttle(callback, delay) {
            var leadingCall = false,
              trailingCall = false,
              lastCallTime = 0;
            /**
             * Invokes the original callback function and schedules new invocation if
             * the "proxy" was called during current request.
             *
             * @returns {void}
             */
            function resolvePending() {
              if (leadingCall) {
                leadingCall = false;
                callback();
              }
              if (trailingCall) {
                proxy();
              }
            }
            /**
             * Callback invoked after the specified delay. It will further postpone
             * invocation of the original function delegating it to the
             * requestAnimationFrame.
             *
             * @returns {void}
             */
            function timeoutCallback() {
              requestAnimationFrame$1(resolvePending);
            }
            /**
             * Schedules invocation of the original function.
             *
             * @returns {void}
             */
            function proxy() {
              var timeStamp = Date.now();
              if (leadingCall) {
                // Reject immediately following calls.
                if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
                }
                // Schedule new call to be in invoked when the pending one is resolved.
                // This is important for "transitions" which never actually start
                // immediately so there is a chance that we might miss one if change
                // happens amids the pending invocation.
                trailingCall = true;
              } else {
                leadingCall = true;
                trailingCall = false;
                setTimeout(timeoutCallback, delay);
              }
              lastCallTime = timeStamp;
            }
            return proxy;
          }

          // Minimum delay before invoking the update of observers.
          var REFRESH_DELAY = 20;
          // A list of substrings of CSS properties used to find transition events that
          // might affect dimensions of observed elements.
          var transitionKeys = [
            "top",
            "right",
            "bottom",
            "left",
            "width",
            "height",
            "size",
            "weight",
          ];
          // Check if MutationObserver is available.
          var mutationObserverSupported =
            typeof MutationObserver !== "undefined";
          /**
           * Singleton controller class which handles updates of ResizeObserver instances.
           */
          var ResizeObserverController = /** @class */ (function() {
            /**
             * Creates a new instance of ResizeObserverController.
             *
             * @private
             */
            function ResizeObserverController() {
              /**
               * Indicates whether DOM listeners have been added.
               *
               * @private {boolean}
               */
              this.connected_ = false;
              /**
               * Tells that controller has subscribed for Mutation Events.
               *
               * @private {boolean}
               */
              this.mutationEventsAdded_ = false;
              /**
               * Keeps reference to the instance of MutationObserver.
               *
               * @private {MutationObserver}
               */
              this.mutationsObserver_ = null;
              /**
               * A list of connected observers.
               *
               * @private {Array<ResizeObserverSPI>}
               */
              this.observers_ = [];
              this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
              this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
            }
            /**
             * Adds observer to observers list.
             *
             * @param {ResizeObserverSPI} observer - Observer to be added.
             * @returns {void}
             */
            ResizeObserverController.prototype.addObserver = function(
              observer
            ) {
              if (!~this.observers_.indexOf(observer)) {
                this.observers_.push(observer);
              }
              // Add listeners if they haven't been added yet.
              if (!this.connected_) {
                this.connect_();
              }
            };
            /**
             * Removes observer from observers list.
             *
             * @param {ResizeObserverSPI} observer - Observer to be removed.
             * @returns {void}
             */
            ResizeObserverController.prototype.removeObserver = function(
              observer
            ) {
              var observers = this.observers_;
              var index = observers.indexOf(observer);
              // Remove observer if it's present in registry.
              if (~index) {
                observers.splice(index, 1);
              }
              // Remove listeners if controller has no connected observers.
              if (!observers.length && this.connected_) {
                this.disconnect_();
              }
            };
            /**
             * Invokes the update of observers. It will continue running updates insofar
             * it detects changes.
             *
             * @returns {void}
             */
            ResizeObserverController.prototype.refresh = function() {
              var changesDetected = this.updateObservers_();
              // Continue running updates if changes have been detected as there might
              // be future ones caused by CSS transitions.
              if (changesDetected) {
                this.refresh();
              }
            };
            /**
             * Updates every observer from observers list and notifies them of queued
             * entries.
             *
             * @private
             * @returns {boolean} Returns "true" if any observer has detected changes in
             *      dimensions of it's elements.
             */
            ResizeObserverController.prototype.updateObservers_ = function() {
              // Collect observers that have active observations.
              var activeObservers = this.observers_.filter(function(observer) {
                return observer.gatherActive(), observer.hasActive();
              });
              // Deliver notifications in a separate cycle in order to avoid any
              // collisions between observers, e.g. when multiple instances of
              // ResizeObserver are tracking the same element and the callback of one
              // of them changes content dimensions of the observed target. Sometimes
              // this may result in notifications being blocked for the rest of observers.
              activeObservers.forEach(function(observer) {
                return observer.broadcastActive();
              });
              return activeObservers.length > 0;
            };
            /**
             * Initializes DOM listeners.
             *
             * @private
             * @returns {void}
             */
            ResizeObserverController.prototype.connect_ = function() {
              // Do nothing if running in a non-browser environment or if listeners
              // have been already added.
              if (!isBrowser || this.connected_) {
                return;
              }
              // Subscription to the "Transitionend" event is used as a workaround for
              // delayed transitions. This way it's possible to capture at least the
              // final state of an element.
              document.addEventListener("transitionend", this.onTransitionEnd_);
              window.addEventListener("resize", this.refresh);
              if (mutationObserverSupported) {
                this.mutationsObserver_ = new MutationObserver(this.refresh);
                this.mutationsObserver_.observe(document, {
                  attributes: true,
                  childList: true,
                  characterData: true,
                  subtree: true,
                });
              } else {
                document.addEventListener("DOMSubtreeModified", this.refresh);
                this.mutationEventsAdded_ = true;
              }
              this.connected_ = true;
            };
            /**
             * Removes DOM listeners.
             *
             * @private
             * @returns {void}
             */
            ResizeObserverController.prototype.disconnect_ = function() {
              // Do nothing if running in a non-browser environment or if listeners
              // have been already removed.
              if (!isBrowser || !this.connected_) {
                return;
              }
              document.removeEventListener(
                "transitionend",
                this.onTransitionEnd_
              );
              window.removeEventListener("resize", this.refresh);
              if (this.mutationsObserver_) {
                this.mutationsObserver_.disconnect();
              }
              if (this.mutationEventsAdded_) {
                document.removeEventListener(
                  "DOMSubtreeModified",
                  this.refresh
                );
              }
              this.mutationsObserver_ = null;
              this.mutationEventsAdded_ = false;
              this.connected_ = false;
            };
            /**
             * "Transitionend" event handler.
             *
             * @private
             * @param {TransitionEvent} event
             * @returns {void}
             */
            ResizeObserverController.prototype.onTransitionEnd_ = function(_a) {
              var _b = _a.propertyName,
                propertyName = _b === void 0 ? "" : _b;
              // Detect whether transition may affect dimensions of an element.
              var isReflowProperty = transitionKeys.some(function(key) {
                return !!~propertyName.indexOf(key);
              });
              if (isReflowProperty) {
                this.refresh();
              }
            };
            /**
             * Returns instance of the ResizeObserverController.
             *
             * @returns {ResizeObserverController}
             */
            ResizeObserverController.getInstance = function() {
              if (!this.instance_) {
                this.instance_ = new ResizeObserverController();
              }
              return this.instance_;
            };
            /**
             * Holds reference to the controller's instance.
             *
             * @private {ResizeObserverController}
             */
            ResizeObserverController.instance_ = null;
            return ResizeObserverController;
          })();

          /**
           * Defines non-writable/enumerable properties of the provided target object.
           *
           * @param {Object} target - Object for which to define properties.
           * @param {Object} props - Properties to be defined.
           * @returns {Object} Target object.
           */
          var defineConfigurable = function(target, props) {
            for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
              var key = _a[_i];
              Object.defineProperty(target, key, {
                value: props[key],
                enumerable: false,
                writable: false,
                configurable: true,
              });
            }
            return target;
          };

          /**
           * Returns the global object associated with provided element.
           *
           * @param {Object} target
           * @returns {Object}
           */
          var getWindowOf = function(target) {
            // Assume that the element is an instance of Node, which means that it
            // has the "ownerDocument" property from which we can retrieve a
            // corresponding global object.
            var ownerGlobal =
              target &&
              target.ownerDocument &&
              target.ownerDocument.defaultView;
            // Return the local global object if it's not possible extract one from
            // provided element.
            return ownerGlobal || global$1;
          };

          // Placeholder of an empty content rectangle.
          var emptyRect = createRectInit(0, 0, 0, 0);
          /**
           * Converts provided string to a number.
           *
           * @param {number|string} value
           * @returns {number}
           */
          function toFloat(value) {
            return parseFloat(value) || 0;
          }
          /**
           * Extracts borders size from provided styles.
           *
           * @param {CSSStyleDeclaration} styles
           * @param {...string} positions - Borders positions (top, right, ...)
           * @returns {number}
           */
          function getBordersSize(styles) {
            var positions = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              positions[_i - 1] = arguments[_i];
            }
            return positions.reduce(function(size, position) {
              var value = styles["border-" + position + "-width"];
              return size + toFloat(value);
            }, 0);
          }
          /**
           * Extracts paddings sizes from provided styles.
           *
           * @param {CSSStyleDeclaration} styles
           * @returns {Object} Paddings box.
           */
          function getPaddings(styles) {
            var positions = ["top", "right", "bottom", "left"];
            var paddings = {};
            for (
              var _i = 0, positions_1 = positions;
              _i < positions_1.length;
              _i++
            ) {
              var position = positions_1[_i];
              var value = styles["padding-" + position];
              paddings[position] = toFloat(value);
            }
            return paddings;
          }
          /**
           * Calculates content rectangle of provided SVG element.
           *
           * @param {SVGGraphicsElement} target - Element content rectangle of which needs
           *      to be calculated.
           * @returns {DOMRectInit}
           */
          function getSVGContentRect(target) {
            var bbox = target.getBBox();
            return createRectInit(0, 0, bbox.width, bbox.height);
          }
          /**
           * Calculates content rectangle of provided HTMLElement.
           *
           * @param {HTMLElement} target - Element for which to calculate the content rectangle.
           * @returns {DOMRectInit}
           */
          function getHTMLElementContentRect(target) {
            // Client width & height properties can't be
            // used exclusively as they provide rounded values.
            var clientWidth = target.clientWidth,
              clientHeight = target.clientHeight;
            // By this condition we can catch all non-replaced inline, hidden and
            // detached elements. Though elements with width & height properties less
            // than 0.5 will be discarded as well.
            //
            // Without it we would need to implement separate methods for each of
            // those cases and it's not possible to perform a precise and performance
            // effective test for hidden elements. E.g. even jQuery's ':visible' filter
            // gives wrong results for elements with width & height less than 0.5.
            if (!clientWidth && !clientHeight) {
              return emptyRect;
            }
            var styles = getWindowOf(target).getComputedStyle(target);
            var paddings = getPaddings(styles);
            var horizPad = paddings.left + paddings.right;
            var vertPad = paddings.top + paddings.bottom;
            // Computed styles of width & height are being used because they are the
            // only dimensions available to JS that contain non-rounded values. It could
            // be possible to utilize the getBoundingClientRect if only it's data wasn't
            // affected by CSS transformations let alone paddings, borders and scroll bars.
            var width = toFloat(styles.width),
              height = toFloat(styles.height);
            // Width & height include paddings and borders when the 'border-box' box
            // model is applied (except for IE).
            if (styles.boxSizing === "border-box") {
              // Following conditions are required to handle Internet Explorer which
              // doesn't include paddings and borders to computed CSS dimensions.
              //
              // We can say that if CSS dimensions + paddings are equal to the "client"
              // properties then it's either IE, and thus we don't need to subtract
              // anything, or an element merely doesn't have paddings/borders styles.
              if (Math.round(width + horizPad) !== clientWidth) {
                width -= getBordersSize(styles, "left", "right") + horizPad;
              }
              if (Math.round(height + vertPad) !== clientHeight) {
                height -= getBordersSize(styles, "top", "bottom") + vertPad;
              }
            }
            // Following steps can't be applied to the document's root element as its
            // client[Width/Height] properties represent viewport area of the window.
            // Besides, it's as well not necessary as the <html> itself neither has
            // rendered scroll bars nor it can be clipped.
            if (!isDocumentElement(target)) {
              // In some browsers (only in Firefox, actually) CSS width & height
              // include scroll bars size which can be removed at this step as scroll
              // bars are the only difference between rounded dimensions + paddings
              // and "client" properties, though that is not always true in Chrome.
              var vertScrollbar = Math.round(width + horizPad) - clientWidth;
              var horizScrollbar = Math.round(height + vertPad) - clientHeight;
              // Chrome has a rather weird rounding of "client" properties.
              // E.g. for an element with content width of 314.2px it sometimes gives
              // the client width of 315px and for the width of 314.7px it may give
              // 314px. And it doesn't happen all the time. So just ignore this delta
              // as a non-relevant.
              if (Math.abs(vertScrollbar) !== 1) {
                width -= vertScrollbar;
              }
              if (Math.abs(horizScrollbar) !== 1) {
                height -= horizScrollbar;
              }
            }
            return createRectInit(paddings.left, paddings.top, width, height);
          }
          /**
           * Checks whether provided element is an instance of the SVGGraphicsElement.
           *
           * @param {Element} target - Element to be checked.
           * @returns {boolean}
           */
          var isSVGGraphicsElement = (function() {
            // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
            // interface.
            if (typeof SVGGraphicsElement !== "undefined") {
              return function(target) {
                return target instanceof getWindowOf(target).SVGGraphicsElement;
              };
            }
            // If it's so, then check that element is at least an instance of the
            // SVGElement and that it has the "getBBox" method.
            // eslint-disable-next-line no-extra-parens
            return function(target) {
              return (
                target instanceof getWindowOf(target).SVGElement &&
                typeof target.getBBox === "function"
              );
            };
          })();
          /**
           * Checks whether provided element is a document element (<html>).
           *
           * @param {Element} target - Element to be checked.
           * @returns {boolean}
           */
          function isDocumentElement(target) {
            return target === getWindowOf(target).document.documentElement;
          }
          /**
           * Calculates an appropriate content rectangle for provided html or svg element.
           *
           * @param {Element} target - Element content rectangle of which needs to be calculated.
           * @returns {DOMRectInit}
           */
          function getContentRect(target) {
            if (!isBrowser) {
              return emptyRect;
            }
            if (isSVGGraphicsElement(target)) {
              return getSVGContentRect(target);
            }
            return getHTMLElementContentRect(target);
          }
          /**
           * Creates rectangle with an interface of the DOMRectReadOnly.
           * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
           *
           * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
           * @returns {DOMRectReadOnly}
           */
          function createReadOnlyRect(_a) {
            var x = _a.x,
              y = _a.y,
              width = _a.width,
              height = _a.height;
            // If DOMRectReadOnly is available use it as a prototype for the rectangle.
            var Constr =
              typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
            var rect = Object.create(Constr.prototype);
            // Rectangle's properties are not writable and non-enumerable.
            defineConfigurable(rect, {
              x: x,
              y: y,
              width: width,
              height: height,
              top: y,
              right: x + width,
              bottom: height + y,
              left: x,
            });
            return rect;
          }
          /**
           * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
           * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
           *
           * @param {number} x - X coordinate.
           * @param {number} y - Y coordinate.
           * @param {number} width - Rectangle's width.
           * @param {number} height - Rectangle's height.
           * @returns {DOMRectInit}
           */
          function createRectInit(x, y, width, height) {
            return { x: x, y: y, width: width, height: height };
          }

          /**
           * Class that is responsible for computations of the content rectangle of
           * provided DOM element and for keeping track of it's changes.
           */
          var ResizeObservation = /** @class */ (function() {
            /**
             * Creates an instance of ResizeObservation.
             *
             * @param {Element} target - Element to be observed.
             */
            function ResizeObservation(target) {
              /**
               * Broadcasted width of content rectangle.
               *
               * @type {number}
               */
              this.broadcastWidth = 0;
              /**
               * Broadcasted height of content rectangle.
               *
               * @type {number}
               */
              this.broadcastHeight = 0;
              /**
               * Reference to the last observed content rectangle.
               *
               * @private {DOMRectInit}
               */
              this.contentRect_ = createRectInit(0, 0, 0, 0);
              this.target = target;
            }
            /**
             * Updates content rectangle and tells whether it's width or height properties
             * have changed since the last broadcast.
             *
             * @returns {boolean}
             */
            ResizeObservation.prototype.isActive = function() {
              var rect = getContentRect(this.target);
              this.contentRect_ = rect;
              return (
                rect.width !== this.broadcastWidth ||
                rect.height !== this.broadcastHeight
              );
            };
            /**
             * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
             * from the corresponding properties of the last observed content rectangle.
             *
             * @returns {DOMRectInit} Last observed content rectangle.
             */
            ResizeObservation.prototype.broadcastRect = function() {
              var rect = this.contentRect_;
              this.broadcastWidth = rect.width;
              this.broadcastHeight = rect.height;
              return rect;
            };
            return ResizeObservation;
          })();

          var ResizeObserverEntry = /** @class */ (function() {
            /**
             * Creates an instance of ResizeObserverEntry.
             *
             * @param {Element} target - Element that is being observed.
             * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
             */
            function ResizeObserverEntry(target, rectInit) {
              var contentRect = createReadOnlyRect(rectInit);
              // According to the specification following properties are not writable
              // and are also not enumerable in the native implementation.
              //
              // Property accessors are not being used as they'd require to define a
              // private WeakMap storage which may cause memory leaks in browsers that
              // don't support this type of collections.
              defineConfigurable(this, {
                target: target,
                contentRect: contentRect,
              });
            }
            return ResizeObserverEntry;
          })();

          var ResizeObserverSPI = /** @class */ (function() {
            /**
             * Creates a new instance of ResizeObserver.
             *
             * @param {ResizeObserverCallback} callback - Callback function that is invoked
             *      when one of the observed elements changes it's content dimensions.
             * @param {ResizeObserverController} controller - Controller instance which
             *      is responsible for the updates of observer.
             * @param {ResizeObserver} callbackCtx - Reference to the public
             *      ResizeObserver instance which will be passed to callback function.
             */
            function ResizeObserverSPI(callback, controller, callbackCtx) {
              /**
               * Collection of resize observations that have detected changes in dimensions
               * of elements.
               *
               * @private {Array<ResizeObservation>}
               */
              this.activeObservations_ = [];
              /**
               * Registry of the ResizeObservation instances.
               *
               * @private {Map<Element, ResizeObservation>}
               */
              this.observations_ = new MapShim();
              if (typeof callback !== "function") {
                throw new TypeError(
                  "The callback provided as parameter 1 is not a function."
                );
              }
              this.callback_ = callback;
              this.controller_ = controller;
              this.callbackCtx_ = callbackCtx;
            }
            /**
             * Starts observing provided element.
             *
             * @param {Element} target - Element to be observed.
             * @returns {void}
             */
            ResizeObserverSPI.prototype.observe = function(target) {
              if (!arguments.length) {
                throw new TypeError("1 argument required, but only 0 present.");
              }
              // Do nothing if current environment doesn't have the Element interface.
              if (
                typeof Element === "undefined" ||
                !(Element instanceof Object)
              ) {
                return;
              }
              if (!(target instanceof getWindowOf(target).Element)) {
                throw new TypeError('parameter 1 is not of type "Element".');
              }
              var observations = this.observations_;
              // Do nothing if element is already being observed.
              if (observations.has(target)) {
                return;
              }
              observations.set(target, new ResizeObservation(target));
              this.controller_.addObserver(this);
              // Force the update of observations.
              this.controller_.refresh();
            };
            /**
             * Stops observing provided element.
             *
             * @param {Element} target - Element to stop observing.
             * @returns {void}
             */
            ResizeObserverSPI.prototype.unobserve = function(target) {
              if (!arguments.length) {
                throw new TypeError("1 argument required, but only 0 present.");
              }
              // Do nothing if current environment doesn't have the Element interface.
              if (
                typeof Element === "undefined" ||
                !(Element instanceof Object)
              ) {
                return;
              }
              if (!(target instanceof getWindowOf(target).Element)) {
                throw new TypeError('parameter 1 is not of type "Element".');
              }
              var observations = this.observations_;
              // Do nothing if element is not being observed.
              if (!observations.has(target)) {
                return;
              }
              observations.delete(target);
              if (!observations.size) {
                this.controller_.removeObserver(this);
              }
            };
            /**
             * Stops observing all elements.
             *
             * @returns {void}
             */
            ResizeObserverSPI.prototype.disconnect = function() {
              this.clearActive();
              this.observations_.clear();
              this.controller_.removeObserver(this);
            };
            /**
             * Collects observation instances the associated element of which has changed
             * it's content rectangle.
             *
             * @returns {void}
             */
            ResizeObserverSPI.prototype.gatherActive = function() {
              var _this = this;
              this.clearActive();
              this.observations_.forEach(function(observation) {
                if (observation.isActive()) {
                  _this.activeObservations_.push(observation);
                }
              });
            };
            /**
             * Invokes initial callback function with a list of ResizeObserverEntry
             * instances collected from active resize observations.
             *
             * @returns {void}
             */
            ResizeObserverSPI.prototype.broadcastActive = function() {
              // Do nothing if observer doesn't have active observations.
              if (!this.hasActive()) {
                return;
              }
              var ctx = this.callbackCtx_;
              // Create ResizeObserverEntry instance for every active observation.
              var entries = this.activeObservations_.map(function(observation) {
                return new ResizeObserverEntry(
                  observation.target,
                  observation.broadcastRect()
                );
              });
              this.callback_.call(ctx, entries, ctx);
              this.clearActive();
            };
            /**
             * Clears the collection of active observations.
             *
             * @returns {void}
             */
            ResizeObserverSPI.prototype.clearActive = function() {
              this.activeObservations_.splice(0);
            };
            /**
             * Tells whether observer has active observations.
             *
             * @returns {boolean}
             */
            ResizeObserverSPI.prototype.hasActive = function() {
              return this.activeObservations_.length > 0;
            };
            return ResizeObserverSPI;
          })();

          // Registry of internal observers. If WeakMap is not available use current shim
          // for the Map collection as it has all required methods and because WeakMap
          // can't be fully polyfilled anyway.
          var observers =
            typeof WeakMap !== "undefined" ? new WeakMap() : new MapShim();
          /**
           * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
           * exposing only those methods and properties that are defined in the spec.
           */
          var ResizeObserver = /** @class */ (function() {
            /**
             * Creates a new instance of ResizeObserver.
             *
             * @param {ResizeObserverCallback} callback - Callback that is invoked when
             *      dimensions of the observed elements change.
             */
            function ResizeObserver(callback) {
              if (!(this instanceof ResizeObserver)) {
                throw new TypeError("Cannot call a class as a function.");
              }
              if (!arguments.length) {
                throw new TypeError("1 argument required, but only 0 present.");
              }
              var controller = ResizeObserverController.getInstance();
              var observer = new ResizeObserverSPI(callback, controller, this);
              observers.set(this, observer);
            }
            return ResizeObserver;
          })();
          // Expose public methods of ResizeObserver.
          ["observe", "unobserve", "disconnect"].forEach(function(method) {
            ResizeObserver.prototype[method] = function() {
              var _a;
              return (_a = observers.get(this))[method].apply(_a, arguments);
            };
          });

          var index = (function() {
            // Export existing implementation if available.
            if (typeof global$1.ResizeObserver !== "undefined") {
              return global$1.ResizeObserver;
            }
            return ResizeObserver;
          })();

          /* harmony default export */ __webpack_exports__["default"] = index;

          /* WEBPACK VAR INJECTION */
        }.call(
          this,
          __webpack_require__(
            /*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"
          )
        ));

        /***/
      },

    /***/ "./node_modules/simplebar/dist/simplebar.esm.js":
      /*!******************************************************!*\
  !*** ./node_modules/simplebar/dist/simplebar.esm.js ***!
  \******************************************************/
      /*! exports provided: default */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! core-js/modules/es.array.for-each */ "./node_modules/core-js/modules/es.array.for-each.js"
        );
        /* harmony import */ var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_0__
        );
        /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! core-js/modules/web.dom-collections.for-each */ "./node_modules/core-js/modules/web.dom-collections.for-each.js"
        );
        /* harmony import */ var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_1__
        );
        /* harmony import */ var can_use_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! can-use-dom */ "./node_modules/can-use-dom/index.js"
        );
        /* harmony import */ var can_use_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          can_use_dom__WEBPACK_IMPORTED_MODULE_2__
        );
        /* harmony import */ var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! core-js/modules/es.array.filter */ "./node_modules/core-js/modules/es.array.filter.js"
        );
        /* harmony import */ var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_3__
        );
        /* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! core-js/modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js"
        );
        /* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_4__
        );
        /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! core-js/modules/es.object.assign */ "./node_modules/core-js/modules/es.object.assign.js"
        );
        /* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_5__
        );
        /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! core-js/modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js"
        );
        /* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__
        );
        /* harmony import */ var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! core-js/modules/es.parse-int */ "./node_modules/core-js/modules/es.parse-int.js"
        );
        /* harmony import */ var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_7__
        );
        /* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          /*! core-js/modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js"
        );
        /* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_8__
        );
        /* harmony import */ var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
          /*! core-js/modules/es.weak-map */ "./node_modules/core-js/modules/es.weak-map.js"
        );
        /* harmony import */ var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_9__
        );
        /* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
          /*! core-js/modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js"
        );
        /* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_10__
        );
        /* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
          /*! lodash.throttle */ "./node_modules/lodash.throttle/index.js"
        );
        /* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/ __webpack_require__.n(
          lodash_throttle__WEBPACK_IMPORTED_MODULE_11__
        );
        /* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
          /*! lodash.debounce */ "./node_modules/lodash.debounce/index.js"
        );
        /* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/ __webpack_require__.n(
          lodash_debounce__WEBPACK_IMPORTED_MODULE_12__
        );
        /* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
          /*! lodash.memoize */ "./node_modules/lodash.memoize/index.js"
        );
        /* harmony import */ var lodash_memoize__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/ __webpack_require__.n(
          lodash_memoize__WEBPACK_IMPORTED_MODULE_13__
        );
        /* harmony import */ var resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
          /*! resize-observer-polyfill */ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"
        );
        /* harmony import */ var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
          /*! core-js/modules/es.array.reduce */ "./node_modules/core-js/modules/es.array.reduce.js"
        );
        /* harmony import */ var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_15__
        );
        /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
          /*! core-js/modules/es.function.name */ "./node_modules/core-js/modules/es.function.name.js"
        );
        /* harmony import */ var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_16__
        );
        /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
          /*! core-js/modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js"
        );
        /* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_17__
        );
        /* harmony import */ var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
          /*! core-js/modules/es.string.match */ "./node_modules/core-js/modules/es.string.match.js"
        );
        /* harmony import */ var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_18__
        );
        /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
          /*! core-js/modules/es.string.replace */ "./node_modules/core-js/modules/es.string.replace.js"
        );
        /* harmony import */ var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/ __webpack_require__.n(
          core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_19__
        );
        /**
         * SimpleBar.js - v5.2.0
         * Scrollbars, simpler.
         * https://grsmto.github.io/simplebar/
         *
         * Made by Adrien Denat from a fork by Jonathan Nicol
         * Under MIT License
         */

        var cachedScrollbarWidth = null;
        var cachedDevicePixelRatio = null;

        if (can_use_dom__WEBPACK_IMPORTED_MODULE_2___default.a) {
          window.addEventListener("resize", function() {
            if (cachedDevicePixelRatio !== window.devicePixelRatio) {
              cachedDevicePixelRatio = window.devicePixelRatio;
              cachedScrollbarWidth = null;
            }
          });
        }

        function scrollbarWidth() {
          if (cachedScrollbarWidth === null) {
            if (typeof document === "undefined") {
              cachedScrollbarWidth = 0;
              return cachedScrollbarWidth;
            }

            var body = document.body;
            var box = document.createElement("div");
            box.classList.add("simplebar-hide-scrollbar");
            body.appendChild(box);
            var width = box.getBoundingClientRect().right;
            body.removeChild(box);
            cachedScrollbarWidth = width;
          }

          return cachedScrollbarWidth;
        }

        // Helper function to retrieve options from element attributes
        var getOptions = function getOptions(obj) {
          var options = Array.prototype.reduce.call(
            obj,
            function(acc, attribute) {
              var option = attribute.name.match(/data-simplebar-(.+)/);

              if (option) {
                var key = option[1].replace(/\W+(.)/g, function(x, chr) {
                  return chr.toUpperCase();
                });

                switch (attribute.value) {
                  case "true":
                    acc[key] = true;
                    break;

                  case "false":
                    acc[key] = false;
                    break;

                  case undefined:
                    acc[key] = true;
                    break;

                  default:
                    acc[key] = attribute.value;
                }
              }

              return acc;
            },
            {}
          );
          return options;
        };
        function getElementWindow(element) {
          if (
            !element ||
            !element.ownerDocument ||
            !element.ownerDocument.defaultView
          ) {
            return window;
          }

          return element.ownerDocument.defaultView;
        }
        function getElementDocument(element) {
          if (!element || !element.ownerDocument) {
            return document;
          }

          return element.ownerDocument;
        }

        var SimpleBar =
          /*#__PURE__*/
          (function() {
            function SimpleBar(element, options) {
              var _this = this;

              this.onScroll = function() {
                var elWindow = getElementWindow(_this.el);

                if (!_this.scrollXTicking) {
                  elWindow.requestAnimationFrame(_this.scrollX);
                  _this.scrollXTicking = true;
                }

                if (!_this.scrollYTicking) {
                  elWindow.requestAnimationFrame(_this.scrollY);
                  _this.scrollYTicking = true;
                }
              };

              this.scrollX = function() {
                if (_this.axis.x.isOverflowing) {
                  _this.showScrollbar("x");

                  _this.positionScrollbar("x");
                }

                _this.scrollXTicking = false;
              };

              this.scrollY = function() {
                if (_this.axis.y.isOverflowing) {
                  _this.showScrollbar("y");

                  _this.positionScrollbar("y");
                }

                _this.scrollYTicking = false;
              };

              this.onMouseEnter = function() {
                _this.showScrollbar("x");

                _this.showScrollbar("y");
              };

              this.onMouseMove = function(e) {
                _this.mouseX = e.clientX;
                _this.mouseY = e.clientY;

                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
                  _this.onMouseMoveForAxis("x");
                }

                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
                  _this.onMouseMoveForAxis("y");
                }
              };

              this.onMouseLeave = function() {
                _this.onMouseMove.cancel();

                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
                  _this.onMouseLeaveForAxis("x");
                }

                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
                  _this.onMouseLeaveForAxis("y");
                }

                _this.mouseX = -1;
                _this.mouseY = -1;
              };

              this.onWindowResize = function() {
                // Recalculate scrollbarWidth in case it's a zoom
                _this.scrollbarWidth = _this.getScrollbarWidth();

                _this.hideNativeScrollbar();
              };

              this.hideScrollbars = function() {
                _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();
                _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();

                if (!_this.isWithinBounds(_this.axis.y.track.rect)) {
                  _this.axis.y.scrollbar.el.classList.remove(
                    _this.classNames.visible
                  );

                  _this.axis.y.isVisible = false;
                }

                if (!_this.isWithinBounds(_this.axis.x.track.rect)) {
                  _this.axis.x.scrollbar.el.classList.remove(
                    _this.classNames.visible
                  );

                  _this.axis.x.isVisible = false;
                }
              };

              this.onPointerEvent = function(e) {
                var isWithinTrackXBounds, isWithinTrackYBounds;
                _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();
                _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();

                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {
                  isWithinTrackXBounds = _this.isWithinBounds(
                    _this.axis.x.track.rect
                  );
                }

                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {
                  isWithinTrackYBounds = _this.isWithinBounds(
                    _this.axis.y.track.rect
                  );
                } // If any pointer event is called on the scrollbar

                if (isWithinTrackXBounds || isWithinTrackYBounds) {
                  // Preventing the event's default action stops text being
                  // selectable during the drag.
                  e.preventDefault(); // Prevent event leaking

                  e.stopPropagation();

                  if (e.type === "mousedown") {
                    if (isWithinTrackXBounds) {
                      _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();

                      if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {
                        _this.onDragStart(e, "x");
                      } else {
                        _this.onTrackClick(e, "x");
                      }
                    }

                    if (isWithinTrackYBounds) {
                      _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();

                      if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {
                        _this.onDragStart(e, "y");
                      } else {
                        _this.onTrackClick(e, "y");
                      }
                    }
                  }
                }
              };

              this.drag = function(e) {
                var eventOffset;
                var track = _this.axis[_this.draggedAxis].track;
                var trackSize =
                  track.rect[_this.axis[_this.draggedAxis].sizeAttr];
                var scrollbar = _this.axis[_this.draggedAxis].scrollbar;
                var contentSize =
                  _this.contentWrapperEl[
                    _this.axis[_this.draggedAxis].scrollSizeAttr
                  ];
                var hostSize = parseInt(
                  _this.elStyles[_this.axis[_this.draggedAxis].sizeAttr],
                  10
                );
                e.preventDefault();
                e.stopPropagation();

                if (_this.draggedAxis === "y") {
                  eventOffset = e.pageY;
                } else {
                  eventOffset = e.pageX;
                } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).

                var dragPos =
                  eventOffset -
                  track.rect[_this.axis[_this.draggedAxis].offsetAttr] -
                  _this.axis[_this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.

                var dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.

                var scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL

                if (_this.draggedAxis === "x") {
                  scrollPos =
                    _this.isRtl &&
                    SimpleBar.getRtlHelpers().isRtlScrollbarInverted
                      ? scrollPos - (trackSize + scrollbar.size)
                      : scrollPos;
                  scrollPos =
                    _this.isRtl &&
                    SimpleBar.getRtlHelpers().isRtlScrollingInverted
                      ? -scrollPos
                      : scrollPos;
                }

                _this.contentWrapperEl[
                  _this.axis[_this.draggedAxis].scrollOffsetAttr
                ] = scrollPos;
              };

              this.onEndDrag = function(e) {
                var elDocument = getElementDocument(_this.el);
                var elWindow = getElementWindow(_this.el);
                e.preventDefault();
                e.stopPropagation();

                _this.el.classList.remove(_this.classNames.dragging);

                elDocument.removeEventListener("mousemove", _this.drag, true);
                elDocument.removeEventListener(
                  "mouseup",
                  _this.onEndDrag,
                  true
                );
                _this.removePreventClickId = elWindow.setTimeout(function() {
                  // Remove these asynchronously so we still suppress click events
                  // generated simultaneously with mouseup.
                  elDocument.removeEventListener(
                    "click",
                    _this.preventClick,
                    true
                  );
                  elDocument.removeEventListener(
                    "dblclick",
                    _this.preventClick,
                    true
                  );
                  _this.removePreventClickId = null;
                });
              };

              this.preventClick = function(e) {
                e.preventDefault();
                e.stopPropagation();
              };

              this.el = element;
              this.minScrollbarWidth = 20;
              this.options = Object.assign(
                {},
                SimpleBar.defaultOptions,
                {},
                options
              );
              this.classNames = Object.assign(
                {},
                SimpleBar.defaultOptions.classNames,
                {},
                this.options.classNames
              );
              this.axis = {
                x: {
                  scrollOffsetAttr: "scrollLeft",
                  sizeAttr: "width",
                  scrollSizeAttr: "scrollWidth",
                  offsetSizeAttr: "offsetWidth",
                  offsetAttr: "left",
                  overflowAttr: "overflowX",
                  dragOffset: 0,
                  isOverflowing: true,
                  isVisible: false,
                  forceVisible: false,
                  track: {},
                  scrollbar: {},
                },
                y: {
                  scrollOffsetAttr: "scrollTop",
                  sizeAttr: "height",
                  scrollSizeAttr: "scrollHeight",
                  offsetSizeAttr: "offsetHeight",
                  offsetAttr: "top",
                  overflowAttr: "overflowY",
                  dragOffset: 0,
                  isOverflowing: true,
                  isVisible: false,
                  forceVisible: false,
                  track: {},
                  scrollbar: {},
                },
              };
              this.removePreventClickId = null; // Don't re-instantiate over an existing one

              if (SimpleBar.instances.has(this.el)) {
                return;
              }

              this.recalculate = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(
                this.recalculate.bind(this),
                64
              );
              this.onMouseMove = lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default()(
                this.onMouseMove.bind(this),
                64
              );
              this.hideScrollbars = lodash_debounce__WEBPACK_IMPORTED_MODULE_12___default()(
                this.hideScrollbars.bind(this),
                this.options.timeout
              );
              this.onWindowResize = lodash_debounce__WEBPACK_IMPORTED_MODULE_12___default()(
                this.onWindowResize.bind(this),
                64,
                {
                  leading: true,
                }
              );
              SimpleBar.getRtlHelpers = lodash_memoize__WEBPACK_IMPORTED_MODULE_13___default()(
                SimpleBar.getRtlHelpers
              );
              this.init();
            }
            /**
             * Static properties
             */

            /**
             * Helper to fix browsers inconsistency on RTL:
             *  - Firefox inverts the scrollbar initial position
             *  - IE11 inverts both scrollbar position and scrolling offset
             * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634
             */

            SimpleBar.getRtlHelpers = function getRtlHelpers() {
              var dummyDiv = document.createElement("div");
              dummyDiv.innerHTML =
                '<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';
              var scrollbarDummyEl = dummyDiv.firstElementChild;
              document.body.appendChild(scrollbarDummyEl);
              var dummyContainerChild = scrollbarDummyEl.firstElementChild;
              scrollbarDummyEl.scrollLeft = 0;
              var dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);
              var dummyContainerChildOffset = SimpleBar.getOffset(
                dummyContainerChild
              );
              scrollbarDummyEl.scrollLeft = 999;
              var dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(
                dummyContainerChild
              );
              return {
                // determines if the scrolling is responding with negative values
                isRtlScrollingInverted:
                  dummyContainerOffset.left !==
                    dummyContainerChildOffset.left &&
                  dummyContainerChildOffset.left -
                    dummyContainerScrollOffsetAfterScroll.left !==
                    0,
                // determines if the origin scrollbar position is inverted or not (positioned on left or right)
                isRtlScrollbarInverted:
                  dummyContainerOffset.left !== dummyContainerChildOffset.left,
              };
            };

            SimpleBar.getOffset = function getOffset(el) {
              var rect = el.getBoundingClientRect();
              var elDocument = getElementDocument(el);
              var elWindow = getElementWindow(el);
              return {
                top:
                  rect.top +
                  (elWindow.pageYOffset ||
                    elDocument.documentElement.scrollTop),
                left:
                  rect.left +
                  (elWindow.pageXOffset ||
                    elDocument.documentElement.scrollLeft),
              };
            };

            var _proto = SimpleBar.prototype;

            _proto.init = function init() {
              // Save a reference to the instance, so we know this DOM node has already been instancied
              SimpleBar.instances.set(this.el, this); // We stop here on server-side

              if (can_use_dom__WEBPACK_IMPORTED_MODULE_2___default.a) {
                this.initDOM();
                this.scrollbarWidth = this.getScrollbarWidth();
                this.recalculate();
                this.initListeners();
              }
            };

            _proto.initDOM = function initDOM() {
              var _this2 = this;

              // make sure this element doesn't have the elements yet
              if (
                Array.prototype.filter.call(this.el.children, function(child) {
                  return child.classList.contains(_this2.classNames.wrapper);
                }).length
              ) {
                // assume that element has his DOM already initiated
                this.wrapperEl = this.el.querySelector(
                  "." + this.classNames.wrapper
                );
                this.contentWrapperEl =
                  this.options.scrollableNode ||
                  this.el.querySelector("." + this.classNames.contentWrapper);
                this.contentEl =
                  this.options.contentNode ||
                  this.el.querySelector("." + this.classNames.contentEl);
                this.offsetEl = this.el.querySelector(
                  "." + this.classNames.offset
                );
                this.maskEl = this.el.querySelector("." + this.classNames.mask);
                this.placeholderEl = this.findChild(
                  this.wrapperEl,
                  "." + this.classNames.placeholder
                );
                this.heightAutoObserverWrapperEl = this.el.querySelector(
                  "." + this.classNames.heightAutoObserverWrapperEl
                );
                this.heightAutoObserverEl = this.el.querySelector(
                  "." + this.classNames.heightAutoObserverEl
                );
                this.axis.x.track.el = this.findChild(
                  this.el,
                  "." + this.classNames.track + "." + this.classNames.horizontal
                );
                this.axis.y.track.el = this.findChild(
                  this.el,
                  "." + this.classNames.track + "." + this.classNames.vertical
                );
              } else {
                // Prepare DOM
                this.wrapperEl = document.createElement("div");
                this.contentWrapperEl = document.createElement("div");
                this.offsetEl = document.createElement("div");
                this.maskEl = document.createElement("div");
                this.contentEl = document.createElement("div");
                this.placeholderEl = document.createElement("div");
                this.heightAutoObserverWrapperEl = document.createElement(
                  "div"
                );
                this.heightAutoObserverEl = document.createElement("div");
                this.wrapperEl.classList.add(this.classNames.wrapper);
                this.contentWrapperEl.classList.add(
                  this.classNames.contentWrapper
                );
                this.offsetEl.classList.add(this.classNames.offset);
                this.maskEl.classList.add(this.classNames.mask);
                this.contentEl.classList.add(this.classNames.contentEl);
                this.placeholderEl.classList.add(this.classNames.placeholder);
                this.heightAutoObserverWrapperEl.classList.add(
                  this.classNames.heightAutoObserverWrapperEl
                );
                this.heightAutoObserverEl.classList.add(
                  this.classNames.heightAutoObserverEl
                );

                while (this.el.firstChild) {
                  this.contentEl.appendChild(this.el.firstChild);
                }

                this.contentWrapperEl.appendChild(this.contentEl);
                this.offsetEl.appendChild(this.contentWrapperEl);
                this.maskEl.appendChild(this.offsetEl);
                this.heightAutoObserverWrapperEl.appendChild(
                  this.heightAutoObserverEl
                );
                this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);
                this.wrapperEl.appendChild(this.maskEl);
                this.wrapperEl.appendChild(this.placeholderEl);
                this.el.appendChild(this.wrapperEl);
              }

              if (!this.axis.x.track.el || !this.axis.y.track.el) {
                var track = document.createElement("div");
                var scrollbar = document.createElement("div");
                track.classList.add(this.classNames.track);
                scrollbar.classList.add(this.classNames.scrollbar);
                track.appendChild(scrollbar);
                this.axis.x.track.el = track.cloneNode(true);
                this.axis.x.track.el.classList.add(this.classNames.horizontal);
                this.axis.y.track.el = track.cloneNode(true);
                this.axis.y.track.el.classList.add(this.classNames.vertical);
                this.el.appendChild(this.axis.x.track.el);
                this.el.appendChild(this.axis.y.track.el);
              }

              this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(
                "." + this.classNames.scrollbar
              );
              this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(
                "." + this.classNames.scrollbar
              );

              if (!this.options.autoHide) {
                this.axis.x.scrollbar.el.classList.add(this.classNames.visible);
                this.axis.y.scrollbar.el.classList.add(this.classNames.visible);
              }

              this.el.setAttribute("data-simplebar", "init");
            };

            _proto.initListeners = function initListeners() {
              var _this3 = this;

              var elWindow = getElementWindow(this.el); // Event listeners

              if (this.options.autoHide) {
                this.el.addEventListener("mouseenter", this.onMouseEnter);
              }

              ["mousedown", "click", "dblclick"].forEach(function(e) {
                _this3.el.addEventListener(e, _this3.onPointerEvent, true);
              });
              ["touchstart", "touchend", "touchmove"].forEach(function(e) {
                _this3.el.addEventListener(e, _this3.onPointerEvent, {
                  capture: true,
                  passive: true,
                });
              });
              this.el.addEventListener("mousemove", this.onMouseMove);
              this.el.addEventListener("mouseleave", this.onMouseLeave);
              this.contentWrapperEl.addEventListener("scroll", this.onScroll); // Browser zoom triggers a window resize

              elWindow.addEventListener("resize", this.onWindowResize); // Hack for https://github.com/WICG/ResizeObserver/issues/38

              var resizeObserverStarted = false;
              var resizeObserver =
                elWindow.ResizeObserver ||
                resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_14__[
                  "default"
                ];
              this.resizeObserver = new resizeObserver(function() {
                if (!resizeObserverStarted) return;

                _this3.recalculate();
              });
              this.resizeObserver.observe(this.el);
              this.resizeObserver.observe(this.contentEl);
              elWindow.requestAnimationFrame(function() {
                resizeObserverStarted = true;
              }); // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.

              this.mutationObserver = new elWindow.MutationObserver(
                this.recalculate
              );
              this.mutationObserver.observe(this.contentEl, {
                childList: true,
                subtree: true,
                characterData: true,
              });
            };

            _proto.recalculate = function recalculate() {
              var elWindow = getElementWindow(this.el);
              this.elStyles = elWindow.getComputedStyle(this.el);
              this.isRtl = this.elStyles.direction === "rtl";
              var contentElOffsetWidth = this.contentEl.offsetWidth;
              var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;
              var isWidthAuto =
                this.heightAutoObserverEl.offsetWidth <= 1 ||
                contentElOffsetWidth > 0;
              var contentWrapperElOffsetWidth = this.contentWrapperEl
                .offsetWidth;
              var elOverflowX = this.elStyles.overflowX;
              var elOverflowY = this.elStyles.overflowY;
              this.contentEl.style.padding =
                this.elStyles.paddingTop +
                " " +
                this.elStyles.paddingRight +
                " " +
                this.elStyles.paddingBottom +
                " " +
                this.elStyles.paddingLeft;
              this.wrapperEl.style.margin =
                "-" +
                this.elStyles.paddingTop +
                " -" +
                this.elStyles.paddingRight +
                " -" +
                this.elStyles.paddingBottom +
                " -" +
                this.elStyles.paddingLeft;
              var contentElScrollHeight = this.contentEl.scrollHeight;
              var contentElScrollWidth = this.contentEl.scrollWidth;
              this.contentWrapperEl.style.height = isHeightAuto
                ? "auto"
                : "100%"; // Determine placeholder size

              this.placeholderEl.style.width = isWidthAuto
                ? (contentElOffsetWidth || contentElScrollWidth) + "px"
                : "auto";
              this.placeholderEl.style.height = contentElScrollHeight + "px";
              var contentWrapperElOffsetHeight = this.contentWrapperEl
                .offsetHeight;
              this.axis.x.isOverflowing =
                contentElOffsetWidth !== 0 &&
                contentElScrollWidth > contentElOffsetWidth;
              this.axis.y.isOverflowing =
                contentElScrollHeight > contentWrapperElOffsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow

              this.axis.x.isOverflowing =
                elOverflowX === "hidden" ? false : this.axis.x.isOverflowing;
              this.axis.y.isOverflowing =
                elOverflowY === "hidden" ? false : this.axis.y.isOverflowing;
              this.axis.x.forceVisible =
                this.options.forceVisible === "x" ||
                this.options.forceVisible === true;
              this.axis.y.forceVisible =
                this.options.forceVisible === "y" ||
                this.options.forceVisible === true;
              this.hideNativeScrollbar(); // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)

              var offsetForXScrollbar = this.axis.x.isOverflowing
                ? this.scrollbarWidth
                : 0;
              var offsetForYScrollbar = this.axis.y.isOverflowing
                ? this.scrollbarWidth
                : 0;
              this.axis.x.isOverflowing =
                this.axis.x.isOverflowing &&
                contentElScrollWidth >
                  contentWrapperElOffsetWidth - offsetForYScrollbar;
              this.axis.y.isOverflowing =
                this.axis.y.isOverflowing &&
                contentElScrollHeight >
                  contentWrapperElOffsetHeight - offsetForXScrollbar;
              this.axis.x.scrollbar.size = this.getScrollbarSize("x");
              this.axis.y.scrollbar.size = this.getScrollbarSize("y");
              this.axis.x.scrollbar.el.style.width =
                this.axis.x.scrollbar.size + "px";
              this.axis.y.scrollbar.el.style.height =
                this.axis.y.scrollbar.size + "px";
              this.positionScrollbar("x");
              this.positionScrollbar("y");
              this.toggleTrackVisibility("x");
              this.toggleTrackVisibility("y");
            };
            /**
             * Calculate scrollbar size
             */

            _proto.getScrollbarSize = function getScrollbarSize(axis) {
              if (axis === void 0) {
                axis = "y";
              }

              if (!this.axis[axis].isOverflowing) {
                return 0;
              }

              var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];
              var trackSize = this.axis[axis].track.el[
                this.axis[axis].offsetSizeAttr
              ];
              var scrollbarSize;
              var scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.

              scrollbarSize = Math.max(
                ~~(scrollbarRatio * trackSize),
                this.options.scrollbarMinSize
              );

              if (this.options.scrollbarMaxSize) {
                scrollbarSize = Math.min(
                  scrollbarSize,
                  this.options.scrollbarMaxSize
                );
              }

              return scrollbarSize;
            };

            _proto.positionScrollbar = function positionScrollbar(axis) {
              if (axis === void 0) {
                axis = "y";
              }

              if (!this.axis[axis].isOverflowing) {
                return;
              }

              var contentSize = this.contentWrapperEl[
                this.axis[axis].scrollSizeAttr
              ];
              var trackSize = this.axis[axis].track.el[
                this.axis[axis].offsetSizeAttr
              ];
              var hostSize = parseInt(
                this.elStyles[this.axis[axis].sizeAttr],
                10
              );
              var scrollbar = this.axis[axis].scrollbar;
              var scrollOffset = this.contentWrapperEl[
                this.axis[axis].scrollOffsetAttr
              ];
              scrollOffset =
                axis === "x" &&
                this.isRtl &&
                SimpleBar.getRtlHelpers().isRtlScrollingInverted
                  ? -scrollOffset
                  : scrollOffset;
              var scrollPourcent = scrollOffset / (contentSize - hostSize);
              var handleOffset = ~~(
                (trackSize - scrollbar.size) *
                scrollPourcent
              );
              handleOffset =
                axis === "x" &&
                this.isRtl &&
                SimpleBar.getRtlHelpers().isRtlScrollbarInverted
                  ? handleOffset + (trackSize - scrollbar.size)
                  : handleOffset;
              scrollbar.el.style.transform =
                axis === "x"
                  ? "translate3d(" + handleOffset + "px, 0, 0)"
                  : "translate3d(0, " + handleOffset + "px, 0)";
            };

            _proto.toggleTrackVisibility = function toggleTrackVisibility(
              axis
            ) {
              if (axis === void 0) {
                axis = "y";
              }

              var track = this.axis[axis].track.el;
              var scrollbar = this.axis[axis].scrollbar.el;

              if (
                this.axis[axis].isOverflowing ||
                this.axis[axis].forceVisible
              ) {
                track.style.visibility = "visible";
                this.contentWrapperEl.style[this.axis[axis].overflowAttr] =
                  "scroll";
              } else {
                track.style.visibility = "hidden";
                this.contentWrapperEl.style[this.axis[axis].overflowAttr] =
                  "hidden";
              } // Even if forceVisible is enabled, scrollbar itself should be hidden

              if (this.axis[axis].isOverflowing) {
                scrollbar.style.display = "block";
              } else {
                scrollbar.style.display = "none";
              }
            };

            _proto.hideNativeScrollbar = function hideNativeScrollbar() {
              this.offsetEl.style[this.isRtl ? "left" : "right"] =
                this.axis.y.isOverflowing || this.axis.y.forceVisible
                  ? "-" + this.scrollbarWidth + "px"
                  : 0;
              this.offsetEl.style.bottom =
                this.axis.x.isOverflowing || this.axis.x.forceVisible
                  ? "-" + this.scrollbarWidth + "px"
                  : 0;
            };
            /**
             * On scroll event handling
             */

            _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {
              if (axis === void 0) {
                axis = "y";
              }

              this.axis[axis].track.rect = this.axis[
                axis
              ].track.el.getBoundingClientRect();
              this.axis[axis].scrollbar.rect = this.axis[
                axis
              ].scrollbar.el.getBoundingClientRect();
              var isWithinScrollbarBoundsX = this.isWithinBounds(
                this.axis[axis].scrollbar.rect
              );

              if (isWithinScrollbarBoundsX) {
                this.axis[axis].scrollbar.el.classList.add(
                  this.classNames.hover
                );
              } else {
                this.axis[axis].scrollbar.el.classList.remove(
                  this.classNames.hover
                );
              }

              if (this.isWithinBounds(this.axis[axis].track.rect)) {
                this.showScrollbar(axis);
                this.axis[axis].track.el.classList.add(this.classNames.hover);
              } else {
                this.axis[axis].track.el.classList.remove(
                  this.classNames.hover
                );
              }
            };

            _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {
              if (axis === void 0) {
                axis = "y";
              }

              this.axis[axis].track.el.classList.remove(this.classNames.hover);
              this.axis[axis].scrollbar.el.classList.remove(
                this.classNames.hover
              );
            };

            /**
             * Show scrollbar
             */
            _proto.showScrollbar = function showScrollbar(axis) {
              if (axis === void 0) {
                axis = "y";
              }

              var scrollbar = this.axis[axis].scrollbar.el;

              if (!this.axis[axis].isVisible) {
                scrollbar.classList.add(this.classNames.visible);
                this.axis[axis].isVisible = true;
              }

              if (this.options.autoHide) {
                this.hideScrollbars();
              }
            };
            /**
             * Hide Scrollbar
             */

            /**
             * on scrollbar handle drag movement starts
             */
            _proto.onDragStart = function onDragStart(e, axis) {
              if (axis === void 0) {
                axis = "y";
              }

              var elDocument = getElementDocument(this.el);
              var elWindow = getElementWindow(this.el);
              var scrollbar = this.axis[axis].scrollbar; // Measure how far the user's mouse is from the top of the scrollbar drag handle.

              var eventOffset = axis === "y" ? e.pageY : e.pageX;
              this.axis[axis].dragOffset =
                eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];
              this.draggedAxis = axis;
              this.el.classList.add(this.classNames.dragging);
              elDocument.addEventListener("mousemove", this.drag, true);
              elDocument.addEventListener("mouseup", this.onEndDrag, true);

              if (this.removePreventClickId === null) {
                elDocument.addEventListener("click", this.preventClick, true);
                elDocument.addEventListener(
                  "dblclick",
                  this.preventClick,
                  true
                );
              } else {
                elWindow.clearTimeout(this.removePreventClickId);
                this.removePreventClickId = null;
              }
            };
            /**
             * Drag scrollbar handle
             */

            _proto.onTrackClick = function onTrackClick(e, axis) {
              var _this4 = this;

              if (axis === void 0) {
                axis = "y";
              }

              if (!this.options.clickOnTrack) return;
              var elWindow = getElementWindow(this.el);
              this.axis[axis].scrollbar.rect = this.axis[
                axis
              ].scrollbar.el.getBoundingClientRect();
              var scrollbar = this.axis[axis].scrollbar;
              var scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];
              var hostSize = parseInt(
                this.elStyles[this.axis[axis].sizeAttr],
                10
              );
              var scrolled = this.contentWrapperEl[
                this.axis[axis].scrollOffsetAttr
              ];
              var t =
                axis === "y"
                  ? this.mouseY - scrollbarOffset
                  : this.mouseX - scrollbarOffset;
              var dir = t < 0 ? -1 : 1;
              var scrollSize =
                dir === -1 ? scrolled - hostSize : scrolled + hostSize;
              var speed = 40;

              var scrollTo = function scrollTo() {
                if (dir === -1) {
                  if (scrolled > scrollSize) {
                    var _this4$contentWrapper;

                    scrolled -= speed;

                    _this4.contentWrapperEl.scrollTo(
                      ((_this4$contentWrapper = {}),
                      (_this4$contentWrapper[
                        _this4.axis[axis].offsetAttr
                      ] = scrolled),
                      _this4$contentWrapper)
                    );

                    elWindow.requestAnimationFrame(scrollTo);
                  }
                } else {
                  if (scrolled < scrollSize) {
                    var _this4$contentWrapper2;

                    scrolled += speed;

                    _this4.contentWrapperEl.scrollTo(
                      ((_this4$contentWrapper2 = {}),
                      (_this4$contentWrapper2[
                        _this4.axis[axis].offsetAttr
                      ] = scrolled),
                      _this4$contentWrapper2)
                    );

                    elWindow.requestAnimationFrame(scrollTo);
                  }
                }
              };

              scrollTo();
            };
            /**
             * Getter for content element
             */

            _proto.getContentElement = function getContentElement() {
              return this.contentEl;
            };
            /**
             * Getter for original scrolling element
             */

            _proto.getScrollElement = function getScrollElement() {
              return this.contentWrapperEl;
            };

            _proto.getScrollbarWidth = function getScrollbarWidth() {
              // Try/catch for FF 56 throwing on undefined computedStyles
              try {
                // Detect browsers supporting CSS scrollbar styling and do not calculate
                if (
                  getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar")
                    .display === "none" ||
                  "scrollbarWidth" in document.documentElement.style ||
                  "-ms-overflow-style" in document.documentElement.style
                ) {
                  return 0;
                } else {
                  return scrollbarWidth();
                }
              } catch (e) {
                return scrollbarWidth();
              }
            };

            _proto.removeListeners = function removeListeners() {
              var _this5 = this;

              var elWindow = getElementWindow(this.el); // Event listeners

              if (this.options.autoHide) {
                this.el.removeEventListener("mouseenter", this.onMouseEnter);
              }

              ["mousedown", "click", "dblclick"].forEach(function(e) {
                _this5.el.removeEventListener(e, _this5.onPointerEvent, true);
              });
              ["touchstart", "touchend", "touchmove"].forEach(function(e) {
                _this5.el.removeEventListener(e, _this5.onPointerEvent, {
                  capture: true,
                  passive: true,
                });
              });
              this.el.removeEventListener("mousemove", this.onMouseMove);
              this.el.removeEventListener("mouseleave", this.onMouseLeave);
              this.contentWrapperEl.removeEventListener(
                "scroll",
                this.onScroll
              );
              elWindow.removeEventListener("resize", this.onWindowResize);
              this.mutationObserver.disconnect();
              this.resizeObserver.disconnect(); // Cancel all debounced functions

              this.recalculate.cancel();
              this.onMouseMove.cancel();
              this.hideScrollbars.cancel();
              this.onWindowResize.cancel();
            };
            /**
             * UnMount mutation observer and delete SimpleBar instance from DOM element
             */

            _proto.unMount = function unMount() {
              this.removeListeners();
              SimpleBar.instances.delete(this.el);
            };
            /**
             * Check if mouse is within bounds
             */

            _proto.isWithinBounds = function isWithinBounds(bbox) {
              return (
                this.mouseX >= bbox.left &&
                this.mouseX <= bbox.left + bbox.width &&
                this.mouseY >= bbox.top &&
                this.mouseY <= bbox.top + bbox.height
              );
            };
            /**
             * Find element children matches query
             */

            _proto.findChild = function findChild(el, query) {
              var matches =
                el.matches ||
                el.webkitMatchesSelector ||
                el.mozMatchesSelector ||
                el.msMatchesSelector;
              return Array.prototype.filter.call(el.children, function(child) {
                return matches.call(child, query);
              })[0];
            };

            return SimpleBar;
          })();

        SimpleBar.defaultOptions = {
          autoHide: true,
          forceVisible: false,
          clickOnTrack: true,
          classNames: {
            contentEl: "simplebar-content",
            contentWrapper: "simplebar-content-wrapper",
            offset: "simplebar-offset",
            mask: "simplebar-mask",
            wrapper: "simplebar-wrapper",
            placeholder: "simplebar-placeholder",
            scrollbar: "simplebar-scrollbar",
            track: "simplebar-track",
            heightAutoObserverWrapperEl:
              "simplebar-height-auto-observer-wrapper",
            heightAutoObserverEl: "simplebar-height-auto-observer",
            visible: "simplebar-visible",
            horizontal: "simplebar-horizontal",
            vertical: "simplebar-vertical",
            hover: "simplebar-hover",
            dragging: "simplebar-dragging",
          },
          scrollbarMinSize: 25,
          scrollbarMaxSize: 0,
          timeout: 1000,
        };
        SimpleBar.instances = new WeakMap();

        SimpleBar.initDOMLoadedElements = function() {
          document.removeEventListener(
            "DOMContentLoaded",
            this.initDOMLoadedElements
          );
          window.removeEventListener("load", this.initDOMLoadedElements);
          Array.prototype.forEach.call(
            document.querySelectorAll(
              '[data-simplebar]:not([data-simplebar="init"])'
            ),
            function(el) {
              if (!SimpleBar.instances.has(el))
                new SimpleBar(el, getOptions(el.attributes));
            }
          );
        };

        SimpleBar.removeObserver = function() {
          this.globalObserver.disconnect();
        };

        SimpleBar.initHtmlApi = function() {
          this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this); // MutationObserver is IE11+

          if (typeof MutationObserver !== "undefined") {
            // Mutation observer to observe dynamically added elements
            this.globalObserver = new MutationObserver(
              SimpleBar.handleMutations
            );
            this.globalObserver.observe(document, {
              childList: true,
              subtree: true,
            });
          } // Taken from jQuery `ready` function
          // Instantiate elements already present on the page

          if (
            document.readyState === "complete" ||
            (document.readyState !== "loading" &&
              !document.documentElement.doScroll)
          ) {
            // Handle it asynchronously to allow scripts the opportunity to delay init
            window.setTimeout(this.initDOMLoadedElements);
          } else {
            document.addEventListener(
              "DOMContentLoaded",
              this.initDOMLoadedElements
            );
            window.addEventListener("load", this.initDOMLoadedElements);
          }
        };

        SimpleBar.handleMutations = function(mutations) {
          mutations.forEach(function(mutation) {
            Array.prototype.forEach.call(mutation.addedNodes, function(
              addedNode
            ) {
              if (addedNode.nodeType === 1) {
                if (addedNode.hasAttribute("data-simplebar")) {
                  !SimpleBar.instances.has(addedNode) &&
                    new SimpleBar(addedNode, getOptions(addedNode.attributes));
                } else {
                  Array.prototype.forEach.call(
                    addedNode.querySelectorAll(
                      '[data-simplebar]:not([data-simplebar="init"])'
                    ),
                    function(el) {
                      !SimpleBar.instances.has(el) &&
                        new SimpleBar(el, getOptions(el.attributes));
                    }
                  );
                }
              }
            });
            Array.prototype.forEach.call(mutation.removedNodes, function(
              removedNode
            ) {
              if (removedNode.nodeType === 1) {
                if (removedNode.hasAttribute('[data-simplebar="init"]')) {
                  SimpleBar.instances.has(removedNode) &&
                    SimpleBar.instances.get(removedNode).unMount();
                } else {
                  Array.prototype.forEach.call(
                    removedNode.querySelectorAll('[data-simplebar="init"]'),
                    function(el) {
                      SimpleBar.instances.has(el) &&
                        SimpleBar.instances.get(el).unMount();
                    }
                  );
                }
              }
            });
          });
        };

        SimpleBar.getOptions = getOptions;
        /**
         * HTML API
         * Called only in a browser env.
         */

        if (can_use_dom__WEBPACK_IMPORTED_MODULE_2___default.a) {
          SimpleBar.initHtmlApi();
        }

        /* harmony default export */ __webpack_exports__["default"] = SimpleBar;
        //# sourceMappingURL=simplebar.esm.js.map

        /***/
      },

    /***/ "./node_modules/toastr/toastr.js":
      /*!***************************************!*\
  !*** ./node_modules/toastr/toastr.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*
         * Toastr
         * Copyright 2012-2015
         * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
         * All Rights Reserved.
         * Use, reproduction, distribution, and modification of this code is subject to the terms and
         * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
         *
         * ARIA Support: Greta Krafsig
         *
         * Project: https://github.com/CodeSeven/toastr
         */
        /* global define */
        (function(define) {
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
            __webpack_require__(
              /*! jquery */ "./node_modules/jquery/dist/jquery.js"
            ),
          ]),
          (__WEBPACK_AMD_DEFINE_RESULT__ = function($) {
            return (function() {
              var $container;
              var listener;
              var toastId = 0;
              var toastType = {
                error: "error",
                info: "info",
                success: "success",
                warning: "warning",
              };

              var toastr = {
                clear: clear,
                remove: remove,
                error: error,
                getContainer: getContainer,
                info: info,
                options: {},
                subscribe: subscribe,
                success: success,
                version: "2.1.4",
                warning: warning,
              };

              var previousToast;

              return toastr;

              ////////////////

              function error(message, title, optionsOverride) {
                return notify({
                  type: toastType.error,
                  iconClass: getOptions().iconClasses.error,
                  message: message,
                  optionsOverride: optionsOverride,
                  title: title,
                });
              }

              function getContainer(options, create) {
                if (!options) {
                  options = getOptions();
                }
                $container = $("#" + options.containerId);
                if ($container.length) {
                  return $container;
                }
                if (create) {
                  $container = createContainer(options);
                }
                return $container;
              }

              function info(message, title, optionsOverride) {
                return notify({
                  type: toastType.info,
                  iconClass: getOptions().iconClasses.info,
                  message: message,
                  optionsOverride: optionsOverride,
                  title: title,
                });
              }

              function subscribe(callback) {
                listener = callback;
              }

              function success(message, title, optionsOverride) {
                return notify({
                  type: toastType.success,
                  iconClass: getOptions().iconClasses.success,
                  message: message,
                  optionsOverride: optionsOverride,
                  title: title,
                });
              }

              function warning(message, title, optionsOverride) {
                return notify({
                  type: toastType.warning,
                  iconClass: getOptions().iconClasses.warning,
                  message: message,
                  optionsOverride: optionsOverride,
                  title: title,
                });
              }

              function clear($toastElement, clearOptions) {
                var options = getOptions();
                if (!$container) {
                  getContainer(options);
                }
                if (!clearToast($toastElement, options, clearOptions)) {
                  clearContainer(options);
                }
              }

              function remove($toastElement) {
                var options = getOptions();
                if (!$container) {
                  getContainer(options);
                }
                if ($toastElement && $(":focus", $toastElement).length === 0) {
                  removeToast($toastElement);
                  return;
                }
                if ($container.children().length) {
                  $container.remove();
                }
              }

              // internal functions

              function clearContainer(options) {
                var toastsToClear = $container.children();
                for (var i = toastsToClear.length - 1; i >= 0; i--) {
                  clearToast($(toastsToClear[i]), options);
                }
              }

              function clearToast($toastElement, options, clearOptions) {
                var force =
                  clearOptions && clearOptions.force
                    ? clearOptions.force
                    : false;
                if (
                  $toastElement &&
                  (force || $(":focus", $toastElement).length === 0)
                ) {
                  $toastElement[options.hideMethod]({
                    duration: options.hideDuration,
                    easing: options.hideEasing,
                    complete: function() {
                      removeToast($toastElement);
                    },
                  });
                  return true;
                }
                return false;
              }

              function createContainer(options) {
                $container = $("<div/>")
                  .attr("id", options.containerId)
                  .addClass(options.positionClass);

                $container.appendTo($(options.target));
                return $container;
              }

              function getDefaults() {
                return {
                  tapToDismiss: true,
                  toastClass: "toast",
                  containerId: "toast-container",
                  debug: false,

                  showMethod: "fadeIn", //fadeIn, slideDown, and show are built into jQuery
                  showDuration: 300,
                  showEasing: "swing", //swing and linear are built into jQuery
                  onShown: undefined,
                  hideMethod: "fadeOut",
                  hideDuration: 1000,
                  hideEasing: "swing",
                  onHidden: undefined,
                  closeMethod: false,
                  closeDuration: false,
                  closeEasing: false,
                  closeOnHover: true,

                  extendedTimeOut: 1000,
                  iconClasses: {
                    error: "toast-error",
                    info: "toast-info",
                    success: "toast-success",
                    warning: "toast-warning",
                  },
                  iconClass: "toast-info",
                  positionClass: "toast-top-right",
                  timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
                  titleClass: "toast-title",
                  messageClass: "toast-message",
                  escapeHtml: false,
                  target: "body",
                  closeHtml: '<button type="button">&times;</button>',
                  closeClass: "toast-close-button",
                  newestOnTop: true,
                  preventDuplicates: false,
                  progressBar: false,
                  progressClass: "toast-progress",
                  rtl: false,
                };
              }

              function publish(args) {
                if (!listener) {
                  return;
                }
                listener(args);
              }

              function notify(map) {
                var options = getOptions();
                var iconClass = map.iconClass || options.iconClass;

                if (typeof map.optionsOverride !== "undefined") {
                  options = $.extend(options, map.optionsOverride);
                  iconClass = map.optionsOverride.iconClass || iconClass;
                }

                if (shouldExit(options, map)) {
                  return;
                }

                toastId++;

                $container = getContainer(options, true);

                var intervalId = null;
                var $toastElement = $("<div/>");
                var $titleElement = $("<div/>");
                var $messageElement = $("<div/>");
                var $progressElement = $("<div/>");
                var $closeElement = $(options.closeHtml);
                var progressBar = {
                  intervalId: null,
                  hideEta: null,
                  maxHideTime: null,
                };
                var response = {
                  toastId: toastId,
                  state: "visible",
                  startTime: new Date(),
                  options: options,
                  map: map,
                };

                personalizeToast();

                displayToast();

                handleEvents();

                publish(response);

                if (options.debug && console) {
                  console.log(response);
                }

                return $toastElement;

                function escapeHtml(source) {
                  if (source == null) {
                    source = "";
                  }

                  return source
                    .replace(/&/g, "&amp;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#39;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;");
                }

                function personalizeToast() {
                  setIcon();
                  setTitle();
                  setMessage();
                  setCloseButton();
                  setProgressBar();
                  setRTL();
                  setSequence();
                  setAria();
                }

                function setAria() {
                  var ariaValue = "";
                  switch (map.iconClass) {
                    case "toast-success":
                    case "toast-info":
                      ariaValue = "polite";
                      break;
                    default:
                      ariaValue = "assertive";
                  }
                  $toastElement.attr("aria-live", ariaValue);
                }

                function handleEvents() {
                  if (options.closeOnHover) {
                    $toastElement.hover(stickAround, delayedHideToast);
                  }

                  if (!options.onclick && options.tapToDismiss) {
                    $toastElement.click(hideToast);
                  }

                  if (options.closeButton && $closeElement) {
                    $closeElement.click(function(event) {
                      if (event.stopPropagation) {
                        event.stopPropagation();
                      } else if (
                        event.cancelBubble !== undefined &&
                        event.cancelBubble !== true
                      ) {
                        event.cancelBubble = true;
                      }

                      if (options.onCloseClick) {
                        options.onCloseClick(event);
                      }

                      hideToast(true);
                    });
                  }

                  if (options.onclick) {
                    $toastElement.click(function(event) {
                      options.onclick(event);
                      hideToast();
                    });
                  }
                }

                function displayToast() {
                  $toastElement.hide();

                  $toastElement[options.showMethod]({
                    duration: options.showDuration,
                    easing: options.showEasing,
                    complete: options.onShown,
                  });

                  if (options.timeOut > 0) {
                    intervalId = setTimeout(hideToast, options.timeOut);
                    progressBar.maxHideTime = parseFloat(options.timeOut);
                    progressBar.hideEta =
                      new Date().getTime() + progressBar.maxHideTime;
                    if (options.progressBar) {
                      progressBar.intervalId = setInterval(updateProgress, 10);
                    }
                  }
                }

                function setIcon() {
                  if (map.iconClass) {
                    $toastElement
                      .addClass(options.toastClass)
                      .addClass(iconClass);
                  }
                }

                function setSequence() {
                  if (options.newestOnTop) {
                    $container.prepend($toastElement);
                  } else {
                    $container.append($toastElement);
                  }
                }

                function setTitle() {
                  if (map.title) {
                    var suffix = map.title;
                    if (options.escapeHtml) {
                      suffix = escapeHtml(map.title);
                    }
                    $titleElement.append(suffix).addClass(options.titleClass);
                    $toastElement.append($titleElement);
                  }
                }

                function setMessage() {
                  if (map.message) {
                    var suffix = map.message;
                    if (options.escapeHtml) {
                      suffix = escapeHtml(map.message);
                    }
                    $messageElement
                      .append(suffix)
                      .addClass(options.messageClass);
                    $toastElement.append($messageElement);
                  }
                }

                function setCloseButton() {
                  if (options.closeButton) {
                    $closeElement
                      .addClass(options.closeClass)
                      .attr("role", "button");
                    $toastElement.prepend($closeElement);
                  }
                }

                function setProgressBar() {
                  if (options.progressBar) {
                    $progressElement.addClass(options.progressClass);
                    $toastElement.prepend($progressElement);
                  }
                }

                function setRTL() {
                  if (options.rtl) {
                    $toastElement.addClass("rtl");
                  }
                }

                function shouldExit(options, map) {
                  if (options.preventDuplicates) {
                    if (map.message === previousToast) {
                      return true;
                    } else {
                      previousToast = map.message;
                    }
                  }
                  return false;
                }

                function hideToast(override) {
                  var method =
                    override && options.closeMethod !== false
                      ? options.closeMethod
                      : options.hideMethod;
                  var duration =
                    override && options.closeDuration !== false
                      ? options.closeDuration
                      : options.hideDuration;
                  var easing =
                    override && options.closeEasing !== false
                      ? options.closeEasing
                      : options.hideEasing;
                  if ($(":focus", $toastElement).length && !override) {
                    return;
                  }
                  clearTimeout(progressBar.intervalId);
                  return $toastElement[method]({
                    duration: duration,
                    easing: easing,
                    complete: function() {
                      removeToast($toastElement);
                      clearTimeout(intervalId);
                      if (options.onHidden && response.state !== "hidden") {
                        options.onHidden();
                      }
                      response.state = "hidden";
                      response.endTime = new Date();
                      publish(response);
                    },
                  });
                }

                function delayedHideToast() {
                  if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                    intervalId = setTimeout(hideToast, options.extendedTimeOut);
                    progressBar.maxHideTime = parseFloat(
                      options.extendedTimeOut
                    );
                    progressBar.hideEta =
                      new Date().getTime() + progressBar.maxHideTime;
                  }
                }

                function stickAround() {
                  clearTimeout(intervalId);
                  progressBar.hideEta = 0;
                  $toastElement
                    .stop(true, true)
                    [options.showMethod]({
                      duration: options.showDuration,
                      easing: options.showEasing,
                    });
                }

                function updateProgress() {
                  var percentage =
                    ((progressBar.hideEta - new Date().getTime()) /
                      progressBar.maxHideTime) *
                    100;
                  $progressElement.width(percentage + "%");
                }
              }

              function getOptions() {
                return $.extend({}, getDefaults(), toastr.options);
              }

              function removeToast($toastElement) {
                if (!$container) {
                  $container = getContainer();
                }
                if ($toastElement.is(":visible")) {
                  return;
                }
                $toastElement.remove();
                $toastElement = null;
                if ($container.children().length === 0) {
                  $container.remove();
                  previousToast = undefined;
                }
              }
            })();
          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        })(
          __webpack_require__(
            /*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js"
          )
        );

        /***/
      },

    /***/ "./node_modules/webpack/buildin/amd-define.js":
      /*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function() {
          throw new Error("define cannot be used indirect");
        };

        /***/
      },

    /***/ "./node_modules/webpack/buildin/global.js":
      /*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        var g;

        // This works in non-strict mode
        g = (function() {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function("return this")();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;

        /***/
      },

    /***/ "./node_modules/webpack/buildin/module.js":
      /*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = function(module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function() {};
            module.paths = [];
            // module.parent = undefined by default
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function() {
                return module.l;
              },
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function() {
                return module.i;
              },
            });
            module.webpackPolyfill = 1;
          }
          return module;
        };

        /***/
      },

    /***/ "./src/assets/sass/siqtheme.scss":
      /*!***************************************!*\
  !*** ./src/assets/sass/siqtheme.scss ***!
  \***************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        throw new Error(
          "Module build failed (from ./node_modules/css-loader/index.js):\nModuleBuildError: Module build failed (from ./node_modules/sass-loader/dist/cjs.js):\nSassError: Undefined variable.\n    ╷\n180 │   padding: $dropdown-header-padding;\n    │            ^^^^^^^^^^^^^^^^^^^^^^^^\n    ╵\n  node_modules\\bootstrap\\scss\\_dropdown.scss 180:12  @import\n  src\\assets\\sass\\bootstrap\\_bootstrap.scss 17:9     @import\n  C:\\temp\\siqtheme\\src\\assets\\sass\\siqtheme.scss 5:9                                          root stylesheet\n    at runLoaders (C:\\temp\\siqtheme\\node_modules\\webpack\\lib\\NormalModule.js:316:20)\n    at C:\\temp\\siqtheme\\node_modules\\loader-runner\\lib\\LoaderRunner.js:367:11\n    at C:\\temp\\siqtheme\\node_modules\\loader-runner\\lib\\LoaderRunner.js:233:18\n    at context.callback (C:\\temp\\siqtheme\\node_modules\\loader-runner\\lib\\LoaderRunner.js:111:13)\n    at render (C:\\temp\\siqtheme\\node_modules\\sass-loader\\dist\\index.js:73:7)\n    at Function.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:87584:16)\n    at _render_closure1.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:77359:12)\n    at _RootZone.runBinary$3$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25587:18)\n    at _RootZone.runBinary$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25591:19)\n    at _FutureListener.handleError$1 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24041:19)\n    at _Future__propagateToListeners_handleError.call$0 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24337:40)\n    at Object._Future__propagateToListeners (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3497:88)\n    at _Future._completeError$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24165:9)\n    at _AsyncAwaitCompleter.completeError$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23557:12)\n    at Object._asyncRethrow (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3253:17)\n    at C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:13333:20\n    at _wrapJsFunctionForAsync_closure.$protected (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3276:15)\n    at _wrapJsFunctionForAsync_closure.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23578:12)\n    at _awaitOnObject_closure0.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23570:25)\n    at _RootZone.runBinary$3$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25587:18)\n    at _RootZone.runBinary$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25591:19)\n    at _FutureListener.handleError$1 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24041:19)\n    at _Future__propagateToListeners_handleError.call$0 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24337:40)\n    at Object._Future__propagateToListeners (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3497:88)\n    at _Future._completeError$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24165:9)\n    at _AsyncAwaitCompleter.completeError$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23557:12)\n    at Object._asyncRethrow (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3253:17)\n    at C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:15991:20\n    at _wrapJsFunctionForAsync_closure.$protected (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3276:15)\n    at _wrapJsFunctionForAsync_closure.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23578:12)\n    at _awaitOnObject_closure0.call$2 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:23570:25)\n    at _RootZone.runBinary$3$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25587:18)\n    at _RootZone.runBinary$3 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:25591:19)\n    at _FutureListener.handleError$1 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24041:19)\n    at _Future__propagateToListeners_handleError.call$0 (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:24337:40)\n    at Object._Future__propagateToListeners (C:\\temp\\siqtheme\\node_modules\\sass\\sass.dart.js:3497:88)"
        );

        /***/
      },

    /***/ "./src/assets/scripts/siqtheme.js":
      /*!****************************************!*\
  !*** ./src/assets/scripts/siqtheme.js ***!
  \****************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        window.jQuery = window.$ = __webpack_require__(
          /*! jquery */ "./node_modules/jquery/dist/jquery.js"
        );

        __webpack_require__(
          /*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js"
        );

        __webpack_require__(
          /*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js"
        );

        __webpack_require__(
          /*! datatables.net-bs4 */ "./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js"
        );

        __webpack_require__(
          /*! datatables.net-responsive-bs4 */ "./node_modules/datatables.net-responsive-bs4/js/responsive.bootstrap4.js"
        );

        window.moment = __webpack_require__(
          /*! moment */ "./node_modules/moment/moment.js"
        );
        window.toastr = __webpack_require__(
          /*! toastr/toastr */ "./node_modules/toastr/toastr.js"
        );

        __webpack_require__(
          /*! simplebar */ "./node_modules/simplebar/dist/simplebar.esm.js"
        );

        var siQapp = (function() {
          // handle preloader
          var handlePreloader = function handlePreloader() {
            var preloader = $("#preloader");

            if (preloader.length) {
              preloader.delay(100).fadeOut("slow", function() {
                $(this).remove();
              }); // change the body overflow to auto

              $("body").css({
                overflow: "auto",
              });
            }
          }; // handle theme switch

          var handleThemeColor = function handleThemeColor() {
            /**
             * get theme from localstorage
             *
             * For better transition on page load
             * remove this code block and use a
             * server-side script to toggle the
             * theme class on body.
             **/
            // if (siQapp.localStorageSupport()) {
            // 	var appTheme = localStorage.getItem('appTheme');
            // 	if (appTheme !== null || appTheme !== '') {
            // 		$('body').removeClass().addClass(appTheme);
            // 	}
            // }
            $("body").on("click", ".switch-theme", function() {
              var theme = $(this).data("theme");
              $("body")
                .removeClass()
                .addClass(theme); // store theme in localstorage
              // if (siQapp.localStorageSupport()) {
              // 	localStorage.setItem('appTheme', theme);
              // }
            });
          }; // handle menu active state

          var handleActiveMenu = function handleActiveMenu() {
            var classes = [".maincat", ".tier1"];
            $.each(classes, function(index, value) {
              $(value + ">a").click(function() {
                if (
                  $(this)
                    .parent()
                    .hasClass("active")
                ) {
                  $(value).removeClass("active");
                  $(this)
                    .parent()
                    .removeClass("active");
                } else {
                  $(value).removeClass("active");
                  $(this)
                    .parent()
                    .addClass("active");
                }
              });
            });
          }; // handle collapsed sidebar

          var handleCollapsedSidebar = function handleCollapsedSidebar() {
            $(".toggle-sidebar-btn").click(function() {
              if ($(".grid-wrapper").hasClass("collapsed")) {
                // unpin sidebar when hovered
                $(".grid-wrapper").removeClass("collapsed");
                $("#sidebar").unbind("hover");
              } else {
                $(".grid-wrapper").addClass("collapsed");
                $("#sidebar").hover(
                  function() {
                    $(".grid-wrapper").addClass("sidebar-hovered");
                  },
                  function() {
                    $(".grid-wrapper").removeClass("sidebar-hovered");
                  }
                );
              }

              $("i", this).toggleClass(
                "ti-arrow-circle-left ti-arrow-circle-right"
              );
            });
          }; // handle slidout sidebar for small screen size

          var handleSlideSidebar = function handleSlideSidebar() {
            $(".slide-sidebar-btn").click(function(e) {
              e.preventDefault();
              $(".slide-sidebar-btn, .sidebar").toggleClass("open");
            }); // close sidebar

            $(".slide-sidebar-btn.open").click(function(e) {
              e.preventDefault();
              $(".sidebar").width(0);
            });
          }; // toggle right sidebar

          var handleRightSidebar = function handleRightSidebar() {
            $(".right-sidebar-toggle").on("click", function(e) {
              e.preventDefault();
              $("#sidebar-right").toggleClass("sidebar-open");
              $("i", this).toggleClass("ti-user ti-close"); // $('#overlay').toggle();
            });
          }; // handle header search animation

          var handleTopSearch = function handleTopSearch() {
            $("#top-search").focus(function() {
              $(this).addClass("wider");
            });
            $("#top-search").blur(function() {
              $(this).removeClass("wider");
            });
          }; // handle top-nav dropdown transition

          var handleTopBarTransition = function handleTopBarTransition() {
            $(".menu-item").on("show.bs.dropdown", function() {
              $(this)
                .find(".dropdown-menu")
                .first()
                .stop(true, true)
                .slideDown("fast");
            });
            $(".menu-item").on("hide.bs.dropdown", function() {
              $(this)
                .find(".dropdown-menu")
                .first()
                .stop(true, true)
                .slideUp("fast");
            });
          };

          return {
            init: function init() {
              handlePreloader();
              handleThemeColor();
              handleActiveMenu();
              handleCollapsedSidebar();
              handleSlideSidebar();
              handleRightSidebar();
              handleTopSearch();
              handleTopBarTransition(); // initialize tooltips

              $('[data-toggle="tooltip"]').tooltip(); // initialize popovers

              $('[data-toggle="popover"]').popover(); // close alert message

              $("#alertWrap")
                .delay(5000)
                .fadeTo(1000, 0.01)
                .slideUp(500);
            },
            // check if localstorage is available
            localStorageSupport: function localStorageSupport() {
              var test = "test";

              try {
                localStorage.setItem(test, test);
                localStorage.removeItem(test);
                return true;
              } catch (e) {
                return false;
              }
            },
          };
        })();

        $(function() {
          siQapp.init();
        });

        /***/
      },

    /***/ 0:
      /*!******************************************************************************!*\
  !*** multi ./src/assets/scripts/siqtheme.js ./src/assets/sass/siqtheme.scss ***!
  \******************************************************************************/
      /*! no static exports found */
      /***/ function(module, exports, __webpack_require__) {
        __webpack_require__(
          /*! C:\temp\siqtheme\src\assets\scripts\siqtheme.js */ "./src/assets/scripts/siqtheme.js"
        );
        module.exports = __webpack_require__(
          /*! C:\temp\siqtheme\src\assets\sass\siqtheme.scss */ "./src/assets/sass/siqtheme.scss"
        );

        /***/
      },

    /******/
  }
);
